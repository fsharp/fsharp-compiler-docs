[{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler.html","title":"FSharp.Compiler","content":"Cancellable \nCompilerEnvironment","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil.html","title":"FSharp.Compiler.AbstractIL","content":"IL \nILBinaryReader","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis.html","title":"FSharp.Compiler.CodeAnalysis","content":"ProjectSnapshot \nCacheStamp \nDelayedILModuleReader \nDocumentSource \nFSharpCheckFileAnswer \nFSharpCheckFileResults \nFSharpCheckProjectResults \nFSharpChecker \nFSharpParseFileResults \nFSharpParsingOptions \nFSharpProjectContext \nFSharpProjectOptions \nFSharpProjectSnapshot \nFSharpReferencedProject \nFSharpSymbolUse \nFSharpUnresolvedReferencesSet \nFileVersion \nILegacyReferenceResolver \nLegacyReferenceResolver \nLegacyResolutionEnvironment \nLegacyResolutionFailure \nLegacyResolvedFile \nSourceTextHash","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-transparentcompiler.html","title":"FSharp.Compiler.CodeAnalysis.TransparentCompiler","content":"CacheSizes","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-workspace.html","title":"FSharp.Compiler.CodeAnalysis.Workspace","content":"FSharpWorkspaceQuery \nFSharpWorkspaceState \nFSharpWorkspace","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager.html","title":"FSharp.Compiler.DependencyManager","content":"AssemblyResolutionProbe \nAssemblyResolveHandler \nDependencyProvider \nErrorReportType \nIDependencyManagerProvider \nIResolveDependenciesResult \nNativeDllResolveHandler \nNativeResolutionProbe \nResolvingErrorReport","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics.html","title":"FSharp.Compiler.Diagnostics","content":"ActivityNames \nCompilerDiagnostics \nExtendedData \nFSharpDiagnostic \nFSharpDiagnosticKind \nFSharpDiagnosticOptions \nFSharpDiagnosticSeverity","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices.html","title":"FSharp.Compiler.EditorServices","content":"AssemblyContent \nInterfaceStubGenerator \nNavigateTo \nNavigation \nParsedInput \nQuickParse \nSimplifyNames \nStructure \nUnusedDeclarations \nUnusedOpens \nXmlDocComment \nXmlDocParser \nAssemblyContentType \nAssemblySymbol \nCompletionContext \nCompletionItemKind \nDeclarationListInfo \nDeclarationListItem \nEntityCache \nEntityKind \nFSharpGlyph \nFindDeclExternalParam \nFindDeclExternalSymbol \nFindDeclExternalType \nFindDeclFailureReason \nFindDeclResult \nIAssemblyContentCache \nInheritanceContext \nInsertionContext \nInsertionContextEntity \nInterfaceData \nLookupType \nMaybeUnresolvedIdent \nMethodGroup \nMethodGroupItem \nMethodGroupItemParameter \nMethodOverrideCompletionContext \nModuleKind \nNavigableContainer \nNavigableContainerType \nNavigableItem \nNavigableItemKind \nNavigationEntityKind \nNavigationItem \nNavigationItemKind \nNavigationItems \nNavigationTopLevelDeclaration \nOpenStatementInsertionPoint \nParameterLocations \nPartialLongName \nPatternContext \nRecordContext \nScopeKind \nSemanticClassificationItem \nSemanticClassificationType \nSemanticClassificationView \nShortIdents \nToolTipElement \nToolTipElementData \nToolTipText \nTupledArgumentLocation \nUnresolvedSymbol \nXmlDocable","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io.html","title":"FSharp.Compiler.IO","content":"FileSystemAutoOpens \nStreamExtensions \nByteMemory \nDefaultAssemblyLoader \nDefaultFileSystem \nIAssemblyLoader \nIFileSystem","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive.html","title":"FSharp.Compiler.Interactive","content":"CtrlBreakHandlers \nFsiHelp \nShell","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols.html","title":"FSharp.Compiler.Symbols","content":"FSharpExprPatterns \nFSharpSymbolPatterns \nFSharpAbstractParameter \nFSharpAbstractSignature \nFSharpAccessibility \nFSharpAccessibilityRights \nFSharpActivePatternCase \nFSharpActivePatternGroup \nFSharpAnonRecordTypeDetails \nFSharpAssembly \nFSharpAssemblyContents \nFSharpAssemblySignature \nFSharpAttribute \nFSharpDelegateSignature \nFSharpDisplayContext \nFSharpEntity \nFSharpExpr \nFSharpField \nFSharpGenericParameter \nFSharpGenericParameterConstraint \nFSharpGenericParameterDefaultsToConstraint \nFSharpGenericParameterDelegateConstraint \nFSharpGenericParameterMemberConstraint \nFSharpImplementationFileContents \nFSharpImplementationFileDeclaration \nFSharpInlineAnnotation \nFSharpMemberOrFunctionOrValue \nFSharpObjectExprOverride \nFSharpOpenDeclaration \nFSharpParameter \nFSharpStaticParameter \nFSharpSymbol \nFSharpType \nFSharpUnionCase \nFSharpXmlDoc","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax.html","title":"FSharp.Compiler.Syntax","content":"ParsedInput \nPrettyNaming \nSynExpr \nSynLongIdentHelpers \nSynPat \nSyntaxNode \nSyntaxTraversal \nDebugPointAtBinding \nDebugPointAtFinally \nDebugPointAtFor \nDebugPointAtInOrTo \nDebugPointAtLeafExpr \nDebugPointAtSequential \nDebugPointAtTarget \nDebugPointAtTry \nDebugPointAtWhile \nDebugPointAtWith \nExprAtomicFlag \nIdent \nNamePatPairField \nParsedHashDirective \nParsedHashDirectiveArgument \nParsedImplFile \nParsedImplFileFragment \nParsedImplFileInput \nParsedInput \nParsedScriptInteraction \nParsedSigFile \nParsedSigFileFragment \nParsedSigFileInput \nParserDetail \nQualifiedNameOfFile \nSeqExprOnly \nSynAccess \nSynArgInfo \nSynArgPats \nSynAttribute \nSynAttributeList \nSynBinding \nSynBindingKind \nSynBindingReturnInfo \nSynByteStringKind \nSynComponentInfo \nSynConst \nSynEnumCase \nSynExceptionDefn \nSynExceptionDefnRepr \nSynExceptionSig \nSynExpr \nSynExprRecordField \nSynField \nSynIdent \nSynInterfaceImpl \nSynInterpolatedStringPart \nSynLongIdent \nSynMatchClause \nSynMeasure \nSynMemberDefn \nSynMemberFlags \nSynMemberKind \nSynMemberSig \nSynModuleDecl \nSynModuleOrNamespace \nSynModuleOrNamespaceKind \nSynModuleOrNamespaceSig \nSynModuleSigDecl \nSynOpenDeclTarget \nSynPat \nSynRationalConst \nSynReturnInfo \nSynSimplePat \nSynSimplePatAlternativeIdInfo \nSynSimplePats \nSynStaticOptimizationConstraint \nSynStringKind \nSynTupleTypeSegment \nSynTypar \nSynTyparDecl \nSynTyparDecls \nSynType \nSynTypeConstraint \nSynTypeDefn \nSynTypeDefnKind \nSynTypeDefnRepr \nSynTypeDefnSig \nSynTypeDefnSigRepr \nSynTypeDefnSimpleRepr \nSynUnionCase \nSynUnionCaseKind \nSynValData \nSynValInfo \nSynValSig \nSynValSigAccess \nSynValTyparDecls \nSyntaxNode \nSyntaxVisitorBase\u003C\u0027T\u003E \nTyparStaticReq","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia.html","title":"FSharp.Compiler.SyntaxTrivia","content":"CommentTrivia \nConditionalDirectiveTrivia \nGetSetKeywords \nIdentTrivia \nIfDirectiveExpression \nParsedInputTrivia \nSynArgPatsNamePatPairsTrivia \nSynBindingReturnInfoTrivia \nSynBindingTrivia \nSynEnumCaseTrivia \nSynExprAnonRecdTrivia \nSynExprDoBangTrivia \nSynExprDotLambdaTrivia \nSynExprIfThenElseTrivia \nSynExprLambdaTrivia \nSynExprLetOrUseTrivia \nSynExprMatchBangTrivia \nSynExprMatchTrivia \nSynExprSequentialTrivia \nSynExprTryFinallyTrivia \nSynExprTryWithTrivia \nSynExprYieldOrReturnFromTrivia \nSynExprYieldOrReturnTrivia \nSynFieldTrivia \nSynLeadingKeyword \nSynMatchClauseTrivia \nSynMeasureConstantTrivia \nSynMemberDefnAbstractSlotTrivia \nSynMemberDefnAutoPropertyTrivia \nSynMemberDefnImplicitCtorTrivia \nSynMemberDefnInheritTrivia \nSynMemberGetSetTrivia \nSynMemberSigMemberTrivia \nSynModuleDeclNestedModuleTrivia \nSynModuleOrNamespaceLeadingKeyword \nSynModuleOrNamespaceSigTrivia \nSynModuleOrNamespaceTrivia \nSynModuleSigDeclNestedModuleTrivia \nSynPatListConsTrivia \nSynPatOrTrivia \nSynTyparDeclTrivia \nSynTypeConstraintWhereTyparNotSupportsNullTrivia \nSynTypeDefnLeadingKeyword \nSynTypeDefnSigTrivia \nSynTypeDefnTrivia \nSynTypeFunTrivia \nSynTypeOrTrivia \nSynTypeWithNullTrivia \nSynUnionCaseTrivia \nSynValSigTrivia \nWarnDirectiveTrivia","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text.html","title":"FSharp.Compiler.Text","content":"Line \nPosition \nRange \nSourceText \nSourceTextNew \nTaggedText \nISourceText \nISourceTextNew \nLine0 \nNavigableTaggedText \nPosition \nRange \nTaggedText \nTextTag \npos \nrange","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization.html","title":"FSharp.Compiler.Tokenization","content":"FSharpKeywords \nFSharpTokenTag \nFSharpLexer \nFSharpLexerFlags \nFSharpLineTokenizer \nFSharpSourceTokenizer \nFSharpToken \nFSharpTokenCharKind \nFSharpTokenColorKind \nFSharpTokenInfo \nFSharpTokenKind \nFSharpTokenTriggerClass \nFSharpTokenizerColorState \nFSharpTokenizerLexState","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-xml.html","title":"FSharp.Compiler.Xml","content":"PreXmlDoc \nXmlDoc","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/internal-utilities-collections.html","title":"Internal.Utilities.Collections","content":"Extensions","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/internal-utilities-library.html","title":"Internal.Utilities.Library","content":"InterruptibleLazy \nDelayInitArrayMap\u003C\u0027T, \u0027TDictKey, \u0027TDictValue\u003E \nInterruptibleLazy\u003C\u0027T\u003E","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-cancellable.html","title":"Cancellable","content":"Cancellable \n \nCancellable.CheckAndThrow \nCheckAndThrow \nCancellable.TryCheckAndThrow \nTryCheckAndThrow \nCancellable.Token \nToken \nCancellable.HasCancellationToken \nHasCancellationToken","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-cancellable.html#CheckAndThrow","title":"Cancellable.CheckAndThrow","content":"Cancellable.CheckAndThrow \nCheckAndThrow \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-cancellable.html#TryCheckAndThrow","title":"Cancellable.TryCheckAndThrow","content":"Cancellable.TryCheckAndThrow \nTryCheckAndThrow \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-cancellable.html#Token","title":"Cancellable.Token","content":"Cancellable.Token \nToken \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-cancellable.html#HasCancellationToken","title":"Cancellable.HasCancellationToken","content":"Cancellable.HasCancellationToken \nHasCancellationToken \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-compilerenvironment.html","title":"CompilerEnvironment","content":"CompilerEnvironment \n Information about the compilation environment \nCompilerEnvironment.BinFolderOfDefaultFSharpCompiler \nBinFolderOfDefaultFSharpCompiler \nCompilerEnvironment.DefaultReferencesForOrphanSources \nDefaultReferencesForOrphanSources \nCompilerEnvironment.GetConditionalDefinesForEditing \nGetConditionalDefinesForEditing \nCompilerEnvironment.GetDebuggerLanguageID \nGetDebuggerLanguageID \nCompilerEnvironment.IsCheckerSupportedSubcategory \nIsCheckerSupportedSubcategory \nCompilerEnvironment.IsCompilable \nIsCompilable \nCompilerEnvironment.IsScriptFile \nIsScriptFile \nCompilerEnvironment.MustBeSingleFileProject \nMustBeSingleFileProject","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-compilerenvironment.html#BinFolderOfDefaultFSharpCompiler","title":"CompilerEnvironment.BinFolderOfDefaultFSharpCompiler","content":"CompilerEnvironment.BinFolderOfDefaultFSharpCompiler \nBinFolderOfDefaultFSharpCompiler \n The default location of FSharp.Core.dll and fsc.exe based on the version of fsc.exe that is running","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-compilerenvironment.html#DefaultReferencesForOrphanSources","title":"CompilerEnvironment.DefaultReferencesForOrphanSources","content":"CompilerEnvironment.DefaultReferencesForOrphanSources \nDefaultReferencesForOrphanSources \n These are the names of assemblies that should be referenced for .fs or .fsi files that\n are not associated with a project.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-compilerenvironment.html#GetConditionalDefinesForEditing","title":"CompilerEnvironment.GetConditionalDefinesForEditing","content":"CompilerEnvironment.GetConditionalDefinesForEditing \nGetConditionalDefinesForEditing \n Return the compilation defines that should be used when editing the given file.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-compilerenvironment.html#GetDebuggerLanguageID","title":"CompilerEnvironment.GetDebuggerLanguageID","content":"CompilerEnvironment.GetDebuggerLanguageID \nGetDebuggerLanguageID \n Return the language ID, which is the expression evaluator id that the debugger will use.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-compilerenvironment.html#IsCheckerSupportedSubcategory","title":"CompilerEnvironment.IsCheckerSupportedSubcategory","content":"CompilerEnvironment.IsCheckerSupportedSubcategory \nIsCheckerSupportedSubcategory \n Return true if this is a subcategory of error or warning message that the language service can emit","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-compilerenvironment.html#IsCompilable","title":"CompilerEnvironment.IsCompilable","content":"CompilerEnvironment.IsCompilable \nIsCompilable \n Whether or not this file is compilable","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-compilerenvironment.html#IsScriptFile","title":"CompilerEnvironment.IsScriptFile","content":"CompilerEnvironment.IsScriptFile \nIsScriptFile \n A helpers for dealing with F# files.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-compilerenvironment.html#MustBeSingleFileProject","title":"CompilerEnvironment.MustBeSingleFileProject","content":"CompilerEnvironment.MustBeSingleFileProject \nMustBeSingleFileProject \n Whether or not this file should be a single-file project","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il.html","title":"IL","content":"IL \n The \u0022unlinked\u0022 view of .NET metadata and code.  Central to the Abstract IL library \nIL.ILArgConvention \nILArgConvention \nIL.ILArrayShape \nILArrayShape \nIL.ILAssemblyLongevity \nILAssemblyLongevity \nIL.ILAssemblyManifest \nILAssemblyManifest \nIL.ILAssemblyRef \nILAssemblyRef \nIL.ILAttribElem \nILAttribElem \nIL.ILAttribute \nILAttribute \nIL.ILAttributes \nILAttributes \nIL.ILAttributesStored \nILAttributesStored \nIL.ILCallingConv \nILCallingConv \nIL.ILCallingSignature \nILCallingSignature \nIL.ILDebugImport \nILDebugImport \nIL.ILDebugImports \nILDebugImports \nIL.ILDefaultPInvokeEncoding \nILDefaultPInvokeEncoding \nIL.ILEventDef \nILEventDef \nIL.ILEventDefs \nILEventDefs \nIL.ILExportedTypeOrForwarder \nILExportedTypeOrForwarder \nIL.ILExportedTypesAndForwarders \nILExportedTypesAndForwarders \nIL.ILFieldDef \nILFieldDef \nIL.ILFieldDefs \nILFieldDefs \nIL.ILFieldInit \nILFieldInit \nIL.ILFieldRef \nILFieldRef \nIL.ILFieldSpec \nILFieldSpec \nIL.ILGenericParameterDef \nILGenericParameterDef \nIL.ILGenericVariance \nILGenericVariance \nIL.ILGuid \nILGuid \nIL.ILMemberAccess \nILMemberAccess \nIL.ILMethodDef \nILMethodDef \nIL.ILMethodDefs \nILMethodDefs \nIL.ILMethodImplDef \nILMethodImplDef \nIL.ILMethodImplDefs \nILMethodImplDefs \nIL.ILMethodRef \nILMethodRef \nIL.ILMethodSpec \nILMethodSpec \nIL.ILModuleDef \nILModuleDef \nIL.ILModuleRef \nILModuleRef \nIL.ILNativeResource \nILNativeResource \nIL.ILNativeType \nILNativeType \nIL.ILNestedExportedType \nILNestedExportedType \nIL.ILNestedExportedTypes \nILNestedExportedTypes \nIL.ILParameter \nILParameter \nIL.ILPlatform \nILPlatform \nIL.ILPreTypeDef \nILPreTypeDef \nIL.ILPropertyDef \nILPropertyDef \nIL.ILPropertyDefs \nILPropertyDefs \nIL.ILReferences \nILReferences \nIL.ILResources \nILResources \nIL.ILReturn \nILReturn \nIL.ILScopeRef \nILScopeRef \nIL.ILSecurityDeclsStored \nILSecurityDeclsStored \nIL.ILSourceDocument \nILSourceDocument \nIL.ILThisConvention \nILThisConvention \nIL.ILType \nILType \nIL.ILTypeDef \nILTypeDef \nIL.ILTypeDefAccess \nILTypeDefAccess \nIL.ILTypeDefAdditionalFlags \nILTypeDefAdditionalFlags \nIL.ILTypeDefLayout \nILTypeDefLayout \nIL.ILTypeDefs \nILTypeDefs \nIL.ILTypeInit \nILTypeInit \nIL.ILTypeRef \nILTypeRef \nIL.ILTypeSpec \nILTypeSpec \nIL.ILVersionInfo \nILVersionInfo \nIL.InterfaceImpl \nInterfaceImpl \nIL.MethodBody \nMethodBody \nIL.PublicKey \nPublicKey \nIL.mkILReturn \nmkILReturn \nIL.emptyILInterfaceImpls \nemptyILInterfaceImpls \nIL.emptyILExtends \nemptyILExtends \nIL.mkILCustomAttrs \nmkILCustomAttrs \nIL.mkILCustomAttrsFromArray \nmkILCustomAttrsFromArray \nIL.storeILCustomAttrs \nstoreILCustomAttrs \nIL.mkILCustomAttrsComputed \nmkILCustomAttrsComputed \nIL.emptyILCustomAttrs \nemptyILCustomAttrs \nIL.emptyILCustomAttrsStored \nemptyILCustomAttrsStored \nIL.mkILSecurityDecls \nmkILSecurityDecls \nIL.emptyILSecurityDecls \nemptyILSecurityDecls \nIL.storeILSecurityDecls \nstoreILSecurityDecls \nIL.mkILEvents \nmkILEvents \nIL.mkILEventsLazy \nmkILEventsLazy \nIL.emptyILEvents \nemptyILEvents \nIL.mkILProperties \nmkILProperties \nIL.mkILPropertiesLazy \nmkILPropertiesLazy \nIL.emptyILProperties \nemptyILProperties \nIL.mkILMethods \nmkILMethods \nIL.mkILMethodsFromArray \nmkILMethodsFromArray \nIL.mkILMethodsComputed \nmkILMethodsComputed \nIL.emptyILMethods \nemptyILMethods \nIL.mkILFields \nmkILFields \nIL.mkILFieldsLazy \nmkILFieldsLazy \nIL.emptyILFields \nemptyILFields \nIL.mkILMethodImpls \nmkILMethodImpls \nIL.mkILMethodImplsLazy \nmkILMethodImplsLazy \nIL.emptyILMethodImpls \nemptyILMethodImpls \nIL.mkILTypeDefs \nmkILTypeDefs \nIL.mkILTypeDefsFromArray \nmkILTypeDefsFromArray \nIL.emptyILTypeDefs \nemptyILTypeDefs \nIL.mkILTypeDefsComputed \nmkILTypeDefsComputed \nIL.mkILNestedExportedTypes \nmkILNestedExportedTypes \nIL.mkILExportedTypes \nmkILExportedTypes \nIL.emptyILResources \nemptyILResources \nIL.mkILSimpleModule \nmkILSimpleModule \nIL.NoMetadataIdx \nNoMetadataIdx \nIL.(|HasFlag|_|) \n(|HasFlag|_|)","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il.html#mkILReturn","title":"IL.mkILReturn","content":"IL.mkILReturn \nmkILReturn \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il.html#emptyILInterfaceImpls","title":"IL.emptyILInterfaceImpls","content":"IL.emptyILInterfaceImpls \nemptyILInterfaceImpls \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il.html#emptyILExtends","title":"IL.emptyILExtends","content":"IL.emptyILExtends \nemptyILExtends \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il.html#mkILCustomAttrs","title":"IL.mkILCustomAttrs","content":"IL.mkILCustomAttrs \nmkILCustomAttrs \n Making tables of custom attributes, etc.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il.html#mkILCustomAttrsFromArray","title":"IL.mkILCustomAttrsFromArray","content":"IL.mkILCustomAttrsFromArray \nmkILCustomAttrsFromArray \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il.html#storeILCustomAttrs","title":"IL.storeILCustomAttrs","content":"IL.storeILCustomAttrs \nstoreILCustomAttrs \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il.html#mkILCustomAttrsComputed","title":"IL.mkILCustomAttrsComputed","content":"IL.mkILCustomAttrsComputed \nmkILCustomAttrsComputed \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il.html#emptyILCustomAttrs","title":"IL.emptyILCustomAttrs","content":"IL.emptyILCustomAttrs \nemptyILCustomAttrs \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il.html#emptyILCustomAttrsStored","title":"IL.emptyILCustomAttrsStored","content":"IL.emptyILCustomAttrsStored \nemptyILCustomAttrsStored \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il.html#mkILSecurityDecls","title":"IL.mkILSecurityDecls","content":"IL.mkILSecurityDecls \nmkILSecurityDecls \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il.html#emptyILSecurityDecls","title":"IL.emptyILSecurityDecls","content":"IL.emptyILSecurityDecls \nemptyILSecurityDecls \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il.html#storeILSecurityDecls","title":"IL.storeILSecurityDecls","content":"IL.storeILSecurityDecls \nstoreILSecurityDecls \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il.html#mkILEvents","title":"IL.mkILEvents","content":"IL.mkILEvents \nmkILEvents \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il.html#mkILEventsLazy","title":"IL.mkILEventsLazy","content":"IL.mkILEventsLazy \nmkILEventsLazy \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il.html#emptyILEvents","title":"IL.emptyILEvents","content":"IL.emptyILEvents \nemptyILEvents \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il.html#mkILProperties","title":"IL.mkILProperties","content":"IL.mkILProperties \nmkILProperties \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il.html#mkILPropertiesLazy","title":"IL.mkILPropertiesLazy","content":"IL.mkILPropertiesLazy \nmkILPropertiesLazy \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il.html#emptyILProperties","title":"IL.emptyILProperties","content":"IL.emptyILProperties \nemptyILProperties \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il.html#mkILMethods","title":"IL.mkILMethods","content":"IL.mkILMethods \nmkILMethods \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il.html#mkILMethodsFromArray","title":"IL.mkILMethodsFromArray","content":"IL.mkILMethodsFromArray \nmkILMethodsFromArray \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il.html#mkILMethodsComputed","title":"IL.mkILMethodsComputed","content":"IL.mkILMethodsComputed \nmkILMethodsComputed \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il.html#emptyILMethods","title":"IL.emptyILMethods","content":"IL.emptyILMethods \nemptyILMethods \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il.html#mkILFields","title":"IL.mkILFields","content":"IL.mkILFields \nmkILFields \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il.html#mkILFieldsLazy","title":"IL.mkILFieldsLazy","content":"IL.mkILFieldsLazy \nmkILFieldsLazy \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il.html#emptyILFields","title":"IL.emptyILFields","content":"IL.emptyILFields \nemptyILFields \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il.html#mkILMethodImpls","title":"IL.mkILMethodImpls","content":"IL.mkILMethodImpls \nmkILMethodImpls \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il.html#mkILMethodImplsLazy","title":"IL.mkILMethodImplsLazy","content":"IL.mkILMethodImplsLazy \nmkILMethodImplsLazy \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il.html#emptyILMethodImpls","title":"IL.emptyILMethodImpls","content":"IL.emptyILMethodImpls \nemptyILMethodImpls \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il.html#mkILTypeDefs","title":"IL.mkILTypeDefs","content":"IL.mkILTypeDefs \nmkILTypeDefs \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il.html#mkILTypeDefsFromArray","title":"IL.mkILTypeDefsFromArray","content":"IL.mkILTypeDefsFromArray \nmkILTypeDefsFromArray \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il.html#emptyILTypeDefs","title":"IL.emptyILTypeDefs","content":"IL.emptyILTypeDefs \nemptyILTypeDefs \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il.html#mkILTypeDefsComputed","title":"IL.mkILTypeDefsComputed","content":"IL.mkILTypeDefsComputed \nmkILTypeDefsComputed \n Create table of types which is loaded/computed on-demand, and whose individual\n elements are also loaded/computed on-demand. Any call to tdefs.AsList will\n result in the laziness being forced.  Operations can examine the\n custom attributes and name of each type in order to decide whether\n to proceed with examining the other details of the type.\n\n Note that individual type definitions may contain further delays\n in their method, field and other tables.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il.html#mkILNestedExportedTypes","title":"IL.mkILNestedExportedTypes","content":"IL.mkILNestedExportedTypes \nmkILNestedExportedTypes \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il.html#mkILExportedTypes","title":"IL.mkILExportedTypes","content":"IL.mkILExportedTypes \nmkILExportedTypes \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il.html#emptyILResources","title":"IL.emptyILResources","content":"IL.emptyILResources \nemptyILResources \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il.html#mkILSimpleModule","title":"IL.mkILSimpleModule","content":"IL.mkILSimpleModule \nmkILSimpleModule \n Making modules.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il.html#NoMetadataIdx","title":"IL.NoMetadataIdx","content":"IL.NoMetadataIdx \nNoMetadataIdx \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il.html#(|HasFlag|_|)","title":"IL.(|HasFlag|_|)","content":"IL.(|HasFlag|_|) \n(|HasFlag|_|) \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilargconvention.html","title":"ILArgConvention","content":"ILArgConvention \n \nILArgConvention.IsDefault \nIsDefault \nILArgConvention.IsThisCall \nIsThisCall \nILArgConvention.IsCDecl \nIsCDecl \nILArgConvention.IsStdCall \nIsStdCall \nILArgConvention.IsFastCall \nIsFastCall \nILArgConvention.IsVarArg \nIsVarArg \nILArgConvention.Default \nDefault \nILArgConvention.CDecl \nCDecl \nILArgConvention.StdCall \nStdCall \nILArgConvention.ThisCall \nThisCall \nILArgConvention.FastCall \nFastCall \nILArgConvention.VarArg \nVarArg","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilargconvention.html#IsDefault","title":"ILArgConvention.IsDefault","content":"ILArgConvention.IsDefault \nIsDefault \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilargconvention.html#IsThisCall","title":"ILArgConvention.IsThisCall","content":"ILArgConvention.IsThisCall \nIsThisCall \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilargconvention.html#IsCDecl","title":"ILArgConvention.IsCDecl","content":"ILArgConvention.IsCDecl \nIsCDecl \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilargconvention.html#IsStdCall","title":"ILArgConvention.IsStdCall","content":"ILArgConvention.IsStdCall \nIsStdCall \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilargconvention.html#IsFastCall","title":"ILArgConvention.IsFastCall","content":"ILArgConvention.IsFastCall \nIsFastCall \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilargconvention.html#IsVarArg","title":"ILArgConvention.IsVarArg","content":"ILArgConvention.IsVarArg \nIsVarArg \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilargconvention.html#Default","title":"ILArgConvention.Default","content":"ILArgConvention.Default \nDefault \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilargconvention.html#CDecl","title":"ILArgConvention.CDecl","content":"ILArgConvention.CDecl \nCDecl \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilargconvention.html#StdCall","title":"ILArgConvention.StdCall","content":"ILArgConvention.StdCall \nStdCall \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilargconvention.html#ThisCall","title":"ILArgConvention.ThisCall","content":"ILArgConvention.ThisCall \nThisCall \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilargconvention.html#FastCall","title":"ILArgConvention.FastCall","content":"ILArgConvention.FastCall \nFastCall \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilargconvention.html#VarArg","title":"ILArgConvention.VarArg","content":"ILArgConvention.VarArg \nVarArg \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilarrayshape.html","title":"ILArrayShape","content":"ILArrayShape \n \nILArrayShape.Rank \nRank \nILArrayShape.FromRank \nFromRank \nILArrayShape.SingleDimensional \nSingleDimensional","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilarrayshape.html#Rank","title":"ILArrayShape.Rank","content":"ILArrayShape.Rank \nRank \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilarrayshape.html#FromRank","title":"ILArrayShape.FromRank","content":"ILArrayShape.FromRank \nFromRank \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilarrayshape.html#SingleDimensional","title":"ILArrayShape.SingleDimensional","content":"ILArrayShape.SingleDimensional \nSingleDimensional \n Bounds for a single dimensional, zero based array","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilassemblylongevity.html","title":"ILAssemblyLongevity","content":"ILAssemblyLongevity \n \nILAssemblyLongevity.Default \nDefault","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilassemblylongevity.html#Default","title":"ILAssemblyLongevity.Default","content":"ILAssemblyLongevity.Default \nDefault \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilassemblymanifest.html","title":"ILAssemblyManifest","content":"ILAssemblyManifest \n The main module of an assembly is a module plus some manifest information. \nILAssemblyManifest.CustomAttrs \nCustomAttrs \nILAssemblyManifest.SecurityDecls \nSecurityDecls \nILAssemblyManifest.Name \nName \nILAssemblyManifest.AuxModuleHashAlgorithm \nAuxModuleHashAlgorithm \nILAssemblyManifest.SecurityDeclsStored \nSecurityDeclsStored \nILAssemblyManifest.PublicKey \nPublicKey \nILAssemblyManifest.Version \nVersion \nILAssemblyManifest.Locale \nLocale \nILAssemblyManifest.CustomAttrsStored \nCustomAttrsStored \nILAssemblyManifest.AssemblyLongevity \nAssemblyLongevity \nILAssemblyManifest.DisableJitOptimizations \nDisableJitOptimizations \nILAssemblyManifest.JitTracking \nJitTracking \nILAssemblyManifest.IgnoreSymbolStoreSequencePoints \nIgnoreSymbolStoreSequencePoints \nILAssemblyManifest.Retargetable \nRetargetable \nILAssemblyManifest.ExportedTypes \nExportedTypes \nILAssemblyManifest.EntrypointElsewhere \nEntrypointElsewhere \nILAssemblyManifest.MetadataIndex \nMetadataIndex","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilassemblymanifest.html#CustomAttrs","title":"ILAssemblyManifest.CustomAttrs","content":"ILAssemblyManifest.CustomAttrs \nCustomAttrs \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilassemblymanifest.html#SecurityDecls","title":"ILAssemblyManifest.SecurityDecls","content":"ILAssemblyManifest.SecurityDecls \nSecurityDecls \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilassemblymanifest.html#Name","title":"ILAssemblyManifest.Name","content":"ILAssemblyManifest.Name \nName \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilassemblymanifest.html#AuxModuleHashAlgorithm","title":"ILAssemblyManifest.AuxModuleHashAlgorithm","content":"ILAssemblyManifest.AuxModuleHashAlgorithm \nAuxModuleHashAlgorithm \n This is the ID of the algorithm used for the hashes of auxiliary\n files in the assembly.   These hashes are stored in the\n \u003Cc\u003EILModuleRef.Hash\u003C/c\u003E fields of this assembly. These are not\n cryptographic hashes: they are simple file hashes. The algorithm\n is normally \u003Cc\u003E0x00008004\u003C/c\u003E indicating the SHA1 hash algorithm.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilassemblymanifest.html#SecurityDeclsStored","title":"ILAssemblyManifest.SecurityDeclsStored","content":"ILAssemblyManifest.SecurityDeclsStored \nSecurityDeclsStored \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilassemblymanifest.html#PublicKey","title":"ILAssemblyManifest.PublicKey","content":"ILAssemblyManifest.PublicKey \nPublicKey \n This is the public key used to sign this\n assembly (the signature itself is stored elsewhere: see the\n binary format, and may not have been written if delay signing\n is used).  (member Name, member PublicKey) forms the full\n public name of the assembly.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilassemblymanifest.html#Version","title":"ILAssemblyManifest.Version","content":"ILAssemblyManifest.Version \nVersion \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilassemblymanifest.html#Locale","title":"ILAssemblyManifest.Locale","content":"ILAssemblyManifest.Locale \nLocale \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilassemblymanifest.html#CustomAttrsStored","title":"ILAssemblyManifest.CustomAttrsStored","content":"ILAssemblyManifest.CustomAttrsStored \nCustomAttrsStored \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilassemblymanifest.html#AssemblyLongevity","title":"ILAssemblyManifest.AssemblyLongevity","content":"ILAssemblyManifest.AssemblyLongevity \nAssemblyLongevity \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilassemblymanifest.html#DisableJitOptimizations","title":"ILAssemblyManifest.DisableJitOptimizations","content":"ILAssemblyManifest.DisableJitOptimizations \nDisableJitOptimizations \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilassemblymanifest.html#JitTracking","title":"ILAssemblyManifest.JitTracking","content":"ILAssemblyManifest.JitTracking \nJitTracking \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilassemblymanifest.html#IgnoreSymbolStoreSequencePoints","title":"ILAssemblyManifest.IgnoreSymbolStoreSequencePoints","content":"ILAssemblyManifest.IgnoreSymbolStoreSequencePoints \nIgnoreSymbolStoreSequencePoints \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilassemblymanifest.html#Retargetable","title":"ILAssemblyManifest.Retargetable","content":"ILAssemblyManifest.Retargetable \nRetargetable \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilassemblymanifest.html#ExportedTypes","title":"ILAssemblyManifest.ExportedTypes","content":"ILAssemblyManifest.ExportedTypes \nExportedTypes \n Records the types implemented by this assembly in auxiliary\n modules.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilassemblymanifest.html#EntrypointElsewhere","title":"ILAssemblyManifest.EntrypointElsewhere","content":"ILAssemblyManifest.EntrypointElsewhere \nEntrypointElsewhere \n Records whether the entrypoint resides in another module.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilassemblymanifest.html#MetadataIndex","title":"ILAssemblyManifest.MetadataIndex","content":"ILAssemblyManifest.MetadataIndex \nMetadataIndex \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilassemblyref.html","title":"ILAssemblyRef","content":"ILAssemblyRef \n \nILAssemblyRef.EqualsIgnoringVersion \nEqualsIgnoringVersion \nILAssemblyRef.Name \nName \nILAssemblyRef.Version \nVersion \nILAssemblyRef.Retargetable \nRetargetable \nILAssemblyRef.Locale \nLocale \nILAssemblyRef.Hash \nHash \nILAssemblyRef.PublicKey \nPublicKey \nILAssemblyRef.QualifiedName \nQualifiedName \nILAssemblyRef.Create \nCreate \nILAssemblyRef.FromAssemblyName \nFromAssemblyName","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilassemblyref.html#EqualsIgnoringVersion","title":"ILAssemblyRef.EqualsIgnoringVersion","content":"ILAssemblyRef.EqualsIgnoringVersion \nEqualsIgnoringVersion \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilassemblyref.html#Name","title":"ILAssemblyRef.Name","content":"ILAssemblyRef.Name \nName \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilassemblyref.html#Version","title":"ILAssemblyRef.Version","content":"ILAssemblyRef.Version \nVersion \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilassemblyref.html#Retargetable","title":"ILAssemblyRef.Retargetable","content":"ILAssemblyRef.Retargetable \nRetargetable \n CLI says this indicates if the assembly can be retargeted (at runtime) to be from a different publisher.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilassemblyref.html#Locale","title":"ILAssemblyRef.Locale","content":"ILAssemblyRef.Locale \nLocale \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilassemblyref.html#Hash","title":"ILAssemblyRef.Hash","content":"ILAssemblyRef.Hash \nHash \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilassemblyref.html#PublicKey","title":"ILAssemblyRef.PublicKey","content":"ILAssemblyRef.PublicKey \nPublicKey \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilassemblyref.html#QualifiedName","title":"ILAssemblyRef.QualifiedName","content":"ILAssemblyRef.QualifiedName \nQualifiedName \n The fully qualified name of the assembly reference, e.g. mscorlib, Version=1.0.3705 etc.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilassemblyref.html#Create","title":"ILAssemblyRef.Create","content":"ILAssemblyRef.Create \nCreate \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilassemblyref.html#FromAssemblyName","title":"ILAssemblyRef.FromAssemblyName","content":"ILAssemblyRef.FromAssemblyName \nFromAssemblyName \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilattribelem.html","title":"ILAttribElem","content":"ILAttribElem \n \nILAttribElem.IsSingle \nIsSingle \nILAttribElem.IsType \nIsType \nILAttribElem.IsUInt64 \nIsUInt64 \nILAttribElem.IsNull \nIsNull \nILAttribElem.IsUInt32 \nIsUInt32 \nILAttribElem.IsByte \nIsByte \nILAttribElem.IsDouble \nIsDouble \nILAttribElem.IsSByte \nIsSByte \nILAttribElem.IsString \nIsString \nILAttribElem.IsInt32 \nIsInt32 \nILAttribElem.IsUInt16 \nIsUInt16 \nILAttribElem.IsInt64 \nIsInt64 \nILAttribElem.IsInt16 \nIsInt16 \nILAttribElem.IsTypeRef \nIsTypeRef \nILAttribElem.IsChar \nIsChar \nILAttribElem.IsArray \nIsArray \nILAttribElem.IsBool \nIsBool \nILAttribElem.String \nString \nILAttribElem.Bool \nBool \nILAttribElem.Char \nChar \nILAttribElem.SByte \nSByte \nILAttribElem.Int16 \nInt16 \nILAttribElem.Int32 \nInt32 \nILAttribElem.Int64 \nInt64 \nILAttribElem.Byte \nByte \nILAttribElem.UInt16 \nUInt16 \nILAttribElem.UInt32 \nUInt32 \nILAttribElem.UInt64 \nUInt64 \nILAttribElem.Single \nSingle \nILAttribElem.Double \nDouble \nILAttribElem.Null \nNull \nILAttribElem.Type \nType \nILAttribElem.TypeRef \nTypeRef \nILAttribElem.Array \nArray","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilattribelem.html#IsSingle","title":"ILAttribElem.IsSingle","content":"ILAttribElem.IsSingle \nIsSingle \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilattribelem.html#IsType","title":"ILAttribElem.IsType","content":"ILAttribElem.IsType \nIsType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilattribelem.html#IsUInt64","title":"ILAttribElem.IsUInt64","content":"ILAttribElem.IsUInt64 \nIsUInt64 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilattribelem.html#IsNull","title":"ILAttribElem.IsNull","content":"ILAttribElem.IsNull \nIsNull \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilattribelem.html#IsUInt32","title":"ILAttribElem.IsUInt32","content":"ILAttribElem.IsUInt32 \nIsUInt32 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilattribelem.html#IsByte","title":"ILAttribElem.IsByte","content":"ILAttribElem.IsByte \nIsByte \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilattribelem.html#IsDouble","title":"ILAttribElem.IsDouble","content":"ILAttribElem.IsDouble \nIsDouble \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilattribelem.html#IsSByte","title":"ILAttribElem.IsSByte","content":"ILAttribElem.IsSByte \nIsSByte \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilattribelem.html#IsString","title":"ILAttribElem.IsString","content":"ILAttribElem.IsString \nIsString \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilattribelem.html#IsInt32","title":"ILAttribElem.IsInt32","content":"ILAttribElem.IsInt32 \nIsInt32 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilattribelem.html#IsUInt16","title":"ILAttribElem.IsUInt16","content":"ILAttribElem.IsUInt16 \nIsUInt16 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilattribelem.html#IsInt64","title":"ILAttribElem.IsInt64","content":"ILAttribElem.IsInt64 \nIsInt64 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilattribelem.html#IsInt16","title":"ILAttribElem.IsInt16","content":"ILAttribElem.IsInt16 \nIsInt16 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilattribelem.html#IsTypeRef","title":"ILAttribElem.IsTypeRef","content":"ILAttribElem.IsTypeRef \nIsTypeRef \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilattribelem.html#IsChar","title":"ILAttribElem.IsChar","content":"ILAttribElem.IsChar \nIsChar \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilattribelem.html#IsArray","title":"ILAttribElem.IsArray","content":"ILAttribElem.IsArray \nIsArray \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilattribelem.html#IsBool","title":"ILAttribElem.IsBool","content":"ILAttribElem.IsBool \nIsBool \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilattribelem.html#String","title":"ILAttribElem.String","content":"ILAttribElem.String \nString \n Represents a custom attribute parameter of type \u0027string\u0027. These may be null, in which case they are encoded in a special\n way as indicated by Ecma-335 Partition II.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilattribelem.html#Bool","title":"ILAttribElem.Bool","content":"ILAttribElem.Bool \nBool \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilattribelem.html#Char","title":"ILAttribElem.Char","content":"ILAttribElem.Char \nChar \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilattribelem.html#SByte","title":"ILAttribElem.SByte","content":"ILAttribElem.SByte \nSByte \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilattribelem.html#Int16","title":"ILAttribElem.Int16","content":"ILAttribElem.Int16 \nInt16 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilattribelem.html#Int32","title":"ILAttribElem.Int32","content":"ILAttribElem.Int32 \nInt32 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilattribelem.html#Int64","title":"ILAttribElem.Int64","content":"ILAttribElem.Int64 \nInt64 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilattribelem.html#Byte","title":"ILAttribElem.Byte","content":"ILAttribElem.Byte \nByte \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilattribelem.html#UInt16","title":"ILAttribElem.UInt16","content":"ILAttribElem.UInt16 \nUInt16 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilattribelem.html#UInt32","title":"ILAttribElem.UInt32","content":"ILAttribElem.UInt32 \nUInt32 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilattribelem.html#UInt64","title":"ILAttribElem.UInt64","content":"ILAttribElem.UInt64 \nUInt64 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilattribelem.html#Single","title":"ILAttribElem.Single","content":"ILAttribElem.Single \nSingle \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilattribelem.html#Double","title":"ILAttribElem.Double","content":"ILAttribElem.Double \nDouble \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilattribelem.html#Null","title":"ILAttribElem.Null","content":"ILAttribElem.Null \nNull \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilattribelem.html#Type","title":"ILAttribElem.Type","content":"ILAttribElem.Type \nType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilattribelem.html#TypeRef","title":"ILAttribElem.TypeRef","content":"ILAttribElem.TypeRef \nTypeRef \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilattribelem.html#Array","title":"ILAttribElem.Array","content":"ILAttribElem.Array \nArray \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilattribute.html","title":"ILAttribute","content":"ILAttribute \n Custom attribute. \nILAttribute.IsDecoded \nIsDecoded \nILAttribute.IsEncoded \nIsEncoded \nILAttribute.Encoded \nEncoded \nILAttribute.Decoded \nDecoded","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilattribute.html#IsDecoded","title":"ILAttribute.IsDecoded","content":"ILAttribute.IsDecoded \nIsDecoded \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilattribute.html#IsEncoded","title":"ILAttribute.IsEncoded","content":"ILAttribute.IsEncoded \nIsEncoded \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilattribute.html#Encoded","title":"ILAttribute.Encoded","content":"ILAttribute.Encoded \nEncoded \n Attribute with args encoded to a binary blob according to ECMA-335 II.21 and II.23.3.\n \u0027decodeILAttribData\u0027 is used to parse the byte[] blob to ILAttribElem\u0027s as best as possible.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilattribute.html#Decoded","title":"ILAttribute.Decoded","content":"ILAttribute.Decoded \nDecoded \n Attribute with args in decoded form.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilattributes.html","title":"ILAttributes","content":"ILAttributes \n \nILAttributes.AsArray \nAsArray \nILAttributes.AsList \nAsList","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilattributes.html#AsArray","title":"ILAttributes.AsArray","content":"ILAttributes.AsArray \nAsArray \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilattributes.html#AsList","title":"ILAttributes.AsList","content":"ILAttributes.AsList \nAsList \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilattributesstored.html","title":"ILAttributesStored","content":"ILAttributesStored \n Represents the efficiency-oriented storage of ILAttributes in another item. \nILAttributesStored.GetCustomAttrs \nGetCustomAttrs \nILAttributesStored.IsGiven \nIsGiven \nILAttributesStored.IsReader \nIsReader \nILAttributesStored.Reader \nReader \nILAttributesStored.Given \nGiven","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilattributesstored.html#GetCustomAttrs","title":"ILAttributesStored.GetCustomAttrs","content":"ILAttributesStored.GetCustomAttrs \nGetCustomAttrs \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilattributesstored.html#IsGiven","title":"ILAttributesStored.IsGiven","content":"ILAttributesStored.IsGiven \nIsGiven \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilattributesstored.html#IsReader","title":"ILAttributesStored.IsReader","content":"ILAttributesStored.IsReader \nIsReader \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilattributesstored.html#Reader","title":"ILAttributesStored.Reader","content":"ILAttributesStored.Reader \nReader \n Computed by ilread.fs based on metadata index","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilattributesstored.html#Given","title":"ILAttributesStored.Given","content":"ILAttributesStored.Given \nGiven \n Already computed","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilcallingconv.html","title":"ILCallingConv","content":"ILCallingConv \n \nILCallingConv.Static \nStatic \nILCallingConv.Instance \nInstance \nILCallingConv.Callconv \nCallconv","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilcallingconv.html#Static","title":"ILCallingConv.Static","content":"ILCallingConv.Static \nStatic \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilcallingconv.html#Instance","title":"ILCallingConv.Instance","content":"ILCallingConv.Instance \nInstance \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilcallingconv.html#Callconv","title":"ILCallingConv.Callconv","content":"ILCallingConv.Callconv \nCallconv \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilcallingsignature.html","title":"ILCallingSignature","content":"ILCallingSignature \n \nILCallingSignature.CallingConv \nCallingConv \nILCallingSignature.ArgTypes \nArgTypes \nILCallingSignature.ReturnType \nReturnType","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilcallingsignature.html#CallingConv","title":"ILCallingSignature.CallingConv","content":"ILCallingSignature.CallingConv \nCallingConv \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilcallingsignature.html#ArgTypes","title":"ILCallingSignature.ArgTypes","content":"ILCallingSignature.ArgTypes \nArgTypes \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilcallingsignature.html#ReturnType","title":"ILCallingSignature.ReturnType","content":"ILCallingSignature.ReturnType \nReturnType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ildebugimport.html","title":"ILDebugImport","content":"ILDebugImport \n Defines an opened namespace, type relevant to a code location.\n\n Emitted to the PortablePDB format. Note the format supports additional variations on\n imported things that are not yet emitted in F#. \nILDebugImport.IsImportType \nIsImportType \nILDebugImport.IsImportNamespace \nIsImportNamespace \nILDebugImport.ImportType \nImportType \nILDebugImport.ImportNamespace \nImportNamespace","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ildebugimport.html#IsImportType","title":"ILDebugImport.IsImportType","content":"ILDebugImport.IsImportType \nIsImportType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ildebugimport.html#IsImportNamespace","title":"ILDebugImport.IsImportNamespace","content":"ILDebugImport.IsImportNamespace \nIsImportNamespace \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ildebugimport.html#ImportType","title":"ILDebugImport.ImportType","content":"ILDebugImport.ImportType \nImportType \n Represents an \u0027open type XYZ\u0027 opening a type","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ildebugimport.html#ImportNamespace","title":"ILDebugImport.ImportNamespace","content":"ILDebugImport.ImportNamespace \nImportNamespace \n Represents an \u0027open XYZ\u0027 opening a namespace","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ildebugimports.html","title":"ILDebugImports","content":"ILDebugImports \n Defines a set of opened namespace, type relevant to a code location.\n\n Emitted to the PortablePDB format. \nILDebugImports.Parent \nParent \nILDebugImports.Imports \nImports","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ildebugimports.html#Parent","title":"ILDebugImports.Parent","content":"ILDebugImports.Parent \nParent \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ildebugimports.html#Imports","title":"ILDebugImports.Imports","content":"ILDebugImports.Imports \nImports \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ildefaultpinvokeencoding.html","title":"ILDefaultPInvokeEncoding","content":"ILDefaultPInvokeEncoding \n Default Unicode encoding for P/Invoke  within a type. \nILDefaultPInvokeEncoding.IsAuto \nIsAuto \nILDefaultPInvokeEncoding.IsAnsi \nIsAnsi \nILDefaultPInvokeEncoding.IsUnicode \nIsUnicode \nILDefaultPInvokeEncoding.Ansi \nAnsi \nILDefaultPInvokeEncoding.Auto \nAuto \nILDefaultPInvokeEncoding.Unicode \nUnicode","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ildefaultpinvokeencoding.html#IsAuto","title":"ILDefaultPInvokeEncoding.IsAuto","content":"ILDefaultPInvokeEncoding.IsAuto \nIsAuto \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ildefaultpinvokeencoding.html#IsAnsi","title":"ILDefaultPInvokeEncoding.IsAnsi","content":"ILDefaultPInvokeEncoding.IsAnsi \nIsAnsi \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ildefaultpinvokeencoding.html#IsUnicode","title":"ILDefaultPInvokeEncoding.IsUnicode","content":"ILDefaultPInvokeEncoding.IsUnicode \nIsUnicode \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ildefaultpinvokeencoding.html#Ansi","title":"ILDefaultPInvokeEncoding.Ansi","content":"ILDefaultPInvokeEncoding.Ansi \nAnsi \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ildefaultpinvokeencoding.html#Auto","title":"ILDefaultPInvokeEncoding.Auto","content":"ILDefaultPInvokeEncoding.Auto \nAuto \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ildefaultpinvokeencoding.html#Unicode","title":"ILDefaultPInvokeEncoding.Unicode","content":"ILDefaultPInvokeEncoding.Unicode \nUnicode \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ileventdef.html","title":"ILEventDef","content":"ILEventDef \n Event definitions. \nILEventDef.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nILEventDef.FireMethod \nFireMethod \nILEventDef.CustomAttrsStored \nCustomAttrsStored \nILEventDef.Name \nName \nILEventDef.CustomAttrs \nCustomAttrs \nILEventDef.AddMethod \nAddMethod \nILEventDef.IsSpecialName \nIsSpecialName \nILEventDef.RemoveMethod \nRemoveMethod \nILEventDef.EventType \nEventType \nILEventDef.Attributes \nAttributes \nILEventDef.MetadataIndex \nMetadataIndex \nILEventDef.OtherMethods \nOtherMethods \nILEventDef.IsRTSpecialName \nIsRTSpecialName","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ileventdef.html#\u0060\u0060.ctor\u0060\u0060","title":"ILEventDef.\u0060\u0060.ctor\u0060\u0060","content":"ILEventDef.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n Functional creation of a value, immediate","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ileventdef.html#FireMethod","title":"ILEventDef.FireMethod","content":"ILEventDef.FireMethod \nFireMethod \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ileventdef.html#CustomAttrsStored","title":"ILEventDef.CustomAttrsStored","content":"ILEventDef.CustomAttrsStored \nCustomAttrsStored \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ileventdef.html#Name","title":"ILEventDef.Name","content":"ILEventDef.Name \nName \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ileventdef.html#CustomAttrs","title":"ILEventDef.CustomAttrs","content":"ILEventDef.CustomAttrs \nCustomAttrs \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ileventdef.html#AddMethod","title":"ILEventDef.AddMethod","content":"ILEventDef.AddMethod \nAddMethod \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ileventdef.html#IsSpecialName","title":"ILEventDef.IsSpecialName","content":"ILEventDef.IsSpecialName \nIsSpecialName \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ileventdef.html#RemoveMethod","title":"ILEventDef.RemoveMethod","content":"ILEventDef.RemoveMethod \nRemoveMethod \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ileventdef.html#EventType","title":"ILEventDef.EventType","content":"ILEventDef.EventType \nEventType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ileventdef.html#Attributes","title":"ILEventDef.Attributes","content":"ILEventDef.Attributes \nAttributes \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ileventdef.html#MetadataIndex","title":"ILEventDef.MetadataIndex","content":"ILEventDef.MetadataIndex \nMetadataIndex \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ileventdef.html#OtherMethods","title":"ILEventDef.OtherMethods","content":"ILEventDef.OtherMethods \nOtherMethods \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ileventdef.html#IsRTSpecialName","title":"ILEventDef.IsRTSpecialName","content":"ILEventDef.IsRTSpecialName \nIsRTSpecialName \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ileventdefs.html","title":"ILEventDefs","content":"ILEventDefs \n Table of those events in a type definition.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilexportedtypeorforwarder.html","title":"ILExportedTypeOrForwarder","content":"ILExportedTypeOrForwarder \n these are only found in the ILExportedTypesAndForwarders table in the manifest \nILExportedTypeOrForwarder.CustomAttrs \nCustomAttrs \nILExportedTypeOrForwarder.IsForwarder \nIsForwarder \nILExportedTypeOrForwarder.Access \nAccess \nILExportedTypeOrForwarder.ScopeRef \nScopeRef \nILExportedTypeOrForwarder.Name \nName \nILExportedTypeOrForwarder.Attributes \nAttributes \nILExportedTypeOrForwarder.Nested \nNested \nILExportedTypeOrForwarder.CustomAttrsStored \nCustomAttrsStored \nILExportedTypeOrForwarder.MetadataIndex \nMetadataIndex","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilexportedtypeorforwarder.html#CustomAttrs","title":"ILExportedTypeOrForwarder.CustomAttrs","content":"ILExportedTypeOrForwarder.CustomAttrs \nCustomAttrs \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilexportedtypeorforwarder.html#IsForwarder","title":"ILExportedTypeOrForwarder.IsForwarder","content":"ILExportedTypeOrForwarder.IsForwarder \nIsForwarder \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilexportedtypeorforwarder.html#Access","title":"ILExportedTypeOrForwarder.Access","content":"ILExportedTypeOrForwarder.Access \nAccess \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilexportedtypeorforwarder.html#ScopeRef","title":"ILExportedTypeOrForwarder.ScopeRef","content":"ILExportedTypeOrForwarder.ScopeRef \nScopeRef \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilexportedtypeorforwarder.html#Name","title":"ILExportedTypeOrForwarder.Name","content":"ILExportedTypeOrForwarder.Name \nName \n [Namespace.]Name","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilexportedtypeorforwarder.html#Attributes","title":"ILExportedTypeOrForwarder.Attributes","content":"ILExportedTypeOrForwarder.Attributes \nAttributes \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilexportedtypeorforwarder.html#Nested","title":"ILExportedTypeOrForwarder.Nested","content":"ILExportedTypeOrForwarder.Nested \nNested \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilexportedtypeorforwarder.html#CustomAttrsStored","title":"ILExportedTypeOrForwarder.CustomAttrsStored","content":"ILExportedTypeOrForwarder.CustomAttrsStored \nCustomAttrsStored \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilexportedtypeorforwarder.html#MetadataIndex","title":"ILExportedTypeOrForwarder.MetadataIndex","content":"ILExportedTypeOrForwarder.MetadataIndex \nMetadataIndex \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilexportedtypesandforwarders.html","title":"ILExportedTypesAndForwarders","content":"ILExportedTypesAndForwarders \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfielddef.html","title":"ILFieldDef","content":"ILFieldDef \n Field definitions. \nILFieldDef.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nILFieldDef.IsInitOnly \nIsInitOnly \nILFieldDef.IsLiteral \nIsLiteral \nILFieldDef.CustomAttrsStored \nCustomAttrsStored \nILFieldDef.Data \nData \nILFieldDef.Name \nName \nILFieldDef.CustomAttrs \nCustomAttrs \nILFieldDef.LiteralValue \nLiteralValue \nILFieldDef.Offset \nOffset \nILFieldDef.IsStatic \nIsStatic \nILFieldDef.IsSpecialName \nIsSpecialName \nILFieldDef.Marshal \nMarshal \nILFieldDef.NotSerialized \nNotSerialized \nILFieldDef.Access \nAccess \nILFieldDef.Attributes \nAttributes \nILFieldDef.MetadataIndex \nMetadataIndex \nILFieldDef.FieldType \nFieldType","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfielddef.html#\u0060\u0060.ctor\u0060\u0060","title":"ILFieldDef.\u0060\u0060.ctor\u0060\u0060","content":"ILFieldDef.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n Functional creation of a value, immediate","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfielddef.html#IsInitOnly","title":"ILFieldDef.IsInitOnly","content":"ILFieldDef.IsInitOnly \nIsInitOnly \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfielddef.html#IsLiteral","title":"ILFieldDef.IsLiteral","content":"ILFieldDef.IsLiteral \nIsLiteral \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfielddef.html#CustomAttrsStored","title":"ILFieldDef.CustomAttrsStored","content":"ILFieldDef.CustomAttrsStored \nCustomAttrsStored \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfielddef.html#Data","title":"ILFieldDef.Data","content":"ILFieldDef.Data \nData \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfielddef.html#Name","title":"ILFieldDef.Name","content":"ILFieldDef.Name \nName \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfielddef.html#CustomAttrs","title":"ILFieldDef.CustomAttrs","content":"ILFieldDef.CustomAttrs \nCustomAttrs \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfielddef.html#LiteralValue","title":"ILFieldDef.LiteralValue","content":"ILFieldDef.LiteralValue \nLiteralValue \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfielddef.html#Offset","title":"ILFieldDef.Offset","content":"ILFieldDef.Offset \nOffset \n The explicit offset in bytes when explicit layout is used.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfielddef.html#IsStatic","title":"ILFieldDef.IsStatic","content":"ILFieldDef.IsStatic \nIsStatic \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfielddef.html#IsSpecialName","title":"ILFieldDef.IsSpecialName","content":"ILFieldDef.IsSpecialName \nIsSpecialName \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfielddef.html#Marshal","title":"ILFieldDef.Marshal","content":"ILFieldDef.Marshal \nMarshal \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfielddef.html#NotSerialized","title":"ILFieldDef.NotSerialized","content":"ILFieldDef.NotSerialized \nNotSerialized \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfielddef.html#Access","title":"ILFieldDef.Access","content":"ILFieldDef.Access \nAccess \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfielddef.html#Attributes","title":"ILFieldDef.Attributes","content":"ILFieldDef.Attributes \nAttributes \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfielddef.html#MetadataIndex","title":"ILFieldDef.MetadataIndex","content":"ILFieldDef.MetadataIndex \nMetadataIndex \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfielddef.html#FieldType","title":"ILFieldDef.FieldType","content":"ILFieldDef.FieldType \nFieldType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfielddefs.html","title":"ILFieldDefs","content":"ILFieldDefs \n Tables of fields.  Logically equivalent to a list of fields but the table is kept in\n a form to allow efficient looking up fields by name.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfieldinit.html","title":"ILFieldInit","content":"ILFieldInit \n Field Init \nILFieldInit.AsObject \nAsObject \nILFieldInit.IsSingle \nIsSingle \nILFieldInit.IsUInt64 \nIsUInt64 \nILFieldInit.IsNull \nIsNull \nILFieldInit.IsUInt32 \nIsUInt32 \nILFieldInit.IsUInt8 \nIsUInt8 \nILFieldInit.IsInt8 \nIsInt8 \nILFieldInit.IsDouble \nIsDouble \nILFieldInit.IsString \nIsString \nILFieldInit.IsInt32 \nIsInt32 \nILFieldInit.IsUInt16 \nIsUInt16 \nILFieldInit.IsInt64 \nIsInt64 \nILFieldInit.IsInt16 \nIsInt16 \nILFieldInit.IsChar \nIsChar \nILFieldInit.IsBool \nIsBool \nILFieldInit.String \nString \nILFieldInit.Bool \nBool \nILFieldInit.Char \nChar \nILFieldInit.Int8 \nInt8 \nILFieldInit.Int16 \nInt16 \nILFieldInit.Int32 \nInt32 \nILFieldInit.Int64 \nInt64 \nILFieldInit.UInt8 \nUInt8 \nILFieldInit.UInt16 \nUInt16 \nILFieldInit.UInt32 \nUInt32 \nILFieldInit.UInt64 \nUInt64 \nILFieldInit.Single \nSingle \nILFieldInit.Double \nDouble \nILFieldInit.Null \nNull","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfieldinit.html#AsObject","title":"ILFieldInit.AsObject","content":"ILFieldInit.AsObject \nAsObject \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfieldinit.html#IsSingle","title":"ILFieldInit.IsSingle","content":"ILFieldInit.IsSingle \nIsSingle \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfieldinit.html#IsUInt64","title":"ILFieldInit.IsUInt64","content":"ILFieldInit.IsUInt64 \nIsUInt64 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfieldinit.html#IsNull","title":"ILFieldInit.IsNull","content":"ILFieldInit.IsNull \nIsNull \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfieldinit.html#IsUInt32","title":"ILFieldInit.IsUInt32","content":"ILFieldInit.IsUInt32 \nIsUInt32 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfieldinit.html#IsUInt8","title":"ILFieldInit.IsUInt8","content":"ILFieldInit.IsUInt8 \nIsUInt8 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfieldinit.html#IsInt8","title":"ILFieldInit.IsInt8","content":"ILFieldInit.IsInt8 \nIsInt8 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfieldinit.html#IsDouble","title":"ILFieldInit.IsDouble","content":"ILFieldInit.IsDouble \nIsDouble \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfieldinit.html#IsString","title":"ILFieldInit.IsString","content":"ILFieldInit.IsString \nIsString \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfieldinit.html#IsInt32","title":"ILFieldInit.IsInt32","content":"ILFieldInit.IsInt32 \nIsInt32 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfieldinit.html#IsUInt16","title":"ILFieldInit.IsUInt16","content":"ILFieldInit.IsUInt16 \nIsUInt16 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfieldinit.html#IsInt64","title":"ILFieldInit.IsInt64","content":"ILFieldInit.IsInt64 \nIsInt64 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfieldinit.html#IsInt16","title":"ILFieldInit.IsInt16","content":"ILFieldInit.IsInt16 \nIsInt16 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfieldinit.html#IsChar","title":"ILFieldInit.IsChar","content":"ILFieldInit.IsChar \nIsChar \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfieldinit.html#IsBool","title":"ILFieldInit.IsBool","content":"ILFieldInit.IsBool \nIsBool \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfieldinit.html#String","title":"ILFieldInit.String","content":"ILFieldInit.String \nString \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfieldinit.html#Bool","title":"ILFieldInit.Bool","content":"ILFieldInit.Bool \nBool \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfieldinit.html#Char","title":"ILFieldInit.Char","content":"ILFieldInit.Char \nChar \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfieldinit.html#Int8","title":"ILFieldInit.Int8","content":"ILFieldInit.Int8 \nInt8 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfieldinit.html#Int16","title":"ILFieldInit.Int16","content":"ILFieldInit.Int16 \nInt16 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfieldinit.html#Int32","title":"ILFieldInit.Int32","content":"ILFieldInit.Int32 \nInt32 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfieldinit.html#Int64","title":"ILFieldInit.Int64","content":"ILFieldInit.Int64 \nInt64 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfieldinit.html#UInt8","title":"ILFieldInit.UInt8","content":"ILFieldInit.UInt8 \nUInt8 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfieldinit.html#UInt16","title":"ILFieldInit.UInt16","content":"ILFieldInit.UInt16 \nUInt16 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfieldinit.html#UInt32","title":"ILFieldInit.UInt32","content":"ILFieldInit.UInt32 \nUInt32 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfieldinit.html#UInt64","title":"ILFieldInit.UInt64","content":"ILFieldInit.UInt64 \nUInt64 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfieldinit.html#Single","title":"ILFieldInit.Single","content":"ILFieldInit.Single \nSingle \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfieldinit.html#Double","title":"ILFieldInit.Double","content":"ILFieldInit.Double \nDouble \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfieldinit.html#Null","title":"ILFieldInit.Null","content":"ILFieldInit.Null \nNull \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfieldref.html","title":"ILFieldRef","content":"ILFieldRef \n Formal identities of fields. \nILFieldRef.DeclaringTypeRef \nDeclaringTypeRef \nILFieldRef.Name \nName \nILFieldRef.Type \nType","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfieldref.html#DeclaringTypeRef","title":"ILFieldRef.DeclaringTypeRef","content":"ILFieldRef.DeclaringTypeRef \nDeclaringTypeRef \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfieldref.html#Name","title":"ILFieldRef.Name","content":"ILFieldRef.Name \nName \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfieldref.html#Type","title":"ILFieldRef.Type","content":"ILFieldRef.Type \nType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfieldspec.html","title":"ILFieldSpec","content":"ILFieldSpec \n Field specs.  The data given for a ldfld, stfld etc. instruction. \nILFieldSpec.FormalType \nFormalType \nILFieldSpec.Name \nName \nILFieldSpec.ActualType \nActualType \nILFieldSpec.DeclaringTypeRef \nDeclaringTypeRef \nILFieldSpec.FieldRef \nFieldRef \nILFieldSpec.DeclaringType \nDeclaringType","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfieldspec.html#FormalType","title":"ILFieldSpec.FormalType","content":"ILFieldSpec.FormalType \nFormalType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfieldspec.html#Name","title":"ILFieldSpec.Name","content":"ILFieldSpec.Name \nName \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfieldspec.html#ActualType","title":"ILFieldSpec.ActualType","content":"ILFieldSpec.ActualType \nActualType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfieldspec.html#DeclaringTypeRef","title":"ILFieldSpec.DeclaringTypeRef","content":"ILFieldSpec.DeclaringTypeRef \nDeclaringTypeRef \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfieldspec.html#FieldRef","title":"ILFieldSpec.FieldRef","content":"ILFieldSpec.FieldRef \nFieldRef \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfieldspec.html#DeclaringType","title":"ILFieldSpec.DeclaringType","content":"ILFieldSpec.DeclaringType \nDeclaringType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilgenericparameterdef.html","title":"ILGenericParameterDef","content":"ILGenericParameterDef \n Generic parameters.  Formal generic parameter declarations may include the bounds, if any, on the generic parameter. \nILGenericParameterDef.CustomAttrs \nCustomAttrs \nILGenericParameterDef.Name \nName \nILGenericParameterDef.Constraints \nConstraints \nILGenericParameterDef.Variance \nVariance \nILGenericParameterDef.HasReferenceTypeConstraint \nHasReferenceTypeConstraint \nILGenericParameterDef.HasNotNullableValueTypeConstraint \nHasNotNullableValueTypeConstraint \nILGenericParameterDef.HasDefaultConstructorConstraint \nHasDefaultConstructorConstraint \nILGenericParameterDef.HasAllowsRefStruct \nHasAllowsRefStruct \nILGenericParameterDef.CustomAttrsStored \nCustomAttrsStored \nILGenericParameterDef.MetadataIndex \nMetadataIndex","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilgenericparameterdef.html#CustomAttrs","title":"ILGenericParameterDef.CustomAttrs","content":"ILGenericParameterDef.CustomAttrs \nCustomAttrs \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilgenericparameterdef.html#Name","title":"ILGenericParameterDef.Name","content":"ILGenericParameterDef.Name \nName \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilgenericparameterdef.html#Constraints","title":"ILGenericParameterDef.Constraints","content":"ILGenericParameterDef.Constraints \nConstraints \n At most one is the parent type, the others are interface types.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilgenericparameterdef.html#Variance","title":"ILGenericParameterDef.Variance","content":"ILGenericParameterDef.Variance \nVariance \n Variance of type parameters, only applicable to generic parameters for generic interfaces and delegates.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilgenericparameterdef.html#HasReferenceTypeConstraint","title":"ILGenericParameterDef.HasReferenceTypeConstraint","content":"ILGenericParameterDef.HasReferenceTypeConstraint \nHasReferenceTypeConstraint \n Indicates the type argument must be a reference type.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilgenericparameterdef.html#HasNotNullableValueTypeConstraint","title":"ILGenericParameterDef.HasNotNullableValueTypeConstraint","content":"ILGenericParameterDef.HasNotNullableValueTypeConstraint \nHasNotNullableValueTypeConstraint \n Indicates the type argument must be a value type, but not Nullable.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilgenericparameterdef.html#HasDefaultConstructorConstraint","title":"ILGenericParameterDef.HasDefaultConstructorConstraint","content":"ILGenericParameterDef.HasDefaultConstructorConstraint \nHasDefaultConstructorConstraint \n Indicates the type argument must have a public nullary constructor.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilgenericparameterdef.html#HasAllowsRefStruct","title":"ILGenericParameterDef.HasAllowsRefStruct","content":"ILGenericParameterDef.HasAllowsRefStruct \nHasAllowsRefStruct \n Indicates the type parameter allows ref struct, i.e. an anti constraint.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilgenericparameterdef.html#CustomAttrsStored","title":"ILGenericParameterDef.CustomAttrsStored","content":"ILGenericParameterDef.CustomAttrsStored \nCustomAttrsStored \n Do not use this","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilgenericparameterdef.html#MetadataIndex","title":"ILGenericParameterDef.MetadataIndex","content":"ILGenericParameterDef.MetadataIndex \nMetadataIndex \n Do not use this","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilgenericvariance.html","title":"ILGenericVariance","content":"ILGenericVariance \n \nILGenericVariance.IsNonVariant \nIsNonVariant \nILGenericVariance.IsCoVariant \nIsCoVariant \nILGenericVariance.IsContraVariant \nIsContraVariant \nILGenericVariance.NonVariant \nNonVariant \nILGenericVariance.CoVariant \nCoVariant \nILGenericVariance.ContraVariant \nContraVariant","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilgenericvariance.html#IsNonVariant","title":"ILGenericVariance.IsNonVariant","content":"ILGenericVariance.IsNonVariant \nIsNonVariant \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilgenericvariance.html#IsCoVariant","title":"ILGenericVariance.IsCoVariant","content":"ILGenericVariance.IsCoVariant \nIsCoVariant \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilgenericvariance.html#IsContraVariant","title":"ILGenericVariance.IsContraVariant","content":"ILGenericVariance.IsContraVariant \nIsContraVariant \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilgenericvariance.html#NonVariant","title":"ILGenericVariance.NonVariant","content":"ILGenericVariance.NonVariant \nNonVariant \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilgenericvariance.html#CoVariant","title":"ILGenericVariance.CoVariant","content":"ILGenericVariance.CoVariant \nCoVariant \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilgenericvariance.html#ContraVariant","title":"ILGenericVariance.ContraVariant","content":"ILGenericVariance.ContraVariant \nContraVariant \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilguid.html","title":"ILGuid","content":"ILGuid \n Represents guids","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmemberaccess.html","title":"ILMemberAccess","content":"ILMemberAccess \n Member Access \nILMemberAccess.IsPublic \nIsPublic \nILMemberAccess.IsPrivate \nIsPrivate \nILMemberAccess.IsAssembly \nIsAssembly \nILMemberAccess.IsCompilerControlled \nIsCompilerControlled \nILMemberAccess.IsFamilyAndAssembly \nIsFamilyAndAssembly \nILMemberAccess.IsFamilyOrAssembly \nIsFamilyOrAssembly \nILMemberAccess.IsFamily \nIsFamily \nILMemberAccess.Assembly \nAssembly \nILMemberAccess.CompilerControlled \nCompilerControlled \nILMemberAccess.FamilyAndAssembly \nFamilyAndAssembly \nILMemberAccess.FamilyOrAssembly \nFamilyOrAssembly \nILMemberAccess.Family \nFamily \nILMemberAccess.Private \nPrivate \nILMemberAccess.Public \nPublic","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmemberaccess.html#IsPublic","title":"ILMemberAccess.IsPublic","content":"ILMemberAccess.IsPublic \nIsPublic \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmemberaccess.html#IsPrivate","title":"ILMemberAccess.IsPrivate","content":"ILMemberAccess.IsPrivate \nIsPrivate \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmemberaccess.html#IsAssembly","title":"ILMemberAccess.IsAssembly","content":"ILMemberAccess.IsAssembly \nIsAssembly \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmemberaccess.html#IsCompilerControlled","title":"ILMemberAccess.IsCompilerControlled","content":"ILMemberAccess.IsCompilerControlled \nIsCompilerControlled \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmemberaccess.html#IsFamilyAndAssembly","title":"ILMemberAccess.IsFamilyAndAssembly","content":"ILMemberAccess.IsFamilyAndAssembly \nIsFamilyAndAssembly \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmemberaccess.html#IsFamilyOrAssembly","title":"ILMemberAccess.IsFamilyOrAssembly","content":"ILMemberAccess.IsFamilyOrAssembly \nIsFamilyOrAssembly \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmemberaccess.html#IsFamily","title":"ILMemberAccess.IsFamily","content":"ILMemberAccess.IsFamily \nIsFamily \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmemberaccess.html#Assembly","title":"ILMemberAccess.Assembly","content":"ILMemberAccess.Assembly \nAssembly \n Assembly - Indicates that the method is accessible to any class of this assembly. (internal)","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmemberaccess.html#CompilerControlled","title":"ILMemberAccess.CompilerControlled","content":"ILMemberAccess.CompilerControlled \nCompilerControlled \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmemberaccess.html#FamilyAndAssembly","title":"ILMemberAccess.FamilyAndAssembly","content":"ILMemberAccess.FamilyAndAssembly \nFamilyAndAssembly \n FamilyAndAssembly - Indicates that the method is accessible to members of this type and its derived types that are in _this assembly only_. (private protected)","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmemberaccess.html#FamilyOrAssembly","title":"ILMemberAccess.FamilyOrAssembly","content":"ILMemberAccess.FamilyOrAssembly \nFamilyOrAssembly \n FamilyOrAssembly - Indicates that the method is accessible to derived classes anywhere, as well as to any class _in the assembly_. (protected internal)","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmemberaccess.html#Family","title":"ILMemberAccess.Family","content":"ILMemberAccess.Family \nFamily \n Family - Indicates that the method is accessible only to members of this class and its derived classes. (protected)","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmemberaccess.html#Private","title":"ILMemberAccess.Private","content":"ILMemberAccess.Private \nPrivate \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmemberaccess.html#Public","title":"ILMemberAccess.Public","content":"ILMemberAccess.Public \nPublic \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html","title":"ILMethodDef","content":"ILMethodDef \n IL Method definitions. \nILMethodDef.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nILMethodDef.GetCallingSignature \nGetCallingSignature \nILMethodDef.IsFinal \nIsFinal \nILMethodDef.IsClassInitializer \nIsClassInitializer \nILMethodDef.Code \nCode \nILMethodDef.Name \nName \nILMethodDef.IsIL \nIsIL \nILMethodDef.IsConstructor \nIsConstructor \nILMethodDef.IsInternalCall \nIsInternalCall \nILMethodDef.MaxStack \nMaxStack \nILMethodDef.IsNewSlot \nIsNewSlot \nILMethodDef.IsAggressiveInline \nIsAggressiveInline \nILMethodDef.Access \nAccess \nILMethodDef.Parameters \nParameters \nILMethodDef.Attributes \nAttributes \nILMethodDef.MethodBody \nMethodBody \nILMethodDef.Locals \nLocals \nILMethodDef.Body \nBody \nILMethodDef.SecurityDecls \nSecurityDecls \nILMethodDef.GenericParams \nGenericParams \nILMethodDef.IsEntryPoint \nIsEntryPoint \nILMethodDef.IsCheckAccessOnOverride \nIsCheckAccessOnOverride \nILMethodDef.IsVirtual \nIsVirtual \nILMethodDef.ParameterTypes \nParameterTypes \nILMethodDef.IsHideBySig \nIsHideBySig \nILMethodDef.IsManaged \nIsManaged \nILMethodDef.IsNonVirtualInstance \nIsNonVirtualInstance \nILMethodDef.IsZeroInit \nIsZeroInit \nILMethodDef.IsUnmanagedExport \nIsUnmanagedExport \nILMethodDef.IsForwardRef \nIsForwardRef \nILMethodDef.IsPreserveSig \nIsPreserveSig \nILMethodDef.IsNoInline \nIsNoInline \nILMethodDef.IsStatic \nIsStatic \nILMethodDef.CustomAttrsStored \nCustomAttrsStored \nILMethodDef.HasSecurity \nHasSecurity \nILMethodDef.IsMustRun \nIsMustRun \nILMethodDef.IsReqSecObj \nIsReqSecObj \nILMethodDef.CallingConv \nCallingConv \nILMethodDef.IsSpecialName \nIsSpecialName \nILMethodDef.IsAbstract \nIsAbstract \nILMethodDef.MetadataIndex \nMetadataIndex \nILMethodDef.Return \nReturn \nILMethodDef.CustomAttrs \nCustomAttrs \nILMethodDef.ImplAttributes \nImplAttributes \nILMethodDef.IsSynchronized \nIsSynchronized","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#\u0060\u0060.ctor\u0060\u0060","title":"ILMethodDef.\u0060\u0060.ctor\u0060\u0060","content":"ILMethodDef.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n Functional creation of a value, immediate","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#GetCallingSignature","title":"ILMethodDef.GetCallingSignature","content":"ILMethodDef.GetCallingSignature \nGetCallingSignature \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#IsFinal","title":"ILMethodDef.IsFinal","content":"ILMethodDef.IsFinal \nIsFinal \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#IsClassInitializer","title":"ILMethodDef.IsClassInitializer","content":"ILMethodDef.IsClassInitializer \nIsClassInitializer \n Indicates a .cctor method.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#Code","title":"ILMethodDef.Code","content":"ILMethodDef.Code \nCode \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#Name","title":"ILMethodDef.Name","content":"ILMethodDef.Name \nName \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#IsIL","title":"ILMethodDef.IsIL","content":"ILMethodDef.IsIL \nIsIL \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#IsConstructor","title":"ILMethodDef.IsConstructor","content":"ILMethodDef.IsConstructor \nIsConstructor \n Indicates a .ctor method.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#IsInternalCall","title":"ILMethodDef.IsInternalCall","content":"ILMethodDef.IsInternalCall \nIsInternalCall \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#MaxStack","title":"ILMethodDef.MaxStack","content":"ILMethodDef.MaxStack \nMaxStack \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#IsNewSlot","title":"ILMethodDef.IsNewSlot","content":"ILMethodDef.IsNewSlot \nIsNewSlot \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#IsAggressiveInline","title":"ILMethodDef.IsAggressiveInline","content":"ILMethodDef.IsAggressiveInline \nIsAggressiveInline \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#Access","title":"ILMethodDef.Access","content":"ILMethodDef.Access \nAccess \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#Parameters","title":"ILMethodDef.Parameters","content":"ILMethodDef.Parameters \nParameters \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#Attributes","title":"ILMethodDef.Attributes","content":"ILMethodDef.Attributes \nAttributes \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#MethodBody","title":"ILMethodDef.MethodBody","content":"ILMethodDef.MethodBody \nMethodBody \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#Locals","title":"ILMethodDef.Locals","content":"ILMethodDef.Locals \nLocals \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#Body","title":"ILMethodDef.Body","content":"ILMethodDef.Body \nBody \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#SecurityDecls","title":"ILMethodDef.SecurityDecls","content":"ILMethodDef.SecurityDecls \nSecurityDecls \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#GenericParams","title":"ILMethodDef.GenericParams","content":"ILMethodDef.GenericParams \nGenericParams \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#IsEntryPoint","title":"ILMethodDef.IsEntryPoint","content":"ILMethodDef.IsEntryPoint \nIsEntryPoint \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#IsCheckAccessOnOverride","title":"ILMethodDef.IsCheckAccessOnOverride","content":"ILMethodDef.IsCheckAccessOnOverride \nIsCheckAccessOnOverride \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#IsVirtual","title":"ILMethodDef.IsVirtual","content":"ILMethodDef.IsVirtual \nIsVirtual \n Indicates an instance methods that is virtual or abstract or implements an interface slot.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#ParameterTypes","title":"ILMethodDef.ParameterTypes","content":"ILMethodDef.ParameterTypes \nParameterTypes \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#IsHideBySig","title":"ILMethodDef.IsHideBySig","content":"ILMethodDef.IsHideBySig \nIsHideBySig \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#IsManaged","title":"ILMethodDef.IsManaged","content":"ILMethodDef.IsManaged \nIsManaged \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#IsNonVirtualInstance","title":"ILMethodDef.IsNonVirtualInstance","content":"ILMethodDef.IsNonVirtualInstance \nIsNonVirtualInstance \n Indicates this is an instance methods that is not virtual.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#IsZeroInit","title":"ILMethodDef.IsZeroInit","content":"ILMethodDef.IsZeroInit \nIsZeroInit \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#IsUnmanagedExport","title":"ILMethodDef.IsUnmanagedExport","content":"ILMethodDef.IsUnmanagedExport \nIsUnmanagedExport \n The method is exported to unmanaged code using COM interop.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#IsForwardRef","title":"ILMethodDef.IsForwardRef","content":"ILMethodDef.IsForwardRef \nIsForwardRef \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#IsPreserveSig","title":"ILMethodDef.IsPreserveSig","content":"ILMethodDef.IsPreserveSig \nIsPreserveSig \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#IsNoInline","title":"ILMethodDef.IsNoInline","content":"ILMethodDef.IsNoInline \nIsNoInline \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#IsStatic","title":"ILMethodDef.IsStatic","content":"ILMethodDef.IsStatic \nIsStatic \n Indicates a static method.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#CustomAttrsStored","title":"ILMethodDef.CustomAttrsStored","content":"ILMethodDef.CustomAttrsStored \nCustomAttrsStored \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#HasSecurity","title":"ILMethodDef.HasSecurity","content":"ILMethodDef.HasSecurity \nHasSecurity \n Some methods are marked \u0022HasSecurity\u0022 even if there are no permissions attached, e.g. if they use SuppressUnmanagedCodeSecurityAttribute","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#IsMustRun","title":"ILMethodDef.IsMustRun","content":"ILMethodDef.IsMustRun \nIsMustRun \n SafeHandle finalizer must be run.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#IsReqSecObj","title":"ILMethodDef.IsReqSecObj","content":"ILMethodDef.IsReqSecObj \nIsReqSecObj \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#CallingConv","title":"ILMethodDef.CallingConv","content":"ILMethodDef.CallingConv \nCallingConv \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#IsSpecialName","title":"ILMethodDef.IsSpecialName","content":"ILMethodDef.IsSpecialName \nIsSpecialName \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#IsAbstract","title":"ILMethodDef.IsAbstract","content":"ILMethodDef.IsAbstract \nIsAbstract \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#MetadataIndex","title":"ILMethodDef.MetadataIndex","content":"ILMethodDef.MetadataIndex \nMetadataIndex \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#Return","title":"ILMethodDef.Return","content":"ILMethodDef.Return \nReturn \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#CustomAttrs","title":"ILMethodDef.CustomAttrs","content":"ILMethodDef.CustomAttrs \nCustomAttrs \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#ImplAttributes","title":"ILMethodDef.ImplAttributes","content":"ILMethodDef.ImplAttributes \nImplAttributes \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#IsSynchronized","title":"ILMethodDef.IsSynchronized","content":"ILMethodDef.IsSynchronized \nIsSynchronized \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddefs.html","title":"ILMethodDefs","content":"ILMethodDefs \n Tables of methods.  Logically equivalent to a list of methods but\n the table is kept in a form optimized for looking up methods by\n name and arity. \nILMethodDefs.AsArray \nAsArray \nILMethodDefs.AsList \nAsList \nILMethodDefs.FindByName \nFindByName \nILMethodDefs.TryFindInstanceByNameAndCallingSignature \nTryFindInstanceByNameAndCallingSignature","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddefs.html#AsArray","title":"ILMethodDefs.AsArray","content":"ILMethodDefs.AsArray \nAsArray \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddefs.html#AsList","title":"ILMethodDefs.AsList","content":"ILMethodDefs.AsList \nAsList \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddefs.html#FindByName","title":"ILMethodDefs.FindByName","content":"ILMethodDefs.FindByName \nFindByName \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddefs.html#TryFindInstanceByNameAndCallingSignature","title":"ILMethodDefs.TryFindInstanceByNameAndCallingSignature","content":"ILMethodDefs.TryFindInstanceByNameAndCallingSignature \nTryFindInstanceByNameAndCallingSignature \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethodimpldef.html","title":"ILMethodImplDef","content":"ILMethodImplDef \n Method Impls \nILMethodImplDef.Overrides \nOverrides \nILMethodImplDef.OverrideBy \nOverrideBy","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethodimpldef.html#Overrides","title":"ILMethodImplDef.Overrides","content":"ILMethodImplDef.Overrides \nOverrides \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethodimpldef.html#OverrideBy","title":"ILMethodImplDef.OverrideBy","content":"ILMethodImplDef.OverrideBy \nOverrideBy \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethodimpldefs.html","title":"ILMethodImplDefs","content":"ILMethodImplDefs \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethodref.html","title":"ILMethodRef","content":"ILMethodRef \n Formal identities of methods. \nILMethodRef.GetCallingSignature \nGetCallingSignature \nILMethodRef.ArgCount \nArgCount \nILMethodRef.GenericArity \nGenericArity \nILMethodRef.ReturnType \nReturnType \nILMethodRef.Name \nName \nILMethodRef.CallingConv \nCallingConv \nILMethodRef.ArgTypes \nArgTypes \nILMethodRef.DeclaringTypeRef \nDeclaringTypeRef \nILMethodRef.Create \nCreate","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethodref.html#GetCallingSignature","title":"ILMethodRef.GetCallingSignature","content":"ILMethodRef.GetCallingSignature \nGetCallingSignature \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethodref.html#ArgCount","title":"ILMethodRef.ArgCount","content":"ILMethodRef.ArgCount \nArgCount \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethodref.html#GenericArity","title":"ILMethodRef.GenericArity","content":"ILMethodRef.GenericArity \nGenericArity \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethodref.html#ReturnType","title":"ILMethodRef.ReturnType","content":"ILMethodRef.ReturnType \nReturnType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethodref.html#Name","title":"ILMethodRef.Name","content":"ILMethodRef.Name \nName \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethodref.html#CallingConv","title":"ILMethodRef.CallingConv","content":"ILMethodRef.CallingConv \nCallingConv \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethodref.html#ArgTypes","title":"ILMethodRef.ArgTypes","content":"ILMethodRef.ArgTypes \nArgTypes \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethodref.html#DeclaringTypeRef","title":"ILMethodRef.DeclaringTypeRef","content":"ILMethodRef.DeclaringTypeRef \nDeclaringTypeRef \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethodref.html#Create","title":"ILMethodRef.Create","content":"ILMethodRef.Create \nCreate \n Functional creation","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethodspec.html","title":"ILMethodSpec","content":"ILMethodSpec \n The information at the callsite of a method \nILMethodSpec.GenericArity \nGenericArity \nILMethodSpec.MethodRef \nMethodRef \nILMethodSpec.Name \nName \nILMethodSpec.CallingConv \nCallingConv \nILMethodSpec.GenericArgs \nGenericArgs \nILMethodSpec.FormalReturnType \nFormalReturnType \nILMethodSpec.FormalArgTypes \nFormalArgTypes \nILMethodSpec.DeclaringType \nDeclaringType \nILMethodSpec.Create \nCreate","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethodspec.html#GenericArity","title":"ILMethodSpec.GenericArity","content":"ILMethodSpec.GenericArity \nGenericArity \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethodspec.html#MethodRef","title":"ILMethodSpec.MethodRef","content":"ILMethodSpec.MethodRef \nMethodRef \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethodspec.html#Name","title":"ILMethodSpec.Name","content":"ILMethodSpec.Name \nName \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethodspec.html#CallingConv","title":"ILMethodSpec.CallingConv","content":"ILMethodSpec.CallingConv \nCallingConv \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethodspec.html#GenericArgs","title":"ILMethodSpec.GenericArgs","content":"ILMethodSpec.GenericArgs \nGenericArgs \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethodspec.html#FormalReturnType","title":"ILMethodSpec.FormalReturnType","content":"ILMethodSpec.FormalReturnType \nFormalReturnType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethodspec.html#FormalArgTypes","title":"ILMethodSpec.FormalArgTypes","content":"ILMethodSpec.FormalArgTypes \nFormalArgTypes \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethodspec.html#DeclaringType","title":"ILMethodSpec.DeclaringType","content":"ILMethodSpec.DeclaringType \nDeclaringType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethodspec.html#Create","title":"ILMethodSpec.Create","content":"ILMethodSpec.Create \nCreate \n Functional creation","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmoduledef.html","title":"ILModuleDef","content":"ILModuleDef \n One module in the \u0022current\u0022 assembly, either a main-module or\n an auxiliary module.  The main module will have a manifest.\n\n An assembly is built by joining together a \u0022main\u0022 module plus\n several auxiliary modules. \nILModuleDef.ManifestOfAssembly \nManifestOfAssembly \nILModuleDef.CustomAttrs \nCustomAttrs \nILModuleDef.HasManifest \nHasManifest \nILModuleDef.Manifest \nManifest \nILModuleDef.Name \nName \nILModuleDef.TypeDefs \nTypeDefs \nILModuleDef.SubsystemVersion \nSubsystemVersion \nILModuleDef.UseHighEntropyVA \nUseHighEntropyVA \nILModuleDef.SubSystemFlags \nSubSystemFlags \nILModuleDef.IsDLL \nIsDLL \nILModuleDef.IsILOnly \nIsILOnly \nILModuleDef.Platform \nPlatform \nILModuleDef.StackReserveSize \nStackReserveSize \nILModuleDef.Is32Bit \nIs32Bit \nILModuleDef.Is32BitPreferred \nIs32BitPreferred \nILModuleDef.Is64Bit \nIs64Bit \nILModuleDef.VirtualAlignment \nVirtualAlignment \nILModuleDef.PhysicalAlignment \nPhysicalAlignment \nILModuleDef.ImageBase \nImageBase \nILModuleDef.MetadataVersion \nMetadataVersion \nILModuleDef.Resources \nResources \nILModuleDef.NativeResources \nNativeResources \nILModuleDef.CustomAttrsStored \nCustomAttrsStored \nILModuleDef.MetadataIndex \nMetadataIndex","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmoduledef.html#ManifestOfAssembly","title":"ILModuleDef.ManifestOfAssembly","content":"ILModuleDef.ManifestOfAssembly \nManifestOfAssembly \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmoduledef.html#CustomAttrs","title":"ILModuleDef.CustomAttrs","content":"ILModuleDef.CustomAttrs \nCustomAttrs \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmoduledef.html#HasManifest","title":"ILModuleDef.HasManifest","content":"ILModuleDef.HasManifest \nHasManifest \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmoduledef.html#Manifest","title":"ILModuleDef.Manifest","content":"ILModuleDef.Manifest \nManifest \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmoduledef.html#Name","title":"ILModuleDef.Name","content":"ILModuleDef.Name \nName \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmoduledef.html#TypeDefs","title":"ILModuleDef.TypeDefs","content":"ILModuleDef.TypeDefs \nTypeDefs \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmoduledef.html#SubsystemVersion","title":"ILModuleDef.SubsystemVersion","content":"ILModuleDef.SubsystemVersion \nSubsystemVersion \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmoduledef.html#UseHighEntropyVA","title":"ILModuleDef.UseHighEntropyVA","content":"ILModuleDef.UseHighEntropyVA \nUseHighEntropyVA \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmoduledef.html#SubSystemFlags","title":"ILModuleDef.SubSystemFlags","content":"ILModuleDef.SubSystemFlags \nSubSystemFlags \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmoduledef.html#IsDLL","title":"ILModuleDef.IsDLL","content":"ILModuleDef.IsDLL \nIsDLL \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmoduledef.html#IsILOnly","title":"ILModuleDef.IsILOnly","content":"ILModuleDef.IsILOnly \nIsILOnly \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmoduledef.html#Platform","title":"ILModuleDef.Platform","content":"ILModuleDef.Platform \nPlatform \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmoduledef.html#StackReserveSize","title":"ILModuleDef.StackReserveSize","content":"ILModuleDef.StackReserveSize \nStackReserveSize \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmoduledef.html#Is32Bit","title":"ILModuleDef.Is32Bit","content":"ILModuleDef.Is32Bit \nIs32Bit \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmoduledef.html#Is32BitPreferred","title":"ILModuleDef.Is32BitPreferred","content":"ILModuleDef.Is32BitPreferred \nIs32BitPreferred \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmoduledef.html#Is64Bit","title":"ILModuleDef.Is64Bit","content":"ILModuleDef.Is64Bit \nIs64Bit \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmoduledef.html#VirtualAlignment","title":"ILModuleDef.VirtualAlignment","content":"ILModuleDef.VirtualAlignment \nVirtualAlignment \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmoduledef.html#PhysicalAlignment","title":"ILModuleDef.PhysicalAlignment","content":"ILModuleDef.PhysicalAlignment \nPhysicalAlignment \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmoduledef.html#ImageBase","title":"ILModuleDef.ImageBase","content":"ILModuleDef.ImageBase \nImageBase \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmoduledef.html#MetadataVersion","title":"ILModuleDef.MetadataVersion","content":"ILModuleDef.MetadataVersion \nMetadataVersion \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmoduledef.html#Resources","title":"ILModuleDef.Resources","content":"ILModuleDef.Resources \nResources \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmoduledef.html#NativeResources","title":"ILModuleDef.NativeResources","content":"ILModuleDef.NativeResources \nNativeResources \n e.g. win86 resources, as the exact contents of a .res or .obj file. Must be unlinked manually.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmoduledef.html#CustomAttrsStored","title":"ILModuleDef.CustomAttrsStored","content":"ILModuleDef.CustomAttrsStored \nCustomAttrsStored \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmoduledef.html#MetadataIndex","title":"ILModuleDef.MetadataIndex","content":"ILModuleDef.MetadataIndex \nMetadataIndex \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmoduleref.html","title":"ILModuleRef","content":"ILModuleRef \n \nILModuleRef.Name \nName \nILModuleRef.Hash \nHash \nILModuleRef.HasMetadata \nHasMetadata \nILModuleRef.Create \nCreate","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmoduleref.html#Name","title":"ILModuleRef.Name","content":"ILModuleRef.Name \nName \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmoduleref.html#Hash","title":"ILModuleRef.Hash","content":"ILModuleRef.Hash \nHash \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmoduleref.html#HasMetadata","title":"ILModuleRef.HasMetadata","content":"ILModuleRef.HasMetadata \nHasMetadata \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmoduleref.html#Create","title":"ILModuleRef.Create","content":"ILModuleRef.Create \nCreate \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativeresource.html","title":"ILNativeResource","content":"ILNativeResource \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html","title":"ILNativeType","content":"ILNativeType \n Native Types, for marshalling to the native C interface.\n These are taken directly from the ILASM syntax.\n Most of these are listed in the CLI ECMA-335 Spec (Partition II, 7.4). \nILNativeType.IsANSIBSTR \nIsANSIBSTR \nILNativeType.IsBool \nIsBool \nILNativeType.IsInt64 \nIsInt64 \nILNativeType.IsSingle \nIsSingle \nILNativeType.IsLPTSTR \nIsLPTSTR \nILNativeType.IsInt \nIsInt \nILNativeType.IsUInt32 \nIsUInt32 \nILNativeType.IsDouble \nIsDouble \nILNativeType.IsBSTR \nIsBSTR \nILNativeType.IsLPSTRUCT \nIsLPSTRUCT \nILNativeType.IsVoid \nIsVoid \nILNativeType.IsInt32 \nIsInt32 \nILNativeType.IsInt16 \nIsInt16 \nILNativeType.IsAsAny \nIsAsAny \nILNativeType.IsIDispatch \nIsIDispatch \nILNativeType.IsInt8 \nIsInt8 \nILNativeType.IsLPUTF8STR \nIsLPUTF8STR \nILNativeType.IsStruct \nIsStruct \nILNativeType.IsByValStr \nIsByValStr \nILNativeType.IsInterface \nIsInterface \nILNativeType.IsByte \nIsByte \nILNativeType.IsError \nIsError \nILNativeType.IsCustom \nIsCustom \nILNativeType.IsIUnknown \nIsIUnknown \nILNativeType.IsVariantBool \nIsVariantBool \nILNativeType.IsMethod \nIsMethod \nILNativeType.IsLPSTR \nIsLPSTR \nILNativeType.IsFixedSysString \nIsFixedSysString \nILNativeType.IsCurrency \nIsCurrency \nILNativeType.IsArray \nIsArray \nILNativeType.IsSafeArray \nIsSafeArray \nILNativeType.IsUInt \nIsUInt \nILNativeType.IsLPWSTR \nIsLPWSTR \nILNativeType.IsEmpty \nIsEmpty \nILNativeType.IsUInt64 \nIsUInt64 \nILNativeType.IsTBSTR \nIsTBSTR \nILNativeType.IsFixedArray \nIsFixedArray \nILNativeType.IsUInt16 \nIsUInt16 \nILNativeType.Empty \nEmpty \nILNativeType.Custom \nCustom \nILNativeType.FixedSysString \nFixedSysString \nILNativeType.FixedArray \nFixedArray \nILNativeType.Currency \nCurrency \nILNativeType.LPSTR \nLPSTR \nILNativeType.LPWSTR \nLPWSTR \nILNativeType.LPTSTR \nLPTSTR \nILNativeType.LPUTF8STR \nLPUTF8STR \nILNativeType.ByValStr \nByValStr \nILNativeType.TBSTR \nTBSTR \nILNativeType.LPSTRUCT \nLPSTRUCT \nILNativeType.Struct \nStruct \nILNativeType.Void \nVoid \nILNativeType.Bool \nBool \nILNativeType.Int8 \nInt8 \nILNativeType.Int16 \nInt16 \nILNativeType.Int32 \nInt32 \nILNativeType.Int64 \nInt64 \nILNativeType.Single \nSingle \nILNativeType.Double \nDouble \nILNativeType.Byte \nByte \nILNativeType.UInt16 \nUInt16 \nILNativeType.UInt32 \nUInt32 \nILNativeType.UInt64 \nUInt64 \nILNativeType.Array \nArray \nILNativeType.Int \nInt \nILNativeType.UInt \nUInt \nILNativeType.Method \nMethod \nILNativeType.AsAny \nAsAny \nILNativeType.BSTR \nBSTR \nILNativeType.IUnknown \nIUnknown \nILNativeType.IDispatch \nIDispatch \nILNativeType.Interface \nInterface \nILNativeType.Error \nError \nILNativeType.SafeArray \nSafeArray \nILNativeType.ANSIBSTR \nANSIBSTR \nILNativeType.VariantBool \nVariantBool","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#IsANSIBSTR","title":"ILNativeType.IsANSIBSTR","content":"ILNativeType.IsANSIBSTR \nIsANSIBSTR \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#IsBool","title":"ILNativeType.IsBool","content":"ILNativeType.IsBool \nIsBool \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#IsInt64","title":"ILNativeType.IsInt64","content":"ILNativeType.IsInt64 \nIsInt64 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#IsSingle","title":"ILNativeType.IsSingle","content":"ILNativeType.IsSingle \nIsSingle \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#IsLPTSTR","title":"ILNativeType.IsLPTSTR","content":"ILNativeType.IsLPTSTR \nIsLPTSTR \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#IsInt","title":"ILNativeType.IsInt","content":"ILNativeType.IsInt \nIsInt \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#IsUInt32","title":"ILNativeType.IsUInt32","content":"ILNativeType.IsUInt32 \nIsUInt32 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#IsDouble","title":"ILNativeType.IsDouble","content":"ILNativeType.IsDouble \nIsDouble \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#IsBSTR","title":"ILNativeType.IsBSTR","content":"ILNativeType.IsBSTR \nIsBSTR \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#IsLPSTRUCT","title":"ILNativeType.IsLPSTRUCT","content":"ILNativeType.IsLPSTRUCT \nIsLPSTRUCT \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#IsVoid","title":"ILNativeType.IsVoid","content":"ILNativeType.IsVoid \nIsVoid \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#IsInt32","title":"ILNativeType.IsInt32","content":"ILNativeType.IsInt32 \nIsInt32 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#IsInt16","title":"ILNativeType.IsInt16","content":"ILNativeType.IsInt16 \nIsInt16 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#IsAsAny","title":"ILNativeType.IsAsAny","content":"ILNativeType.IsAsAny \nIsAsAny \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#IsIDispatch","title":"ILNativeType.IsIDispatch","content":"ILNativeType.IsIDispatch \nIsIDispatch \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#IsInt8","title":"ILNativeType.IsInt8","content":"ILNativeType.IsInt8 \nIsInt8 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#IsLPUTF8STR","title":"ILNativeType.IsLPUTF8STR","content":"ILNativeType.IsLPUTF8STR \nIsLPUTF8STR \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#IsStruct","title":"ILNativeType.IsStruct","content":"ILNativeType.IsStruct \nIsStruct \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#IsByValStr","title":"ILNativeType.IsByValStr","content":"ILNativeType.IsByValStr \nIsByValStr \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#IsInterface","title":"ILNativeType.IsInterface","content":"ILNativeType.IsInterface \nIsInterface \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#IsByte","title":"ILNativeType.IsByte","content":"ILNativeType.IsByte \nIsByte \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#IsError","title":"ILNativeType.IsError","content":"ILNativeType.IsError \nIsError \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#IsCustom","title":"ILNativeType.IsCustom","content":"ILNativeType.IsCustom \nIsCustom \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#IsIUnknown","title":"ILNativeType.IsIUnknown","content":"ILNativeType.IsIUnknown \nIsIUnknown \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#IsVariantBool","title":"ILNativeType.IsVariantBool","content":"ILNativeType.IsVariantBool \nIsVariantBool \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#IsMethod","title":"ILNativeType.IsMethod","content":"ILNativeType.IsMethod \nIsMethod \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#IsLPSTR","title":"ILNativeType.IsLPSTR","content":"ILNativeType.IsLPSTR \nIsLPSTR \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#IsFixedSysString","title":"ILNativeType.IsFixedSysString","content":"ILNativeType.IsFixedSysString \nIsFixedSysString \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#IsCurrency","title":"ILNativeType.IsCurrency","content":"ILNativeType.IsCurrency \nIsCurrency \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#IsArray","title":"ILNativeType.IsArray","content":"ILNativeType.IsArray \nIsArray \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#IsSafeArray","title":"ILNativeType.IsSafeArray","content":"ILNativeType.IsSafeArray \nIsSafeArray \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#IsUInt","title":"ILNativeType.IsUInt","content":"ILNativeType.IsUInt \nIsUInt \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#IsLPWSTR","title":"ILNativeType.IsLPWSTR","content":"ILNativeType.IsLPWSTR \nIsLPWSTR \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#IsEmpty","title":"ILNativeType.IsEmpty","content":"ILNativeType.IsEmpty \nIsEmpty \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#IsUInt64","title":"ILNativeType.IsUInt64","content":"ILNativeType.IsUInt64 \nIsUInt64 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#IsTBSTR","title":"ILNativeType.IsTBSTR","content":"ILNativeType.IsTBSTR \nIsTBSTR \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#IsFixedArray","title":"ILNativeType.IsFixedArray","content":"ILNativeType.IsFixedArray \nIsFixedArray \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#IsUInt16","title":"ILNativeType.IsUInt16","content":"ILNativeType.IsUInt16 \nIsUInt16 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#Empty","title":"ILNativeType.Empty","content":"ILNativeType.Empty \nEmpty \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#Custom","title":"ILNativeType.Custom","content":"ILNativeType.Custom \nCustom \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#FixedSysString","title":"ILNativeType.FixedSysString","content":"ILNativeType.FixedSysString \nFixedSysString \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#FixedArray","title":"ILNativeType.FixedArray","content":"ILNativeType.FixedArray \nFixedArray \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#Currency","title":"ILNativeType.Currency","content":"ILNativeType.Currency \nCurrency \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#LPSTR","title":"ILNativeType.LPSTR","content":"ILNativeType.LPSTR \nLPSTR \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#LPWSTR","title":"ILNativeType.LPWSTR","content":"ILNativeType.LPWSTR \nLPWSTR \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#LPTSTR","title":"ILNativeType.LPTSTR","content":"ILNativeType.LPTSTR \nLPTSTR \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#LPUTF8STR","title":"ILNativeType.LPUTF8STR","content":"ILNativeType.LPUTF8STR \nLPUTF8STR \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#ByValStr","title":"ILNativeType.ByValStr","content":"ILNativeType.ByValStr \nByValStr \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#TBSTR","title":"ILNativeType.TBSTR","content":"ILNativeType.TBSTR \nTBSTR \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#LPSTRUCT","title":"ILNativeType.LPSTRUCT","content":"ILNativeType.LPSTRUCT \nLPSTRUCT \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#Struct","title":"ILNativeType.Struct","content":"ILNativeType.Struct \nStruct \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#Void","title":"ILNativeType.Void","content":"ILNativeType.Void \nVoid \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#Bool","title":"ILNativeType.Bool","content":"ILNativeType.Bool \nBool \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#Int8","title":"ILNativeType.Int8","content":"ILNativeType.Int8 \nInt8 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#Int16","title":"ILNativeType.Int16","content":"ILNativeType.Int16 \nInt16 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#Int32","title":"ILNativeType.Int32","content":"ILNativeType.Int32 \nInt32 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#Int64","title":"ILNativeType.Int64","content":"ILNativeType.Int64 \nInt64 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#Single","title":"ILNativeType.Single","content":"ILNativeType.Single \nSingle \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#Double","title":"ILNativeType.Double","content":"ILNativeType.Double \nDouble \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#Byte","title":"ILNativeType.Byte","content":"ILNativeType.Byte \nByte \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#UInt16","title":"ILNativeType.UInt16","content":"ILNativeType.UInt16 \nUInt16 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#UInt32","title":"ILNativeType.UInt32","content":"ILNativeType.UInt32 \nUInt32 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#UInt64","title":"ILNativeType.UInt64","content":"ILNativeType.UInt64 \nUInt64 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#Array","title":"ILNativeType.Array","content":"ILNativeType.Array \nArray \n  optional idx of parameter giving size plus optional additive i.e. num elems","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#Int","title":"ILNativeType.Int","content":"ILNativeType.Int \nInt \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#UInt","title":"ILNativeType.UInt","content":"ILNativeType.UInt \nUInt \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#Method","title":"ILNativeType.Method","content":"ILNativeType.Method \nMethod \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#AsAny","title":"ILNativeType.AsAny","content":"ILNativeType.AsAny \nAsAny \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#BSTR","title":"ILNativeType.BSTR","content":"ILNativeType.BSTR \nBSTR \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#IUnknown","title":"ILNativeType.IUnknown","content":"ILNativeType.IUnknown \nIUnknown \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#IDispatch","title":"ILNativeType.IDispatch","content":"ILNativeType.IDispatch \nIDispatch \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#Interface","title":"ILNativeType.Interface","content":"ILNativeType.Interface \nInterface \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#Error","title":"ILNativeType.Error","content":"ILNativeType.Error \nError \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#SafeArray","title":"ILNativeType.SafeArray","content":"ILNativeType.SafeArray \nSafeArray \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#ANSIBSTR","title":"ILNativeType.ANSIBSTR","content":"ILNativeType.ANSIBSTR \nANSIBSTR \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#VariantBool","title":"ILNativeType.VariantBool","content":"ILNativeType.VariantBool \nVariantBool \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnestedexportedtype.html","title":"ILNestedExportedType","content":"ILNestedExportedType \n \u0022Classes Elsewhere\u0022 - classes in auxiliary modules.\n\n Manifests include declarations for all the classes in an\n assembly, regardless of which module they are in.\n\n The \u0022.class extern\u0022 construct describes so-called exported types --\n these are public classes defined in the auxiliary modules of this assembly,\n i.e. modules other than the manifest-carrying module.\n\n For example, if you have a two-module\n assembly (A.DLL and B.DLL), and the manifest resides in the A.DLL,\n then in the manifest all the public classes declared in B.DLL should\n be defined as exported types, i.e., as \u0022.class extern\u0022. The public classes\n defined in A.DLL should not be defined as \u0022.class extern\u0022 -- they are\n already available in the manifest-carrying module. The union of all\n public classes defined in the manifest-carrying module and all\n exported types defined there is the set of all classes exposed by\n this assembly. Thus, by analysing the metadata of the manifest-carrying\n module of an assembly, you can identify all the classes exposed by\n this assembly, and where to find them.\n\n Nested classes found in external modules should also be located in\n this table, suitably nested inside another \u0022ILExportedTypeOrForwarder\u0022\n definition.\n these are only found in the \u0022Nested\u0022 field of ILExportedTypeOrForwarder objects \nILNestedExportedType.CustomAttrs \nCustomAttrs \nILNestedExportedType.Name \nName \nILNestedExportedType.Access \nAccess \nILNestedExportedType.Nested \nNested \nILNestedExportedType.CustomAttrsStored \nCustomAttrsStored \nILNestedExportedType.MetadataIndex \nMetadataIndex","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnestedexportedtype.html#CustomAttrs","title":"ILNestedExportedType.CustomAttrs","content":"ILNestedExportedType.CustomAttrs \nCustomAttrs \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnestedexportedtype.html#Name","title":"ILNestedExportedType.Name","content":"ILNestedExportedType.Name \nName \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnestedexportedtype.html#Access","title":"ILNestedExportedType.Access","content":"ILNestedExportedType.Access \nAccess \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnestedexportedtype.html#Nested","title":"ILNestedExportedType.Nested","content":"ILNestedExportedType.Nested \nNested \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnestedexportedtype.html#CustomAttrsStored","title":"ILNestedExportedType.CustomAttrsStored","content":"ILNestedExportedType.CustomAttrsStored \nCustomAttrsStored \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnestedexportedtype.html#MetadataIndex","title":"ILNestedExportedType.MetadataIndex","content":"ILNestedExportedType.MetadataIndex \nMetadataIndex \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnestedexportedtypes.html","title":"ILNestedExportedTypes","content":"ILNestedExportedTypes \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilparameter.html","title":"ILParameter","content":"ILParameter \n Method parameters and return values. \nILParameter.CustomAttrs \nCustomAttrs \nILParameter.Name \nName \nILParameter.Type \nType \nILParameter.Default \nDefault \nILParameter.Marshal \nMarshal \nILParameter.IsIn \nIsIn \nILParameter.IsOut \nIsOut \nILParameter.IsOptional \nIsOptional \nILParameter.CustomAttrsStored \nCustomAttrsStored \nILParameter.MetadataIndex \nMetadataIndex","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilparameter.html#CustomAttrs","title":"ILParameter.CustomAttrs","content":"ILParameter.CustomAttrs \nCustomAttrs \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilparameter.html#Name","title":"ILParameter.Name","content":"ILParameter.Name \nName \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilparameter.html#Type","title":"ILParameter.Type","content":"ILParameter.Type \nType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilparameter.html#Default","title":"ILParameter.Default","content":"ILParameter.Default \nDefault \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilparameter.html#Marshal","title":"ILParameter.Marshal","content":"ILParameter.Marshal \nMarshal \n Marshalling map for parameters. COM Interop only.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilparameter.html#IsIn","title":"ILParameter.IsIn","content":"ILParameter.IsIn \nIsIn \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilparameter.html#IsOut","title":"ILParameter.IsOut","content":"ILParameter.IsOut \nIsOut \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilparameter.html#IsOptional","title":"ILParameter.IsOptional","content":"ILParameter.IsOptional \nIsOptional \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilparameter.html#CustomAttrsStored","title":"ILParameter.CustomAttrsStored","content":"ILParameter.CustomAttrsStored \nCustomAttrsStored \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilparameter.html#MetadataIndex","title":"ILParameter.MetadataIndex","content":"ILParameter.MetadataIndex \nMetadataIndex \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilplatform.html","title":"ILPlatform","content":"ILPlatform \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilpretypedef.html","title":"ILPreTypeDef","content":"ILPreTypeDef \n Represents a prefix of information for ILTypeDef.\n\n The information is enough to perform name resolution for the F# compiler, probe attributes\n for ExtensionAttribute  etc.  This is key to the on-demand exploration of .NET metadata.\n This information has to be \u0022Goldilocks\u0022 - not too much, not too little, just right. \nILPreTypeDef.GetTypeDef \nGetTypeDef \nILPreTypeDef.Namespace \nNamespace \nILPreTypeDef.Name \nName","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilpretypedef.html#GetTypeDef","title":"ILPreTypeDef.GetTypeDef","content":"ILPreTypeDef.GetTypeDef \nGetTypeDef \n Realise the actual full typedef","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilpretypedef.html#Namespace","title":"ILPreTypeDef.Namespace","content":"ILPreTypeDef.Namespace \nNamespace \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilpretypedef.html#Name","title":"ILPreTypeDef.Name","content":"ILPreTypeDef.Name \nName \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilpropertydef.html","title":"ILPropertyDef","content":"ILPropertyDef \n Property definitions \nILPropertyDef.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nILPropertyDef.CustomAttrsStored \nCustomAttrsStored \nILPropertyDef.SetMethod \nSetMethod \nILPropertyDef.Name \nName \nILPropertyDef.Args \nArgs \nILPropertyDef.CustomAttrs \nCustomAttrs \nILPropertyDef.GetMethod \nGetMethod \nILPropertyDef.IsSpecialName \nIsSpecialName \nILPropertyDef.CallingConv \nCallingConv \nILPropertyDef.Attributes \nAttributes \nILPropertyDef.MetadataIndex \nMetadataIndex \nILPropertyDef.Init \nInit \nILPropertyDef.PropertyType \nPropertyType \nILPropertyDef.IsRTSpecialName \nIsRTSpecialName","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilpropertydef.html#\u0060\u0060.ctor\u0060\u0060","title":"ILPropertyDef.\u0060\u0060.ctor\u0060\u0060","content":"ILPropertyDef.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n Functional creation of a value, immediate","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilpropertydef.html#CustomAttrsStored","title":"ILPropertyDef.CustomAttrsStored","content":"ILPropertyDef.CustomAttrsStored \nCustomAttrsStored \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilpropertydef.html#SetMethod","title":"ILPropertyDef.SetMethod","content":"ILPropertyDef.SetMethod \nSetMethod \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilpropertydef.html#Name","title":"ILPropertyDef.Name","content":"ILPropertyDef.Name \nName \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilpropertydef.html#Args","title":"ILPropertyDef.Args","content":"ILPropertyDef.Args \nArgs \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilpropertydef.html#CustomAttrs","title":"ILPropertyDef.CustomAttrs","content":"ILPropertyDef.CustomAttrs \nCustomAttrs \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilpropertydef.html#GetMethod","title":"ILPropertyDef.GetMethod","content":"ILPropertyDef.GetMethod \nGetMethod \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilpropertydef.html#IsSpecialName","title":"ILPropertyDef.IsSpecialName","content":"ILPropertyDef.IsSpecialName \nIsSpecialName \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilpropertydef.html#CallingConv","title":"ILPropertyDef.CallingConv","content":"ILPropertyDef.CallingConv \nCallingConv \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilpropertydef.html#Attributes","title":"ILPropertyDef.Attributes","content":"ILPropertyDef.Attributes \nAttributes \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilpropertydef.html#MetadataIndex","title":"ILPropertyDef.MetadataIndex","content":"ILPropertyDef.MetadataIndex \nMetadataIndex \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilpropertydef.html#Init","title":"ILPropertyDef.Init","content":"ILPropertyDef.Init \nInit \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilpropertydef.html#PropertyType","title":"ILPropertyDef.PropertyType","content":"ILPropertyDef.PropertyType \nPropertyType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilpropertydef.html#IsRTSpecialName","title":"ILPropertyDef.IsRTSpecialName","content":"ILPropertyDef.IsRTSpecialName \nIsRTSpecialName \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilpropertydefs.html","title":"ILPropertyDefs","content":"ILPropertyDefs \n Table of properties in an IL type definition.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilreferences.html","title":"ILReferences","content":"ILReferences \n \nILReferences.AssemblyReferences \nAssemblyReferences \nILReferences.ModuleReferences \nModuleReferences \nILReferences.TypeReferences \nTypeReferences \nILReferences.MethodReferences \nMethodReferences \nILReferences.FieldReferences \nFieldReferences","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilreferences.html#AssemblyReferences","title":"ILReferences.AssemblyReferences","content":"ILReferences.AssemblyReferences \nAssemblyReferences \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilreferences.html#ModuleReferences","title":"ILReferences.ModuleReferences","content":"ILReferences.ModuleReferences \nModuleReferences \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilreferences.html#TypeReferences","title":"ILReferences.TypeReferences","content":"ILReferences.TypeReferences \nTypeReferences \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilreferences.html#MethodReferences","title":"ILReferences.MethodReferences","content":"ILReferences.MethodReferences \nMethodReferences \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilreferences.html#FieldReferences","title":"ILReferences.FieldReferences","content":"ILReferences.FieldReferences \nFieldReferences \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilresources.html","title":"ILResources","content":"ILResources \n Table of resources in a module.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilreturn.html","title":"ILReturn","content":"ILReturn \n Method return values. \nILReturn.WithCustomAttrs \nWithCustomAttrs \nILReturn.CustomAttrs \nCustomAttrs \nILReturn.Marshal \nMarshal \nILReturn.Type \nType \nILReturn.CustomAttrsStored \nCustomAttrsStored \nILReturn.MetadataIndex \nMetadataIndex","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilreturn.html#WithCustomAttrs","title":"ILReturn.WithCustomAttrs","content":"ILReturn.WithCustomAttrs \nWithCustomAttrs \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilreturn.html#CustomAttrs","title":"ILReturn.CustomAttrs","content":"ILReturn.CustomAttrs \nCustomAttrs \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilreturn.html#Marshal","title":"ILReturn.Marshal","content":"ILReturn.Marshal \nMarshal \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilreturn.html#Type","title":"ILReturn.Type","content":"ILReturn.Type \nType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilreturn.html#CustomAttrsStored","title":"ILReturn.CustomAttrsStored","content":"ILReturn.CustomAttrsStored \nCustomAttrsStored \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilreturn.html#MetadataIndex","title":"ILReturn.MetadataIndex","content":"ILReturn.MetadataIndex \nMetadataIndex \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilscoperef.html","title":"ILScopeRef","content":"ILScopeRef \n \nILScopeRef.IsAssembly \nIsAssembly \nILScopeRef.IsLocalRef \nIsLocalRef \nILScopeRef.IsPrimaryAssembly \nIsPrimaryAssembly \nILScopeRef.IsModule \nIsModule \nILScopeRef.QualifiedName \nQualifiedName \nILScopeRef.IsLocal \nIsLocal \nILScopeRef.Local \nLocal \nILScopeRef.Module \nModule \nILScopeRef.Assembly \nAssembly \nILScopeRef.PrimaryAssembly \nPrimaryAssembly","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilscoperef.html#IsAssembly","title":"ILScopeRef.IsAssembly","content":"ILScopeRef.IsAssembly \nIsAssembly \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilscoperef.html#IsLocalRef","title":"ILScopeRef.IsLocalRef","content":"ILScopeRef.IsLocalRef \nIsLocalRef \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilscoperef.html#IsPrimaryAssembly","title":"ILScopeRef.IsPrimaryAssembly","content":"ILScopeRef.IsPrimaryAssembly \nIsPrimaryAssembly \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilscoperef.html#IsModule","title":"ILScopeRef.IsModule","content":"ILScopeRef.IsModule \nIsModule \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilscoperef.html#QualifiedName","title":"ILScopeRef.QualifiedName","content":"ILScopeRef.QualifiedName \nQualifiedName \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilscoperef.html#IsLocal","title":"ILScopeRef.IsLocal","content":"ILScopeRef.IsLocal \nIsLocal \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilscoperef.html#Local","title":"ILScopeRef.Local","content":"ILScopeRef.Local \nLocal \n A reference to the type in the current module","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilscoperef.html#Module","title":"ILScopeRef.Module","content":"ILScopeRef.Module \nModule \n A reference to a type in a module in the same assembly","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilscoperef.html#Assembly","title":"ILScopeRef.Assembly","content":"ILScopeRef.Assembly \nAssembly \n A reference to a type in another assembly","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilscoperef.html#PrimaryAssembly","title":"ILScopeRef.PrimaryAssembly","content":"ILScopeRef.PrimaryAssembly \nPrimaryAssembly \n A reference to a type in the primary assembly","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilsecuritydeclsstored.html","title":"ILSecurityDeclsStored","content":"ILSecurityDeclsStored \n Represents the efficiency-oriented storage of ILSecurityDecls in another item.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilsourcedocument.html","title":"ILSourceDocument","content":"ILSourceDocument \n Debug info.  Values of type \u0022source\u0022 can be attached at sequence\n points and some other locations. \nILSourceDocument.Language \nLanguage \nILSourceDocument.Vendor \nVendor \nILSourceDocument.File \nFile \nILSourceDocument.DocumentType \nDocumentType \nILSourceDocument.Create \nCreate","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilsourcedocument.html#Language","title":"ILSourceDocument.Language","content":"ILSourceDocument.Language \nLanguage \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilsourcedocument.html#Vendor","title":"ILSourceDocument.Vendor","content":"ILSourceDocument.Vendor \nVendor \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilsourcedocument.html#File","title":"ILSourceDocument.File","content":"ILSourceDocument.File \nFile \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilsourcedocument.html#DocumentType","title":"ILSourceDocument.DocumentType","content":"ILSourceDocument.DocumentType \nDocumentType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilsourcedocument.html#Create","title":"ILSourceDocument.Create","content":"ILSourceDocument.Create \nCreate \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilthisconvention.html","title":"ILThisConvention","content":"ILThisConvention \n \nILThisConvention.IsInstance \nIsInstance \nILThisConvention.IsInstanceExplicit \nIsInstanceExplicit \nILThisConvention.IsStatic \nIsStatic \nILThisConvention.Instance \nInstance \nILThisConvention.InstanceExplicit \nInstanceExplicit \nILThisConvention.Static \nStatic","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilthisconvention.html#IsInstance","title":"ILThisConvention.IsInstance","content":"ILThisConvention.IsInstance \nIsInstance \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilthisconvention.html#IsInstanceExplicit","title":"ILThisConvention.IsInstanceExplicit","content":"ILThisConvention.IsInstanceExplicit \nIsInstanceExplicit \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilthisconvention.html#IsStatic","title":"ILThisConvention.IsStatic","content":"ILThisConvention.IsStatic \nIsStatic \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilthisconvention.html#Instance","title":"ILThisConvention.Instance","content":"ILThisConvention.Instance \nInstance \n accepts an implicit \u0027this\u0027 pointer","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilthisconvention.html#InstanceExplicit","title":"ILThisConvention.InstanceExplicit","content":"ILThisConvention.InstanceExplicit \nInstanceExplicit \n accepts an explicit \u0027this\u0027 pointer","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilthisconvention.html#Static","title":"ILThisConvention.Static","content":"ILThisConvention.Static \nStatic \n no \u0027this\u0027 pointer is passed","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltype.html","title":"ILType","content":"ILType \n \nILType.IsByref \nIsByref \nILType.IsTyvar \nIsTyvar \nILType.IsPtr \nIsPtr \nILType.IsFunctionPointer \nIsFunctionPointer \nILType.TypeSpec \nTypeSpec \nILType.GenericArgs \nGenericArgs \nILType.IsVoid \nIsVoid \nILType.IsBoxed \nIsBoxed \nILType.IsNominal \nIsNominal \nILType.QualifiedName \nQualifiedName \nILType.IsTypeVar \nIsTypeVar \nILType.IsArray \nIsArray \nILType.IsValue \nIsValue \nILType.TypeRef \nTypeRef \nILType.BasicQualifiedName \nBasicQualifiedName \nILType.IsModified \nIsModified \nILType.Void \nVoid \nILType.Array \nArray \nILType.Value \nValue \nILType.Boxed \nBoxed \nILType.Ptr \nPtr \nILType.Byref \nByref \nILType.FunctionPointer \nFunctionPointer \nILType.TypeVar \nTypeVar \nILType.Modified \nModified","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltype.html#IsByref","title":"ILType.IsByref","content":"ILType.IsByref \nIsByref \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltype.html#IsTyvar","title":"ILType.IsTyvar","content":"ILType.IsTyvar \nIsTyvar \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltype.html#IsPtr","title":"ILType.IsPtr","content":"ILType.IsPtr \nIsPtr \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltype.html#IsFunctionPointer","title":"ILType.IsFunctionPointer","content":"ILType.IsFunctionPointer \nIsFunctionPointer \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltype.html#TypeSpec","title":"ILType.TypeSpec","content":"ILType.TypeSpec \nTypeSpec \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltype.html#GenericArgs","title":"ILType.GenericArgs","content":"ILType.GenericArgs \nGenericArgs \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltype.html#IsVoid","title":"ILType.IsVoid","content":"ILType.IsVoid \nIsVoid \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltype.html#IsBoxed","title":"ILType.IsBoxed","content":"ILType.IsBoxed \nIsBoxed \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltype.html#IsNominal","title":"ILType.IsNominal","content":"ILType.IsNominal \nIsNominal \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltype.html#QualifiedName","title":"ILType.QualifiedName","content":"ILType.QualifiedName \nQualifiedName \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltype.html#IsTypeVar","title":"ILType.IsTypeVar","content":"ILType.IsTypeVar \nIsTypeVar \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltype.html#IsArray","title":"ILType.IsArray","content":"ILType.IsArray \nIsArray \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltype.html#IsValue","title":"ILType.IsValue","content":"ILType.IsValue \nIsValue \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltype.html#TypeRef","title":"ILType.TypeRef","content":"ILType.TypeRef \nTypeRef \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltype.html#BasicQualifiedName","title":"ILType.BasicQualifiedName","content":"ILType.BasicQualifiedName \nBasicQualifiedName \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltype.html#IsModified","title":"ILType.IsModified","content":"ILType.IsModified \nIsModified \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltype.html#Void","title":"ILType.Void","content":"ILType.Void \nVoid \n Used only in return and pointer types.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltype.html#Array","title":"ILType.Array","content":"ILType.Array \nArray \n Array types","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltype.html#Value","title":"ILType.Value","content":"ILType.Value \nValue \n Unboxed types, including builtin types.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltype.html#Boxed","title":"ILType.Boxed","content":"ILType.Boxed \nBoxed \n Reference types.  Also may be used for parents of members even if for members in value types.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltype.html#Ptr","title":"ILType.Ptr","content":"ILType.Ptr \nPtr \n Unmanaged pointers.  Nb. the type is used by tools and for binding only, not by the verifier.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltype.html#Byref","title":"ILType.Byref","content":"ILType.Byref \nByref \n Managed pointers.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltype.html#FunctionPointer","title":"ILType.FunctionPointer","content":"ILType.FunctionPointer \nFunctionPointer \n ILCode pointers.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltype.html#TypeVar","title":"ILType.TypeVar","content":"ILType.TypeVar \nTypeVar \n Reference a generic arg.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltype.html#Modified","title":"ILType.Modified","content":"ILType.Modified \nModified \n Custom modifiers.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedef.html","title":"ILTypeDef","content":"ILTypeDef \n Represents IL Type Definitions. \nILTypeDef.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nILTypeDef.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nILTypeDef.With \nWith \nILTypeDef.Name \nName \nILTypeDef.Extends \nExtends \nILTypeDef.IsSealed \nIsSealed \nILTypeDef.IsEnum \nIsEnum \nILTypeDef.NestedTypes \nNestedTypes \nILTypeDef.Properties \nProperties \nILTypeDef.Access \nAccess \nILTypeDef.Attributes \nAttributes \nILTypeDef.SecurityDecls \nSecurityDecls \nILTypeDef.Fields \nFields \nILTypeDef.GenericParams \nGenericParams \nILTypeDef.IsClass \nIsClass \nILTypeDef.Events \nEvents \nILTypeDef.Encoding \nEncoding \nILTypeDef.IsStruct \nIsStruct \nILTypeDef.MethodImpls \nMethodImpls \nILTypeDef.IsDelegate \nIsDelegate \nILTypeDef.IsInterface \nIsInterface \nILTypeDef.IsSerializable \nIsSerializable \nILTypeDef.Methods \nMethods \nILTypeDef.CustomAttrsStored \nCustomAttrsStored \nILTypeDef.HasSecurity \nHasSecurity \nILTypeDef.IsStructOrEnum \nIsStructOrEnum \nILTypeDef.IsSpecialName \nIsSpecialName \nILTypeDef.IsAbstract \nIsAbstract \nILTypeDef.MetadataIndex \nMetadataIndex \nILTypeDef.Layout \nLayout \nILTypeDef.IsComInterop \nIsComInterop \nILTypeDef.CanContainExtensionMethods \nCanContainExtensionMethods \nILTypeDef.CustomAttrs \nCustomAttrs \nILTypeDef.IsKnownToBeAttribute \nIsKnownToBeAttribute \nILTypeDef.Implements \nImplements","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedef.html#\u0060\u0060.ctor\u0060\u0060","title":"ILTypeDef.\u0060\u0060.ctor\u0060\u0060","content":"ILTypeDef.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n Functional creation of a value, immediate","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedef.html#\u0060\u0060.ctor\u0060\u0060","title":"ILTypeDef.\u0060\u0060.ctor\u0060\u0060","content":"ILTypeDef.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n Functional creation of a value with lazy calculated data","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedef.html#With","title":"ILTypeDef.With","content":"ILTypeDef.With \nWith \n Functional update","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedef.html#Name","title":"ILTypeDef.Name","content":"ILTypeDef.Name \nName \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedef.html#Extends","title":"ILTypeDef.Extends","content":"ILTypeDef.Extends \nExtends \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedef.html#IsSealed","title":"ILTypeDef.IsSealed","content":"ILTypeDef.IsSealed \nIsSealed \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedef.html#IsEnum","title":"ILTypeDef.IsEnum","content":"ILTypeDef.IsEnum \nIsEnum \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedef.html#NestedTypes","title":"ILTypeDef.NestedTypes","content":"ILTypeDef.NestedTypes \nNestedTypes \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedef.html#Properties","title":"ILTypeDef.Properties","content":"ILTypeDef.Properties \nProperties \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedef.html#Access","title":"ILTypeDef.Access","content":"ILTypeDef.Access \nAccess \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedef.html#Attributes","title":"ILTypeDef.Attributes","content":"ILTypeDef.Attributes \nAttributes \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedef.html#SecurityDecls","title":"ILTypeDef.SecurityDecls","content":"ILTypeDef.SecurityDecls \nSecurityDecls \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedef.html#Fields","title":"ILTypeDef.Fields","content":"ILTypeDef.Fields \nFields \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedef.html#GenericParams","title":"ILTypeDef.GenericParams","content":"ILTypeDef.GenericParams \nGenericParams \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedef.html#IsClass","title":"ILTypeDef.IsClass","content":"ILTypeDef.IsClass \nIsClass \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedef.html#Events","title":"ILTypeDef.Events","content":"ILTypeDef.Events \nEvents \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedef.html#Encoding","title":"ILTypeDef.Encoding","content":"ILTypeDef.Encoding \nEncoding \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedef.html#IsStruct","title":"ILTypeDef.IsStruct","content":"ILTypeDef.IsStruct \nIsStruct \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedef.html#MethodImpls","title":"ILTypeDef.MethodImpls","content":"ILTypeDef.MethodImpls \nMethodImpls \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedef.html#IsDelegate","title":"ILTypeDef.IsDelegate","content":"ILTypeDef.IsDelegate \nIsDelegate \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedef.html#IsInterface","title":"ILTypeDef.IsInterface","content":"ILTypeDef.IsInterface \nIsInterface \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedef.html#IsSerializable","title":"ILTypeDef.IsSerializable","content":"ILTypeDef.IsSerializable \nIsSerializable \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedef.html#Methods","title":"ILTypeDef.Methods","content":"ILTypeDef.Methods \nMethods \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedef.html#CustomAttrsStored","title":"ILTypeDef.CustomAttrsStored","content":"ILTypeDef.CustomAttrsStored \nCustomAttrsStored \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedef.html#HasSecurity","title":"ILTypeDef.HasSecurity","content":"ILTypeDef.HasSecurity \nHasSecurity \n Some classes are marked \u0022HasSecurity\u0022 even if there are no permissions attached,\n e.g. if they use SuppressUnmanagedCodeSecurityAttribute","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedef.html#IsStructOrEnum","title":"ILTypeDef.IsStructOrEnum","content":"ILTypeDef.IsStructOrEnum \nIsStructOrEnum \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedef.html#IsSpecialName","title":"ILTypeDef.IsSpecialName","content":"ILTypeDef.IsSpecialName \nIsSpecialName \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedef.html#IsAbstract","title":"ILTypeDef.IsAbstract","content":"ILTypeDef.IsAbstract \nIsAbstract \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedef.html#MetadataIndex","title":"ILTypeDef.MetadataIndex","content":"ILTypeDef.MetadataIndex \nMetadataIndex \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedef.html#Layout","title":"ILTypeDef.Layout","content":"ILTypeDef.Layout \nLayout \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedef.html#IsComInterop","title":"ILTypeDef.IsComInterop","content":"ILTypeDef.IsComInterop \nIsComInterop \n Class or interface generated for COM interop.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedef.html#CanContainExtensionMethods","title":"ILTypeDef.CanContainExtensionMethods","content":"ILTypeDef.CanContainExtensionMethods \nCanContainExtensionMethods \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedef.html#CustomAttrs","title":"ILTypeDef.CustomAttrs","content":"ILTypeDef.CustomAttrs \nCustomAttrs \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedef.html#IsKnownToBeAttribute","title":"ILTypeDef.IsKnownToBeAttribute","content":"ILTypeDef.IsKnownToBeAttribute \nIsKnownToBeAttribute \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedef.html#Implements","title":"ILTypeDef.Implements","content":"ILTypeDef.Implements \nImplements \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedefaccess.html","title":"ILTypeDefAccess","content":"ILTypeDefAccess \n Type Access. \nILTypeDefAccess.IsPublic \nIsPublic \nILTypeDefAccess.IsPrivate \nIsPrivate \nILTypeDefAccess.IsNested \nIsNested \nILTypeDefAccess.Public \nPublic \nILTypeDefAccess.Private \nPrivate \nILTypeDefAccess.Nested \nNested","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedefaccess.html#IsPublic","title":"ILTypeDefAccess.IsPublic","content":"ILTypeDefAccess.IsPublic \nIsPublic \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedefaccess.html#IsPrivate","title":"ILTypeDefAccess.IsPrivate","content":"ILTypeDefAccess.IsPrivate \nIsPrivate \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedefaccess.html#IsNested","title":"ILTypeDefAccess.IsNested","content":"ILTypeDefAccess.IsNested \nIsNested \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedefaccess.html#Public","title":"ILTypeDefAccess.Public","content":"ILTypeDefAccess.Public \nPublic \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedefaccess.html#Private","title":"ILTypeDefAccess.Private","content":"ILTypeDefAccess.Private \nPrivate \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedefaccess.html#Nested","title":"ILTypeDefAccess.Nested","content":"ILTypeDefAccess.Nested \nNested \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedefadditionalflags.html","title":"ILTypeDefAdditionalFlags","content":"ILTypeDefAdditionalFlags \n \nILTypeDefAdditionalFlags.Class \nClass \nILTypeDefAdditionalFlags.ValueType \nValueType \nILTypeDefAdditionalFlags.Interface \nInterface \nILTypeDefAdditionalFlags.Enum \nEnum \nILTypeDefAdditionalFlags.Delegate \nDelegate \nILTypeDefAdditionalFlags.IsKnownToBeAttribute \nIsKnownToBeAttribute \nILTypeDefAdditionalFlags.CanContainExtensionMethods \nCanContainExtensionMethods","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedefadditionalflags.html#Class","title":"ILTypeDefAdditionalFlags.Class","content":"ILTypeDefAdditionalFlags.Class \nClass \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedefadditionalflags.html#ValueType","title":"ILTypeDefAdditionalFlags.ValueType","content":"ILTypeDefAdditionalFlags.ValueType \nValueType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedefadditionalflags.html#Interface","title":"ILTypeDefAdditionalFlags.Interface","content":"ILTypeDefAdditionalFlags.Interface \nInterface \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedefadditionalflags.html#Enum","title":"ILTypeDefAdditionalFlags.Enum","content":"ILTypeDefAdditionalFlags.Enum \nEnum \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedefadditionalflags.html#Delegate","title":"ILTypeDefAdditionalFlags.Delegate","content":"ILTypeDefAdditionalFlags.Delegate \nDelegate \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedefadditionalflags.html#IsKnownToBeAttribute","title":"ILTypeDefAdditionalFlags.IsKnownToBeAttribute","content":"ILTypeDefAdditionalFlags.IsKnownToBeAttribute \nIsKnownToBeAttribute \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedefadditionalflags.html#CanContainExtensionMethods","title":"ILTypeDefAdditionalFlags.CanContainExtensionMethods","content":"ILTypeDefAdditionalFlags.CanContainExtensionMethods \nCanContainExtensionMethods \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedeflayout.html","title":"ILTypeDefLayout","content":"ILTypeDefLayout \n Type Layout information. \nILTypeDefLayout.IsAuto \nIsAuto \nILTypeDefLayout.IsSequential \nIsSequential \nILTypeDefLayout.IsExplicit \nIsExplicit \nILTypeDefLayout.Auto \nAuto \nILTypeDefLayout.Sequential \nSequential \nILTypeDefLayout.Explicit \nExplicit","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedeflayout.html#IsAuto","title":"ILTypeDefLayout.IsAuto","content":"ILTypeDefLayout.IsAuto \nIsAuto \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedeflayout.html#IsSequential","title":"ILTypeDefLayout.IsSequential","content":"ILTypeDefLayout.IsSequential \nIsSequential \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedeflayout.html#IsExplicit","title":"ILTypeDefLayout.IsExplicit","content":"ILTypeDefLayout.IsExplicit \nIsExplicit \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedeflayout.html#Auto","title":"ILTypeDefLayout.Auto","content":"ILTypeDefLayout.Auto \nAuto \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedeflayout.html#Sequential","title":"ILTypeDefLayout.Sequential","content":"ILTypeDefLayout.Sequential \nSequential \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedeflayout.html#Explicit","title":"ILTypeDefLayout.Explicit","content":"ILTypeDefLayout.Explicit \nExplicit \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedefs.html","title":"ILTypeDefs","content":"ILTypeDefs \n Tables of named type definitions.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypeinit.html","title":"ILTypeInit","content":"ILTypeInit \n Indicate the initialization semantics of a type. \nILTypeInit.IsBeforeField \nIsBeforeField \nILTypeInit.IsOnAny \nIsOnAny \nILTypeInit.BeforeField \nBeforeField \nILTypeInit.OnAny \nOnAny","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypeinit.html#IsBeforeField","title":"ILTypeInit.IsBeforeField","content":"ILTypeInit.IsBeforeField \nIsBeforeField \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypeinit.html#IsOnAny","title":"ILTypeInit.IsOnAny","content":"ILTypeInit.IsOnAny \nIsOnAny \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypeinit.html#BeforeField","title":"ILTypeInit.BeforeField","content":"ILTypeInit.BeforeField \nBeforeField \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypeinit.html#OnAny","title":"ILTypeInit.OnAny","content":"ILTypeInit.OnAny \nOnAny \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltyperef.html","title":"ILTypeRef","content":"ILTypeRef \n Type refs, i.e. references to types in some .NET assembly \nILTypeRef.FullName \nFullName \nILTypeRef.Name \nName \nILTypeRef.Scope \nScope \nILTypeRef.Enclosing \nEnclosing \nILTypeRef.QualifiedName \nQualifiedName \nILTypeRef.BasicQualifiedName \nBasicQualifiedName \nILTypeRef.Create \nCreate","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltyperef.html#FullName","title":"ILTypeRef.FullName","content":"ILTypeRef.FullName \nFullName \n The name of the type in the assembly using the \u0027.\u0027 notation for nested types.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltyperef.html#Name","title":"ILTypeRef.Name","content":"ILTypeRef.Name \nName \n The name of the type. This also contains the namespace if Enclosing is empty.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltyperef.html#Scope","title":"ILTypeRef.Scope","content":"ILTypeRef.Scope \nScope \n Where is the type, i.e. is it in this module, in another module in this assembly or in another assembly?","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltyperef.html#Enclosing","title":"ILTypeRef.Enclosing","content":"ILTypeRef.Enclosing \nEnclosing \n The list of enclosing type names for a nested type. If non-nil then the first of these also contains the namespace.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltyperef.html#QualifiedName","title":"ILTypeRef.QualifiedName","content":"ILTypeRef.QualifiedName \nQualifiedName \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltyperef.html#BasicQualifiedName","title":"ILTypeRef.BasicQualifiedName","content":"ILTypeRef.BasicQualifiedName \nBasicQualifiedName \n The name of the type in the assembly using the \u0027\u002B\u0027 notation for nested types.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltyperef.html#Create","title":"ILTypeRef.Create","content":"ILTypeRef.Create \nCreate \n Create a ILTypeRef.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypespec.html","title":"ILTypeSpec","content":"ILTypeSpec \n Type specs and types. \nILTypeSpec.FullName \nFullName \nILTypeSpec.Name \nName \nILTypeSpec.Scope \nScope \nILTypeSpec.Enclosing \nEnclosing \nILTypeSpec.GenericArgs \nGenericArgs \nILTypeSpec.TypeRef \nTypeRef \nILTypeSpec.Create \nCreate","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypespec.html#FullName","title":"ILTypeSpec.FullName","content":"ILTypeSpec.FullName \nFullName \n The name of the type in the assembly using the \u0027.\u0027 notation for nested types.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypespec.html#Name","title":"ILTypeSpec.Name","content":"ILTypeSpec.Name \nName \n The name of the type. This also contains the namespace if Enclosing is empty.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypespec.html#Scope","title":"ILTypeSpec.Scope","content":"ILTypeSpec.Scope \nScope \n Where is the type, i.e. is it in this module, in another module in this assembly or in another assembly?","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypespec.html#Enclosing","title":"ILTypeSpec.Enclosing","content":"ILTypeSpec.Enclosing \nEnclosing \n The list of enclosing type names for a nested type. If non-nil then the first of these also contains the namespace.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypespec.html#GenericArgs","title":"ILTypeSpec.GenericArgs","content":"ILTypeSpec.GenericArgs \nGenericArgs \n The type instantiation if the type is generic, otherwise empty","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypespec.html#TypeRef","title":"ILTypeSpec.TypeRef","content":"ILTypeSpec.TypeRef \nTypeRef \n Which type is being referred to?","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypespec.html#Create","title":"ILTypeSpec.Create","content":"ILTypeSpec.Create \nCreate \n Create an ILTypeSpec.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilversioninfo.html","title":"ILVersionInfo","content":"ILVersionInfo \n \nILVersionInfo.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nILVersionInfo.Major \nMajor \nILVersionInfo.Minor \nMinor \nILVersionInfo.Build \nBuild \nILVersionInfo.Revision \nRevision","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilversioninfo.html#\u0060\u0060.ctor\u0060\u0060","title":"ILVersionInfo.\u0060\u0060.ctor\u0060\u0060","content":"ILVersionInfo.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilversioninfo.html#Major","title":"ILVersionInfo.Major","content":"ILVersionInfo.Major \nMajor \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilversioninfo.html#Minor","title":"ILVersionInfo.Minor","content":"ILVersionInfo.Minor \nMinor \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilversioninfo.html#Build","title":"ILVersionInfo.Build","content":"ILVersionInfo.Build \nBuild \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilversioninfo.html#Revision","title":"ILVersionInfo.Revision","content":"ILVersionInfo.Revision \nRevision \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-interfaceimpl.html","title":"InterfaceImpl","content":"InterfaceImpl \n \nInterfaceImpl.CustomAttrs \nCustomAttrs \nInterfaceImpl.Create \nCreate \nInterfaceImpl.Create \nCreate \nInterfaceImpl.Idx \nIdx \nInterfaceImpl.Type \nType \nInterfaceImpl.CustomAttrsStored \nCustomAttrsStored","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-interfaceimpl.html#CustomAttrs","title":"InterfaceImpl.CustomAttrs","content":"InterfaceImpl.CustomAttrs \nCustomAttrs \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-interfaceimpl.html#Create","title":"InterfaceImpl.Create","content":"InterfaceImpl.Create \nCreate \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-interfaceimpl.html#Create","title":"InterfaceImpl.Create","content":"InterfaceImpl.Create \nCreate \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-interfaceimpl.html#Idx","title":"InterfaceImpl.Idx","content":"InterfaceImpl.Idx \nIdx \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-interfaceimpl.html#Type","title":"InterfaceImpl.Type","content":"InterfaceImpl.Type \nType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-interfaceimpl.html#CustomAttrsStored","title":"InterfaceImpl.CustomAttrsStored","content":"InterfaceImpl.CustomAttrsStored \nCustomAttrsStored \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-methodbody.html","title":"MethodBody","content":"MethodBody \n \nMethodBody.IsAbstract \nIsAbstract \nMethodBody.IsIL \nIsIL \nMethodBody.IsNative \nIsNative \nMethodBody.IsNotAvailable \nIsNotAvailable \nMethodBody.IsPInvoke \nIsPInvoke \nMethodBody.IL \nIL \nMethodBody.PInvoke \nPInvoke \nMethodBody.Abstract \nAbstract \nMethodBody.Native \nNative \nMethodBody.NotAvailable \nNotAvailable","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-methodbody.html#IsAbstract","title":"MethodBody.IsAbstract","content":"MethodBody.IsAbstract \nIsAbstract \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-methodbody.html#IsIL","title":"MethodBody.IsIL","content":"MethodBody.IsIL \nIsIL \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-methodbody.html#IsNative","title":"MethodBody.IsNative","content":"MethodBody.IsNative \nIsNative \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-methodbody.html#IsNotAvailable","title":"MethodBody.IsNotAvailable","content":"MethodBody.IsNotAvailable \nIsNotAvailable \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-methodbody.html#IsPInvoke","title":"MethodBody.IsPInvoke","content":"MethodBody.IsPInvoke \nIsPInvoke \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-methodbody.html#IL","title":"MethodBody.IL","content":"MethodBody.IL \nIL \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-methodbody.html#PInvoke","title":"MethodBody.PInvoke","content":"MethodBody.PInvoke \nPInvoke \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-methodbody.html#Abstract","title":"MethodBody.Abstract","content":"MethodBody.Abstract \nAbstract \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-methodbody.html#Native","title":"MethodBody.Native","content":"MethodBody.Native \nNative \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-methodbody.html#NotAvailable","title":"MethodBody.NotAvailable","content":"MethodBody.NotAvailable \nNotAvailable \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-publickey.html","title":"PublicKey","content":"PublicKey \n \nPublicKey.Key \nKey \nPublicKey.IsKeyToken \nIsKeyToken \nPublicKey.KeyToken \nKeyToken \nPublicKey.IsKey \nIsKey \nPublicKey.IsPublicKeyToken \nIsPublicKeyToken \nPublicKey.IsPublicKey \nIsPublicKey \nPublicKey.KeyAsToken \nKeyAsToken \nPublicKey.PublicKey \nPublicKey \nPublicKey.PublicKeyToken \nPublicKeyToken","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-publickey.html#Key","title":"PublicKey.Key","content":"PublicKey.Key \nKey \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-publickey.html#IsKeyToken","title":"PublicKey.IsKeyToken","content":"PublicKey.IsKeyToken \nIsKeyToken \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-publickey.html#KeyToken","title":"PublicKey.KeyToken","content":"PublicKey.KeyToken \nKeyToken \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-publickey.html#IsKey","title":"PublicKey.IsKey","content":"PublicKey.IsKey \nIsKey \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-publickey.html#IsPublicKeyToken","title":"PublicKey.IsPublicKeyToken","content":"PublicKey.IsPublicKeyToken \nIsPublicKeyToken \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-publickey.html#IsPublicKey","title":"PublicKey.IsPublicKey","content":"PublicKey.IsPublicKey \nIsPublicKey \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-publickey.html#KeyAsToken","title":"PublicKey.KeyAsToken","content":"PublicKey.KeyAsToken \nKeyAsToken \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-publickey.html#PublicKey","title":"PublicKey.PublicKey","content":"PublicKey.PublicKey \nPublicKey \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-publickey.html#PublicKeyToken","title":"PublicKey.PublicKeyToken","content":"PublicKey.PublicKeyToken \nPublicKeyToken \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-ilbinaryreader.html","title":"ILBinaryReader","content":"ILBinaryReader \n\u003Cpre\u003E Binary reader.  Read a .NET binary and concert it to Abstract IL data\n structures.\n \n NOTE:\n   - The metadata in the loaded modules will be relative to \n     those modules, e.g. ILScopeRef.Local will mean \u0022local to \n     that module\u0022.  You must use [rescopeILType] etc. if you want to include \n     (i.e. copy) the metadata into your own module. \n\n   - PDB (debug info) reading/folding:\n     The PDB reader is invoked if you give a PDB path \n     This indicates if you want to search for PDB files and have the \n     reader fold them in.  You cannot currently name the pdb file \n     directly - you can only name the path.  Giving \u0022None\u0022 says \n     \u0022do not read the PDB file even if one exists\u0022. \n \n     The debug info appears primarily as I_seqpoint annotations in \n     the instruction streams.  Unfortunately the PDB information does\n     not, for example, tell you how to map back from a class definition\n     to a source code line number - you will need to explicitly search\n     for a sequence point in the code for one of the methods of the \n     class.  That is not particularly satisfactory, and it may be\n     a good idea to build a small library which extracts the information\n     you need.\u003C/pre\u003E \nILBinaryReader.Shim \nShim \nILBinaryReader.ILModuleReader \nILModuleReader \nILBinaryReader.ILReaderOptions \nILReaderOptions \nILBinaryReader.ILReaderTryGetMetadataSnapshot \nILReaderTryGetMetadataSnapshot \nILBinaryReader.MetadataOnlyFlag \nMetadataOnlyFlag \nILBinaryReader.ReduceMemoryFlag \nReduceMemoryFlag","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-ilbinaryreader-shim.html","title":"Shim","content":"Shim \n The public API hook for changing the IL assembly reader, used by Resharper \nShim.IAssemblyReader \nIAssemblyReader \nShim.AssemblyReader \nAssemblyReader","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-ilbinaryreader-shim.html#AssemblyReader","title":"Shim.AssemblyReader","content":"Shim.AssemblyReader \nAssemblyReader \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-ilbinaryreader-shim-iassemblyreader.html","title":"IAssemblyReader","content":"IAssemblyReader \n \nIAssemblyReader.GetILModuleReader \nGetILModuleReader","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-ilbinaryreader-shim-iassemblyreader.html#GetILModuleReader","title":"IAssemblyReader.GetILModuleReader","content":"IAssemblyReader.GetILModuleReader \nGetILModuleReader \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-ilbinaryreader-ilmodulereader.html","title":"ILModuleReader","content":"ILModuleReader \n Represents a reader of the metadata of a .NET binary.  May also give some values (e.g. IL code) from the PE file\n if it was provided. \nILModuleReader.ILModuleDef \nILModuleDef \nILModuleReader.ILAssemblyRefs \nILAssemblyRefs","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-ilbinaryreader-ilmodulereader.html#ILModuleDef","title":"ILModuleReader.ILModuleDef","content":"ILModuleReader.ILModuleDef \nILModuleDef \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-ilbinaryreader-ilmodulereader.html#ILAssemblyRefs","title":"ILModuleReader.ILAssemblyRefs","content":"ILModuleReader.ILAssemblyRefs \nILAssemblyRefs \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-ilbinaryreader-ilreaderoptions.html","title":"ILReaderOptions","content":"ILReaderOptions \n \nILReaderOptions.pdbDirPath \npdbDirPath \nILReaderOptions.reduceMemoryUsage \nreduceMemoryUsage \nILReaderOptions.metadataOnly \nmetadataOnly \nILReaderOptions.tryGetMetadataSnapshot \ntryGetMetadataSnapshot","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-ilbinaryreader-ilreaderoptions.html#pdbDirPath","title":"ILReaderOptions.pdbDirPath","content":"ILReaderOptions.pdbDirPath \npdbDirPath \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-ilbinaryreader-ilreaderoptions.html#reduceMemoryUsage","title":"ILReaderOptions.reduceMemoryUsage","content":"ILReaderOptions.reduceMemoryUsage \nreduceMemoryUsage \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-ilbinaryreader-ilreaderoptions.html#metadataOnly","title":"ILReaderOptions.metadataOnly","content":"ILReaderOptions.metadataOnly \nmetadataOnly \n Only open a metadata reader for the metadata portion of the .NET binary without keeping alive any data associated with the PE reader\n - IL code will not be available (mdBody in ILMethodDef will return NotAvailable)\n - Managed resources will be reported back as ILResourceLocation.LocalIn (as always)\n - Native resources will not be available (none will be returned)\n - Static data associated with fields will not be available","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-ilbinaryreader-ilreaderoptions.html#tryGetMetadataSnapshot","title":"ILReaderOptions.tryGetMetadataSnapshot","content":"ILReaderOptions.tryGetMetadataSnapshot \ntryGetMetadataSnapshot \n A function to call to try to get an object that acts as a snapshot of the metadata section of a .NET binary,\n and from which we can read the metadata. Only used when metadataOnly=true.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-ilbinaryreader-ilreadertrygetmetadatasnapshot.html","title":"ILReaderTryGetMetadataSnapshot","content":"ILReaderTryGetMetadataSnapshot \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-ilbinaryreader-metadataonlyflag.html","title":"MetadataOnlyFlag","content":"MetadataOnlyFlag \n \nMetadataOnlyFlag.IsNo \nIsNo \nMetadataOnlyFlag.IsYes \nIsYes \nMetadataOnlyFlag.Yes \nYes \nMetadataOnlyFlag.No \nNo","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-ilbinaryreader-metadataonlyflag.html#IsNo","title":"MetadataOnlyFlag.IsNo","content":"MetadataOnlyFlag.IsNo \nIsNo \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-ilbinaryreader-metadataonlyflag.html#IsYes","title":"MetadataOnlyFlag.IsYes","content":"MetadataOnlyFlag.IsYes \nIsYes \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-ilbinaryreader-metadataonlyflag.html#Yes","title":"MetadataOnlyFlag.Yes","content":"MetadataOnlyFlag.Yes \nYes \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-ilbinaryreader-metadataonlyflag.html#No","title":"MetadataOnlyFlag.No","content":"MetadataOnlyFlag.No \nNo \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-ilbinaryreader-reducememoryflag.html","title":"ReduceMemoryFlag","content":"ReduceMemoryFlag \n \nReduceMemoryFlag.IsNo \nIsNo \nReduceMemoryFlag.IsYes \nIsYes \nReduceMemoryFlag.Yes \nYes \nReduceMemoryFlag.No \nNo","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-ilbinaryreader-reducememoryflag.html#IsNo","title":"ReduceMemoryFlag.IsNo","content":"ReduceMemoryFlag.IsNo \nIsNo \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-ilbinaryreader-reducememoryflag.html#IsYes","title":"ReduceMemoryFlag.IsYes","content":"ReduceMemoryFlag.IsYes \nIsYes \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-ilbinaryreader-reducememoryflag.html#Yes","title":"ReduceMemoryFlag.Yes","content":"ReduceMemoryFlag.Yes \nYes \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-ilbinaryreader-reducememoryflag.html#No","title":"ReduceMemoryFlag.No","content":"ReduceMemoryFlag.No \nNo \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-projectsnapshot.html","title":"ProjectSnapshot","content":"ProjectSnapshot \n \nProjectSnapshot.FSharpFileSnapshot \nFSharpFileSnapshot \nProjectSnapshot.FSharpProjectIdentifier \nFSharpProjectIdentifier \nProjectSnapshot.FSharpProjectSnapshot \nFSharpProjectSnapshot \nProjectSnapshot.FSharpReferencedProjectSnapshot \nFSharpReferencedProjectSnapshot \nProjectSnapshot.ProjectConfig \nProjectConfig \nProjectSnapshot.ReferenceOnDisk \nReferenceOnDisk","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-projectsnapshot-fsharpfilesnapshot.html","title":"FSharpFileSnapshot","content":"FSharpFileSnapshot \n A snapshot of an F# source file. \nFSharpFileSnapshot.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nFSharpFileSnapshot.GetFileName \nGetFileName \nFSharpFileSnapshot.GetSource \nGetSource \nFSharpFileSnapshot.Version \nVersion \nFSharpFileSnapshot.IsSignatureFile \nIsSignatureFile \nFSharpFileSnapshot.FileName \nFileName \nFSharpFileSnapshot.Create \nCreate \nFSharpFileSnapshot.CreateFromDocumentSource \nCreateFromDocumentSource \nFSharpFileSnapshot.CreateFromFileSystem \nCreateFromFileSystem \nFSharpFileSnapshot.CreateFromString \nCreateFromString","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-projectsnapshot-fsharpfilesnapshot.html#\u0060\u0060.ctor\u0060\u0060","title":"FSharpFileSnapshot.\u0060\u0060.ctor\u0060\u0060","content":"FSharpFileSnapshot.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-projectsnapshot-fsharpfilesnapshot.html#GetFileName","title":"FSharpFileSnapshot.GetFileName","content":"FSharpFileSnapshot.GetFileName \nGetFileName \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-projectsnapshot-fsharpfilesnapshot.html#GetSource","title":"FSharpFileSnapshot.GetSource","content":"FSharpFileSnapshot.GetSource \nGetSource \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-projectsnapshot-fsharpfilesnapshot.html#Version","title":"FSharpFileSnapshot.Version","content":"FSharpFileSnapshot.Version \nVersion \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-projectsnapshot-fsharpfilesnapshot.html#IsSignatureFile","title":"FSharpFileSnapshot.IsSignatureFile","content":"FSharpFileSnapshot.IsSignatureFile \nIsSignatureFile \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-projectsnapshot-fsharpfilesnapshot.html#FileName","title":"FSharpFileSnapshot.FileName","content":"FSharpFileSnapshot.FileName \nFileName \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-projectsnapshot-fsharpfilesnapshot.html#Create","title":"FSharpFileSnapshot.Create","content":"FSharpFileSnapshot.Create \nCreate \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-projectsnapshot-fsharpfilesnapshot.html#CreateFromDocumentSource","title":"FSharpFileSnapshot.CreateFromDocumentSource","content":"FSharpFileSnapshot.CreateFromDocumentSource \nCreateFromDocumentSource \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-projectsnapshot-fsharpfilesnapshot.html#CreateFromFileSystem","title":"FSharpFileSnapshot.CreateFromFileSystem","content":"FSharpFileSnapshot.CreateFromFileSystem \nCreateFromFileSystem \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-projectsnapshot-fsharpfilesnapshot.html#CreateFromString","title":"FSharpFileSnapshot.CreateFromString","content":"FSharpFileSnapshot.CreateFromString \nCreateFromString \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-projectsnapshot-fsharpprojectidentifier.html","title":"FSharpProjectIdentifier","content":"FSharpProjectIdentifier \n An identifier of an F# project. This serves to identify the same project as it changes over time and enables us to clear obsolete data from caches. \nFSharpProjectIdentifier.OutputFileName \nOutputFileName \nFSharpProjectIdentifier.ProjectFileName \nProjectFileName \nFSharpProjectIdentifier.FSharpProjectIdentifier \nFSharpProjectIdentifier","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-projectsnapshot-fsharpprojectidentifier.html#OutputFileName","title":"FSharpProjectIdentifier.OutputFileName","content":"FSharpProjectIdentifier.OutputFileName \nOutputFileName \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-projectsnapshot-fsharpprojectidentifier.html#ProjectFileName","title":"FSharpProjectIdentifier.ProjectFileName","content":"FSharpProjectIdentifier.ProjectFileName \nProjectFileName \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-projectsnapshot-fsharpprojectidentifier.html#FSharpProjectIdentifier","title":"FSharpProjectIdentifier.FSharpProjectIdentifier","content":"FSharpProjectIdentifier.FSharpProjectIdentifier \nFSharpProjectIdentifier \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-projectsnapshot-fsharpprojectsnapshot.html","title":"FSharpProjectSnapshot","content":"FSharpProjectSnapshot \n A snapshot of an F# project. This type contains all the necessary information for type checking a project. \nFSharpProjectSnapshot.Replace \nReplace \nFSharpProjectSnapshot.UseScriptResolutionRules \nUseScriptResolutionRules \nFSharpProjectSnapshot.IsIncompleteTypeCheckEnvironment \nIsIncompleteTypeCheckEnvironment \nFSharpProjectSnapshot.OutputFileName \nOutputFileName \nFSharpProjectSnapshot.ReferencesOnDisk \nReferencesOnDisk \nFSharpProjectSnapshot.ReferencedProjects \nReferencedProjects \nFSharpProjectSnapshot.SourceFiles \nSourceFiles \nFSharpProjectSnapshot.ProjectFileName \nProjectFileName \nFSharpProjectSnapshot.ProjectConfig \nProjectConfig \nFSharpProjectSnapshot.Stamp \nStamp \nFSharpProjectSnapshot.LoadTime \nLoadTime \nFSharpProjectSnapshot.OtherOptions \nOtherOptions \nFSharpProjectSnapshot.Identifier \nIdentifier \nFSharpProjectSnapshot.OriginalLoadReferences \nOriginalLoadReferences \nFSharpProjectSnapshot.Label \nLabel \nFSharpProjectSnapshot.UnresolvedReferences \nUnresolvedReferences \nFSharpProjectSnapshot.ProjectId \nProjectId \nFSharpProjectSnapshot.Create \nCreate \nFSharpProjectSnapshot.FromCommandLineArgs \nFromCommandLineArgs \nFSharpProjectSnapshot.FromOptions \nFromOptions \nFSharpProjectSnapshot.FromOptions \nFromOptions \nFSharpProjectSnapshot.FromOptions \nFromOptions \nFSharpProjectSnapshot.FromResponseFile \nFromResponseFile","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-projectsnapshot-fsharpprojectsnapshot.html#Replace","title":"FSharpProjectSnapshot.Replace","content":"FSharpProjectSnapshot.Replace \nReplace \n Create a new snapshot with given source files replacing files in this snapshot with the same name. Other files remain unchanged.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-projectsnapshot-fsharpprojectsnapshot.html#UseScriptResolutionRules","title":"FSharpProjectSnapshot.UseScriptResolutionRules","content":"FSharpProjectSnapshot.UseScriptResolutionRules \nUseScriptResolutionRules \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-projectsnapshot-fsharpprojectsnapshot.html#IsIncompleteTypeCheckEnvironment","title":"FSharpProjectSnapshot.IsIncompleteTypeCheckEnvironment","content":"FSharpProjectSnapshot.IsIncompleteTypeCheckEnvironment \nIsIncompleteTypeCheckEnvironment \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-projectsnapshot-fsharpprojectsnapshot.html#OutputFileName","title":"FSharpProjectSnapshot.OutputFileName","content":"FSharpProjectSnapshot.OutputFileName \nOutputFileName \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-projectsnapshot-fsharpprojectsnapshot.html#ReferencesOnDisk","title":"FSharpProjectSnapshot.ReferencesOnDisk","content":"FSharpProjectSnapshot.ReferencesOnDisk \nReferencesOnDisk \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-projectsnapshot-fsharpprojectsnapshot.html#ReferencedProjects","title":"FSharpProjectSnapshot.ReferencedProjects","content":"FSharpProjectSnapshot.ReferencedProjects \nReferencedProjects \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-projectsnapshot-fsharpprojectsnapshot.html#SourceFiles","title":"FSharpProjectSnapshot.SourceFiles","content":"FSharpProjectSnapshot.SourceFiles \nSourceFiles \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-projectsnapshot-fsharpprojectsnapshot.html#ProjectFileName","title":"FSharpProjectSnapshot.ProjectFileName","content":"FSharpProjectSnapshot.ProjectFileName \nProjectFileName \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-projectsnapshot-fsharpprojectsnapshot.html#ProjectConfig","title":"FSharpProjectSnapshot.ProjectConfig","content":"FSharpProjectSnapshot.ProjectConfig \nProjectConfig \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-projectsnapshot-fsharpprojectsnapshot.html#Stamp","title":"FSharpProjectSnapshot.Stamp","content":"FSharpProjectSnapshot.Stamp \nStamp \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-projectsnapshot-fsharpprojectsnapshot.html#LoadTime","title":"FSharpProjectSnapshot.LoadTime","content":"FSharpProjectSnapshot.LoadTime \nLoadTime \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-projectsnapshot-fsharpprojectsnapshot.html#OtherOptions","title":"FSharpProjectSnapshot.OtherOptions","content":"FSharpProjectSnapshot.OtherOptions \nOtherOptions \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-projectsnapshot-fsharpprojectsnapshot.html#Identifier","title":"FSharpProjectSnapshot.Identifier","content":"FSharpProjectSnapshot.Identifier \nIdentifier \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-projectsnapshot-fsharpprojectsnapshot.html#OriginalLoadReferences","title":"FSharpProjectSnapshot.OriginalLoadReferences","content":"FSharpProjectSnapshot.OriginalLoadReferences \nOriginalLoadReferences \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-projectsnapshot-fsharpprojectsnapshot.html#Label","title":"FSharpProjectSnapshot.Label","content":"FSharpProjectSnapshot.Label \nLabel \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-projectsnapshot-fsharpprojectsnapshot.html#UnresolvedReferences","title":"FSharpProjectSnapshot.UnresolvedReferences","content":"FSharpProjectSnapshot.UnresolvedReferences \nUnresolvedReferences \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-projectsnapshot-fsharpprojectsnapshot.html#ProjectId","title":"FSharpProjectSnapshot.ProjectId","content":"FSharpProjectSnapshot.ProjectId \nProjectId \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-projectsnapshot-fsharpprojectsnapshot.html#Create","title":"FSharpProjectSnapshot.Create","content":"FSharpProjectSnapshot.Create \nCreate \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-projectsnapshot-fsharpprojectsnapshot.html#FromCommandLineArgs","title":"FSharpProjectSnapshot.FromCommandLineArgs","content":"FSharpProjectSnapshot.FromCommandLineArgs \nFromCommandLineArgs \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-projectsnapshot-fsharpprojectsnapshot.html#FromOptions","title":"FSharpProjectSnapshot.FromOptions","content":"FSharpProjectSnapshot.FromOptions \nFromOptions \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-projectsnapshot-fsharpprojectsnapshot.html#FromOptions","title":"FSharpProjectSnapshot.FromOptions","content":"FSharpProjectSnapshot.FromOptions \nFromOptions \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-projectsnapshot-fsharpprojectsnapshot.html#FromOptions","title":"FSharpProjectSnapshot.FromOptions","content":"FSharpProjectSnapshot.FromOptions \nFromOptions \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-projectsnapshot-fsharpprojectsnapshot.html#FromResponseFile","title":"FSharpProjectSnapshot.FromResponseFile","content":"FSharpProjectSnapshot.FromResponseFile \nFromResponseFile \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-projectsnapshot-fsharpreferencedprojectsnapshot.html","title":"FSharpReferencedProjectSnapshot","content":"FSharpReferencedProjectSnapshot \n \nFSharpReferencedProjectSnapshot.OutputFile \nOutputFile \nFSharpReferencedProjectSnapshot.IsFSharpReference \nIsFSharpReference \nFSharpReferencedProjectSnapshot.IsPEReference \nIsPEReference \nFSharpReferencedProjectSnapshot.Version \nVersion \nFSharpReferencedProjectSnapshot.IsILModuleReference \nIsILModuleReference \nFSharpReferencedProjectSnapshot.CreateFSharp \nCreateFSharp \nFSharpReferencedProjectSnapshot.FSharpReference \nFSharpReference \nFSharpReferencedProjectSnapshot.PEReference \nPEReference \nFSharpReferencedProjectSnapshot.ILModuleReference \nILModuleReference","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-projectsnapshot-fsharpreferencedprojectsnapshot.html#OutputFile","title":"FSharpReferencedProjectSnapshot.OutputFile","content":"FSharpReferencedProjectSnapshot.OutputFile \nOutputFile \n\n The fully qualified path to the output of the referenced project. This should be the same value as the \u003Ccode\u003E-r\u003C/code\u003E\n reference in the project options for this referenced project.\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-projectsnapshot-fsharpreferencedprojectsnapshot.html#IsFSharpReference","title":"FSharpReferencedProjectSnapshot.IsFSharpReference","content":"FSharpReferencedProjectSnapshot.IsFSharpReference \nIsFSharpReference \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-projectsnapshot-fsharpreferencedprojectsnapshot.html#IsPEReference","title":"FSharpReferencedProjectSnapshot.IsPEReference","content":"FSharpReferencedProjectSnapshot.IsPEReference \nIsPEReference \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-projectsnapshot-fsharpreferencedprojectsnapshot.html#Version","title":"FSharpReferencedProjectSnapshot.Version","content":"FSharpReferencedProjectSnapshot.Version \nVersion \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-projectsnapshot-fsharpreferencedprojectsnapshot.html#IsILModuleReference","title":"FSharpReferencedProjectSnapshot.IsILModuleReference","content":"FSharpReferencedProjectSnapshot.IsILModuleReference \nIsILModuleReference \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-projectsnapshot-fsharpreferencedprojectsnapshot.html#CreateFSharp","title":"FSharpReferencedProjectSnapshot.CreateFSharp","content":"FSharpReferencedProjectSnapshot.CreateFSharp \nCreateFSharp \n\n Creates a reference for an F# project. The physical data for it is stored/cached inside of the compiler service.\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-projectsnapshot-fsharpreferencedprojectsnapshot.html#FSharpReference","title":"FSharpReferencedProjectSnapshot.FSharpReference","content":"FSharpReferencedProjectSnapshot.FSharpReference \nFSharpReference \n\n A reference to an F# project. The physical data for it is stored/cached inside of the compiler service.\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-projectsnapshot-fsharpreferencedprojectsnapshot.html#PEReference","title":"FSharpReferencedProjectSnapshot.PEReference","content":"FSharpReferencedProjectSnapshot.PEReference \nPEReference \n\n A reference to any portable executable, including F#. The stream is owned by this reference.\n The stream will be automatically disposed when there are no references to FSharpReferencedProject and is GC collected.\n Once the stream is evaluated, the function that constructs the stream will no longer be referenced by anything.\n If the stream evaluation throws an exception, it will be automatically handled.\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-projectsnapshot-fsharpreferencedprojectsnapshot.html#ILModuleReference","title":"FSharpReferencedProjectSnapshot.ILModuleReference","content":"FSharpReferencedProjectSnapshot.ILModuleReference \nILModuleReference \n\n A reference to an ILModuleReader.\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-projectsnapshot-projectconfig.html","title":"ProjectConfig","content":"ProjectConfig \n All required information for compiling a project except the source files and referenced projects. It\u0027s kept separate so it can be reused\n for different stages of a project snapshot and also between changes to the source files. \nProjectConfig.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nProjectConfig.UseScriptResolutionRules \nUseScriptResolutionRules \nProjectConfig.IsIncompleteTypeCheckEnvironment \nIsIncompleteTypeCheckEnvironment \nProjectConfig.OutputFileName \nOutputFileName \nProjectConfig.ReferencesOnDisk \nReferencesOnDisk \nProjectConfig.VersionForParsing \nVersionForParsing \nProjectConfig.Version \nVersion \nProjectConfig.ProjectDirectory \nProjectDirectory \nProjectConfig.ProjectFileName \nProjectFileName \nProjectConfig.Stamp \nStamp \nProjectConfig.LoadTime \nLoadTime \nProjectConfig.OtherOptions \nOtherOptions \nProjectConfig.Identifier \nIdentifier \nProjectConfig.CommandLineOptions \nCommandLineOptions \nProjectConfig.OriginalLoadReferences \nOriginalLoadReferences \nProjectConfig.Label \nLabel \nProjectConfig.UnresolvedReferences \nUnresolvedReferences \nProjectConfig.ProjectId \nProjectId","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-projectsnapshot-projectconfig.html#\u0060\u0060.ctor\u0060\u0060","title":"ProjectConfig.\u0060\u0060.ctor\u0060\u0060","content":"ProjectConfig.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-projectsnapshot-projectconfig.html#UseScriptResolutionRules","title":"ProjectConfig.UseScriptResolutionRules","content":"ProjectConfig.UseScriptResolutionRules \nUseScriptResolutionRules \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-projectsnapshot-projectconfig.html#IsIncompleteTypeCheckEnvironment","title":"ProjectConfig.IsIncompleteTypeCheckEnvironment","content":"ProjectConfig.IsIncompleteTypeCheckEnvironment \nIsIncompleteTypeCheckEnvironment \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-projectsnapshot-projectconfig.html#OutputFileName","title":"ProjectConfig.OutputFileName","content":"ProjectConfig.OutputFileName \nOutputFileName \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-projectsnapshot-projectconfig.html#ReferencesOnDisk","title":"ProjectConfig.ReferencesOnDisk","content":"ProjectConfig.ReferencesOnDisk \nReferencesOnDisk \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-projectsnapshot-projectconfig.html#VersionForParsing","title":"ProjectConfig.VersionForParsing","content":"ProjectConfig.VersionForParsing \nVersionForParsing \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-projectsnapshot-projectconfig.html#Version","title":"ProjectConfig.Version","content":"ProjectConfig.Version \nVersion \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-projectsnapshot-projectconfig.html#ProjectDirectory","title":"ProjectConfig.ProjectDirectory","content":"ProjectConfig.ProjectDirectory \nProjectDirectory \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-projectsnapshot-projectconfig.html#ProjectFileName","title":"ProjectConfig.ProjectFileName","content":"ProjectConfig.ProjectFileName \nProjectFileName \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-projectsnapshot-projectconfig.html#Stamp","title":"ProjectConfig.Stamp","content":"ProjectConfig.Stamp \nStamp \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-projectsnapshot-projectconfig.html#LoadTime","title":"ProjectConfig.LoadTime","content":"ProjectConfig.LoadTime \nLoadTime \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-projectsnapshot-projectconfig.html#OtherOptions","title":"ProjectConfig.OtherOptions","content":"ProjectConfig.OtherOptions \nOtherOptions \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-projectsnapshot-projectconfig.html#Identifier","title":"ProjectConfig.Identifier","content":"ProjectConfig.Identifier \nIdentifier \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-projectsnapshot-projectconfig.html#CommandLineOptions","title":"ProjectConfig.CommandLineOptions","content":"ProjectConfig.CommandLineOptions \nCommandLineOptions \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-projectsnapshot-projectconfig.html#OriginalLoadReferences","title":"ProjectConfig.OriginalLoadReferences","content":"ProjectConfig.OriginalLoadReferences \nOriginalLoadReferences \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-projectsnapshot-projectconfig.html#Label","title":"ProjectConfig.Label","content":"ProjectConfig.Label \nLabel \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-projectsnapshot-projectconfig.html#UnresolvedReferences","title":"ProjectConfig.UnresolvedReferences","content":"ProjectConfig.UnresolvedReferences \nUnresolvedReferences \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-projectsnapshot-projectconfig.html#ProjectId","title":"ProjectConfig.ProjectId","content":"ProjectConfig.ProjectId \nProjectId \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-projectsnapshot-referenceondisk.html","title":"ReferenceOnDisk","content":"ReferenceOnDisk \n An on-disk reference needed for project compilation. \nReferenceOnDisk.Path \nPath \nReferenceOnDisk.LastModified \nLastModified","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-projectsnapshot-referenceondisk.html#Path","title":"ReferenceOnDisk.Path","content":"ReferenceOnDisk.Path \nPath \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-projectsnapshot-referenceondisk.html#LastModified","title":"ReferenceOnDisk.LastModified","content":"ReferenceOnDisk.LastModified \nLastModified \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-cachestamp.html","title":"CacheStamp","content":"CacheStamp \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-delayedilmodulereader.html","title":"DelayedILModuleReader","content":"DelayedILModuleReader \n Delays the creation of an ILModuleReader \nDelayedILModuleReader.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nDelayedILModuleReader.OutputFile \nOutputFile","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-delayedilmodulereader.html#\u0060\u0060.ctor\u0060\u0060","title":"DelayedILModuleReader.\u0060\u0060.ctor\u0060\u0060","content":"DelayedILModuleReader.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-delayedilmodulereader.html#OutputFile","title":"DelayedILModuleReader.OutputFile","content":"DelayedILModuleReader.OutputFile \nOutputFile \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-documentsource.html","title":"DocumentSource","content":"DocumentSource \n \nDocumentSource.IsCustom \nIsCustom \nDocumentSource.IsFileSystem \nIsFileSystem \nDocumentSource.FileSystem \nFileSystem \nDocumentSource.Custom \nCustom","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-documentsource.html#IsCustom","title":"DocumentSource.IsCustom","content":"DocumentSource.IsCustom \nIsCustom \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-documentsource.html#IsFileSystem","title":"DocumentSource.IsFileSystem","content":"DocumentSource.IsFileSystem \nIsFileSystem \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-documentsource.html#FileSystem","title":"DocumentSource.FileSystem","content":"DocumentSource.FileSystem \nFileSystem \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-documentsource.html#Custom","title":"DocumentSource.Custom","content":"DocumentSource.Custom \nCustom \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckfileanswer.html","title":"FSharpCheckFileAnswer","content":"FSharpCheckFileAnswer \n The result of calling TypeCheckResult including the possibility of abort and background compiler not caught up. \nFSharpCheckFileAnswer.IsSucceeded \nIsSucceeded \nFSharpCheckFileAnswer.IsAborted \nIsAborted \nFSharpCheckFileAnswer.Aborted \nAborted \nFSharpCheckFileAnswer.Succeeded \nSucceeded","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckfileanswer.html#IsSucceeded","title":"FSharpCheckFileAnswer.IsSucceeded","content":"FSharpCheckFileAnswer.IsSucceeded \nIsSucceeded \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckfileanswer.html#IsAborted","title":"FSharpCheckFileAnswer.IsAborted","content":"FSharpCheckFileAnswer.IsAborted \nIsAborted \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckfileanswer.html#Aborted","title":"FSharpCheckFileAnswer.Aborted","content":"FSharpCheckFileAnswer.Aborted \nAborted \n Aborted because cancellation caused an abandonment of the operation","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckfileanswer.html#Succeeded","title":"FSharpCheckFileAnswer.Succeeded","content":"FSharpCheckFileAnswer.Succeeded \nSucceeded \n Success","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckfileresults.html","title":"FSharpCheckFileResults","content":"FSharpCheckFileResults \n A handle to the results of CheckFileInProject. \nFSharpCheckFileResults.GenerateSignature \nGenerateSignature \nFSharpCheckFileResults.GetAllUsesOfAllSymbolsInFile \nGetAllUsesOfAllSymbolsInFile \nFSharpCheckFileResults.GetDeclarationListInfo \nGetDeclarationListInfo \nFSharpCheckFileResults.GetDeclarationListSymbols \nGetDeclarationListSymbols \nFSharpCheckFileResults.GetDeclarationLocation \nGetDeclarationLocation \nFSharpCheckFileResults.GetDescription \nGetDescription \nFSharpCheckFileResults.GetDisplayContextForPos \nGetDisplayContextForPos \nFSharpCheckFileResults.GetF1Keyword \nGetF1Keyword \nFSharpCheckFileResults.GetFormatSpecifierLocations \nGetFormatSpecifierLocations \nFSharpCheckFileResults.GetFormatSpecifierLocationsAndArity \nGetFormatSpecifierLocationsAndArity \nFSharpCheckFileResults.GetKeywordTooltip \nGetKeywordTooltip \nFSharpCheckFileResults.GetMethods \nGetMethods \nFSharpCheckFileResults.GetMethodsAsSymbols \nGetMethodsAsSymbols \nFSharpCheckFileResults.GetSemanticClassification \nGetSemanticClassification \nFSharpCheckFileResults.GetSymbolUseAtLocation \nGetSymbolUseAtLocation \nFSharpCheckFileResults.GetSymbolUsesAtLocation \nGetSymbolUsesAtLocation \nFSharpCheckFileResults.GetToolTip \nGetToolTip \nFSharpCheckFileResults.GetUsesOfSymbolInFile \nGetUsesOfSymbolInFile \nFSharpCheckFileResults.IsRelativeNameResolvableFromSymbol \nIsRelativeNameResolvableFromSymbol \nFSharpCheckFileResults.TryGetCapturedDisplayContext \nTryGetCapturedDisplayContext \nFSharpCheckFileResults.TryGetCapturedType \nTryGetCapturedType \nFSharpCheckFileResults.ImplementationFile \nImplementationFile \nFSharpCheckFileResults.Diagnostics \nDiagnostics \nFSharpCheckFileResults.OpenDeclarations \nOpenDeclarations \nFSharpCheckFileResults.PartialAssemblySignature \nPartialAssemblySignature \nFSharpCheckFileResults.DependencyFiles \nDependencyFiles \nFSharpCheckFileResults.ProjectContext \nProjectContext \nFSharpCheckFileResults.HasFullTypeCheckInfo \nHasFullTypeCheckInfo","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckfileresults.html#GenerateSignature","title":"FSharpCheckFileResults.GenerateSignature","content":"FSharpCheckFileResults.GenerateSignature \nGenerateSignature \n Lays out and returns the formatted signature for the typechecked file as source text.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckfileresults.html#GetAllUsesOfAllSymbolsInFile","title":"FSharpCheckFileResults.GetAllUsesOfAllSymbolsInFile","content":"FSharpCheckFileResults.GetAllUsesOfAllSymbolsInFile \nGetAllUsesOfAllSymbolsInFile \n Get all textual usages of all symbols throughout the file","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckfileresults.html#GetDeclarationListInfo","title":"FSharpCheckFileResults.GetDeclarationListInfo","content":"FSharpCheckFileResults.GetDeclarationListInfo \nGetDeclarationListInfo \nGet the items for a declaration list","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckfileresults.html#GetDeclarationListSymbols","title":"FSharpCheckFileResults.GetDeclarationListSymbols","content":"FSharpCheckFileResults.GetDeclarationListSymbols \nGetDeclarationListSymbols \nGet the items for a declaration list in FSharpSymbol format","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckfileresults.html#GetDeclarationLocation","title":"FSharpCheckFileResults.GetDeclarationLocation","content":"FSharpCheckFileResults.GetDeclarationLocation \nGetDeclarationLocation \nResolve the names at the given location to the declaration location of the corresponding construct.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckfileresults.html#GetDescription","title":"FSharpCheckFileResults.GetDescription","content":"FSharpCheckFileResults.GetDescription \nGetDescription \nCompute a formatted tooltip for the given symbol at position","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckfileresults.html#GetDisplayContextForPos","title":"FSharpCheckFileResults.GetDisplayContextForPos","content":"FSharpCheckFileResults.GetDisplayContextForPos \nGetDisplayContextForPos \n Find the most precise display environment for the given line and column.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckfileresults.html#GetF1Keyword","title":"FSharpCheckFileResults.GetF1Keyword","content":"FSharpCheckFileResults.GetF1Keyword \nGetF1Keyword \nCompute the Visual Studio F1-help key identifier for the given location, based on name resolution results","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckfileresults.html#GetFormatSpecifierLocations","title":"FSharpCheckFileResults.GetFormatSpecifierLocations","content":"FSharpCheckFileResults.GetFormatSpecifierLocations \nGetFormatSpecifierLocations \nGet the locations of format specifiers","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckfileresults.html#GetFormatSpecifierLocationsAndArity","title":"FSharpCheckFileResults.GetFormatSpecifierLocationsAndArity","content":"FSharpCheckFileResults.GetFormatSpecifierLocationsAndArity \nGetFormatSpecifierLocationsAndArity \nGet the locations of and number of arguments associated with format specifiers","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckfileresults.html#GetKeywordTooltip","title":"FSharpCheckFileResults.GetKeywordTooltip","content":"FSharpCheckFileResults.GetKeywordTooltip \nGetKeywordTooltip \nCompute a formatted tooltip for the given keywords","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckfileresults.html#GetMethods","title":"FSharpCheckFileResults.GetMethods","content":"FSharpCheckFileResults.GetMethods \nGetMethods \nCompute a set of method overloads to show in a dialog relevant to the given code location.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckfileresults.html#GetMethodsAsSymbols","title":"FSharpCheckFileResults.GetMethodsAsSymbols","content":"FSharpCheckFileResults.GetMethodsAsSymbols \nGetMethodsAsSymbols \nCompute a set of method overloads to show in a dialog relevant to the given code location.  The resulting method overloads are returned as symbols.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckfileresults.html#GetSemanticClassification","title":"FSharpCheckFileResults.GetSemanticClassification","content":"FSharpCheckFileResults.GetSemanticClassification \nGetSemanticClassification \nGet any extra colorization info that is available after the typecheck","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckfileresults.html#GetSymbolUseAtLocation","title":"FSharpCheckFileResults.GetSymbolUseAtLocation","content":"FSharpCheckFileResults.GetSymbolUseAtLocation \nGetSymbolUseAtLocation \nResolve the names at the given location to a use of symbol.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckfileresults.html#GetSymbolUsesAtLocation","title":"FSharpCheckFileResults.GetSymbolUsesAtLocation","content":"FSharpCheckFileResults.GetSymbolUsesAtLocation \nGetSymbolUsesAtLocation \nSimilar to GetSymbolUseAtLocation, but returns all found symbols if there are multiple.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckfileresults.html#GetToolTip","title":"FSharpCheckFileResults.GetToolTip","content":"FSharpCheckFileResults.GetToolTip \nGetToolTip \nCompute a formatted tooltip for the given location","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckfileresults.html#GetUsesOfSymbolInFile","title":"FSharpCheckFileResults.GetUsesOfSymbolInFile","content":"FSharpCheckFileResults.GetUsesOfSymbolInFile \nGetUsesOfSymbolInFile \n Get the textual usages that resolved to the given symbol throughout the file","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckfileresults.html#IsRelativeNameResolvableFromSymbol","title":"FSharpCheckFileResults.IsRelativeNameResolvableFromSymbol","content":"FSharpCheckFileResults.IsRelativeNameResolvableFromSymbol \nIsRelativeNameResolvableFromSymbol \n Determines if a long ident is resolvable at a specific point.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckfileresults.html#TryGetCapturedDisplayContext","title":"FSharpCheckFileResults.TryGetCapturedDisplayContext","content":"FSharpCheckFileResults.TryGetCapturedDisplayContext \nTryGetCapturedDisplayContext \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckfileresults.html#TryGetCapturedType","title":"FSharpCheckFileResults.TryGetCapturedType","content":"FSharpCheckFileResults.TryGetCapturedType \nTryGetCapturedType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckfileresults.html#ImplementationFile","title":"FSharpCheckFileResults.ImplementationFile","content":"FSharpCheckFileResults.ImplementationFile \nImplementationFile \n Represents complete typechecked implementation file, including its typechecked signatures if any.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckfileresults.html#Diagnostics","title":"FSharpCheckFileResults.Diagnostics","content":"FSharpCheckFileResults.Diagnostics \nDiagnostics \n The errors returned by parsing a source file.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckfileresults.html#OpenDeclarations","title":"FSharpCheckFileResults.OpenDeclarations","content":"FSharpCheckFileResults.OpenDeclarations \nOpenDeclarations \n Open declarations in the file, including auto open modules.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckfileresults.html#PartialAssemblySignature","title":"FSharpCheckFileResults.PartialAssemblySignature","content":"FSharpCheckFileResults.PartialAssemblySignature \nPartialAssemblySignature \n Get a view of the contents of the assembly up to and including the file just checked","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckfileresults.html#DependencyFiles","title":"FSharpCheckFileResults.DependencyFiles","content":"FSharpCheckFileResults.DependencyFiles \nDependencyFiles \n Indicates the set of files which must be watched to accurately track changes that affect these results,\n Clients interested in reacting to updates to these files should watch these files and take actions as described\n in the documentation for compiler service.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckfileresults.html#ProjectContext","title":"FSharpCheckFileResults.ProjectContext","content":"FSharpCheckFileResults.ProjectContext \nProjectContext \n Get the resolution of the ProjectOptions","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckfileresults.html#HasFullTypeCheckInfo","title":"FSharpCheckFileResults.HasFullTypeCheckInfo","content":"FSharpCheckFileResults.HasFullTypeCheckInfo \nHasFullTypeCheckInfo \n Indicates whether type checking successfully occurred with some results returned. If false, indicates that\n an unrecoverable error in earlier checking/parsing/resolution steps.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckprojectresults.html","title":"FSharpCheckProjectResults","content":"FSharpCheckProjectResults \n A handle to the results of CheckFileInProject. \nFSharpCheckProjectResults.GetAllUsesOfAllSymbols \nGetAllUsesOfAllSymbols \nFSharpCheckProjectResults.GetOptimizedAssemblyContents \nGetOptimizedAssemblyContents \nFSharpCheckProjectResults.GetUsesOfSymbol \nGetUsesOfSymbol \nFSharpCheckProjectResults.Diagnostics \nDiagnostics \nFSharpCheckProjectResults.AssemblyContents \nAssemblyContents \nFSharpCheckProjectResults.AssemblySignature \nAssemblySignature \nFSharpCheckProjectResults.DependencyFiles \nDependencyFiles \nFSharpCheckProjectResults.ProjectContext \nProjectContext \nFSharpCheckProjectResults.HasCriticalErrors \nHasCriticalErrors","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckprojectresults.html#GetAllUsesOfAllSymbols","title":"FSharpCheckProjectResults.GetAllUsesOfAllSymbols","content":"FSharpCheckProjectResults.GetAllUsesOfAllSymbols \nGetAllUsesOfAllSymbols \n Get all textual usages of all symbols throughout the project","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckprojectresults.html#GetOptimizedAssemblyContents","title":"FSharpCheckProjectResults.GetOptimizedAssemblyContents","content":"FSharpCheckProjectResults.GetOptimizedAssemblyContents \nGetOptimizedAssemblyContents \n Get an optimized view of the overall contents of the assembly. Only valid to use if HasCriticalErrors is false.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckprojectresults.html#GetUsesOfSymbol","title":"FSharpCheckProjectResults.GetUsesOfSymbol","content":"FSharpCheckProjectResults.GetUsesOfSymbol \nGetUsesOfSymbol \n Get the textual usages that resolved to the given symbol throughout the project","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckprojectresults.html#Diagnostics","title":"FSharpCheckProjectResults.Diagnostics","content":"FSharpCheckProjectResults.Diagnostics \nDiagnostics \n The errors returned by processing the project","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckprojectresults.html#AssemblyContents","title":"FSharpCheckProjectResults.AssemblyContents","content":"FSharpCheckProjectResults.AssemblyContents \nAssemblyContents \n Get a view of the overall contents of the assembly. Only valid to use if HasCriticalErrors is false.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckprojectresults.html#AssemblySignature","title":"FSharpCheckProjectResults.AssemblySignature","content":"FSharpCheckProjectResults.AssemblySignature \nAssemblySignature \n Get a view of the overall signature of the assembly. Only valid to use if HasCriticalErrors is false.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckprojectresults.html#DependencyFiles","title":"FSharpCheckProjectResults.DependencyFiles","content":"FSharpCheckProjectResults.DependencyFiles \nDependencyFiles \n Indicates the set of files which must be watched to accurately track changes that affect these results,\n Clients interested in reacting to updates to these files should watch these files and take actions as described\n in the documentation for compiler service.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckprojectresults.html#ProjectContext","title":"FSharpCheckProjectResults.ProjectContext","content":"FSharpCheckProjectResults.ProjectContext \nProjectContext \n Get the resolution of the ProjectOptions","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckprojectresults.html#HasCriticalErrors","title":"FSharpCheckProjectResults.HasCriticalErrors","content":"FSharpCheckProjectResults.HasCriticalErrors \nHasCriticalErrors \n Indicates if critical errors existed in the project options","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html","title":"FSharpChecker","content":"FSharpChecker \n Used to parse and check F# source code. \nFSharpChecker.CheckFileInProject \nCheckFileInProject \nFSharpChecker.CheckFileInProjectAllowingStaleCachedResults \nCheckFileInProjectAllowingStaleCachedResults \nFSharpChecker.ClearCache \nClearCache \nFSharpChecker.ClearCache \nClearCache \nFSharpChecker.ClearLanguageServiceRootCachesAndCollectAndFinalizeAllTransients \nClearLanguageServiceRootCachesAndCollectAndFinalizeAllTransients \nFSharpChecker.Compile \nCompile \nFSharpChecker.FindBackgroundReferencesInFile \nFindBackgroundReferencesInFile \nFSharpChecker.FindBackgroundReferencesInFile \nFindBackgroundReferencesInFile \nFSharpChecker.GetBackgroundCheckResultsForFileInProject \nGetBackgroundCheckResultsForFileInProject \nFSharpChecker.GetBackgroundParseResultsForFileInProject \nGetBackgroundParseResultsForFileInProject \nFSharpChecker.GetBackgroundSemanticClassificationForFile \nGetBackgroundSemanticClassificationForFile \nFSharpChecker.GetBackgroundSemanticClassificationForFile \nGetBackgroundSemanticClassificationForFile \nFSharpChecker.GetParsingOptionsFromCommandLineArgs \nGetParsingOptionsFromCommandLineArgs \nFSharpChecker.GetParsingOptionsFromCommandLineArgs \nGetParsingOptionsFromCommandLineArgs \nFSharpChecker.GetParsingOptionsFromProjectOptions \nGetParsingOptionsFromProjectOptions \nFSharpChecker.GetProjectOptionsFromCommandLineArgs \nGetProjectOptionsFromCommandLineArgs \nFSharpChecker.GetProjectOptionsFromScript \nGetProjectOptionsFromScript \nFSharpChecker.GetProjectSnapshotFromScript \nGetProjectSnapshotFromScript \nFSharpChecker.InvalidateAll \nInvalidateAll \nFSharpChecker.InvalidateConfiguration \nInvalidateConfiguration \nFSharpChecker.InvalidateConfiguration \nInvalidateConfiguration \nFSharpChecker.MatchBraces \nMatchBraces \nFSharpChecker.MatchBraces \nMatchBraces \nFSharpChecker.NotifyFileChanged \nNotifyFileChanged \nFSharpChecker.NotifyProjectCleaned \nNotifyProjectCleaned \nFSharpChecker.ParseAndCheckFileInProject \nParseAndCheckFileInProject \nFSharpChecker.ParseAndCheckFileInProject \nParseAndCheckFileInProject \nFSharpChecker.ParseAndCheckProject \nParseAndCheckProject \nFSharpChecker.ParseAndCheckProject \nParseAndCheckProject \nFSharpChecker.ParseFile \nParseFile \nFSharpChecker.ParseFile \nParseFile \nFSharpChecker.ParseFileInProject \nParseFileInProject \nFSharpChecker.TokenizeFile \nTokenizeFile \nFSharpChecker.TokenizeLine \nTokenizeLine \nFSharpChecker.TryGetRecentCheckResultsForFile \nTryGetRecentCheckResultsForFile \nFSharpChecker.TryGetRecentCheckResultsForFile \nTryGetRecentCheckResultsForFile \nFSharpChecker.ProjectChecked \nProjectChecked \nFSharpChecker.BeforeBackgroundFileCheck \nBeforeBackgroundFileCheck \nFSharpChecker.FileParsed \nFileParsed \nFSharpChecker.UsesTransparentCompiler \nUsesTransparentCompiler \nFSharpChecker.FileChecked \nFileChecked \nFSharpChecker.Create \nCreate \nFSharpChecker.ActualCheckFileCount \nActualCheckFileCount \nFSharpChecker.ActualParseFileCount \nActualParseFileCount \nFSharpChecker.Instance \nInstance","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#CheckFileInProject","title":"FSharpChecker.CheckFileInProject","content":"FSharpChecker.CheckFileInProject \nCheckFileInProject \n\u003Cp class=\u0027fsdocs-para\u0027\u003E\n   Check a source code file, returning a handle to the results\n \u003C/p\u003E\u003Cp class=\u0027fsdocs-para\u0027\u003E\n    Note: all files except the one being checked are read from the FileSystem API\n \u003C/p\u003E\u003Cp class=\u0027fsdocs-para\u0027\u003E\n   Return FSharpCheckFileAnswer.Aborted if a parse tree was not available.\n \u003C/p\u003E","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#CheckFileInProjectAllowingStaleCachedResults","title":"FSharpChecker.CheckFileInProjectAllowingStaleCachedResults","content":"FSharpChecker.CheckFileInProjectAllowingStaleCachedResults \nCheckFileInProjectAllowingStaleCachedResults \n\u003Cp class=\u0027fsdocs-para\u0027\u003ECheck a source code file, returning a handle to the results of the parse including\n the reconstructed types in the file.\u003C/p\u003E\u003Cp class=\u0027fsdocs-para\u0027\u003EAll files except the one being checked are read from the FileSystem API\u003C/p\u003E\u003Cp class=\u0027fsdocs-para\u0027\u003ENote: returns NoAntecedent if the background builder is not yet done preparing the type check context for the\n file (e.g. loading references and parsing/checking files in the project that this file depends upon).\n In this case, the caller can either retry, or wait for FileTypeCheckStateIsDirty to be raised for this file.\n \u003C/p\u003E","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#ClearCache","title":"FSharpChecker.ClearCache","content":"FSharpChecker.ClearCache \nClearCache \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#ClearCache","title":"FSharpChecker.ClearCache","content":"FSharpChecker.ClearCache \nClearCache \nClear the internal cache of the given projects.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#ClearLanguageServiceRootCachesAndCollectAndFinalizeAllTransients","title":"FSharpChecker.ClearLanguageServiceRootCachesAndCollectAndFinalizeAllTransients","content":"FSharpChecker.ClearLanguageServiceRootCachesAndCollectAndFinalizeAllTransients \nClearLanguageServiceRootCachesAndCollectAndFinalizeAllTransients \n Flush all caches and garbage collect","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#Compile","title":"FSharpChecker.Compile","content":"FSharpChecker.Compile \nCompile \n\n Compile using the given flags.  Source files names are resolved via the FileSystem API.\n The output file must be given by a -o flag.\n The first argument is ignored and can just be \u0022fsc.exe\u0022.\n The method returns the collected diagnostics, and (possibly) a terminating exception.\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#FindBackgroundReferencesInFile","title":"FSharpChecker.FindBackgroundReferencesInFile","content":"FSharpChecker.FindBackgroundReferencesInFile \nFindBackgroundReferencesInFile \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#FindBackgroundReferencesInFile","title":"FSharpChecker.FindBackgroundReferencesInFile","content":"FSharpChecker.FindBackgroundReferencesInFile \nFindBackgroundReferencesInFile \n\u003Cp class=\u0027fsdocs-para\u0027\u003EOptimized find references for a given symbol in a file of project.\u003C/p\u003E\u003Cp class=\u0027fsdocs-para\u0027\u003EAll files are read from the FileSystem API, including the file being checked.\u003C/p\u003E\u003Cp class=\u0027fsdocs-para\u0027\u003ECan cause a second type-check when \u0060enablePartialTypeChecking\u0060 is true on the FSharpChecker.\u003C/p\u003E","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#GetBackgroundCheckResultsForFileInProject","title":"FSharpChecker.GetBackgroundCheckResultsForFileInProject","content":"FSharpChecker.GetBackgroundCheckResultsForFileInProject \nGetBackgroundCheckResultsForFileInProject \n\u003Cp class=\u0027fsdocs-para\u0027\u003ELike CheckFileInProject, but uses the existing results from the background builder.\u003C/p\u003E\u003Cp class=\u0027fsdocs-para\u0027\u003EAll files are read from the FileSystem API, including the file being checked.\u003C/p\u003E\u003Cp class=\u0027fsdocs-para\u0027\u003ECan cause a second type-check when \u0060enablePartialTypeChecking\u0060 is true on the FSharpChecker.\u003C/p\u003E","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#GetBackgroundParseResultsForFileInProject","title":"FSharpChecker.GetBackgroundParseResultsForFileInProject","content":"FSharpChecker.GetBackgroundParseResultsForFileInProject \nGetBackgroundParseResultsForFileInProject \n\u003Cp class=\u0027fsdocs-para\u0027\u003ELike ParseFile, but uses results from the background builder.\u003C/p\u003E\u003Cp class=\u0027fsdocs-para\u0027\u003EAll files are read from the FileSystem API, including the file being checked.\u003C/p\u003E","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#GetBackgroundSemanticClassificationForFile","title":"FSharpChecker.GetBackgroundSemanticClassificationForFile","content":"FSharpChecker.GetBackgroundSemanticClassificationForFile \nGetBackgroundSemanticClassificationForFile \n\u003Cp class=\u0027fsdocs-para\u0027\u003EGet semantic classification for a file.\u003C/p\u003E","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#GetBackgroundSemanticClassificationForFile","title":"FSharpChecker.GetBackgroundSemanticClassificationForFile","content":"FSharpChecker.GetBackgroundSemanticClassificationForFile \nGetBackgroundSemanticClassificationForFile \n\u003Cp class=\u0027fsdocs-para\u0027\u003EGet semantic classification for a file.\u003C/p\u003E\u003Cp class=\u0027fsdocs-para\u0027\u003EAll files are read from the FileSystem API, including the file being checked.\u003C/p\u003E\u003Cp class=\u0027fsdocs-para\u0027\u003ECan cause a second type-check when \u0060enablePartialTypeChecking\u0060 is true on the FSharpChecker.\u003C/p\u003E","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#GetParsingOptionsFromCommandLineArgs","title":"FSharpChecker.GetParsingOptionsFromCommandLineArgs","content":"FSharpChecker.GetParsingOptionsFromCommandLineArgs \nGetParsingOptionsFromCommandLineArgs \n\u003Cp class=\u0027fsdocs-para\u0027\u003EGet the FSharpParsingOptions implied by a set of command line arguments.\u003C/p\u003E","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#GetParsingOptionsFromCommandLineArgs","title":"FSharpChecker.GetParsingOptionsFromCommandLineArgs","content":"FSharpChecker.GetParsingOptionsFromCommandLineArgs \nGetParsingOptionsFromCommandLineArgs \n\u003Cp class=\u0027fsdocs-para\u0027\u003EGet the FSharpParsingOptions implied by a set of command line arguments and list of source files.\u003C/p\u003E","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#GetParsingOptionsFromProjectOptions","title":"FSharpChecker.GetParsingOptionsFromProjectOptions","content":"FSharpChecker.GetParsingOptionsFromProjectOptions \nGetParsingOptionsFromProjectOptions \n\u003Cp class=\u0027fsdocs-para\u0027\u003EGet the FSharpParsingOptions implied by a FSharpProjectOptions.\u003C/p\u003E","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#GetProjectOptionsFromCommandLineArgs","title":"FSharpChecker.GetProjectOptionsFromCommandLineArgs","content":"FSharpChecker.GetProjectOptionsFromCommandLineArgs \nGetProjectOptionsFromCommandLineArgs \nGet the FSharpProjectOptions implied by a set of command line arguments.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#GetProjectOptionsFromScript","title":"FSharpChecker.GetProjectOptionsFromScript","content":"FSharpChecker.GetProjectOptionsFromScript \nGetProjectOptionsFromScript \n\u003Cp class=\u0027fsdocs-para\u0027\u003EFor a given script file, get the FSharpProjectOptions implied by the #load closure.\u003C/p\u003E\u003Cp class=\u0027fsdocs-para\u0027\u003EAll files are read from the FileSystem API, except the file being checked.\u003C/p\u003E","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#GetProjectSnapshotFromScript","title":"FSharpChecker.GetProjectSnapshotFromScript","content":"FSharpChecker.GetProjectSnapshotFromScript \nGetProjectSnapshotFromScript \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#InvalidateAll","title":"FSharpChecker.InvalidateAll","content":"FSharpChecker.InvalidateAll \nInvalidateAll \n This function is called when the entire environment is known to have changed for reasons not encoded in the ProjectOptions of any project/compilation.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#InvalidateConfiguration","title":"FSharpChecker.InvalidateConfiguration","content":"FSharpChecker.InvalidateConfiguration \nInvalidateConfiguration \n  This function is called when the configuration is known to have changed for reasons not encoded in the projectSnapshot.\n  For example, dependent references may have been deleted or created.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#InvalidateConfiguration","title":"FSharpChecker.InvalidateConfiguration","content":"FSharpChecker.InvalidateConfiguration \nInvalidateConfiguration \n\n  This function is called when the configuration is known to have changed for reasons not encoded in the ProjectOptions.\n  For example, dependent references may have been deleted or created.\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#MatchBraces","title":"FSharpChecker.MatchBraces","content":"FSharpChecker.MatchBraces \nMatchBraces \n\n   Parse a source code file, returning information about brace matching in the file.\n   Return an enumeration of the matching parenthetical tokens in the file.\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#MatchBraces","title":"FSharpChecker.MatchBraces","content":"FSharpChecker.MatchBraces \nMatchBraces \n\n   Parse a source code file, returning information about brace matching in the file.\n   Return an enumeration of the matching parenthetical tokens in the file.\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#NotifyFileChanged","title":"FSharpChecker.NotifyFileChanged","content":"FSharpChecker.NotifyFileChanged \nNotifyFileChanged \n Notify the checker that given file has changed. This needs to be used when checker is created with documentSource = Custom.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#NotifyProjectCleaned","title":"FSharpChecker.NotifyProjectCleaned","content":"FSharpChecker.NotifyProjectCleaned \nNotifyProjectCleaned \n\n This function is called when a project has been cleaned/rebuilt, and thus any live type providers should be refreshed.\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#ParseAndCheckFileInProject","title":"FSharpChecker.ParseAndCheckFileInProject","content":"FSharpChecker.ParseAndCheckFileInProject \nParseAndCheckFileInProject \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#ParseAndCheckFileInProject","title":"FSharpChecker.ParseAndCheckFileInProject","content":"FSharpChecker.ParseAndCheckFileInProject \nParseAndCheckFileInProject \n\u003Cp class=\u0027fsdocs-para\u0027\u003E\n   Parse and check a source code file, returning a handle to the results\n \u003C/p\u003E\u003Cp class=\u0027fsdocs-para\u0027\u003E\n    Note: all files except the one being checked are read from the FileSystem API\n \u003C/p\u003E\u003Cp class=\u0027fsdocs-para\u0027\u003E\n   Return FSharpCheckFileAnswer.Aborted if a parse tree was not available.\n \u003C/p\u003E","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#ParseAndCheckProject","title":"FSharpChecker.ParseAndCheckProject","content":"FSharpChecker.ParseAndCheckProject \nParseAndCheckProject \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#ParseAndCheckProject","title":"FSharpChecker.ParseAndCheckProject","content":"FSharpChecker.ParseAndCheckProject \nParseAndCheckProject \n\u003Cp class=\u0027fsdocs-para\u0027\u003EParse and typecheck all files in a project.\u003C/p\u003E\u003Cp class=\u0027fsdocs-para\u0027\u003EAll files are read from the FileSystem API\u003C/p\u003E\u003Cp class=\u0027fsdocs-para\u0027\u003ECan cause a second type-check on the entire project when \u0060enablePartialTypeChecking\u0060 is true on the FSharpChecker.\u003C/p\u003E","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#ParseFile","title":"FSharpChecker.ParseFile","content":"FSharpChecker.ParseFile \nParseFile \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#ParseFile","title":"FSharpChecker.ParseFile","content":"FSharpChecker.ParseFile \nParseFile \n\n Parses a source code for a file and caches the results. Returns an AST that can be traversed for various features.\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#ParseFileInProject","title":"FSharpChecker.ParseFileInProject","content":"FSharpChecker.ParseFileInProject \nParseFileInProject \n\n Parses a source code for a file. Returns an AST that can be traversed for various features.\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#TokenizeFile","title":"FSharpChecker.TokenizeFile","content":"FSharpChecker.TokenizeFile \nTokenizeFile \n Tokenize an entire file, line by line","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#TokenizeLine","title":"FSharpChecker.TokenizeLine","content":"FSharpChecker.TokenizeLine \nTokenizeLine \n Tokenize a single line, returning token information and a tokenization state represented by an integer","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#TryGetRecentCheckResultsForFile","title":"FSharpChecker.TryGetRecentCheckResultsForFile","content":"FSharpChecker.TryGetRecentCheckResultsForFile \nTryGetRecentCheckResultsForFile \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#TryGetRecentCheckResultsForFile","title":"FSharpChecker.TryGetRecentCheckResultsForFile","content":"FSharpChecker.TryGetRecentCheckResultsForFile \nTryGetRecentCheckResultsForFile \n\n Try to get type check results for a file. This looks up the results of recent type checks of the\n same file, regardless of contents. The version tag specified in the original check of the file is returned.\n If the source of the file has changed the results returned by this function may be out of date, though may\n still be usable for generating intellisense menus and information.\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#ProjectChecked","title":"FSharpChecker.ProjectChecked","content":"FSharpChecker.ProjectChecked \nProjectChecked \n Notify the host that a project has been fully checked in the background (using file contents provided by the file system API)\n\n The event may be raised on a background thread.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#BeforeBackgroundFileCheck","title":"FSharpChecker.BeforeBackgroundFileCheck","content":"FSharpChecker.BeforeBackgroundFileCheck \nBeforeBackgroundFileCheck \n Notify the host that the logical type checking context for a file has now been updated internally\n and that the file has become eligible to be re-typechecked for errors.\n The event will be raised on a background thread.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#FileParsed","title":"FSharpChecker.FileParsed","content":"FSharpChecker.FileParsed \nFileParsed \n Raised after a parse of a file in the background analysis.\n\n The event will be raised on a background thread.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#UsesTransparentCompiler","title":"FSharpChecker.UsesTransparentCompiler","content":"FSharpChecker.UsesTransparentCompiler \nUsesTransparentCompiler \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#FileChecked","title":"FSharpChecker.FileChecked","content":"FSharpChecker.FileChecked \nFileChecked \n Raised after a check of a file in the background analysis.\n\n The event will be raised on a background thread.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#Create","title":"FSharpChecker.Create","content":"FSharpChecker.Create \nCreate \n\n Create an instance of an FSharpChecker.\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#ActualCheckFileCount","title":"FSharpChecker.ActualCheckFileCount","content":"FSharpChecker.ActualCheckFileCount \nActualCheckFileCount \n Report a statistic for testability","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#ActualParseFileCount","title":"FSharpChecker.ActualParseFileCount","content":"FSharpChecker.ActualParseFileCount \nActualParseFileCount \n Report a statistic for testability","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#Instance","title":"FSharpChecker.Instance","content":"FSharpChecker.Instance \nInstance \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpparsefileresults.html","title":"FSharpParseFileResults","content":"FSharpParseFileResults \n Represents the results of parsing an F# file and a set of analysis operations based on the parse tree alone. \nFSharpParseFileResults.FindParameterLocations \nFindParameterLocations \nFSharpParseFileResults.GetAllArgumentsForFunctionApplicationAtPosition \nGetAllArgumentsForFunctionApplicationAtPosition \nFSharpParseFileResults.GetNavigationItems \nGetNavigationItems \nFSharpParseFileResults.IsBindingALambdaAtPosition \nIsBindingALambdaAtPosition \nFSharpParseFileResults.IsPosContainedInApplication \nIsPosContainedInApplication \nFSharpParseFileResults.IsPositionContainedInACurriedParameter \nIsPositionContainedInACurriedParameter \nFSharpParseFileResults.IsPositionWithinRecordDefinition \nIsPositionWithinRecordDefinition \nFSharpParseFileResults.IsPositionWithinTypeDefinition \nIsPositionWithinTypeDefinition \nFSharpParseFileResults.IsTypeAnnotationGivenAtPosition \nIsTypeAnnotationGivenAtPosition \nFSharpParseFileResults.IsTypeName \nIsTypeName \nFSharpParseFileResults.TryIdentOfPipelineContainingPosAndNumArgsApplied \nTryIdentOfPipelineContainingPosAndNumArgsApplied \nFSharpParseFileResults.TryRangeOfExprInYieldOrReturn \nTryRangeOfExprInYieldOrReturn \nFSharpParseFileResults.TryRangeOfExpressionBeingDereferencedContainingPos \nTryRangeOfExpressionBeingDereferencedContainingPos \nFSharpParseFileResults.TryRangeOfFunctionOrMethodBeingApplied \nTryRangeOfFunctionOrMethodBeingApplied \nFSharpParseFileResults.TryRangeOfNameOfNearestOuterBindingContainingPos \nTryRangeOfNameOfNearestOuterBindingContainingPos \nFSharpParseFileResults.TryRangeOfParenEnclosingOpEqualsGreaterUsage \nTryRangeOfParenEnclosingOpEqualsGreaterUsage \nFSharpParseFileResults.TryRangeOfRecordExpressionContainingPos \nTryRangeOfRecordExpressionContainingPos \nFSharpParseFileResults.TryRangeOfRefCellDereferenceContainingPos \nTryRangeOfRefCellDereferenceContainingPos \nFSharpParseFileResults.TryRangeOfReturnTypeHint \nTryRangeOfReturnTypeHint \nFSharpParseFileResults.TryRangeOfStringInterpolationContainingPos \nTryRangeOfStringInterpolationContainingPos \nFSharpParseFileResults.ValidateBreakpointLocation \nValidateBreakpointLocation \nFSharpParseFileResults.Diagnostics \nDiagnostics \nFSharpParseFileResults.DependencyFiles \nDependencyFiles \nFSharpParseFileResults.ParseHadErrors \nParseHadErrors \nFSharpParseFileResults.FileName \nFileName \nFSharpParseFileResults.ParseTree \nParseTree","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpparsefileresults.html#FindParameterLocations","title":"FSharpParseFileResults.FindParameterLocations","content":"FSharpParseFileResults.FindParameterLocations \nFindParameterLocations \n Notable parse info for ParameterInfo at a given location","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpparsefileresults.html#GetAllArgumentsForFunctionApplicationAtPosition","title":"FSharpParseFileResults.GetAllArgumentsForFunctionApplicationAtPosition","content":"FSharpParseFileResults.GetAllArgumentsForFunctionApplicationAtPosition \nGetAllArgumentsForFunctionApplicationAtPosition \n Gets the ranges of all arguments, if they can be found, for a function application at the given position.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpparsefileresults.html#GetNavigationItems","title":"FSharpParseFileResults.GetNavigationItems","content":"FSharpParseFileResults.GetNavigationItems \nGetNavigationItems \n Get declared items and the selected item at the specified location","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpparsefileresults.html#IsBindingALambdaAtPosition","title":"FSharpParseFileResults.IsBindingALambdaAtPosition","content":"FSharpParseFileResults.IsBindingALambdaAtPosition \nIsBindingALambdaAtPosition \n Determines if the binding at the given position is bound to a lambda expression","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpparsefileresults.html#IsPosContainedInApplication","title":"FSharpParseFileResults.IsPosContainedInApplication","content":"FSharpParseFileResults.IsPosContainedInApplication \nIsPosContainedInApplication \n Determines if the given position is inside a function or method application.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpparsefileresults.html#IsPositionContainedInACurriedParameter","title":"FSharpParseFileResults.IsPositionContainedInACurriedParameter","content":"FSharpParseFileResults.IsPositionContainedInACurriedParameter \nIsPositionContainedInACurriedParameter \n Determines if the given position is contained within a curried parameter in a binding.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpparsefileresults.html#IsPositionWithinRecordDefinition","title":"FSharpParseFileResults.IsPositionWithinRecordDefinition","content":"FSharpParseFileResults.IsPositionWithinRecordDefinition \nIsPositionWithinRecordDefinition \n Determines if the given position is bound to a record definition","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpparsefileresults.html#IsPositionWithinTypeDefinition","title":"FSharpParseFileResults.IsPositionWithinTypeDefinition","content":"FSharpParseFileResults.IsPositionWithinTypeDefinition \nIsPositionWithinTypeDefinition \n Determines if the given position is bound to a type definition","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpparsefileresults.html#IsTypeAnnotationGivenAtPosition","title":"FSharpParseFileResults.IsTypeAnnotationGivenAtPosition","content":"FSharpParseFileResults.IsTypeAnnotationGivenAtPosition \nIsTypeAnnotationGivenAtPosition \n Determines if the expression or pattern at the given position has a type annotation","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpparsefileresults.html#IsTypeName","title":"FSharpParseFileResults.IsTypeName","content":"FSharpParseFileResults.IsTypeName \nIsTypeName \n Determines if the range points to a type name in the type definition.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpparsefileresults.html#TryIdentOfPipelineContainingPosAndNumArgsApplied","title":"FSharpParseFileResults.TryIdentOfPipelineContainingPosAndNumArgsApplied","content":"FSharpParseFileResults.TryIdentOfPipelineContainingPosAndNumArgsApplied \nTryIdentOfPipelineContainingPosAndNumArgsApplied \n Attempts to find an Ident of a pipeline containing the given position, and the number of args already applied in that pipeline.\n For example, \u0027[1..10] |\u003E List.map \u0027 would give back the ident of \u0027|\u003E\u0027 and 1, because it applied 1 arg (the list) to \u0027List.map\u0027.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpparsefileresults.html#TryRangeOfExprInYieldOrReturn","title":"FSharpParseFileResults.TryRangeOfExprInYieldOrReturn","content":"FSharpParseFileResults.TryRangeOfExprInYieldOrReturn \nTryRangeOfExprInYieldOrReturn \n Attempts to find the range of an expression \u0060expr\u0060 contained in a \u0060yield expr\u0060  or \u0060return expr\u0060 expression (and bang-variants).","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpparsefileresults.html#TryRangeOfExpressionBeingDereferencedContainingPos","title":"FSharpParseFileResults.TryRangeOfExpressionBeingDereferencedContainingPos","content":"FSharpParseFileResults.TryRangeOfExpressionBeingDereferencedContainingPos \nTryRangeOfExpressionBeingDereferencedContainingPos \n Gets the range of an expression being dereferenced. For \u0060!expr\u0060, gives the range of \u0060expr\u0060","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpparsefileresults.html#TryRangeOfFunctionOrMethodBeingApplied","title":"FSharpParseFileResults.TryRangeOfFunctionOrMethodBeingApplied","content":"FSharpParseFileResults.TryRangeOfFunctionOrMethodBeingApplied \nTryRangeOfFunctionOrMethodBeingApplied \n Attempts to find the range of a function or method that is being applied. Also accounts for functions in pipelines.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpparsefileresults.html#TryRangeOfNameOfNearestOuterBindingContainingPos","title":"FSharpParseFileResults.TryRangeOfNameOfNearestOuterBindingContainingPos","content":"FSharpParseFileResults.TryRangeOfNameOfNearestOuterBindingContainingPos \nTryRangeOfNameOfNearestOuterBindingContainingPos \n Attempts to find the range of the name of the nearest outer binding that contains a given position.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpparsefileresults.html#TryRangeOfParenEnclosingOpEqualsGreaterUsage","title":"FSharpParseFileResults.TryRangeOfParenEnclosingOpEqualsGreaterUsage","content":"FSharpParseFileResults.TryRangeOfParenEnclosingOpEqualsGreaterUsage \nTryRangeOfParenEnclosingOpEqualsGreaterUsage \n Attempts to find the range of an attempted lambda expression or pattern, the argument range, and the expr range when writing a C#-style \u0022lambda\u0022 (which is actually an operator application)","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpparsefileresults.html#TryRangeOfRecordExpressionContainingPos","title":"FSharpParseFileResults.TryRangeOfRecordExpressionContainingPos","content":"FSharpParseFileResults.TryRangeOfRecordExpressionContainingPos \nTryRangeOfRecordExpressionContainingPos \n Attempts to find the range of a record expression containing the given position.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpparsefileresults.html#TryRangeOfRefCellDereferenceContainingPos","title":"FSharpParseFileResults.TryRangeOfRefCellDereferenceContainingPos","content":"FSharpParseFileResults.TryRangeOfRefCellDereferenceContainingPos \nTryRangeOfRefCellDereferenceContainingPos \n Given the position of an expression, attempts to find the range of the\n \u0027!\u0027 in a dereference operation of that expression, like:\n \u0027!expr\u0027, \u0027!(expr)\u0027, etc.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpparsefileresults.html#TryRangeOfReturnTypeHint","title":"FSharpParseFileResults.TryRangeOfReturnTypeHint","content":"FSharpParseFileResults.TryRangeOfReturnTypeHint \nTryRangeOfReturnTypeHint \n Gets the range of where a return type hint could be placed for a function binding. This will be right in front of the equals sign.\n Returns None if type annotation is present.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpparsefileresults.html#TryRangeOfStringInterpolationContainingPos","title":"FSharpParseFileResults.TryRangeOfStringInterpolationContainingPos","content":"FSharpParseFileResults.TryRangeOfStringInterpolationContainingPos \nTryRangeOfStringInterpolationContainingPos \n Attempts to find the range of the string interpolation that contains a given position.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpparsefileresults.html#ValidateBreakpointLocation","title":"FSharpParseFileResults.ValidateBreakpointLocation","content":"FSharpParseFileResults.ValidateBreakpointLocation \nValidateBreakpointLocation \n Return the inner-most range associated with a possible breakpoint location","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpparsefileresults.html#Diagnostics","title":"FSharpParseFileResults.Diagnostics","content":"FSharpParseFileResults.Diagnostics \nDiagnostics \n Get the errors and warnings for the parse","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpparsefileresults.html#DependencyFiles","title":"FSharpParseFileResults.DependencyFiles","content":"FSharpParseFileResults.DependencyFiles \nDependencyFiles \n When these files change then the build is invalid","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpparsefileresults.html#ParseHadErrors","title":"FSharpParseFileResults.ParseHadErrors","content":"FSharpParseFileResults.ParseHadErrors \nParseHadErrors \n Indicates if any errors occurred during the parse","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpparsefileresults.html#FileName","title":"FSharpParseFileResults.FileName","content":"FSharpParseFileResults.FileName \nFileName \n Name of the file for which this information were created","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpparsefileresults.html#ParseTree","title":"FSharpParseFileResults.ParseTree","content":"FSharpParseFileResults.ParseTree \nParseTree \n The syntax tree resulting from the parse","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpparsingoptions.html","title":"FSharpParsingOptions","content":"FSharpParsingOptions \n Options used to determine active --define conditionals and other options relevant to parsing files in a project \nFSharpParsingOptions.Default \nDefault \nFSharpParsingOptions.SourceFiles \nSourceFiles \nFSharpParsingOptions.ApplyLineDirectives \nApplyLineDirectives \nFSharpParsingOptions.ConditionalDefines \nConditionalDefines \nFSharpParsingOptions.DiagnosticOptions \nDiagnosticOptions \nFSharpParsingOptions.LangVersionText \nLangVersionText \nFSharpParsingOptions.IsInteractive \nIsInteractive \nFSharpParsingOptions.IndentationAwareSyntax \nIndentationAwareSyntax \nFSharpParsingOptions.StrictIndentation \nStrictIndentation \nFSharpParsingOptions.CompilingFSharpCore \nCompilingFSharpCore \nFSharpParsingOptions.IsExe \nIsExe","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpparsingoptions.html#Default","title":"FSharpParsingOptions.Default","content":"FSharpParsingOptions.Default \nDefault \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpparsingoptions.html#SourceFiles","title":"FSharpParsingOptions.SourceFiles","content":"FSharpParsingOptions.SourceFiles \nSourceFiles \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpparsingoptions.html#ApplyLineDirectives","title":"FSharpParsingOptions.ApplyLineDirectives","content":"FSharpParsingOptions.ApplyLineDirectives \nApplyLineDirectives \n Indicates if the ranges returned by parsing should have \u0027#line\u0027 directives applied to them.\n When compiling code, this should usually be \u0027true\u0027.  For editing tools, this is usually \u0027false.\n The default for FSharpParsingOptions.ApplyLineDirectives is \u0027false\u0027.  The default for\n FSharpParsingOptions arising from FSharpProjectOptions will be \u0027true\u0027 unless \u0027--ignorelinedirectives\u0027 is used in the\n parameters from which these are derived.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpparsingoptions.html#ConditionalDefines","title":"FSharpParsingOptions.ConditionalDefines","content":"FSharpParsingOptions.ConditionalDefines \nConditionalDefines \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpparsingoptions.html#DiagnosticOptions","title":"FSharpParsingOptions.DiagnosticOptions","content":"FSharpParsingOptions.DiagnosticOptions \nDiagnosticOptions \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpparsingoptions.html#LangVersionText","title":"FSharpParsingOptions.LangVersionText","content":"FSharpParsingOptions.LangVersionText \nLangVersionText \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpparsingoptions.html#IsInteractive","title":"FSharpParsingOptions.IsInteractive","content":"FSharpParsingOptions.IsInteractive \nIsInteractive \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpparsingoptions.html#IndentationAwareSyntax","title":"FSharpParsingOptions.IndentationAwareSyntax","content":"FSharpParsingOptions.IndentationAwareSyntax \nIndentationAwareSyntax \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpparsingoptions.html#StrictIndentation","title":"FSharpParsingOptions.StrictIndentation","content":"FSharpParsingOptions.StrictIndentation \nStrictIndentation \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpparsingoptions.html#CompilingFSharpCore","title":"FSharpParsingOptions.CompilingFSharpCore","content":"FSharpParsingOptions.CompilingFSharpCore \nCompilingFSharpCore \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpparsingoptions.html#IsExe","title":"FSharpParsingOptions.IsExe","content":"FSharpParsingOptions.IsExe \nIsExe \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpprojectcontext.html","title":"FSharpProjectContext","content":"FSharpProjectContext \n Represents the checking context implied by the ProjectOptions \nFSharpProjectContext.GetReferencedAssemblies \nGetReferencedAssemblies \nFSharpProjectContext.AccessibilityRights \nAccessibilityRights \nFSharpProjectContext.ProjectOptions \nProjectOptions","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpprojectcontext.html#GetReferencedAssemblies","title":"FSharpProjectContext.GetReferencedAssemblies","content":"FSharpProjectContext.GetReferencedAssemblies \nGetReferencedAssemblies \n Get the resolution and full contents of the assemblies referenced by the project options","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpprojectcontext.html#AccessibilityRights","title":"FSharpProjectContext.AccessibilityRights","content":"FSharpProjectContext.AccessibilityRights \nAccessibilityRights \n Get the accessibility rights for this project context w.r.t. InternalsVisibleTo attributes granting access to other assemblies","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpprojectcontext.html#ProjectOptions","title":"FSharpProjectContext.ProjectOptions","content":"FSharpProjectContext.ProjectOptions \nProjectOptions \n Get the project options","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpprojectoptions.html","title":"FSharpProjectOptions","content":"FSharpProjectOptions \nA set of information describing a project or script build configuration. \nFSharpProjectOptions.ProjectFileName \nProjectFileName \nFSharpProjectOptions.ProjectId \nProjectId \nFSharpProjectOptions.SourceFiles \nSourceFiles \nFSharpProjectOptions.OtherOptions \nOtherOptions \nFSharpProjectOptions.ReferencedProjects \nReferencedProjects \nFSharpProjectOptions.IsIncompleteTypeCheckEnvironment \nIsIncompleteTypeCheckEnvironment \nFSharpProjectOptions.UseScriptResolutionRules \nUseScriptResolutionRules \nFSharpProjectOptions.LoadTime \nLoadTime \nFSharpProjectOptions.UnresolvedReferences \nUnresolvedReferences \nFSharpProjectOptions.OriginalLoadReferences \nOriginalLoadReferences \nFSharpProjectOptions.Stamp \nStamp","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpprojectoptions.html#ProjectFileName","title":"FSharpProjectOptions.ProjectFileName","content":"FSharpProjectOptions.ProjectFileName \nProjectFileName \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpprojectoptions.html#ProjectId","title":"FSharpProjectOptions.ProjectId","content":"FSharpProjectOptions.ProjectId \nProjectId \n This is the unique identifier for the project, it is case-sensitive. If it\u0027s None, will key off of ProjectFileName in our caching.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpprojectoptions.html#SourceFiles","title":"FSharpProjectOptions.SourceFiles","content":"FSharpProjectOptions.SourceFiles \nSourceFiles \n The files in the project","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpprojectoptions.html#OtherOptions","title":"FSharpProjectOptions.OtherOptions","content":"FSharpProjectOptions.OtherOptions \nOtherOptions \n Additional command line argument options for the project. These can include additional files and references.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpprojectoptions.html#ReferencedProjects","title":"FSharpProjectOptions.ReferencedProjects","content":"FSharpProjectOptions.ReferencedProjects \nReferencedProjects \n The command line arguments for the other projects referenced by this project, indexed by the\n exact text used in the \u0022-r:\u0022 reference in FSharpProjectOptions.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpprojectoptions.html#IsIncompleteTypeCheckEnvironment","title":"FSharpProjectOptions.IsIncompleteTypeCheckEnvironment","content":"FSharpProjectOptions.IsIncompleteTypeCheckEnvironment \nIsIncompleteTypeCheckEnvironment \n When true, the typechecking environment is known a priori to be incomplete, for\n example when a .fs file is opened outside of a project. In this case, the number of error\n messages reported is reduced.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpprojectoptions.html#UseScriptResolutionRules","title":"FSharpProjectOptions.UseScriptResolutionRules","content":"FSharpProjectOptions.UseScriptResolutionRules \nUseScriptResolutionRules \n When true, use the reference resolution rules for scripts rather than the rules for compiler.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpprojectoptions.html#LoadTime","title":"FSharpProjectOptions.LoadTime","content":"FSharpProjectOptions.LoadTime \nLoadTime \n Timestamp of project/script load, used to differentiate between different instances of a project load.\n This ensures that a complete reload of the project or script type checking\n context occurs on project or script unload/reload.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpprojectoptions.html#UnresolvedReferences","title":"FSharpProjectOptions.UnresolvedReferences","content":"FSharpProjectOptions.UnresolvedReferences \nUnresolvedReferences \n Unused in this API and should be \u0027None\u0027 when used as user-specified input","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpprojectoptions.html#OriginalLoadReferences","title":"FSharpProjectOptions.OriginalLoadReferences","content":"FSharpProjectOptions.OriginalLoadReferences \nOriginalLoadReferences \n Unused in this API and should be \u0027[]\u0027 when used as user-specified input","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpprojectoptions.html#Stamp","title":"FSharpProjectOptions.Stamp","content":"FSharpProjectOptions.Stamp \nStamp \n An optional stamp to uniquely identify this set of options\n If two sets of options both have stamps, then they are considered equal\n if and only if the stamps are equal","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpprojectsnapshot.html","title":"FSharpProjectSnapshot","content":"FSharpProjectSnapshot \n \nFSharpProjectSnapshot.UseScriptResolutionRules \nUseScriptResolutionRules \nFSharpProjectSnapshot.IsIncompleteTypeCheckEnvironment \nIsIncompleteTypeCheckEnvironment \nFSharpProjectSnapshot.OutputFileName \nOutputFileName \nFSharpProjectSnapshot.ReferencesOnDisk \nReferencesOnDisk \nFSharpProjectSnapshot.ReferencedProjects \nReferencedProjects \nFSharpProjectSnapshot.SourceFiles \nSourceFiles \nFSharpProjectSnapshot.ProjectFileName \nProjectFileName \nFSharpProjectSnapshot.ProjectConfig \nProjectConfig \nFSharpProjectSnapshot.Stamp \nStamp \nFSharpProjectSnapshot.LoadTime \nLoadTime \nFSharpProjectSnapshot.OtherOptions \nOtherOptions \nFSharpProjectSnapshot.Identifier \nIdentifier \nFSharpProjectSnapshot.OriginalLoadReferences \nOriginalLoadReferences \nFSharpProjectSnapshot.Label \nLabel \nFSharpProjectSnapshot.UnresolvedReferences \nUnresolvedReferences \nFSharpProjectSnapshot.ProjectId \nProjectId","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpprojectsnapshot.html#UseScriptResolutionRules","title":"FSharpProjectSnapshot.UseScriptResolutionRules","content":"FSharpProjectSnapshot.UseScriptResolutionRules \nUseScriptResolutionRules \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpprojectsnapshot.html#IsIncompleteTypeCheckEnvironment","title":"FSharpProjectSnapshot.IsIncompleteTypeCheckEnvironment","content":"FSharpProjectSnapshot.IsIncompleteTypeCheckEnvironment \nIsIncompleteTypeCheckEnvironment \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpprojectsnapshot.html#OutputFileName","title":"FSharpProjectSnapshot.OutputFileName","content":"FSharpProjectSnapshot.OutputFileName \nOutputFileName \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpprojectsnapshot.html#ReferencesOnDisk","title":"FSharpProjectSnapshot.ReferencesOnDisk","content":"FSharpProjectSnapshot.ReferencesOnDisk \nReferencesOnDisk \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpprojectsnapshot.html#ReferencedProjects","title":"FSharpProjectSnapshot.ReferencedProjects","content":"FSharpProjectSnapshot.ReferencedProjects \nReferencedProjects \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpprojectsnapshot.html#SourceFiles","title":"FSharpProjectSnapshot.SourceFiles","content":"FSharpProjectSnapshot.SourceFiles \nSourceFiles \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpprojectsnapshot.html#ProjectFileName","title":"FSharpProjectSnapshot.ProjectFileName","content":"FSharpProjectSnapshot.ProjectFileName \nProjectFileName \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpprojectsnapshot.html#ProjectConfig","title":"FSharpProjectSnapshot.ProjectConfig","content":"FSharpProjectSnapshot.ProjectConfig \nProjectConfig \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpprojectsnapshot.html#Stamp","title":"FSharpProjectSnapshot.Stamp","content":"FSharpProjectSnapshot.Stamp \nStamp \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpprojectsnapshot.html#LoadTime","title":"FSharpProjectSnapshot.LoadTime","content":"FSharpProjectSnapshot.LoadTime \nLoadTime \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpprojectsnapshot.html#OtherOptions","title":"FSharpProjectSnapshot.OtherOptions","content":"FSharpProjectSnapshot.OtherOptions \nOtherOptions \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpprojectsnapshot.html#Identifier","title":"FSharpProjectSnapshot.Identifier","content":"FSharpProjectSnapshot.Identifier \nIdentifier \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpprojectsnapshot.html#OriginalLoadReferences","title":"FSharpProjectSnapshot.OriginalLoadReferences","content":"FSharpProjectSnapshot.OriginalLoadReferences \nOriginalLoadReferences \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpprojectsnapshot.html#Label","title":"FSharpProjectSnapshot.Label","content":"FSharpProjectSnapshot.Label \nLabel \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpprojectsnapshot.html#UnresolvedReferences","title":"FSharpProjectSnapshot.UnresolvedReferences","content":"FSharpProjectSnapshot.UnresolvedReferences \nUnresolvedReferences \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpprojectsnapshot.html#ProjectId","title":"FSharpProjectSnapshot.ProjectId","content":"FSharpProjectSnapshot.ProjectId \nProjectId \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpreferencedproject.html","title":"FSharpReferencedProject","content":"FSharpReferencedProject \n \nFSharpReferencedProject.OutputFile \nOutputFile \nFSharpReferencedProject.IsFSharpReference \nIsFSharpReference \nFSharpReferencedProject.IsPEReference \nIsPEReference \nFSharpReferencedProject.IsILModuleReference \nIsILModuleReference \nFSharpReferencedProject.FSharpReference \nFSharpReference \nFSharpReferencedProject.PEReference \nPEReference \nFSharpReferencedProject.ILModuleReference \nILModuleReference","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpreferencedproject.html#OutputFile","title":"FSharpReferencedProject.OutputFile","content":"FSharpReferencedProject.OutputFile \nOutputFile \n\n The fully qualified path to the output of the referenced project. This should be the same value as the \u003Ccode\u003E-r\u003C/code\u003E\n reference in the project options for this referenced project.\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpreferencedproject.html#IsFSharpReference","title":"FSharpReferencedProject.IsFSharpReference","content":"FSharpReferencedProject.IsFSharpReference \nIsFSharpReference \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpreferencedproject.html#IsPEReference","title":"FSharpReferencedProject.IsPEReference","content":"FSharpReferencedProject.IsPEReference \nIsPEReference \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpreferencedproject.html#IsILModuleReference","title":"FSharpReferencedProject.IsILModuleReference","content":"FSharpReferencedProject.IsILModuleReference \nIsILModuleReference \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpreferencedproject.html#FSharpReference","title":"FSharpReferencedProject.FSharpReference","content":"FSharpReferencedProject.FSharpReference \nFSharpReference \n\n A reference for an F# project. The physical data for it is stored/cached inside of the compiler service.\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpreferencedproject.html#PEReference","title":"FSharpReferencedProject.PEReference","content":"FSharpReferencedProject.PEReference \nPEReference \n\n A reference for any portable executable, including F#. The stream is owned by this reference.\n The stream will be automatically disposed when there are no references to FSharpReferencedProject and is GC collected.\n Once the stream is evaluated, the function that constructs the stream will no longer be referenced by anything.\n If the stream evaluation throws an exception, it will be automatically handled.\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpreferencedproject.html#ILModuleReference","title":"FSharpReferencedProject.ILModuleReference","content":"FSharpReferencedProject.ILModuleReference \nILModuleReference \n\n A reference from an ILModuleReader.\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpsymboluse.html","title":"FSharpSymbolUse","content":"FSharpSymbolUse \n Represents the use of an F# symbol from F# source code \nFSharpSymbolUse.IsFromType \nIsFromType \nFSharpSymbolUse.IsPrivateToFile \nIsPrivateToFile \nFSharpSymbolUse.IsFromPattern \nIsFromPattern \nFSharpSymbolUse.IsFromDispatchSlotImplementation \nIsFromDispatchSlotImplementation \nFSharpSymbolUse.Symbol \nSymbol \nFSharpSymbolUse.IsFromOpenStatement \nIsFromOpenStatement \nFSharpSymbolUse.DisplayContext \nDisplayContext \nFSharpSymbolUse.Range \nRange \nFSharpSymbolUse.IsFromComputationExpression \nIsFromComputationExpression \nFSharpSymbolUse.IsFromDefinition \nIsFromDefinition \nFSharpSymbolUse.GenericArguments \nGenericArguments \nFSharpSymbolUse.FileName \nFileName \nFSharpSymbolUse.IsPrivateToFileAndSignatureFile \nIsPrivateToFileAndSignatureFile \nFSharpSymbolUse.IsFromUse \nIsFromUse \nFSharpSymbolUse.IsFromAttribute \nIsFromAttribute","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpsymboluse.html#IsFromType","title":"FSharpSymbolUse.IsFromType","content":"FSharpSymbolUse.IsFromType \nIsFromType \n Indicates if the reference is in a syntactic type","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpsymboluse.html#IsPrivateToFile","title":"FSharpSymbolUse.IsPrivateToFile","content":"FSharpSymbolUse.IsPrivateToFile \nIsPrivateToFile \n Indicates if the FSharpSymbolUse is declared as private","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpsymboluse.html#IsFromPattern","title":"FSharpSymbolUse.IsFromPattern","content":"FSharpSymbolUse.IsFromPattern \nIsFromPattern \n Indicates if the reference is in a pattern","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpsymboluse.html#IsFromDispatchSlotImplementation","title":"FSharpSymbolUse.IsFromDispatchSlotImplementation","content":"FSharpSymbolUse.IsFromDispatchSlotImplementation \nIsFromDispatchSlotImplementation \n Indicates if the reference is via the member being implemented in a class or object expression","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpsymboluse.html#Symbol","title":"FSharpSymbolUse.Symbol","content":"FSharpSymbolUse.Symbol \nSymbol \n The symbol referenced","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpsymboluse.html#IsFromOpenStatement","title":"FSharpSymbolUse.IsFromOpenStatement","content":"FSharpSymbolUse.IsFromOpenStatement \nIsFromOpenStatement \n Indicates if the reference is in open statement","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpsymboluse.html#DisplayContext","title":"FSharpSymbolUse.DisplayContext","content":"FSharpSymbolUse.DisplayContext \nDisplayContext \n The display context active at the point where the symbol is used. Can be passed to FSharpType.Format\n and other methods to format items in a way that is suitable for a specific source code location.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpsymboluse.html#Range","title":"FSharpSymbolUse.Range","content":"FSharpSymbolUse.Range \nRange \n The range of text representing the reference to the symbol","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpsymboluse.html#IsFromComputationExpression","title":"FSharpSymbolUse.IsFromComputationExpression","content":"FSharpSymbolUse.IsFromComputationExpression \nIsFromComputationExpression \n Indicates if the reference is either a builder or a custom operation in a computation expression","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpsymboluse.html#IsFromDefinition","title":"FSharpSymbolUse.IsFromDefinition","content":"FSharpSymbolUse.IsFromDefinition \nIsFromDefinition \n Indicates if the reference is a definition for the symbol, either in a signature or implementation","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpsymboluse.html#GenericArguments","title":"FSharpSymbolUse.GenericArguments","content":"FSharpSymbolUse.GenericArguments \nGenericArguments \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpsymboluse.html#FileName","title":"FSharpSymbolUse.FileName","content":"FSharpSymbolUse.FileName \nFileName \n The file name the reference occurs in","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpsymboluse.html#IsPrivateToFileAndSignatureFile","title":"FSharpSymbolUse.IsPrivateToFileAndSignatureFile","content":"FSharpSymbolUse.IsPrivateToFileAndSignatureFile \nIsPrivateToFileAndSignatureFile \n Indicates if the FSharpSymbolUse is private to the implementation \u0026 signature file.\n This is true for function and method parameters.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpsymboluse.html#IsFromUse","title":"FSharpSymbolUse.IsFromUse","content":"FSharpSymbolUse.IsFromUse \nIsFromUse \n Indicates if the reference is used for example at a call site","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpsymboluse.html#IsFromAttribute","title":"FSharpSymbolUse.IsFromAttribute","content":"FSharpSymbolUse.IsFromAttribute \nIsFromAttribute \n Indicates if the reference is in an attribute","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpunresolvedreferencesset.html","title":"FSharpUnresolvedReferencesSet","content":"FSharpUnresolvedReferencesSet \nUnused in this API","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fileversion.html","title":"FileVersion","content":"FileVersion \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-ilegacyreferenceresolver.html","title":"ILegacyReferenceResolver","content":"ILegacyReferenceResolver \n \nILegacyReferenceResolver.HighestInstalledNetFrameworkVersion \nHighestInstalledNetFrameworkVersion \nILegacyReferenceResolver.Resolve \nResolve \nILegacyReferenceResolver.DotNetFrameworkReferenceAssembliesRootDirectory \nDotNetFrameworkReferenceAssembliesRootDirectory","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-ilegacyreferenceresolver.html#HighestInstalledNetFrameworkVersion","title":"ILegacyReferenceResolver.HighestInstalledNetFrameworkVersion","content":"ILegacyReferenceResolver.HighestInstalledNetFrameworkVersion \nHighestInstalledNetFrameworkVersion \n Get the \u0022v4.5.1\u0022-style moniker for the highest installed .NET Framework version.\n This is the value passed back to Resolve if no explicit \u0022mscorlib\u0022 has been given.\n\n Note: If an explicit \u0022mscorlib\u0022 is given, then --noframework is being used, and the whole ReferenceResolver logic is essentially\n unused.  However in the future an option may be added to allow an explicit specification of\n a .NET Framework version to use for scripts.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-ilegacyreferenceresolver.html#Resolve","title":"ILegacyReferenceResolver.Resolve","content":"ILegacyReferenceResolver.Resolve \nResolve \n Perform assembly resolution on the given references under the given conditions","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-ilegacyreferenceresolver.html#DotNetFrameworkReferenceAssembliesRootDirectory","title":"ILegacyReferenceResolver.DotNetFrameworkReferenceAssembliesRootDirectory","content":"ILegacyReferenceResolver.DotNetFrameworkReferenceAssembliesRootDirectory \nDotNetFrameworkReferenceAssembliesRootDirectory \n Get the Reference Assemblies directory for the .NET Framework (on Windows)\n This is added to the default resolution path for\n design-time compilations.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-legacyreferenceresolver.html","title":"LegacyReferenceResolver","content":"LegacyReferenceResolver \n \nLegacyReferenceResolver.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-legacyreferenceresolver.html#\u0060\u0060.ctor\u0060\u0060","title":"LegacyReferenceResolver.\u0060\u0060.ctor\u0060\u0060","content":"LegacyReferenceResolver.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-legacyresolutionenvironment.html","title":"LegacyResolutionEnvironment","content":"LegacyResolutionEnvironment \n \nLegacyResolutionEnvironment.IsCompilationAndEvaluation \nIsCompilationAndEvaluation \nLegacyResolutionEnvironment.IsEditingOrCompilation \nIsEditingOrCompilation \nLegacyResolutionEnvironment.EditingOrCompilation \nEditingOrCompilation \nLegacyResolutionEnvironment.CompilationAndEvaluation \nCompilationAndEvaluation","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-legacyresolutionenvironment.html#IsCompilationAndEvaluation","title":"LegacyResolutionEnvironment.IsCompilationAndEvaluation","content":"LegacyResolutionEnvironment.IsCompilationAndEvaluation \nIsCompilationAndEvaluation \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-legacyresolutionenvironment.html#IsEditingOrCompilation","title":"LegacyResolutionEnvironment.IsEditingOrCompilation","content":"LegacyResolutionEnvironment.IsEditingOrCompilation \nIsEditingOrCompilation \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-legacyresolutionenvironment.html#EditingOrCompilation","title":"LegacyResolutionEnvironment.EditingOrCompilation","content":"LegacyResolutionEnvironment.EditingOrCompilation \nEditingOrCompilation \n Indicates a script or source being edited or compiled. Uses reference assemblies (not implementation assemblies).","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-legacyresolutionenvironment.html#CompilationAndEvaluation","title":"LegacyResolutionEnvironment.CompilationAndEvaluation","content":"LegacyResolutionEnvironment.CompilationAndEvaluation \nCompilationAndEvaluation \n Indicates a script or source being dynamically compiled and executed. Uses implementation assemblies.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-legacyresolutionfailure.html","title":"LegacyResolutionFailure","content":"LegacyResolutionFailure \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-legacyresolvedfile.html","title":"LegacyResolvedFile","content":"LegacyResolvedFile \n \nLegacyResolvedFile.itemSpec \nitemSpec \nLegacyResolvedFile.prepareToolTip \nprepareToolTip \nLegacyResolvedFile.baggage \nbaggage","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-legacyresolvedfile.html#itemSpec","title":"LegacyResolvedFile.itemSpec","content":"LegacyResolvedFile.itemSpec \nitemSpec \n Item specification.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-legacyresolvedfile.html#prepareToolTip","title":"LegacyResolvedFile.prepareToolTip","content":"LegacyResolvedFile.prepareToolTip \nprepareToolTip \n Prepare textual information about where the assembly was resolved from, used for tooltip output","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-legacyresolvedfile.html#baggage","title":"LegacyResolvedFile.baggage","content":"LegacyResolvedFile.baggage \nbaggage \n Round-tripped baggage","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-sourcetexthash.html","title":"SourceTextHash","content":"SourceTextHash \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-transparentcompiler-cachesizes.html","title":"CacheSizes","content":"CacheSizes \n \nCacheSizes.Create \nCreate \nCacheSizes.ParseFileKeepStrongly \nParseFileKeepStrongly \nCacheSizes.ParseFileKeepWeakly \nParseFileKeepWeakly \nCacheSizes.ParseFileWithoutProjectKeepStrongly \nParseFileWithoutProjectKeepStrongly \nCacheSizes.ParseFileWithoutProjectKeepWeakly \nParseFileWithoutProjectKeepWeakly \nCacheSizes.ParseAndCheckFileInProjectKeepStrongly \nParseAndCheckFileInProjectKeepStrongly \nCacheSizes.ParseAndCheckFileInProjectKeepWeakly \nParseAndCheckFileInProjectKeepWeakly \nCacheSizes.ParseAndCheckAllFilesInProjectKeepStrongly \nParseAndCheckAllFilesInProjectKeepStrongly \nCacheSizes.ParseAndCheckAllFilesInProjectKeepWeakly \nParseAndCheckAllFilesInProjectKeepWeakly \nCacheSizes.ParseAndCheckProjectKeepStrongly \nParseAndCheckProjectKeepStrongly \nCacheSizes.ParseAndCheckProjectKeepWeakly \nParseAndCheckProjectKeepWeakly \nCacheSizes.FrameworkImportsKeepStrongly \nFrameworkImportsKeepStrongly \nCacheSizes.FrameworkImportsKeepWeakly \nFrameworkImportsKeepWeakly \nCacheSizes.BootstrapInfoStaticKeepStrongly \nBootstrapInfoStaticKeepStrongly \nCacheSizes.BootstrapInfoStaticKeepWeakly \nBootstrapInfoStaticKeepWeakly \nCacheSizes.BootstrapInfoKeepStrongly \nBootstrapInfoKeepStrongly \nCacheSizes.BootstrapInfoKeepWeakly \nBootstrapInfoKeepWeakly \nCacheSizes.TcLastFileKeepStrongly \nTcLastFileKeepStrongly \nCacheSizes.TcLastFileKeepWeakly \nTcLastFileKeepWeakly \nCacheSizes.TcIntermediateKeepStrongly \nTcIntermediateKeepStrongly \nCacheSizes.TcIntermediateKeepWeakly \nTcIntermediateKeepWeakly \nCacheSizes.DependencyGraphKeepStrongly \nDependencyGraphKeepStrongly \nCacheSizes.DependencyGraphKeepWeakly \nDependencyGraphKeepWeakly \nCacheSizes.ProjectExtrasKeepStrongly \nProjectExtrasKeepStrongly \nCacheSizes.ProjectExtrasKeepWeakly \nProjectExtrasKeepWeakly \nCacheSizes.AssemblyDataKeepStrongly \nAssemblyDataKeepStrongly \nCacheSizes.AssemblyDataKeepWeakly \nAssemblyDataKeepWeakly \nCacheSizes.SemanticClassificationKeepStrongly \nSemanticClassificationKeepStrongly \nCacheSizes.SemanticClassificationKeepWeakly \nSemanticClassificationKeepWeakly \nCacheSizes.ItemKeyStoreKeepStrongly \nItemKeyStoreKeepStrongly \nCacheSizes.ItemKeyStoreKeepWeakly \nItemKeyStoreKeepWeakly \nCacheSizes.ScriptClosureKeepStrongly \nScriptClosureKeepStrongly \nCacheSizes.ScriptClosureKeepWeakly \nScriptClosureKeepWeakly","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-transparentcompiler-cachesizes.html#Create","title":"CacheSizes.Create","content":"CacheSizes.Create \nCreate \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-transparentcompiler-cachesizes.html#ParseFileKeepStrongly","title":"CacheSizes.ParseFileKeepStrongly","content":"CacheSizes.ParseFileKeepStrongly \nParseFileKeepStrongly \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-transparentcompiler-cachesizes.html#ParseFileKeepWeakly","title":"CacheSizes.ParseFileKeepWeakly","content":"CacheSizes.ParseFileKeepWeakly \nParseFileKeepWeakly \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-transparentcompiler-cachesizes.html#ParseFileWithoutProjectKeepStrongly","title":"CacheSizes.ParseFileWithoutProjectKeepStrongly","content":"CacheSizes.ParseFileWithoutProjectKeepStrongly \nParseFileWithoutProjectKeepStrongly \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-transparentcompiler-cachesizes.html#ParseFileWithoutProjectKeepWeakly","title":"CacheSizes.ParseFileWithoutProjectKeepWeakly","content":"CacheSizes.ParseFileWithoutProjectKeepWeakly \nParseFileWithoutProjectKeepWeakly \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-transparentcompiler-cachesizes.html#ParseAndCheckFileInProjectKeepStrongly","title":"CacheSizes.ParseAndCheckFileInProjectKeepStrongly","content":"CacheSizes.ParseAndCheckFileInProjectKeepStrongly \nParseAndCheckFileInProjectKeepStrongly \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-transparentcompiler-cachesizes.html#ParseAndCheckFileInProjectKeepWeakly","title":"CacheSizes.ParseAndCheckFileInProjectKeepWeakly","content":"CacheSizes.ParseAndCheckFileInProjectKeepWeakly \nParseAndCheckFileInProjectKeepWeakly \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-transparentcompiler-cachesizes.html#ParseAndCheckAllFilesInProjectKeepStrongly","title":"CacheSizes.ParseAndCheckAllFilesInProjectKeepStrongly","content":"CacheSizes.ParseAndCheckAllFilesInProjectKeepStrongly \nParseAndCheckAllFilesInProjectKeepStrongly \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-transparentcompiler-cachesizes.html#ParseAndCheckAllFilesInProjectKeepWeakly","title":"CacheSizes.ParseAndCheckAllFilesInProjectKeepWeakly","content":"CacheSizes.ParseAndCheckAllFilesInProjectKeepWeakly \nParseAndCheckAllFilesInProjectKeepWeakly \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-transparentcompiler-cachesizes.html#ParseAndCheckProjectKeepStrongly","title":"CacheSizes.ParseAndCheckProjectKeepStrongly","content":"CacheSizes.ParseAndCheckProjectKeepStrongly \nParseAndCheckProjectKeepStrongly \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-transparentcompiler-cachesizes.html#ParseAndCheckProjectKeepWeakly","title":"CacheSizes.ParseAndCheckProjectKeepWeakly","content":"CacheSizes.ParseAndCheckProjectKeepWeakly \nParseAndCheckProjectKeepWeakly \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-transparentcompiler-cachesizes.html#FrameworkImportsKeepStrongly","title":"CacheSizes.FrameworkImportsKeepStrongly","content":"CacheSizes.FrameworkImportsKeepStrongly \nFrameworkImportsKeepStrongly \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-transparentcompiler-cachesizes.html#FrameworkImportsKeepWeakly","title":"CacheSizes.FrameworkImportsKeepWeakly","content":"CacheSizes.FrameworkImportsKeepWeakly \nFrameworkImportsKeepWeakly \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-transparentcompiler-cachesizes.html#BootstrapInfoStaticKeepStrongly","title":"CacheSizes.BootstrapInfoStaticKeepStrongly","content":"CacheSizes.BootstrapInfoStaticKeepStrongly \nBootstrapInfoStaticKeepStrongly \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-transparentcompiler-cachesizes.html#BootstrapInfoStaticKeepWeakly","title":"CacheSizes.BootstrapInfoStaticKeepWeakly","content":"CacheSizes.BootstrapInfoStaticKeepWeakly \nBootstrapInfoStaticKeepWeakly \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-transparentcompiler-cachesizes.html#BootstrapInfoKeepStrongly","title":"CacheSizes.BootstrapInfoKeepStrongly","content":"CacheSizes.BootstrapInfoKeepStrongly \nBootstrapInfoKeepStrongly \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-transparentcompiler-cachesizes.html#BootstrapInfoKeepWeakly","title":"CacheSizes.BootstrapInfoKeepWeakly","content":"CacheSizes.BootstrapInfoKeepWeakly \nBootstrapInfoKeepWeakly \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-transparentcompiler-cachesizes.html#TcLastFileKeepStrongly","title":"CacheSizes.TcLastFileKeepStrongly","content":"CacheSizes.TcLastFileKeepStrongly \nTcLastFileKeepStrongly \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-transparentcompiler-cachesizes.html#TcLastFileKeepWeakly","title":"CacheSizes.TcLastFileKeepWeakly","content":"CacheSizes.TcLastFileKeepWeakly \nTcLastFileKeepWeakly \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-transparentcompiler-cachesizes.html#TcIntermediateKeepStrongly","title":"CacheSizes.TcIntermediateKeepStrongly","content":"CacheSizes.TcIntermediateKeepStrongly \nTcIntermediateKeepStrongly \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-transparentcompiler-cachesizes.html#TcIntermediateKeepWeakly","title":"CacheSizes.TcIntermediateKeepWeakly","content":"CacheSizes.TcIntermediateKeepWeakly \nTcIntermediateKeepWeakly \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-transparentcompiler-cachesizes.html#DependencyGraphKeepStrongly","title":"CacheSizes.DependencyGraphKeepStrongly","content":"CacheSizes.DependencyGraphKeepStrongly \nDependencyGraphKeepStrongly \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-transparentcompiler-cachesizes.html#DependencyGraphKeepWeakly","title":"CacheSizes.DependencyGraphKeepWeakly","content":"CacheSizes.DependencyGraphKeepWeakly \nDependencyGraphKeepWeakly \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-transparentcompiler-cachesizes.html#ProjectExtrasKeepStrongly","title":"CacheSizes.ProjectExtrasKeepStrongly","content":"CacheSizes.ProjectExtrasKeepStrongly \nProjectExtrasKeepStrongly \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-transparentcompiler-cachesizes.html#ProjectExtrasKeepWeakly","title":"CacheSizes.ProjectExtrasKeepWeakly","content":"CacheSizes.ProjectExtrasKeepWeakly \nProjectExtrasKeepWeakly \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-transparentcompiler-cachesizes.html#AssemblyDataKeepStrongly","title":"CacheSizes.AssemblyDataKeepStrongly","content":"CacheSizes.AssemblyDataKeepStrongly \nAssemblyDataKeepStrongly \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-transparentcompiler-cachesizes.html#AssemblyDataKeepWeakly","title":"CacheSizes.AssemblyDataKeepWeakly","content":"CacheSizes.AssemblyDataKeepWeakly \nAssemblyDataKeepWeakly \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-transparentcompiler-cachesizes.html#SemanticClassificationKeepStrongly","title":"CacheSizes.SemanticClassificationKeepStrongly","content":"CacheSizes.SemanticClassificationKeepStrongly \nSemanticClassificationKeepStrongly \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-transparentcompiler-cachesizes.html#SemanticClassificationKeepWeakly","title":"CacheSizes.SemanticClassificationKeepWeakly","content":"CacheSizes.SemanticClassificationKeepWeakly \nSemanticClassificationKeepWeakly \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-transparentcompiler-cachesizes.html#ItemKeyStoreKeepStrongly","title":"CacheSizes.ItemKeyStoreKeepStrongly","content":"CacheSizes.ItemKeyStoreKeepStrongly \nItemKeyStoreKeepStrongly \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-transparentcompiler-cachesizes.html#ItemKeyStoreKeepWeakly","title":"CacheSizes.ItemKeyStoreKeepWeakly","content":"CacheSizes.ItemKeyStoreKeepWeakly \nItemKeyStoreKeepWeakly \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-transparentcompiler-cachesizes.html#ScriptClosureKeepStrongly","title":"CacheSizes.ScriptClosureKeepStrongly","content":"CacheSizes.ScriptClosureKeepStrongly \nScriptClosureKeepStrongly \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-transparentcompiler-cachesizes.html#ScriptClosureKeepWeakly","title":"CacheSizes.ScriptClosureKeepWeakly","content":"CacheSizes.ScriptClosureKeepWeakly \nScriptClosureKeepWeakly \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-workspace-fsharpworkspacequery.html","title":"FSharpWorkspaceQuery","content":"FSharpWorkspaceQuery \n Code to handle quries to F# workspace \nFSharpWorkspaceQuery.FSharpDiagnosticReport \nFSharpDiagnosticReport \nFSharpWorkspaceQuery.FSharpWorkspaceQuery \nFSharpWorkspaceQuery","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-workspace-fsharpworkspacequery-fsharpdiagnosticreport.html","title":"FSharpDiagnosticReport","content":"FSharpDiagnosticReport \n \nFSharpDiagnosticReport.Diagnostics \nDiagnostics \nFSharpDiagnosticReport.ResultId \nResultId","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-workspace-fsharpworkspacequery-fsharpdiagnosticreport.html#Diagnostics","title":"FSharpDiagnosticReport.Diagnostics","content":"FSharpDiagnosticReport.Diagnostics \nDiagnostics \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-workspace-fsharpworkspacequery-fsharpdiagnosticreport.html#ResultId","title":"FSharpDiagnosticReport.ResultId","content":"FSharpDiagnosticReport.ResultId \nResultId \n The result ID of the diagnostics. This needs to be unique for each version of the document in order to be able to clear old diagnostics.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-workspace-fsharpworkspacequery-fsharpworkspacequery.html","title":"FSharpWorkspaceQuery","content":"FSharpWorkspaceQuery \n \nFSharpWorkspaceQuery.GetCheckResultsForFile \nGetCheckResultsForFile \nFSharpWorkspaceQuery.GetDiagnosticsForFile \nGetDiagnosticsForFile \nFSharpWorkspaceQuery.GetParseAndCheckResultsForFile \nGetParseAndCheckResultsForFile \nFSharpWorkspaceQuery.GetProjectSnapshot \nGetProjectSnapshot \nFSharpWorkspaceQuery.GetProjectSnapshotForFile \nGetProjectSnapshotForFile \nFSharpWorkspaceQuery.GetSemanticClassification \nGetSemanticClassification \nFSharpWorkspaceQuery.GetSource \nGetSource","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-workspace-fsharpworkspacequery-fsharpworkspacequery.html#GetCheckResultsForFile","title":"FSharpWorkspaceQuery.GetCheckResultsForFile","content":"FSharpWorkspaceQuery.GetCheckResultsForFile \nGetCheckResultsForFile \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-workspace-fsharpworkspacequery-fsharpworkspacequery.html#GetDiagnosticsForFile","title":"FSharpWorkspaceQuery.GetDiagnosticsForFile","content":"FSharpWorkspaceQuery.GetDiagnosticsForFile \nGetDiagnosticsForFile \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-workspace-fsharpworkspacequery-fsharpworkspacequery.html#GetParseAndCheckResultsForFile","title":"FSharpWorkspaceQuery.GetParseAndCheckResultsForFile","content":"FSharpWorkspaceQuery.GetParseAndCheckResultsForFile \nGetParseAndCheckResultsForFile \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-workspace-fsharpworkspacequery-fsharpworkspacequery.html#GetProjectSnapshot","title":"FSharpWorkspaceQuery.GetProjectSnapshot","content":"FSharpWorkspaceQuery.GetProjectSnapshot \nGetProjectSnapshot \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-workspace-fsharpworkspacequery-fsharpworkspacequery.html#GetProjectSnapshotForFile","title":"FSharpWorkspaceQuery.GetProjectSnapshotForFile","content":"FSharpWorkspaceQuery.GetProjectSnapshotForFile \nGetProjectSnapshotForFile \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-workspace-fsharpworkspacequery-fsharpworkspacequery.html#GetSemanticClassification","title":"FSharpWorkspaceQuery.GetSemanticClassification","content":"FSharpWorkspaceQuery.GetSemanticClassification \nGetSemanticClassification \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-workspace-fsharpworkspacequery-fsharpworkspacequery.html#GetSource","title":"FSharpWorkspaceQuery.GetSource","content":"FSharpWorkspaceQuery.GetSource \nGetSource \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-workspace-fsharpworkspacestate.html","title":"FSharpWorkspaceState","content":"FSharpWorkspaceState \n Code to handle state management in an F# workspace. \nFSharpWorkspaceState.FSharpWorkspaceFiles \nFSharpWorkspaceFiles \nFSharpWorkspaceState.FSharpWorkspaceProjects \nFSharpWorkspaceProjects","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-workspace-fsharpworkspacestate-fsharpworkspacefiles.html","title":"FSharpWorkspaceFiles","content":"FSharpWorkspaceFiles \n Interface for managing files in an F# workspace. \nFSharpWorkspaceFiles.Close \nClose \nFSharpWorkspaceFiles.Edit \nEdit \nFSharpWorkspaceFiles.OfProject \nOfProject \nFSharpWorkspaceFiles.Open \nOpen","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-workspace-fsharpworkspacestate-fsharpworkspacefiles.html#Close","title":"FSharpWorkspaceFiles.Close","content":"FSharpWorkspaceFiles.Close \nClose \n Indicates that a file has been closed. Any changes that were not saved to disk are undone and any further reading\n of the file\u0027s contents will be from the filesystem.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-workspace-fsharpworkspacestate-fsharpworkspacefiles.html#Edit","title":"FSharpWorkspaceFiles.Edit","content":"FSharpWorkspaceFiles.Edit \nEdit \n Indicates that a file has been changed and now has the given content. If it wasn\u0027t previously open it is considered open now.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-workspace-fsharpworkspacestate-fsharpworkspacefiles.html#OfProject","title":"FSharpWorkspaceFiles.OfProject","content":"FSharpWorkspaceFiles.OfProject \nOfProject \n Returns file paths for all source files of the given project.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-workspace-fsharpworkspacestate-fsharpworkspacefiles.html#Open","title":"FSharpWorkspaceFiles.Open","content":"FSharpWorkspaceFiles.Open \nOpen \n Indicates that a file has been opened and has the given content. Any updates to the file should be done through \u0060Files.Edit\u0060.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-workspace-fsharpworkspacestate-fsharpworkspaceprojects.html","title":"FSharpWorkspaceProjects","content":"FSharpWorkspaceProjects \n Interface for managing with projects in an F# workspace. \nFSharpWorkspaceProjects.AddOrUpdate \nAddOrUpdate \nFSharpWorkspaceProjects.AddOrUpdate \nAddOrUpdate \nFSharpWorkspaceProjects.AddOrUpdate \nAddOrUpdate \nFSharpWorkspaceProjects.AddOrUpdate \nAddOrUpdate \nFSharpWorkspaceProjects.Update \nUpdate","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-workspace-fsharpworkspacestate-fsharpworkspaceprojects.html#AddOrUpdate","title":"FSharpWorkspaceProjects.AddOrUpdate","content":"FSharpWorkspaceProjects.AddOrUpdate \nAddOrUpdate \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-workspace-fsharpworkspacestate-fsharpworkspaceprojects.html#AddOrUpdate","title":"FSharpWorkspaceProjects.AddOrUpdate","content":"FSharpWorkspaceProjects.AddOrUpdate \nAddOrUpdate \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-workspace-fsharpworkspacestate-fsharpworkspaceprojects.html#AddOrUpdate","title":"FSharpWorkspaceProjects.AddOrUpdate","content":"FSharpWorkspaceProjects.AddOrUpdate \nAddOrUpdate \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-workspace-fsharpworkspacestate-fsharpworkspaceprojects.html#AddOrUpdate","title":"FSharpWorkspaceProjects.AddOrUpdate","content":"FSharpWorkspaceProjects.AddOrUpdate \nAddOrUpdate \n Adds or updates an F# project in the workspace. Project is identified by the project file and output path or FSharpProjectIdentifier.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-workspace-fsharpworkspacestate-fsharpworkspaceprojects.html#Update","title":"FSharpWorkspaceProjects.Update","content":"FSharpWorkspaceProjects.Update \nUpdate \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-workspace-fsharpworkspace.html","title":"FSharpWorkspace","content":"FSharpWorkspace \n This type holds the current state of an F# workspace. It\u0027s mutable but thread-safe.\n It accepts updates to the state and can be queried for information about the workspace.\n\n The state can be built up incrementally by adding projects with one of the \u0060Projects.AddOrUpdate\u0060 overloads.\n Updates to any project properties are done the same way. Each project is identified by its project file\n path and output path or by \u0060FSharpProjectIdentifier\u0060. When the same project is added again, it will be\n updated with the new information.\n\n Project references are discovered automatically as projects are added or updated.\n\n Updates to file contents are signaled through the \u0060Files.Open\u0060, \u0060Files.Edit\u0060, and \u0060Files.Close\u0060 methods. \nFSharpWorkspace.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nFSharpWorkspace.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nFSharpWorkspace.Projects \nProjects \nFSharpWorkspace.Checker \nChecker \nFSharpWorkspace.Files \nFiles \nFSharpWorkspace.Query \nQuery","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-workspace-fsharpworkspace.html#\u0060\u0060.ctor\u0060\u0060","title":"FSharpWorkspace.\u0060\u0060.ctor\u0060\u0060","content":"FSharpWorkspace.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-workspace-fsharpworkspace.html#\u0060\u0060.ctor\u0060\u0060","title":"FSharpWorkspace.\u0060\u0060.ctor\u0060\u0060","content":"FSharpWorkspace.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-workspace-fsharpworkspace.html#Projects","title":"FSharpWorkspace.Projects","content":"FSharpWorkspace.Projects \nProjects \n Project management for this workspace","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-workspace-fsharpworkspace.html#Checker","title":"FSharpWorkspace.Checker","content":"FSharpWorkspace.Checker \nChecker \n The \u0060FSharpChecker\u0060 instance used by this workspace.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-workspace-fsharpworkspace.html#Files","title":"FSharpWorkspace.Files","content":"FSharpWorkspace.Files \nFiles \n File management for this workspace","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-workspace-fsharpworkspace.html#Query","title":"FSharpWorkspace.Query","content":"FSharpWorkspace.Query \nQuery \n Use this to query the workspace for information","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager-assemblyresolutionprobe.html","title":"AssemblyResolutionProbe","content":"AssemblyResolutionProbe \n Signature for ResolutionProbe callback\n host implements this, it\u0027s job is to return a list of assembly paths to probe. \nAssemblyResolutionProbe.Invoke \nInvoke","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager-assemblyresolutionprobe.html#Invoke","title":"AssemblyResolutionProbe.Invoke","content":"AssemblyResolutionProbe.Invoke \nInvoke \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager-assemblyresolvehandler.html","title":"AssemblyResolveHandler","content":"AssemblyResolveHandler \n Handle Assembly resolution \nAssemblyResolveHandler.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager-assemblyresolvehandler.html#\u0060\u0060.ctor\u0060\u0060","title":"AssemblyResolveHandler.\u0060\u0060.ctor\u0060\u0060","content":"AssemblyResolveHandler.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n Construct a new DependencyProvider","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager-dependencyprovider.html","title":"DependencyProvider","content":"DependencyProvider \n Provides DependencyManagement functions.\n\n The class incrementally collects IDependencyManagerProvider, indexed by key, and\n queries them.  These are found and instantiated with respect to the compilerTools and outputDir\n provided each time the TryFindDependencyManagerByKey and TryFindDependencyManagerInPath are\n executed, which are assumed to be invariant over the lifetime of the DependencyProvider. \nDependencyProvider.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nDependencyProvider.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nDependencyProvider.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nDependencyProvider.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nDependencyProvider.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nDependencyProvider.ClearResultsCache \nClearResultsCache \nDependencyProvider.CreatePackageManagerUnknownError \nCreatePackageManagerUnknownError \nDependencyProvider.GetRegisteredDependencyManagerHelpText \nGetRegisteredDependencyManagerHelpText \nDependencyProvider.Resolve \nResolve \nDependencyProvider.TryFindDependencyManagerByKey \nTryFindDependencyManagerByKey \nDependencyProvider.TryFindDependencyManagerInPath \nTryFindDependencyManagerInPath","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager-dependencyprovider.html#\u0060\u0060.ctor\u0060\u0060","title":"DependencyProvider.\u0060\u0060.ctor\u0060\u0060","content":"DependencyProvider.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n Construct a new DependencyProvider with managed and native resolution and specify caching","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager-dependencyprovider.html#\u0060\u0060.ctor\u0060\u0060","title":"DependencyProvider.\u0060\u0060.ctor\u0060\u0060","content":"DependencyProvider.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n Construct a new DependencyProvider with managed and native resolution","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager-dependencyprovider.html#\u0060\u0060.ctor\u0060\u0060","title":"DependencyProvider.\u0060\u0060.ctor\u0060\u0060","content":"DependencyProvider.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n Construct a new DependencyProvider with only native resolution and specify caching","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager-dependencyprovider.html#\u0060\u0060.ctor\u0060\u0060","title":"DependencyProvider.\u0060\u0060.ctor\u0060\u0060","content":"DependencyProvider.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n Construct a new DependencyProvider with only native resolution","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager-dependencyprovider.html#\u0060\u0060.ctor\u0060\u0060","title":"DependencyProvider.\u0060\u0060.ctor\u0060\u0060","content":"DependencyProvider.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n Construct a new DependencyProvider with no dynamic load handlers (only for compilation/analysis)","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager-dependencyprovider.html#ClearResultsCache","title":"DependencyProvider.ClearResultsCache","content":"DependencyProvider.ClearResultsCache \nClearResultsCache \n Clear the DependencyManager results caches","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager-dependencyprovider.html#CreatePackageManagerUnknownError","title":"DependencyProvider.CreatePackageManagerUnknownError","content":"DependencyProvider.CreatePackageManagerUnknownError \nCreatePackageManagerUnknownError \n Returns a formatted error message for the host to present","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager-dependencyprovider.html#GetRegisteredDependencyManagerHelpText","title":"DependencyProvider.GetRegisteredDependencyManagerHelpText","content":"DependencyProvider.GetRegisteredDependencyManagerHelpText \nGetRegisteredDependencyManagerHelpText \n Returns a formatted help messages for registered dependencymanagers for the host to present","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager-dependencyprovider.html#Resolve","title":"DependencyProvider.Resolve","content":"DependencyProvider.Resolve \nResolve \n Resolve reference for a list of package manager lines","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager-dependencyprovider.html#TryFindDependencyManagerByKey","title":"DependencyProvider.TryFindDependencyManagerByKey","content":"DependencyProvider.TryFindDependencyManagerByKey \nTryFindDependencyManagerByKey \n Fetch a dependencymanager that supports a specific key","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager-dependencyprovider.html#TryFindDependencyManagerInPath","title":"DependencyProvider.TryFindDependencyManagerInPath","content":"DependencyProvider.TryFindDependencyManagerInPath \nTryFindDependencyManagerInPath \n TryFindDependencyManagerInPath - given a #r \u0022key:sometext\u0022 go and find a DependencyManager that satisfies the key","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager-errorreporttype.html","title":"ErrorReportType","content":"ErrorReportType \n Todo describe this API \nErrorReportType.IsWarning \nIsWarning \nErrorReportType.IsError \nIsError \nErrorReportType.Warning \nWarning \nErrorReportType.Error \nError","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager-errorreporttype.html#IsWarning","title":"ErrorReportType.IsWarning","content":"ErrorReportType.IsWarning \nIsWarning \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager-errorreporttype.html#IsError","title":"ErrorReportType.IsError","content":"ErrorReportType.IsError \nIsError \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager-errorreporttype.html#Warning","title":"ErrorReportType.Warning","content":"ErrorReportType.Warning \nWarning \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager-errorreporttype.html#Error","title":"ErrorReportType.Error","content":"ErrorReportType.Error \nError \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager-idependencymanagerprovider.html","title":"IDependencyManagerProvider","content":"IDependencyManagerProvider \n Wraps access to a DependencyManager implementation \nIDependencyManagerProvider.ClearResultsCache \nClearResultsCache \nIDependencyManagerProvider.ResolveDependencies \nResolveDependencies \nIDependencyManagerProvider.Key \nKey \nIDependencyManagerProvider.Name \nName \nIDependencyManagerProvider.HelpMessages \nHelpMessages","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager-idependencymanagerprovider.html#ClearResultsCache","title":"IDependencyManagerProvider.ClearResultsCache","content":"IDependencyManagerProvider.ClearResultsCache \nClearResultsCache \n Clear the results cache","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager-idependencymanagerprovider.html#ResolveDependencies","title":"IDependencyManagerProvider.ResolveDependencies","content":"IDependencyManagerProvider.ResolveDependencies \nResolveDependencies \n Resolve the dependencies, for the given set of arguments, go find the .dll references, scripts and additional include values.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager-idependencymanagerprovider.html#Key","title":"IDependencyManagerProvider.Key","content":"IDependencyManagerProvider.Key \nKey \n\u003Cpre\u003E Key that identifies the types of dependencies that this DependencyManager operates on\n E.g\n     nuget: indicates that this DM is for nuget packages\n     paket: indicates that this DM is for paket scripts, which manage nuget packages, github source dependencies etc ...\u003C/pre\u003E","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager-idependencymanagerprovider.html#Name","title":"IDependencyManagerProvider.Name","content":"IDependencyManagerProvider.Name \nName \n Name of the dependency manager","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager-idependencymanagerprovider.html#HelpMessages","title":"IDependencyManagerProvider.HelpMessages","content":"IDependencyManagerProvider.HelpMessages \nHelpMessages \n The help messages for this dependency manager instance","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager-iresolvedependenciesresult.html","title":"IResolveDependenciesResult","content":"IResolveDependenciesResult \n The results of ResolveDependencies \nIResolveDependenciesResult.Success \nSuccess \nIResolveDependenciesResult.Resolutions \nResolutions \nIResolveDependenciesResult.Roots \nRoots \nIResolveDependenciesResult.SourceFiles \nSourceFiles \nIResolveDependenciesResult.StdError \nStdError \nIResolveDependenciesResult.StdOut \nStdOut","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager-iresolvedependenciesresult.html#Success","title":"IResolveDependenciesResult.Success","content":"IResolveDependenciesResult.Success \nSuccess \n Succeeded?","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager-iresolvedependenciesresult.html#Resolutions","title":"IResolveDependenciesResult.Resolutions","content":"IResolveDependenciesResult.Resolutions \nResolutions \n The resolution paths - the full paths to selected resolved dll\u0027s.\n In scripts this is equivalent to #r @\u0022c:\\somepath\\to\\packages\\ResolvedPackage\\1.1.1\\lib\\netstandard2.0\\ResolvedAssembly.dll\u0022","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager-iresolvedependenciesresult.html#Roots","title":"IResolveDependenciesResult.Roots","content":"IResolveDependenciesResult.Roots \nRoots \n\u003Cpre\u003E The roots to package directories\n     This points to the root of each located package.\n     The layout of the package manager will be package manager specific.\n     however, the dependency manager dll understands the nuget package layout\n     and so if the package contains folders similar to the nuget layout then\n     the dependency manager will be able to probe and resolve any native dependencies\n     required by the nuget package.\n\n This path is also equivalent to\n     #I @\u0022c:\\somepath\\to\\packages\\1.1.1\\ResolvedPackage\u0022\u003C/pre\u003E","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager-iresolvedependenciesresult.html#SourceFiles","title":"IResolveDependenciesResult.SourceFiles","content":"IResolveDependenciesResult.SourceFiles \nSourceFiles \n The source code file paths","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager-iresolvedependenciesresult.html#StdError","title":"IResolveDependenciesResult.StdError","content":"IResolveDependenciesResult.StdError \nStdError \n The resolution error log (process stderr)","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager-iresolvedependenciesresult.html#StdOut","title":"IResolveDependenciesResult.StdOut","content":"IResolveDependenciesResult.StdOut \nStdOut \n The resolution output log","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager-nativedllresolvehandler.html","title":"NativeDllResolveHandler","content":"NativeDllResolveHandler \n \nNativeDllResolveHandler.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager-nativedllresolvehandler.html#\u0060\u0060.ctor\u0060\u0060","title":"NativeDllResolveHandler.\u0060\u0060.ctor\u0060\u0060","content":"NativeDllResolveHandler.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n Construct a new NativeDllResolveHandler","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager-nativeresolutionprobe.html","title":"NativeResolutionProbe","content":"NativeResolutionProbe \n Signature for Native library resolution probe callback\n host implements this, it\u0027s job is to return a list of package roots to probe. \nNativeResolutionProbe.Invoke \nInvoke","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager-nativeresolutionprobe.html#Invoke","title":"NativeResolutionProbe.Invoke","content":"NativeResolutionProbe.Invoke \nInvoke \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager-resolvingerrorreport.html","title":"ResolvingErrorReport","content":"ResolvingErrorReport \n \nResolvingErrorReport.Invoke \nInvoke","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager-resolvingerrorreport.html#Invoke","title":"ResolvingErrorReport.Invoke","content":"ResolvingErrorReport.Invoke \nInvoke \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-activitynames.html","title":"ActivityNames","content":"ActivityNames \n For activities following the dotnet distributed tracing concept\n https://learn.microsoft.com/dotnet/core/diagnostics/distributed-tracing-concepts?source=recommendations \nActivityNames.FscSourceName \nFscSourceName \nActivityNames.ProfiledSourceName \nProfiledSourceName \nActivityNames.AllRelevantNames \nAllRelevantNames","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-activitynames.html#FscSourceName","title":"ActivityNames.FscSourceName","content":"ActivityNames.FscSourceName \nFscSourceName \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-activitynames.html#ProfiledSourceName","title":"ActivityNames.ProfiledSourceName","content":"ActivityNames.ProfiledSourceName \nProfiledSourceName \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-activitynames.html#AllRelevantNames","title":"ActivityNames.AllRelevantNames","content":"ActivityNames.AllRelevantNames \nAllRelevantNames \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-compilerdiagnostics.html","title":"CompilerDiagnostics","content":"CompilerDiagnostics \n Exposes compiler diagnostic error messages. \nCompilerDiagnostics.GetErrorMessage \nGetErrorMessage \nCompilerDiagnostics.GetSuggestedNames \nGetSuggestedNames","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-compilerdiagnostics.html#GetErrorMessage","title":"CompilerDiagnostics.GetErrorMessage","content":"CompilerDiagnostics.GetErrorMessage \nGetErrorMessage \n Given a DiagnosticKind, returns the string representing the error message for that diagnostic.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-compilerdiagnostics.html#GetSuggestedNames","title":"CompilerDiagnostics.GetSuggestedNames","content":"CompilerDiagnostics.GetSuggestedNames \nGetSuggestedNames \n Given a set of names, uses and a string representing an unresolved identifier,\n returns a list of suggested names if there are any feasible candidates.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-extendeddata.html","title":"ExtendedData","content":"ExtendedData \n \nExtendedData.ArgumentsInSigAndImplMismatchExtendedData \nArgumentsInSigAndImplMismatchExtendedData \nExtendedData.DefinitionsInSigAndImplNotCompatibleAbbreviationsDifferExtendedData \nDefinitionsInSigAndImplNotCompatibleAbbreviationsDifferExtendedData \nExtendedData.DiagnosticContextInfo \nDiagnosticContextInfo \nExtendedData.ExperimentalExtendedData \nExperimentalExtendedData \nExtendedData.ExpressionIsAFunctionExtendedData \nExpressionIsAFunctionExtendedData \nExtendedData.FieldNotContainedDiagnosticExtendedData \nFieldNotContainedDiagnosticExtendedData \nExtendedData.IFSharpDiagnosticExtendedData \nIFSharpDiagnosticExtendedData \nExtendedData.ObsoleteDiagnosticExtendedData \nObsoleteDiagnosticExtendedData \nExtendedData.TypeExtendedData \nTypeExtendedData \nExtendedData.TypeMismatchDiagnosticExtendedData \nTypeMismatchDiagnosticExtendedData \nExtendedData.ValueNotContainedDiagnosticExtendedData \nValueNotContainedDiagnosticExtendedData","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-extendeddata-argumentsinsigandimplmismatchextendeddata.html","title":"ArgumentsInSigAndImplMismatchExtendedData","content":"ArgumentsInSigAndImplMismatchExtendedData \n Additional data for \u0027argument names in the signature and implementation do not match\u0027 diagnostic \nArgumentsInSigAndImplMismatchExtendedData.SignatureName \nSignatureName \nArgumentsInSigAndImplMismatchExtendedData.ImplementationName \nImplementationName \nArgumentsInSigAndImplMismatchExtendedData.SignatureRange \nSignatureRange \nArgumentsInSigAndImplMismatchExtendedData.ImplementationRange \nImplementationRange","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-extendeddata-argumentsinsigandimplmismatchextendeddata.html#SignatureName","title":"ArgumentsInSigAndImplMismatchExtendedData.SignatureName","content":"ArgumentsInSigAndImplMismatchExtendedData.SignatureName \nSignatureName \n Argument name in the signature file","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-extendeddata-argumentsinsigandimplmismatchextendeddata.html#ImplementationName","title":"ArgumentsInSigAndImplMismatchExtendedData.ImplementationName","content":"ArgumentsInSigAndImplMismatchExtendedData.ImplementationName \nImplementationName \n Argument name in the implementation file","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-extendeddata-argumentsinsigandimplmismatchextendeddata.html#SignatureRange","title":"ArgumentsInSigAndImplMismatchExtendedData.SignatureRange","content":"ArgumentsInSigAndImplMismatchExtendedData.SignatureRange \nSignatureRange \n Argument identifier range within the signature file","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-extendeddata-argumentsinsigandimplmismatchextendeddata.html#ImplementationRange","title":"ArgumentsInSigAndImplMismatchExtendedData.ImplementationRange","content":"ArgumentsInSigAndImplMismatchExtendedData.ImplementationRange \nImplementationRange \n Argument identifier range within the implementation file","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-extendeddata-definitionsinsigandimplnotcompatibleabbreviationsdifferextendeddata.html","title":"DefinitionsInSigAndImplNotCompatibleAbbreviationsDifferExtendedData","content":"DefinitionsInSigAndImplNotCompatibleAbbreviationsDifferExtendedData \n \nDefinitionsInSigAndImplNotCompatibleAbbreviationsDifferExtendedData.SignatureRange \nSignatureRange \nDefinitionsInSigAndImplNotCompatibleAbbreviationsDifferExtendedData.ImplementationRange \nImplementationRange","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-extendeddata-definitionsinsigandimplnotcompatibleabbreviationsdifferextendeddata.html#SignatureRange","title":"DefinitionsInSigAndImplNotCompatibleAbbreviationsDifferExtendedData.SignatureRange","content":"DefinitionsInSigAndImplNotCompatibleAbbreviationsDifferExtendedData.SignatureRange \nSignatureRange \n Range of the signature type identifier.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-extendeddata-definitionsinsigandimplnotcompatibleabbreviationsdifferextendeddata.html#ImplementationRange","title":"DefinitionsInSigAndImplNotCompatibleAbbreviationsDifferExtendedData.ImplementationRange","content":"DefinitionsInSigAndImplNotCompatibleAbbreviationsDifferExtendedData.ImplementationRange \nImplementationRange \n Range of the implementation type identifier.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-extendeddata-diagnosticcontextinfo.html","title":"DiagnosticContextInfo","content":"DiagnosticContextInfo \n Information about the context of a type equation in type-mismatch-like diagnostic \nDiagnosticContextInfo.IsTupleInRecordFields \nIsTupleInRecordFields \nDiagnosticContextInfo.IsOmittedElseBranch \nIsOmittedElseBranch \nDiagnosticContextInfo.IsIfExpression \nIsIfExpression \nDiagnosticContextInfo.IsNoContext \nIsNoContext \nDiagnosticContextInfo.IsReturnInComputationExpression \nIsReturnInComputationExpression \nDiagnosticContextInfo.IsRecordFields \nIsRecordFields \nDiagnosticContextInfo.IsDowncastUsedInsteadOfUpcast \nIsDowncastUsedInsteadOfUpcast \nDiagnosticContextInfo.IsCollectionElement \nIsCollectionElement \nDiagnosticContextInfo.IsSequenceExpression \nIsSequenceExpression \nDiagnosticContextInfo.IsFollowingPatternMatchClause \nIsFollowingPatternMatchClause \nDiagnosticContextInfo.IsRuntimeTypeTest \nIsRuntimeTypeTest \nDiagnosticContextInfo.IsElseBranchResult \nIsElseBranchResult \nDiagnosticContextInfo.IsYieldInComputationExpression \nIsYieldInComputationExpression \nDiagnosticContextInfo.IsPatternMatchGuard \nIsPatternMatchGuard \nDiagnosticContextInfo.NoContext \nNoContext \nDiagnosticContextInfo.IfExpression \nIfExpression \nDiagnosticContextInfo.OmittedElseBranch \nOmittedElseBranch \nDiagnosticContextInfo.ElseBranchResult \nElseBranchResult \nDiagnosticContextInfo.RecordFields \nRecordFields \nDiagnosticContextInfo.TupleInRecordFields \nTupleInRecordFields \nDiagnosticContextInfo.CollectionElement \nCollectionElement \nDiagnosticContextInfo.ReturnInComputationExpression \nReturnInComputationExpression \nDiagnosticContextInfo.YieldInComputationExpression \nYieldInComputationExpression \nDiagnosticContextInfo.RuntimeTypeTest \nRuntimeTypeTest \nDiagnosticContextInfo.DowncastUsedInsteadOfUpcast \nDowncastUsedInsteadOfUpcast \nDiagnosticContextInfo.FollowingPatternMatchClause \nFollowingPatternMatchClause \nDiagnosticContextInfo.PatternMatchGuard \nPatternMatchGuard \nDiagnosticContextInfo.SequenceExpression \nSequenceExpression","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-extendeddata-diagnosticcontextinfo.html#IsTupleInRecordFields","title":"DiagnosticContextInfo.IsTupleInRecordFields","content":"DiagnosticContextInfo.IsTupleInRecordFields \nIsTupleInRecordFields \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-extendeddata-diagnosticcontextinfo.html#IsOmittedElseBranch","title":"DiagnosticContextInfo.IsOmittedElseBranch","content":"DiagnosticContextInfo.IsOmittedElseBranch \nIsOmittedElseBranch \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-extendeddata-diagnosticcontextinfo.html#IsIfExpression","title":"DiagnosticContextInfo.IsIfExpression","content":"DiagnosticContextInfo.IsIfExpression \nIsIfExpression \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-extendeddata-diagnosticcontextinfo.html#IsNoContext","title":"DiagnosticContextInfo.IsNoContext","content":"DiagnosticContextInfo.IsNoContext \nIsNoContext \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-extendeddata-diagnosticcontextinfo.html#IsReturnInComputationExpression","title":"DiagnosticContextInfo.IsReturnInComputationExpression","content":"DiagnosticContextInfo.IsReturnInComputationExpression \nIsReturnInComputationExpression \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-extendeddata-diagnosticcontextinfo.html#IsRecordFields","title":"DiagnosticContextInfo.IsRecordFields","content":"DiagnosticContextInfo.IsRecordFields \nIsRecordFields \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-extendeddata-diagnosticcontextinfo.html#IsDowncastUsedInsteadOfUpcast","title":"DiagnosticContextInfo.IsDowncastUsedInsteadOfUpcast","content":"DiagnosticContextInfo.IsDowncastUsedInsteadOfUpcast \nIsDowncastUsedInsteadOfUpcast \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-extendeddata-diagnosticcontextinfo.html#IsCollectionElement","title":"DiagnosticContextInfo.IsCollectionElement","content":"DiagnosticContextInfo.IsCollectionElement \nIsCollectionElement \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-extendeddata-diagnosticcontextinfo.html#IsSequenceExpression","title":"DiagnosticContextInfo.IsSequenceExpression","content":"DiagnosticContextInfo.IsSequenceExpression \nIsSequenceExpression \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-extendeddata-diagnosticcontextinfo.html#IsFollowingPatternMatchClause","title":"DiagnosticContextInfo.IsFollowingPatternMatchClause","content":"DiagnosticContextInfo.IsFollowingPatternMatchClause \nIsFollowingPatternMatchClause \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-extendeddata-diagnosticcontextinfo.html#IsRuntimeTypeTest","title":"DiagnosticContextInfo.IsRuntimeTypeTest","content":"DiagnosticContextInfo.IsRuntimeTypeTest \nIsRuntimeTypeTest \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-extendeddata-diagnosticcontextinfo.html#IsElseBranchResult","title":"DiagnosticContextInfo.IsElseBranchResult","content":"DiagnosticContextInfo.IsElseBranchResult \nIsElseBranchResult \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-extendeddata-diagnosticcontextinfo.html#IsYieldInComputationExpression","title":"DiagnosticContextInfo.IsYieldInComputationExpression","content":"DiagnosticContextInfo.IsYieldInComputationExpression \nIsYieldInComputationExpression \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-extendeddata-diagnosticcontextinfo.html#IsPatternMatchGuard","title":"DiagnosticContextInfo.IsPatternMatchGuard","content":"DiagnosticContextInfo.IsPatternMatchGuard \nIsPatternMatchGuard \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-extendeddata-diagnosticcontextinfo.html#NoContext","title":"DiagnosticContextInfo.NoContext","content":"DiagnosticContextInfo.NoContext \nNoContext \n No context was given","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-extendeddata-diagnosticcontextinfo.html#IfExpression","title":"DiagnosticContextInfo.IfExpression","content":"DiagnosticContextInfo.IfExpression \nIfExpression \n The type equation comes from an IF expression","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-extendeddata-diagnosticcontextinfo.html#OmittedElseBranch","title":"DiagnosticContextInfo.OmittedElseBranch","content":"DiagnosticContextInfo.OmittedElseBranch \nOmittedElseBranch \n The type equation comes from an omitted else branch","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-extendeddata-diagnosticcontextinfo.html#ElseBranchResult","title":"DiagnosticContextInfo.ElseBranchResult","content":"DiagnosticContextInfo.ElseBranchResult \nElseBranchResult \n The type equation comes from a type check of the result of an else branch","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-extendeddata-diagnosticcontextinfo.html#RecordFields","title":"DiagnosticContextInfo.RecordFields","content":"DiagnosticContextInfo.RecordFields \nRecordFields \n The type equation comes from the verification of record fields","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-extendeddata-diagnosticcontextinfo.html#TupleInRecordFields","title":"DiagnosticContextInfo.TupleInRecordFields","content":"DiagnosticContextInfo.TupleInRecordFields \nTupleInRecordFields \n The type equation comes from the verification of a tuple in record fields","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-extendeddata-diagnosticcontextinfo.html#CollectionElement","title":"DiagnosticContextInfo.CollectionElement","content":"DiagnosticContextInfo.CollectionElement \nCollectionElement \n The type equation comes from a list or array constructor","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-extendeddata-diagnosticcontextinfo.html#ReturnInComputationExpression","title":"DiagnosticContextInfo.ReturnInComputationExpression","content":"DiagnosticContextInfo.ReturnInComputationExpression \nReturnInComputationExpression \n The type equation comes from a return in a computation expression","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-extendeddata-diagnosticcontextinfo.html#YieldInComputationExpression","title":"DiagnosticContextInfo.YieldInComputationExpression","content":"DiagnosticContextInfo.YieldInComputationExpression \nYieldInComputationExpression \n The type equation comes from a yield in a computation expression","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-extendeddata-diagnosticcontextinfo.html#RuntimeTypeTest","title":"DiagnosticContextInfo.RuntimeTypeTest","content":"DiagnosticContextInfo.RuntimeTypeTest \nRuntimeTypeTest \n The type equation comes from a runtime type test","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-extendeddata-diagnosticcontextinfo.html#DowncastUsedInsteadOfUpcast","title":"DiagnosticContextInfo.DowncastUsedInsteadOfUpcast","content":"DiagnosticContextInfo.DowncastUsedInsteadOfUpcast \nDowncastUsedInsteadOfUpcast \n The type equation comes from a downcast where an upcast could be used","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-extendeddata-diagnosticcontextinfo.html#FollowingPatternMatchClause","title":"DiagnosticContextInfo.FollowingPatternMatchClause","content":"DiagnosticContextInfo.FollowingPatternMatchClause \nFollowingPatternMatchClause \n The type equation comes from the return type of a pattern match clause (not the first clause)","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-extendeddata-diagnosticcontextinfo.html#PatternMatchGuard","title":"DiagnosticContextInfo.PatternMatchGuard","content":"DiagnosticContextInfo.PatternMatchGuard \nPatternMatchGuard \n The type equation comes from a pattern match guard","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-extendeddata-diagnosticcontextinfo.html#SequenceExpression","title":"DiagnosticContextInfo.SequenceExpression","content":"DiagnosticContextInfo.SequenceExpression \nSequenceExpression \n The type equation comes from a sequence expression","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-extendeddata-experimentalextendeddata.html","title":"ExperimentalExtendedData","content":"ExperimentalExtendedData \n Additional data for diagnostics about experimental attributes. \nExperimentalExtendedData.DiagnosticId \nDiagnosticId \nExperimentalExtendedData.UrlFormat \nUrlFormat","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-extendeddata-experimentalextendeddata.html#DiagnosticId","title":"ExperimentalExtendedData.DiagnosticId","content":"ExperimentalExtendedData.DiagnosticId \nDiagnosticId \n Represents the DiagnosticId of the diagnostic","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-extendeddata-experimentalextendeddata.html#UrlFormat","title":"ExperimentalExtendedData.UrlFormat","content":"ExperimentalExtendedData.UrlFormat \nUrlFormat \n Represents the URL format of the diagnostic","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-extendeddata-expressionisafunctionextendeddata.html","title":"ExpressionIsAFunctionExtendedData","content":"ExpressionIsAFunctionExtendedData \n Additional data for \u0027This expression is a function value, i.e. is missing arguments\u0027 diagnostic \nExpressionIsAFunctionExtendedData.ActualType \nActualType","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-extendeddata-expressionisafunctionextendeddata.html#ActualType","title":"ExpressionIsAFunctionExtendedData.ActualType","content":"ExpressionIsAFunctionExtendedData.ActualType \nActualType \n Represents F# type of the expression","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-extendeddata-fieldnotcontaineddiagnosticextendeddata.html","title":"FieldNotContainedDiagnosticExtendedData","content":"FieldNotContainedDiagnosticExtendedData \n Additional data for diagnostics about a field whose declarations differ in signature and implementation \nFieldNotContainedDiagnosticExtendedData.SignatureField \nSignatureField \nFieldNotContainedDiagnosticExtendedData.ImplementationField \nImplementationField","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-extendeddata-fieldnotcontaineddiagnosticextendeddata.html#SignatureField","title":"FieldNotContainedDiagnosticExtendedData.SignatureField","content":"FieldNotContainedDiagnosticExtendedData.SignatureField \nSignatureField \n Represents F# field in the signature file","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-extendeddata-fieldnotcontaineddiagnosticextendeddata.html#ImplementationField","title":"FieldNotContainedDiagnosticExtendedData.ImplementationField","content":"FieldNotContainedDiagnosticExtendedData.ImplementationField \nImplementationField \n Represents F# field in the implementation file","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-extendeddata-ifsharpdiagnosticextendeddata.html","title":"IFSharpDiagnosticExtendedData","content":"IFSharpDiagnosticExtendedData \n Contextually-relevant data to each particular diagnostic","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-extendeddata-obsoletediagnosticextendeddata.html","title":"ObsoleteDiagnosticExtendedData","content":"ObsoleteDiagnosticExtendedData \n Additional data for diagnostics about obsolete attributes. \nObsoleteDiagnosticExtendedData.DiagnosticId \nDiagnosticId \nObsoleteDiagnosticExtendedData.UrlFormat \nUrlFormat","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-extendeddata-obsoletediagnosticextendeddata.html#DiagnosticId","title":"ObsoleteDiagnosticExtendedData.DiagnosticId","content":"ObsoleteDiagnosticExtendedData.DiagnosticId \nDiagnosticId \n Represents the DiagnosticId of the diagnostic","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-extendeddata-obsoletediagnosticextendeddata.html#UrlFormat","title":"ObsoleteDiagnosticExtendedData.UrlFormat","content":"ObsoleteDiagnosticExtendedData.UrlFormat \nUrlFormat \n Represents the URL format of the diagnostic","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-extendeddata-typeextendeddata.html","title":"TypeExtendedData","content":"TypeExtendedData \n \nTypeExtendedData.Type \nType \nTypeExtendedData.DisplayContext \nDisplayContext","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-extendeddata-typeextendeddata.html#Type","title":"TypeExtendedData.Type","content":"TypeExtendedData.Type \nType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-extendeddata-typeextendeddata.html#DisplayContext","title":"TypeExtendedData.DisplayContext","content":"TypeExtendedData.DisplayContext \nDisplayContext \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-extendeddata-typemismatchdiagnosticextendeddata.html","title":"TypeMismatchDiagnosticExtendedData","content":"TypeMismatchDiagnosticExtendedData \n Additional data for type-mismatch-like (usually with ErrorNumber = 1) diagnostics \nTypeMismatchDiagnosticExtendedData.ContextInfo \nContextInfo \nTypeMismatchDiagnosticExtendedData.DisplayContext \nDisplayContext \nTypeMismatchDiagnosticExtendedData.ExpectedType \nExpectedType \nTypeMismatchDiagnosticExtendedData.ActualType \nActualType","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-extendeddata-typemismatchdiagnosticextendeddata.html#ContextInfo","title":"TypeMismatchDiagnosticExtendedData.ContextInfo","content":"TypeMismatchDiagnosticExtendedData.ContextInfo \nContextInfo \n The context in which the type mismatch was found","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-extendeddata-typemismatchdiagnosticextendeddata.html#DisplayContext","title":"TypeMismatchDiagnosticExtendedData.DisplayContext","content":"TypeMismatchDiagnosticExtendedData.DisplayContext \nDisplayContext \n Represents the information needed to format types","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-extendeddata-typemismatchdiagnosticextendeddata.html#ExpectedType","title":"TypeMismatchDiagnosticExtendedData.ExpectedType","content":"TypeMismatchDiagnosticExtendedData.ExpectedType \nExpectedType \n Represents the expected F# type in the current context","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-extendeddata-typemismatchdiagnosticextendeddata.html#ActualType","title":"TypeMismatchDiagnosticExtendedData.ActualType","content":"TypeMismatchDiagnosticExtendedData.ActualType \nActualType \n Represents the actual F# type in the current context","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-extendeddata-valuenotcontaineddiagnosticextendeddata.html","title":"ValueNotContainedDiagnosticExtendedData","content":"ValueNotContainedDiagnosticExtendedData \n Additional data for diagnostics about a value whose declarations differ in signature and implementation \nValueNotContainedDiagnosticExtendedData.ImplementationValue \nImplementationValue \nValueNotContainedDiagnosticExtendedData.SignatureValue \nSignatureValue","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-extendeddata-valuenotcontaineddiagnosticextendeddata.html#ImplementationValue","title":"ValueNotContainedDiagnosticExtendedData.ImplementationValue","content":"ValueNotContainedDiagnosticExtendedData.ImplementationValue \nImplementationValue \n Represents F# value in implementation file","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-extendeddata-valuenotcontaineddiagnosticextendeddata.html#SignatureValue","title":"ValueNotContainedDiagnosticExtendedData.SignatureValue","content":"ValueNotContainedDiagnosticExtendedData.SignatureValue \nSignatureValue \n Represents F# value in signature file","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnostic.html","title":"FSharpDiagnostic","content":"FSharpDiagnostic \n Represents a diagnostic produced by the F# compiler \nFSharpDiagnostic.EndLine \nEndLine \nFSharpDiagnostic.Start \nStart \nFSharpDiagnostic.Subcategory \nSubcategory \nFSharpDiagnostic.StartColumn \nStartColumn \nFSharpDiagnostic.Message \nMessage \nFSharpDiagnostic.Severity \nSeverity \nFSharpDiagnostic.Range \nRange \nFSharpDiagnostic.ErrorNumberText \nErrorNumberText \nFSharpDiagnostic.End \nEnd \nFSharpDiagnostic.ErrorNumberPrefix \nErrorNumberPrefix \nFSharpDiagnostic.ExtendedData \nExtendedData \nFSharpDiagnostic.StartLine \nStartLine \nFSharpDiagnostic.ErrorNumber \nErrorNumber \nFSharpDiagnostic.FileName \nFileName \nFSharpDiagnostic.EndColumn \nEndColumn \nFSharpDiagnostic.Create \nCreate \nFSharpDiagnostic.NewlineifyErrorString \nNewlineifyErrorString \nFSharpDiagnostic.NormalizeErrorString \nNormalizeErrorString","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnostic.html#EndLine","title":"FSharpDiagnostic.EndLine","content":"FSharpDiagnostic.EndLine \nEndLine \n Gets the end line for the diagnostic","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnostic.html#Start","title":"FSharpDiagnostic.Start","content":"FSharpDiagnostic.Start \nStart \n Gets the start position for the diagnostic","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnostic.html#Subcategory","title":"FSharpDiagnostic.Subcategory","content":"FSharpDiagnostic.Subcategory \nSubcategory \n Gets the subcategory for the diagnostic","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnostic.html#StartColumn","title":"FSharpDiagnostic.StartColumn","content":"FSharpDiagnostic.StartColumn \nStartColumn \n Gets the start column for the diagnostic","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnostic.html#Message","title":"FSharpDiagnostic.Message","content":"FSharpDiagnostic.Message \nMessage \n Gets the message for the diagnostic","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnostic.html#Severity","title":"FSharpDiagnostic.Severity","content":"FSharpDiagnostic.Severity \nSeverity \n Gets the severity for the diagnostic","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnostic.html#Range","title":"FSharpDiagnostic.Range","content":"FSharpDiagnostic.Range \nRange \n Gets the range for the diagnostic","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnostic.html#ErrorNumberText","title":"FSharpDiagnostic.ErrorNumberText","content":"FSharpDiagnostic.ErrorNumberText \nErrorNumberText \n Gets the full error number text e.g \u0022FS0031\u0022","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnostic.html#End","title":"FSharpDiagnostic.End","content":"FSharpDiagnostic.End \nEnd \n Gets the end position for the diagnostic","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnostic.html#ErrorNumberPrefix","title":"FSharpDiagnostic.ErrorNumberPrefix","content":"FSharpDiagnostic.ErrorNumberPrefix \nErrorNumberPrefix \n Gets the number prefix for the diagnostic, usually \u0022FS\u0022 but may differ for analyzers","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnostic.html#ExtendedData","title":"FSharpDiagnostic.ExtendedData","content":"FSharpDiagnostic.ExtendedData \nExtendedData \n Gets the contextually relevant data to each particular diagnostic for things like code fixes","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnostic.html#StartLine","title":"FSharpDiagnostic.StartLine","content":"FSharpDiagnostic.StartLine \nStartLine \n Gets the start line for the diagnostic","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnostic.html#ErrorNumber","title":"FSharpDiagnostic.ErrorNumber","content":"FSharpDiagnostic.ErrorNumber \nErrorNumber \n Gets the number for the diagnostic","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnostic.html#FileName","title":"FSharpDiagnostic.FileName","content":"FSharpDiagnostic.FileName \nFileName \n Gets the file name for the diagnostic","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnostic.html#EndColumn","title":"FSharpDiagnostic.EndColumn","content":"FSharpDiagnostic.EndColumn \nEndColumn \n Gets the end column for the diagnostic","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnostic.html#Create","title":"FSharpDiagnostic.Create","content":"FSharpDiagnostic.Create \nCreate \n Creates a diagnostic, e.g. for reporting from an analyzer","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnostic.html#NewlineifyErrorString","title":"FSharpDiagnostic.NewlineifyErrorString","content":"FSharpDiagnostic.NewlineifyErrorString \nNewlineifyErrorString \n Newlines are recognized and replaced with (ASCII 29, the \u0027group separator\u0027),\n which is decoded by the IDE with \u0027NewlineifyErrorString\u0027 back into newlines, so that multi-line errors can be displayed in QuickInfo","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnostic.html#NormalizeErrorString","title":"FSharpDiagnostic.NormalizeErrorString","content":"FSharpDiagnostic.NormalizeErrorString \nNormalizeErrorString \n Newlines are recognized and replaced with (ASCII 29, the \u0027group separator\u0027),\n which is decoded by the IDE with \u0027NewlineifyErrorString\u0027 back into newlines, so that multi-line errors can be displayed in QuickInfo","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnostickind.html","title":"FSharpDiagnosticKind","content":"FSharpDiagnosticKind \n Supported kinds of diagnostics by this service. \nFSharpDiagnosticKind.IsRemoveIndexerDot \nIsRemoveIndexerDot \nFSharpDiagnosticKind.IsReplaceWithSuggestion \nIsReplaceWithSuggestion \nFSharpDiagnosticKind.IsAddIndexerDot \nIsAddIndexerDot \nFSharpDiagnosticKind.AddIndexerDot \nAddIndexerDot \nFSharpDiagnosticKind.ReplaceWithSuggestion \nReplaceWithSuggestion \nFSharpDiagnosticKind.RemoveIndexerDot \nRemoveIndexerDot","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnostickind.html#IsRemoveIndexerDot","title":"FSharpDiagnosticKind.IsRemoveIndexerDot","content":"FSharpDiagnosticKind.IsRemoveIndexerDot \nIsRemoveIndexerDot \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnostickind.html#IsReplaceWithSuggestion","title":"FSharpDiagnosticKind.IsReplaceWithSuggestion","content":"FSharpDiagnosticKind.IsReplaceWithSuggestion \nIsReplaceWithSuggestion \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnostickind.html#IsAddIndexerDot","title":"FSharpDiagnosticKind.IsAddIndexerDot","content":"FSharpDiagnosticKind.IsAddIndexerDot \nIsAddIndexerDot \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnostickind.html#AddIndexerDot","title":"FSharpDiagnosticKind.AddIndexerDot","content":"FSharpDiagnosticKind.AddIndexerDot \nAddIndexerDot \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnostickind.html#ReplaceWithSuggestion","title":"FSharpDiagnosticKind.ReplaceWithSuggestion","content":"FSharpDiagnosticKind.ReplaceWithSuggestion \nReplaceWithSuggestion \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnostickind.html#RemoveIndexerDot","title":"FSharpDiagnosticKind.RemoveIndexerDot","content":"FSharpDiagnosticKind.RemoveIndexerDot \nRemoveIndexerDot \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnosticoptions.html","title":"FSharpDiagnosticOptions","content":"FSharpDiagnosticOptions \n \nFSharpDiagnosticOptions.CheckXmlDocs \nCheckXmlDocs \nFSharpDiagnosticOptions.Default \nDefault \nFSharpDiagnosticOptions.WarnLevel \nWarnLevel \nFSharpDiagnosticOptions.GlobalWarnAsError \nGlobalWarnAsError \nFSharpDiagnosticOptions.WarnOff \nWarnOff \nFSharpDiagnosticOptions.WarnOn \nWarnOn \nFSharpDiagnosticOptions.WarnAsError \nWarnAsError \nFSharpDiagnosticOptions.WarnAsWarn \nWarnAsWarn \nFSharpDiagnosticOptions.WarnScopeData \nWarnScopeData","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnosticoptions.html#CheckXmlDocs","title":"FSharpDiagnosticOptions.CheckXmlDocs","content":"FSharpDiagnosticOptions.CheckXmlDocs \nCheckXmlDocs \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnosticoptions.html#Default","title":"FSharpDiagnosticOptions.Default","content":"FSharpDiagnosticOptions.Default \nDefault \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnosticoptions.html#WarnLevel","title":"FSharpDiagnosticOptions.WarnLevel","content":"FSharpDiagnosticOptions.WarnLevel \nWarnLevel \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnosticoptions.html#GlobalWarnAsError","title":"FSharpDiagnosticOptions.GlobalWarnAsError","content":"FSharpDiagnosticOptions.GlobalWarnAsError \nGlobalWarnAsError \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnosticoptions.html#WarnOff","title":"FSharpDiagnosticOptions.WarnOff","content":"FSharpDiagnosticOptions.WarnOff \nWarnOff \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnosticoptions.html#WarnOn","title":"FSharpDiagnosticOptions.WarnOn","content":"FSharpDiagnosticOptions.WarnOn \nWarnOn \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnosticoptions.html#WarnAsError","title":"FSharpDiagnosticOptions.WarnAsError","content":"FSharpDiagnosticOptions.WarnAsError \nWarnAsError \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnosticoptions.html#WarnAsWarn","title":"FSharpDiagnosticOptions.WarnAsWarn","content":"FSharpDiagnosticOptions.WarnAsWarn \nWarnAsWarn \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnosticoptions.html#WarnScopeData","title":"FSharpDiagnosticOptions.WarnScopeData","content":"FSharpDiagnosticOptions.WarnScopeData \nWarnScopeData \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnosticseverity.html","title":"FSharpDiagnosticSeverity","content":"FSharpDiagnosticSeverity \n \nFSharpDiagnosticSeverity.IsInfo \nIsInfo \nFSharpDiagnosticSeverity.IsHidden \nIsHidden \nFSharpDiagnosticSeverity.IsWarning \nIsWarning \nFSharpDiagnosticSeverity.IsError \nIsError \nFSharpDiagnosticSeverity.Hidden \nHidden \nFSharpDiagnosticSeverity.Info \nInfo \nFSharpDiagnosticSeverity.Warning \nWarning \nFSharpDiagnosticSeverity.Error \nError","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnosticseverity.html#IsInfo","title":"FSharpDiagnosticSeverity.IsInfo","content":"FSharpDiagnosticSeverity.IsInfo \nIsInfo \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnosticseverity.html#IsHidden","title":"FSharpDiagnosticSeverity.IsHidden","content":"FSharpDiagnosticSeverity.IsHidden \nIsHidden \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnosticseverity.html#IsWarning","title":"FSharpDiagnosticSeverity.IsWarning","content":"FSharpDiagnosticSeverity.IsWarning \nIsWarning \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnosticseverity.html#IsError","title":"FSharpDiagnosticSeverity.IsError","content":"FSharpDiagnosticSeverity.IsError \nIsError \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnosticseverity.html#Hidden","title":"FSharpDiagnosticSeverity.Hidden","content":"FSharpDiagnosticSeverity.Hidden \nHidden \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnosticseverity.html#Info","title":"FSharpDiagnosticSeverity.Info","content":"FSharpDiagnosticSeverity.Info \nInfo \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnosticseverity.html#Warning","title":"FSharpDiagnosticSeverity.Warning","content":"FSharpDiagnosticSeverity.Warning \nWarning \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnosticseverity.html#Error","title":"FSharpDiagnosticSeverity.Error","content":"FSharpDiagnosticSeverity.Error \nError \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-assemblycontent.html","title":"AssemblyContent","content":"AssemblyContent \n Provides assembly content. \nAssemblyContent.GetAssemblySignatureContent \nGetAssemblySignatureContent \nAssemblyContent.GetAssemblyContent \nGetAssemblyContent","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-assemblycontent.html#GetAssemblySignatureContent","title":"AssemblyContent.GetAssemblySignatureContent","content":"AssemblyContent.GetAssemblySignatureContent \nGetAssemblySignatureContent \n Given a \u0060FSharpAssemblySignature\u0060, returns assembly content.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-assemblycontent.html#GetAssemblyContent","title":"AssemblyContent.GetAssemblyContent","content":"AssemblyContent.GetAssemblyContent \nGetAssemblyContent \n Returns (possibly cached) assembly content.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-interfacestubgenerator.html","title":"InterfaceStubGenerator","content":"InterfaceStubGenerator \n \nInterfaceStubGenerator.GetInterfaceMembers \nGetInterfaceMembers \nInterfaceStubGenerator.HasNoInterfaceMember \nHasNoInterfaceMember \nInterfaceStubGenerator.GetMemberNameAndRanges \nGetMemberNameAndRanges \nInterfaceStubGenerator.GetImplementedMemberSignatures \nGetImplementedMemberSignatures \nInterfaceStubGenerator.IsInterface \nIsInterface \nInterfaceStubGenerator.FormatInterface \nFormatInterface \nInterfaceStubGenerator.TryFindInterfaceDeclaration \nTryFindInterfaceDeclaration","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-interfacestubgenerator.html#GetInterfaceMembers","title":"InterfaceStubGenerator.GetInterfaceMembers","content":"InterfaceStubGenerator.GetInterfaceMembers \nGetInterfaceMembers \n Get members in the decreasing order of inheritance chain","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-interfacestubgenerator.html#HasNoInterfaceMember","title":"InterfaceStubGenerator.HasNoInterfaceMember","content":"InterfaceStubGenerator.HasNoInterfaceMember \nHasNoInterfaceMember \n Check whether an interface is empty","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-interfacestubgenerator.html#GetMemberNameAndRanges","title":"InterfaceStubGenerator.GetMemberNameAndRanges","content":"InterfaceStubGenerator.GetMemberNameAndRanges \nGetMemberNameAndRanges \n Get associated member names and ranges.\n In case of properties, intrinsic ranges might not be correct for the purpose of getting\n positions of \u0027member\u0027, which indicate the indentation for generating new members","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-interfacestubgenerator.html#GetImplementedMemberSignatures","title":"InterfaceStubGenerator.GetImplementedMemberSignatures","content":"InterfaceStubGenerator.GetImplementedMemberSignatures \nGetImplementedMemberSignatures \n Get interface member signatures","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-interfacestubgenerator.html#IsInterface","title":"InterfaceStubGenerator.IsInterface","content":"InterfaceStubGenerator.IsInterface \nIsInterface \n Check whether an entity is an interface or type abbreviation of an interface","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-interfacestubgenerator.html#FormatInterface","title":"InterfaceStubGenerator.FormatInterface","content":"InterfaceStubGenerator.FormatInterface \nFormatInterface \n Generate stub implementation of an interface at a start column","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-interfacestubgenerator.html#TryFindInterfaceDeclaration","title":"InterfaceStubGenerator.TryFindInterfaceDeclaration","content":"InterfaceStubGenerator.TryFindInterfaceDeclaration \nTryFindInterfaceDeclaration \n Find corresponding interface declaration at a given position","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigateto.html","title":"NavigateTo","content":"NavigateTo \n \nNavigateTo.GetNavigableItems \nGetNavigableItems","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigateto.html#GetNavigableItems","title":"NavigateTo.GetNavigableItems","content":"NavigateTo.GetNavigableItems \nGetNavigableItems \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigation.html","title":"Navigation","content":"Navigation \n \nNavigation.getNavigation \ngetNavigation","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigation.html#getNavigation","title":"Navigation.getNavigation","content":"Navigation.getNavigation \ngetNavigation \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-parsedinput.html","title":"ParsedInput","content":"ParsedInput \n Operations querying the entire syntax tree \nParsedInput.TryFindExpressionASTLeftOfDotLeftOfCursor \nTryFindExpressionASTLeftOfDotLeftOfCursor \nParsedInput.GetRangeOfExprLeftOfDot \nGetRangeOfExprLeftOfDot \nParsedInput.TryFindExpressionIslandInPosition \nTryFindExpressionIslandInPosition \nParsedInput.TryGetCompletionContext \nTryGetCompletionContext \nParsedInput.GetEntityKind \nGetEntityKind \nParsedInput.GetFullNameOfSmallestModuleOrNamespaceAtPoint \nGetFullNameOfSmallestModuleOrNamespaceAtPoint \nParsedInput.TryFindInsertionContext \nTryFindInsertionContext \nParsedInput.FindNearestPointToInsertOpenDeclaration \nFindNearestPointToInsertOpenDeclaration \nParsedInput.GetLongIdentAt \nGetLongIdentAt \nParsedInput.AdjustInsertionPoint \nAdjustInsertionPoint","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-parsedinput.html#TryFindExpressionASTLeftOfDotLeftOfCursor","title":"ParsedInput.TryFindExpressionASTLeftOfDotLeftOfCursor","content":"ParsedInput.TryFindExpressionASTLeftOfDotLeftOfCursor \nTryFindExpressionASTLeftOfDotLeftOfCursor \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-parsedinput.html#GetRangeOfExprLeftOfDot","title":"ParsedInput.GetRangeOfExprLeftOfDot","content":"ParsedInput.GetRangeOfExprLeftOfDot \nGetRangeOfExprLeftOfDot \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-parsedinput.html#TryFindExpressionIslandInPosition","title":"ParsedInput.TryFindExpressionIslandInPosition","content":"ParsedInput.TryFindExpressionIslandInPosition \nTryFindExpressionIslandInPosition \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-parsedinput.html#TryGetCompletionContext","title":"ParsedInput.TryGetCompletionContext","content":"ParsedInput.TryGetCompletionContext \nTryGetCompletionContext \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-parsedinput.html#GetEntityKind","title":"ParsedInput.GetEntityKind","content":"ParsedInput.GetEntityKind \nGetEntityKind \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-parsedinput.html#GetFullNameOfSmallestModuleOrNamespaceAtPoint","title":"ParsedInput.GetFullNameOfSmallestModuleOrNamespaceAtPoint","content":"ParsedInput.GetFullNameOfSmallestModuleOrNamespaceAtPoint \nGetFullNameOfSmallestModuleOrNamespaceAtPoint \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-parsedinput.html#TryFindInsertionContext","title":"ParsedInput.TryFindInsertionContext","content":"ParsedInput.TryFindInsertionContext \nTryFindInsertionContext \n Returns \u0060InsertContext\u0060 based on current position and symbol idents.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-parsedinput.html#FindNearestPointToInsertOpenDeclaration","title":"ParsedInput.FindNearestPointToInsertOpenDeclaration","content":"ParsedInput.FindNearestPointToInsertOpenDeclaration \nFindNearestPointToInsertOpenDeclaration \n Returns \u0060InsertContext\u0060 based on current position and symbol idents.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-parsedinput.html#GetLongIdentAt","title":"ParsedInput.GetLongIdentAt","content":"ParsedInput.GetLongIdentAt \nGetLongIdentAt \n Returns long identifier at position.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-parsedinput.html#AdjustInsertionPoint","title":"ParsedInput.AdjustInsertionPoint","content":"ParsedInput.AdjustInsertionPoint \nAdjustInsertionPoint \n Corrects insertion line number based on kind of scope and text surrounding the insertion point.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-quickparse.html","title":"QuickParse","content":"QuickParse \n\u003Cpre\u003E Methods for cheaply and inaccurately parsing F#.\n\n These methods are very old and are mostly to do with extracting \u0022long identifier islands\u0022\n     A.B.C\n from F# source code, an approach taken from pre-F# VS samples for implementing intellisense.\n\n This code should really no longer be needed since the language service has access to\n parsed F# source code ASTs.  However, the long identifiers are still passed back to GetDeclarations and friends in the\n F# Compiler Service and it\u0027s annoyingly hard to remove their use completely.\n\n In general it is unlikely much progress will be made by fixing this code - it will be better to\n extract more information from the F# ASTs.\n\n It\u0027s also surprising how hard even the job of getting long identifier islands can be. For example the code\n below is inaccurate for long identifier chains involving \u0060\u0060...\u0060\u0060 identifiers.  And there are special cases\n for active pattern names and so on.\u003C/pre\u003E \nQuickParse.MagicalAdjustmentConstant \nMagicalAdjustmentConstant \nQuickParse.CorrectIdentifierToken \nCorrectIdentifierToken \nQuickParse.GetCompleteIdentifierIsland \nGetCompleteIdentifierIsland \nQuickParse.GetPartialLongName \nGetPartialLongName \nQuickParse.GetPartialLongNameEx \nGetPartialLongNameEx \nQuickParse.TestMemberOrOverrideDeclaration \nTestMemberOrOverrideDeclaration","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-quickparse.html#MagicalAdjustmentConstant","title":"QuickParse.MagicalAdjustmentConstant","content":"QuickParse.MagicalAdjustmentConstant \nMagicalAdjustmentConstant \n Puts us after the last character.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-quickparse.html#CorrectIdentifierToken","title":"QuickParse.CorrectIdentifierToken","content":"QuickParse.CorrectIdentifierToken \nCorrectIdentifierToken \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-quickparse.html#GetCompleteIdentifierIsland","title":"QuickParse.GetCompleteIdentifierIsland","content":"QuickParse.GetCompleteIdentifierIsland \nGetCompleteIdentifierIsland \n\u003Cpre\u003E Given a string and a position in that string, find an identifier as\n expected by \u0060GotoDefinition\u0060. This will work when the cursor is\n immediately before the identifier, within the identifier, or immediately\n after the identifier.\n\n \u0027tolerateJustAfter\u0027 indicates that we tolerate being one character after the identifier, used\n for goto-definition\n\n In general, only identifiers composed from upper/lower letters and \u0027.\u0027 are supported, but there\n are a couple of explicitly handled exceptions to allow some common scenarios:\n - When the name contains only letters and \u0027|\u0027 symbol, it may be an active pattern, so we\n   treat it as a valid identifier - e.g. let ( |Identity| ) a = a\n   (but other identifiers that include \u0027|\u0027 are not allowed - e.g. \u0027||\u0027 operator)\n - It searches for double tick (\u0060\u0060) to see if the identifier could be something like \u0060\u0060a b\u0060\u0060\n\n REVIEW: Also support, e.g., operators, performing the necessary mangling.\n (i.e., I would like that the name returned here can be passed as-is\n (post \u0060.\u0060-chopping) to \u0060GetDeclarationLocation.)\n\n In addition, return the position where a \u0060.\u0060 would go if we were making\n a call to \u0060DeclItemsForNamesAtPosition\u0060 for intellisense. This will\n allow us to use find the correct qualified items rather than resorting\n to the more expensive and less accurate environment lookup.\u003C/pre\u003E","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-quickparse.html#GetPartialLongName","title":"QuickParse.GetPartialLongName","content":"QuickParse.GetPartialLongName \nGetPartialLongName \n Get the partial long name of the identifier to the left of index.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-quickparse.html#GetPartialLongNameEx","title":"QuickParse.GetPartialLongNameEx","content":"QuickParse.GetPartialLongNameEx \nGetPartialLongNameEx \n Get the partial long name of the identifier to the left of index.\n For example, for \u0060System.DateTime.Now\u0060 it returns PartialLongName ([|\u0022System\u0022; \u0022DateTime\u0022|], \u0022Now\u0022, Some 32), where \u002232\u0022 pos of the last dot.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-quickparse.html#TestMemberOrOverrideDeclaration","title":"QuickParse.TestMemberOrOverrideDeclaration","content":"QuickParse.TestMemberOrOverrideDeclaration \nTestMemberOrOverrideDeclaration \n Tests whether the user is typing something like \u0022member x.\u0022 or \u0022override (*comment*) x.\u0022","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-simplifynames.html","title":"SimplifyNames","content":"SimplifyNames \n \nSimplifyNames.SimplifiableRange \nSimplifiableRange \nSimplifyNames.getSimplifiableNames \ngetSimplifiableNames","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-simplifynames.html#getSimplifiableNames","title":"SimplifyNames.getSimplifiableNames","content":"SimplifyNames.getSimplifiableNames \ngetSimplifiableNames \n Get all ranges that can be simplified in a file","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-simplifynames-simplifiablerange.html","title":"SimplifiableRange","content":"SimplifiableRange \n Data for use in finding unnecessarily-qualified names and generating diagnostics to simplify them \nSimplifiableRange.Range \nRange \nSimplifiableRange.RelativeName \nRelativeName","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-simplifynames-simplifiablerange.html#Range","title":"SimplifiableRange.Range","content":"SimplifiableRange.Range \nRange \n The range of a name that can be simplified","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-simplifynames-simplifiablerange.html#RelativeName","title":"SimplifiableRange.RelativeName","content":"SimplifiableRange.RelativeName \nRelativeName \n The relative name that can be applied to a simplifiable name","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure.html","title":"Structure","content":"Structure \n \nStructure.Collapse \nCollapse \nStructure.Scope \nScope \nStructure.ScopeRange \nScopeRange \nStructure.getOutliningRanges \ngetOutliningRanges","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure.html#getOutliningRanges","title":"Structure.getOutliningRanges","content":"Structure.getOutliningRanges \ngetOutliningRanges \n Returns outlining ranges for given parsed input.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-collapse.html","title":"Collapse","content":"Collapse \n Collapse indicates the way a range/snapshot should be collapsed. \u0060Same\u0060 is for a scope inside\n some kind of scope delimiter, e.g. \u0060[| ... |]\u0060, \u0060[ ... ]\u0060, \u0060{ ... }\u0060, etc.  \u0060Below\u0060 is for expressions\n following a binding or the right hand side of a pattern, e.g. \u0060let x = ...\u0060 \nCollapse.IsSame \nIsSame \nCollapse.IsBelow \nIsBelow \nCollapse.Below \nBelow \nCollapse.Same \nSame","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-collapse.html#IsSame","title":"Collapse.IsSame","content":"Collapse.IsSame \nIsSame \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-collapse.html#IsBelow","title":"Collapse.IsBelow","content":"Collapse.IsBelow \nIsBelow \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-collapse.html#Below","title":"Collapse.Below","content":"Collapse.Below \nBelow \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-collapse.html#Same","title":"Collapse.Same","content":"Collapse.Same \nSame \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html","title":"Scope","content":"Scope \n Tag to identify the construct that can be stored alongside its associated ranges \nScope.IsUnionDefn \nIsUnionDefn \nScope.IsMember \nIsMember \nScope.IsType \nIsType \nScope.IsFor \nIsFor \nScope.IsTryInTryWith \nIsTryInTryWith \nScope.IsYieldOrReturnBang \nIsYieldOrReturnBang \nScope.IsOpen \nIsOpen \nScope.IsTuple \nIsTuple \nScope.IsEnumCase \nIsEnumCase \nScope.IsFinallyInTryFinally \nIsFinallyInTryFinally \nScope.IsNamespace \nIsNamespace \nScope.IsAttribute \nIsAttribute \nScope.IsWithInTryWith \nIsWithInTryWith \nScope.IsSpecialFunc \nIsSpecialFunc \nScope.IsRecord \nIsRecord \nScope.IsComputationExpr \nIsComputationExpr \nScope.IsThenInIfThenElse \nIsThenInIfThenElse \nScope.IsHashDirective \nIsHashDirective \nScope.IsTryFinally \nIsTryFinally \nScope.IsComment \nIsComment \nScope.IsArrayOrList \nIsArrayOrList \nScope.IsLetOrUseBang \nIsLetOrUseBang \nScope.IsObjExpr \nIsObjExpr \nScope.IsInterface \nIsInterface \nScope.IsMatch \nIsMatch \nScope.IsMatchLambda \nIsMatchLambda \nScope.IsLetOrUse \nIsLetOrUse \nScope.IsXmlDocComment \nIsXmlDocComment \nScope.IsTypeExtension \nIsTypeExtension \nScope.IsIfThenElse \nIsIfThenElse \nScope.IsRecordField \nIsRecordField \nScope.IsMatchClause \nIsMatchClause \nScope.IsVal \nIsVal \nScope.IsYieldOrReturn \nIsYieldOrReturn \nScope.IsLambda \nIsLambda \nScope.IsModule \nIsModule \nScope.IsTryInTryFinally \nIsTryInTryFinally \nScope.IsElseInIfThenElse \nIsElseInIfThenElse \nScope.IsNew \nIsNew \nScope.IsTryWith \nIsTryWith \nScope.IsUnionCase \nIsUnionCase \nScope.IsQuote \nIsQuote \nScope.IsDo \nIsDo \nScope.IsWhile \nIsWhile \nScope.IsRecordDefn \nIsRecordDefn \nScope.IsMatchBang \nIsMatchBang \nScope.Open \nOpen \nScope.Namespace \nNamespace \nScope.Module \nModule \nScope.Type \nType \nScope.Member \nMember \nScope.LetOrUse \nLetOrUse \nScope.Val \nVal \nScope.ComputationExpr \nComputationExpr \nScope.IfThenElse \nIfThenElse \nScope.ThenInIfThenElse \nThenInIfThenElse \nScope.ElseInIfThenElse \nElseInIfThenElse \nScope.TryWith \nTryWith \nScope.TryInTryWith \nTryInTryWith \nScope.WithInTryWith \nWithInTryWith \nScope.TryFinally \nTryFinally \nScope.TryInTryFinally \nTryInTryFinally \nScope.FinallyInTryFinally \nFinallyInTryFinally \nScope.ArrayOrList \nArrayOrList \nScope.ObjExpr \nObjExpr \nScope.For \nFor \nScope.While \nWhile \nScope.Match \nMatch \nScope.MatchBang \nMatchBang \nScope.MatchLambda \nMatchLambda \nScope.MatchClause \nMatchClause \nScope.Lambda \nLambda \nScope.Quote \nQuote \nScope.Record \nRecord \nScope.SpecialFunc \nSpecialFunc \nScope.Do \nDo \nScope.New \nNew \nScope.Attribute \nAttribute \nScope.Interface \nInterface \nScope.HashDirective \nHashDirective \nScope.LetOrUseBang \nLetOrUseBang \nScope.TypeExtension \nTypeExtension \nScope.YieldOrReturn \nYieldOrReturn \nScope.YieldOrReturnBang \nYieldOrReturnBang \nScope.Tuple \nTuple \nScope.UnionCase \nUnionCase \nScope.EnumCase \nEnumCase \nScope.RecordField \nRecordField \nScope.RecordDefn \nRecordDefn \nScope.UnionDefn \nUnionDefn \nScope.Comment \nComment \nScope.XmlDocComment \nXmlDocComment","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#IsUnionDefn","title":"Scope.IsUnionDefn","content":"Scope.IsUnionDefn \nIsUnionDefn \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#IsMember","title":"Scope.IsMember","content":"Scope.IsMember \nIsMember \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#IsType","title":"Scope.IsType","content":"Scope.IsType \nIsType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#IsFor","title":"Scope.IsFor","content":"Scope.IsFor \nIsFor \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#IsTryInTryWith","title":"Scope.IsTryInTryWith","content":"Scope.IsTryInTryWith \nIsTryInTryWith \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#IsYieldOrReturnBang","title":"Scope.IsYieldOrReturnBang","content":"Scope.IsYieldOrReturnBang \nIsYieldOrReturnBang \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#IsOpen","title":"Scope.IsOpen","content":"Scope.IsOpen \nIsOpen \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#IsTuple","title":"Scope.IsTuple","content":"Scope.IsTuple \nIsTuple \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#IsEnumCase","title":"Scope.IsEnumCase","content":"Scope.IsEnumCase \nIsEnumCase \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#IsFinallyInTryFinally","title":"Scope.IsFinallyInTryFinally","content":"Scope.IsFinallyInTryFinally \nIsFinallyInTryFinally \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#IsNamespace","title":"Scope.IsNamespace","content":"Scope.IsNamespace \nIsNamespace \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#IsAttribute","title":"Scope.IsAttribute","content":"Scope.IsAttribute \nIsAttribute \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#IsWithInTryWith","title":"Scope.IsWithInTryWith","content":"Scope.IsWithInTryWith \nIsWithInTryWith \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#IsSpecialFunc","title":"Scope.IsSpecialFunc","content":"Scope.IsSpecialFunc \nIsSpecialFunc \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#IsRecord","title":"Scope.IsRecord","content":"Scope.IsRecord \nIsRecord \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#IsComputationExpr","title":"Scope.IsComputationExpr","content":"Scope.IsComputationExpr \nIsComputationExpr \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#IsThenInIfThenElse","title":"Scope.IsThenInIfThenElse","content":"Scope.IsThenInIfThenElse \nIsThenInIfThenElse \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#IsHashDirective","title":"Scope.IsHashDirective","content":"Scope.IsHashDirective \nIsHashDirective \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#IsTryFinally","title":"Scope.IsTryFinally","content":"Scope.IsTryFinally \nIsTryFinally \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#IsComment","title":"Scope.IsComment","content":"Scope.IsComment \nIsComment \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#IsArrayOrList","title":"Scope.IsArrayOrList","content":"Scope.IsArrayOrList \nIsArrayOrList \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#IsLetOrUseBang","title":"Scope.IsLetOrUseBang","content":"Scope.IsLetOrUseBang \nIsLetOrUseBang \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#IsObjExpr","title":"Scope.IsObjExpr","content":"Scope.IsObjExpr \nIsObjExpr \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#IsInterface","title":"Scope.IsInterface","content":"Scope.IsInterface \nIsInterface \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#IsMatch","title":"Scope.IsMatch","content":"Scope.IsMatch \nIsMatch \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#IsMatchLambda","title":"Scope.IsMatchLambda","content":"Scope.IsMatchLambda \nIsMatchLambda \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#IsLetOrUse","title":"Scope.IsLetOrUse","content":"Scope.IsLetOrUse \nIsLetOrUse \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#IsXmlDocComment","title":"Scope.IsXmlDocComment","content":"Scope.IsXmlDocComment \nIsXmlDocComment \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#IsTypeExtension","title":"Scope.IsTypeExtension","content":"Scope.IsTypeExtension \nIsTypeExtension \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#IsIfThenElse","title":"Scope.IsIfThenElse","content":"Scope.IsIfThenElse \nIsIfThenElse \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#IsRecordField","title":"Scope.IsRecordField","content":"Scope.IsRecordField \nIsRecordField \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#IsMatchClause","title":"Scope.IsMatchClause","content":"Scope.IsMatchClause \nIsMatchClause \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#IsVal","title":"Scope.IsVal","content":"Scope.IsVal \nIsVal \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#IsYieldOrReturn","title":"Scope.IsYieldOrReturn","content":"Scope.IsYieldOrReturn \nIsYieldOrReturn \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#IsLambda","title":"Scope.IsLambda","content":"Scope.IsLambda \nIsLambda \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#IsModule","title":"Scope.IsModule","content":"Scope.IsModule \nIsModule \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#IsTryInTryFinally","title":"Scope.IsTryInTryFinally","content":"Scope.IsTryInTryFinally \nIsTryInTryFinally \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#IsElseInIfThenElse","title":"Scope.IsElseInIfThenElse","content":"Scope.IsElseInIfThenElse \nIsElseInIfThenElse \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#IsNew","title":"Scope.IsNew","content":"Scope.IsNew \nIsNew \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#IsTryWith","title":"Scope.IsTryWith","content":"Scope.IsTryWith \nIsTryWith \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#IsUnionCase","title":"Scope.IsUnionCase","content":"Scope.IsUnionCase \nIsUnionCase \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#IsQuote","title":"Scope.IsQuote","content":"Scope.IsQuote \nIsQuote \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#IsDo","title":"Scope.IsDo","content":"Scope.IsDo \nIsDo \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#IsWhile","title":"Scope.IsWhile","content":"Scope.IsWhile \nIsWhile \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#IsRecordDefn","title":"Scope.IsRecordDefn","content":"Scope.IsRecordDefn \nIsRecordDefn \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#IsMatchBang","title":"Scope.IsMatchBang","content":"Scope.IsMatchBang \nIsMatchBang \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#Open","title":"Scope.Open","content":"Scope.Open \nOpen \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#Namespace","title":"Scope.Namespace","content":"Scope.Namespace \nNamespace \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#Module","title":"Scope.Module","content":"Scope.Module \nModule \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#Type","title":"Scope.Type","content":"Scope.Type \nType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#Member","title":"Scope.Member","content":"Scope.Member \nMember \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#LetOrUse","title":"Scope.LetOrUse","content":"Scope.LetOrUse \nLetOrUse \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#Val","title":"Scope.Val","content":"Scope.Val \nVal \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#ComputationExpr","title":"Scope.ComputationExpr","content":"Scope.ComputationExpr \nComputationExpr \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#IfThenElse","title":"Scope.IfThenElse","content":"Scope.IfThenElse \nIfThenElse \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#ThenInIfThenElse","title":"Scope.ThenInIfThenElse","content":"Scope.ThenInIfThenElse \nThenInIfThenElse \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#ElseInIfThenElse","title":"Scope.ElseInIfThenElse","content":"Scope.ElseInIfThenElse \nElseInIfThenElse \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#TryWith","title":"Scope.TryWith","content":"Scope.TryWith \nTryWith \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#TryInTryWith","title":"Scope.TryInTryWith","content":"Scope.TryInTryWith \nTryInTryWith \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#WithInTryWith","title":"Scope.WithInTryWith","content":"Scope.WithInTryWith \nWithInTryWith \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#TryFinally","title":"Scope.TryFinally","content":"Scope.TryFinally \nTryFinally \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#TryInTryFinally","title":"Scope.TryInTryFinally","content":"Scope.TryInTryFinally \nTryInTryFinally \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#FinallyInTryFinally","title":"Scope.FinallyInTryFinally","content":"Scope.FinallyInTryFinally \nFinallyInTryFinally \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#ArrayOrList","title":"Scope.ArrayOrList","content":"Scope.ArrayOrList \nArrayOrList \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#ObjExpr","title":"Scope.ObjExpr","content":"Scope.ObjExpr \nObjExpr \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#For","title":"Scope.For","content":"Scope.For \nFor \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#While","title":"Scope.While","content":"Scope.While \nWhile \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#Match","title":"Scope.Match","content":"Scope.Match \nMatch \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#MatchBang","title":"Scope.MatchBang","content":"Scope.MatchBang \nMatchBang \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#MatchLambda","title":"Scope.MatchLambda","content":"Scope.MatchLambda \nMatchLambda \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#MatchClause","title":"Scope.MatchClause","content":"Scope.MatchClause \nMatchClause \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#Lambda","title":"Scope.Lambda","content":"Scope.Lambda \nLambda \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#Quote","title":"Scope.Quote","content":"Scope.Quote \nQuote \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#Record","title":"Scope.Record","content":"Scope.Record \nRecord \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#SpecialFunc","title":"Scope.SpecialFunc","content":"Scope.SpecialFunc \nSpecialFunc \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#Do","title":"Scope.Do","content":"Scope.Do \nDo \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#New","title":"Scope.New","content":"Scope.New \nNew \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#Attribute","title":"Scope.Attribute","content":"Scope.Attribute \nAttribute \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#Interface","title":"Scope.Interface","content":"Scope.Interface \nInterface \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#HashDirective","title":"Scope.HashDirective","content":"Scope.HashDirective \nHashDirective \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#LetOrUseBang","title":"Scope.LetOrUseBang","content":"Scope.LetOrUseBang \nLetOrUseBang \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#TypeExtension","title":"Scope.TypeExtension","content":"Scope.TypeExtension \nTypeExtension \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#YieldOrReturn","title":"Scope.YieldOrReturn","content":"Scope.YieldOrReturn \nYieldOrReturn \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#YieldOrReturnBang","title":"Scope.YieldOrReturnBang","content":"Scope.YieldOrReturnBang \nYieldOrReturnBang \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#Tuple","title":"Scope.Tuple","content":"Scope.Tuple \nTuple \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#UnionCase","title":"Scope.UnionCase","content":"Scope.UnionCase \nUnionCase \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#EnumCase","title":"Scope.EnumCase","content":"Scope.EnumCase \nEnumCase \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#RecordField","title":"Scope.RecordField","content":"Scope.RecordField \nRecordField \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#RecordDefn","title":"Scope.RecordDefn","content":"Scope.RecordDefn \nRecordDefn \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#UnionDefn","title":"Scope.UnionDefn","content":"Scope.UnionDefn \nUnionDefn \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#Comment","title":"Scope.Comment","content":"Scope.Comment \nComment \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#XmlDocComment","title":"Scope.XmlDocComment","content":"Scope.XmlDocComment \nXmlDocComment \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scoperange.html","title":"ScopeRange","content":"ScopeRange \n Stores the range for a construct, the sub-range that should be collapsed for outlining,\n a tag for the construct type, and a tag for the collapse style \nScopeRange.Scope \nScope \nScopeRange.Collapse \nCollapse \nScopeRange.Range \nRange \nScopeRange.CollapseRange \nCollapseRange","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scoperange.html#Scope","title":"ScopeRange.Scope","content":"ScopeRange.Scope \nScope \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scoperange.html#Collapse","title":"ScopeRange.Collapse","content":"ScopeRange.Collapse \nCollapse \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scoperange.html#Range","title":"ScopeRange.Range","content":"ScopeRange.Range \nRange \n HintSpan in BlockSpan","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scoperange.html#CollapseRange","title":"ScopeRange.CollapseRange","content":"ScopeRange.CollapseRange \nCollapseRange \n TextSpan in BlockSpan","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-unuseddeclarations.html","title":"UnusedDeclarations","content":"UnusedDeclarations \n \nUnusedDeclarations.getUnusedDeclarations \ngetUnusedDeclarations","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-unuseddeclarations.html#getUnusedDeclarations","title":"UnusedDeclarations.getUnusedDeclarations","content":"UnusedDeclarations.getUnusedDeclarations \ngetUnusedDeclarations \n Get all unused declarations in a file","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-unusedopens.html","title":"UnusedOpens","content":"UnusedOpens \n \nUnusedOpens.getUnusedOpens \ngetUnusedOpens","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-unusedopens.html#getUnusedOpens","title":"UnusedOpens.getUnusedOpens","content":"UnusedOpens.getUnusedOpens \ngetUnusedOpens \n Get all unused open declarations in a file","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-xmldoccomment.html","title":"XmlDocComment","content":"XmlDocComment \n \nXmlDocComment.IsBlank \nIsBlank","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-xmldoccomment.html#IsBlank","title":"XmlDocComment.IsBlank","content":"XmlDocComment.IsBlank \nIsBlank \n if it\u0027s a blank XML comment with trailing \u0022\u003C\u0022, returns Some (index of the \u0022\u003C\u0022), otherwise returns None","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-xmldocparser.html","title":"XmlDocParser","content":"XmlDocParser \n \nXmlDocParser.GetXmlDocables \nGetXmlDocables","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-xmldocparser.html#GetXmlDocables","title":"XmlDocParser.GetXmlDocables","content":"XmlDocParser.GetXmlDocables \nGetXmlDocables \n Get the list of Xml documentation from current source code","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-assemblycontenttype.html","title":"AssemblyContentType","content":"AssemblyContentType \n Assembly content type. \nAssemblyContentType.IsPublic \nIsPublic \nAssemblyContentType.IsFull \nIsFull \nAssemblyContentType.Public \nPublic \nAssemblyContentType.Full \nFull","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-assemblycontenttype.html#IsPublic","title":"AssemblyContentType.IsPublic","content":"AssemblyContentType.IsPublic \nIsPublic \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-assemblycontenttype.html#IsFull","title":"AssemblyContentType.IsFull","content":"AssemblyContentType.IsFull \nIsFull \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-assemblycontenttype.html#Public","title":"AssemblyContentType.Public","content":"AssemblyContentType.Public \nPublic \n Public assembly content only.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-assemblycontenttype.html#Full","title":"AssemblyContentType.Full","content":"AssemblyContentType.Full \nFull \n All assembly content.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-assemblysymbol.html","title":"AssemblySymbol","content":"AssemblySymbol \n Represents type, module, member, function or value in a compiled assembly. \nAssemblySymbol.FullName \nFullName \nAssemblySymbol.CleanedIdents \nCleanedIdents \nAssemblySymbol.Namespace \nNamespace \nAssemblySymbol.NearestRequireQualifiedAccessParent \nNearestRequireQualifiedAccessParent \nAssemblySymbol.TopRequireQualifiedAccessParent \nTopRequireQualifiedAccessParent \nAssemblySymbol.AutoOpenParent \nAutoOpenParent \nAssemblySymbol.Symbol \nSymbol \nAssemblySymbol.Kind \nKind \nAssemblySymbol.UnresolvedSymbol \nUnresolvedSymbol","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-assemblysymbol.html#FullName","title":"AssemblySymbol.FullName","content":"AssemblySymbol.FullName \nFullName \n Full entity name as it\u0027s seen in compiled code (raw FSharpEntity.FullName, FSharpValueOrFunction.FullName).","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-assemblysymbol.html#CleanedIdents","title":"AssemblySymbol.CleanedIdents","content":"AssemblySymbol.CleanedIdents \nCleanedIdents \n Entity name parts with removed module suffixes (Ns.M1Module.M2Module.M3.entity -\u003E Ns.M1.M2.M3.entity)\n and replaced compiled names with display names (FSharpEntity.DisplayName, FSharpValueOrFunction.DisplayName).\n Note: *all* parts are cleaned, not the last one.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-assemblysymbol.html#Namespace","title":"AssemblySymbol.Namespace","content":"AssemblySymbol.Namespace \nNamespace \n \u0060FSharpEntity.Namespace\u0060.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-assemblysymbol.html#NearestRequireQualifiedAccessParent","title":"AssemblySymbol.NearestRequireQualifiedAccessParent","content":"AssemblySymbol.NearestRequireQualifiedAccessParent \nNearestRequireQualifiedAccessParent \n The most narrative parent module that has \u0060RequireQualifiedAccess\u0060 attribute.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-assemblysymbol.html#TopRequireQualifiedAccessParent","title":"AssemblySymbol.TopRequireQualifiedAccessParent","content":"AssemblySymbol.TopRequireQualifiedAccessParent \nTopRequireQualifiedAccessParent \n Parent module that has the largest scope and has \u0060RequireQualifiedAccess\u0060 attribute.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-assemblysymbol.html#AutoOpenParent","title":"AssemblySymbol.AutoOpenParent","content":"AssemblySymbol.AutoOpenParent \nAutoOpenParent \n Parent module that has \u0060AutoOpen\u0060 attribute.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-assemblysymbol.html#Symbol","title":"AssemblySymbol.Symbol","content":"AssemblySymbol.Symbol \nSymbol \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-assemblysymbol.html#Kind","title":"AssemblySymbol.Kind","content":"AssemblySymbol.Kind \nKind \n Function that returns \u0060EntityKind\u0060 based of given \u0060LookupKind\u0060.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-assemblysymbol.html#UnresolvedSymbol","title":"AssemblySymbol.UnresolvedSymbol","content":"AssemblySymbol.UnresolvedSymbol \nUnresolvedSymbol \n Cache display name and namespace, used for completion.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-completioncontext.html","title":"CompletionContext","content":"CompletionContext \n \nCompletionContext.IsType \nIsType \nCompletionContext.IsUnionCaseFieldsDeclaration \nIsUnionCaseFieldsDeclaration \nCompletionContext.IsMethodOverride \nIsMethodOverride \nCompletionContext.IsParameterList \nIsParameterList \nCompletionContext.IsAttributeApplication \nIsAttributeApplication \nCompletionContext.IsInvalid \nIsInvalid \nCompletionContext.IsInherit \nIsInherit \nCompletionContext.IsRecordField \nIsRecordField \nCompletionContext.IsTypeAbbreviationOrSingleCaseUnion \nIsTypeAbbreviationOrSingleCaseUnion \nCompletionContext.IsPattern \nIsPattern \nCompletionContext.IsOpenDeclaration \nIsOpenDeclaration \nCompletionContext.IsRangeOperator \nIsRangeOperator \nCompletionContext.Invalid \nInvalid \nCompletionContext.Inherit \nInherit \nCompletionContext.RecordField \nRecordField \nCompletionContext.RangeOperator \nRangeOperator \nCompletionContext.ParameterList \nParameterList \nCompletionContext.AttributeApplication \nAttributeApplication \nCompletionContext.OpenDeclaration \nOpenDeclaration \nCompletionContext.Type \nType \nCompletionContext.UnionCaseFieldsDeclaration \nUnionCaseFieldsDeclaration \nCompletionContext.TypeAbbreviationOrSingleCaseUnion \nTypeAbbreviationOrSingleCaseUnion \nCompletionContext.Pattern \nPattern \nCompletionContext.MethodOverride \nMethodOverride","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-completioncontext.html#IsType","title":"CompletionContext.IsType","content":"CompletionContext.IsType \nIsType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-completioncontext.html#IsUnionCaseFieldsDeclaration","title":"CompletionContext.IsUnionCaseFieldsDeclaration","content":"CompletionContext.IsUnionCaseFieldsDeclaration \nIsUnionCaseFieldsDeclaration \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-completioncontext.html#IsMethodOverride","title":"CompletionContext.IsMethodOverride","content":"CompletionContext.IsMethodOverride \nIsMethodOverride \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-completioncontext.html#IsParameterList","title":"CompletionContext.IsParameterList","content":"CompletionContext.IsParameterList \nIsParameterList \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-completioncontext.html#IsAttributeApplication","title":"CompletionContext.IsAttributeApplication","content":"CompletionContext.IsAttributeApplication \nIsAttributeApplication \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-completioncontext.html#IsInvalid","title":"CompletionContext.IsInvalid","content":"CompletionContext.IsInvalid \nIsInvalid \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-completioncontext.html#IsInherit","title":"CompletionContext.IsInherit","content":"CompletionContext.IsInherit \nIsInherit \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-completioncontext.html#IsRecordField","title":"CompletionContext.IsRecordField","content":"CompletionContext.IsRecordField \nIsRecordField \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-completioncontext.html#IsTypeAbbreviationOrSingleCaseUnion","title":"CompletionContext.IsTypeAbbreviationOrSingleCaseUnion","content":"CompletionContext.IsTypeAbbreviationOrSingleCaseUnion \nIsTypeAbbreviationOrSingleCaseUnion \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-completioncontext.html#IsPattern","title":"CompletionContext.IsPattern","content":"CompletionContext.IsPattern \nIsPattern \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-completioncontext.html#IsOpenDeclaration","title":"CompletionContext.IsOpenDeclaration","content":"CompletionContext.IsOpenDeclaration \nIsOpenDeclaration \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-completioncontext.html#IsRangeOperator","title":"CompletionContext.IsRangeOperator","content":"CompletionContext.IsRangeOperator \nIsRangeOperator \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-completioncontext.html#Invalid","title":"CompletionContext.Invalid","content":"CompletionContext.Invalid \nInvalid \n Completion context cannot be determined due to errors","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-completioncontext.html#Inherit","title":"CompletionContext.Inherit","content":"CompletionContext.Inherit \nInherit \n Completing something after the inherit keyword","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-completioncontext.html#RecordField","title":"CompletionContext.RecordField","content":"CompletionContext.RecordField \nRecordField \n Completing records field","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-completioncontext.html#RangeOperator","title":"CompletionContext.RangeOperator","content":"CompletionContext.RangeOperator \nRangeOperator \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-completioncontext.html#ParameterList","title":"CompletionContext.ParameterList","content":"CompletionContext.ParameterList \nParameterList \n Completing named parameters\\setters in parameter list of attributes\\constructor\\method calls\n end of name ast node * list of properties\\parameters that were already set","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-completioncontext.html#AttributeApplication","title":"CompletionContext.AttributeApplication","content":"CompletionContext.AttributeApplication \nAttributeApplication \n Completing an attribute name, outside of the constructor","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-completioncontext.html#OpenDeclaration","title":"CompletionContext.OpenDeclaration","content":"CompletionContext.OpenDeclaration \nOpenDeclaration \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-completioncontext.html#Type","title":"CompletionContext.Type","content":"CompletionContext.Type \nType \n Completing a type annotation (e.g. foo (x: |))\n Completing a type application (e.g. typeof\u003Cstr| \u003E)","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-completioncontext.html#UnionCaseFieldsDeclaration","title":"CompletionContext.UnionCaseFieldsDeclaration","content":"CompletionContext.UnionCaseFieldsDeclaration \nUnionCaseFieldsDeclaration \n Completing union case fields declaration (e.g. \u0027A of stri|\u0027 but not \u0027B of tex|: string\u0027)","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-completioncontext.html#TypeAbbreviationOrSingleCaseUnion","title":"CompletionContext.TypeAbbreviationOrSingleCaseUnion","content":"CompletionContext.TypeAbbreviationOrSingleCaseUnion \nTypeAbbreviationOrSingleCaseUnion \n Completing a type abbreviation (e.g. type Long = int6|)\n or a single case union without a bar (type SomeUnion = Abc|)","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-completioncontext.html#Pattern","title":"CompletionContext.Pattern","content":"CompletionContext.Pattern \nPattern \n Completing a pattern in a match clause, member/let binding or lambda","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-completioncontext.html#MethodOverride","title":"CompletionContext.MethodOverride","content":"CompletionContext.MethodOverride \nMethodOverride \n Completing a method override (e.g. override this.ToStr|)","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-completionitemkind.html","title":"CompletionItemKind","content":"CompletionItemKind \n \nCompletionItemKind.IsSuggestedName \nIsSuggestedName \nCompletionItemKind.IsArgument \nIsArgument \nCompletionItemKind.IsField \nIsField \nCompletionItemKind.IsProperty \nIsProperty \nCompletionItemKind.IsOther \nIsOther \nCompletionItemKind.IsCustomOperation \nIsCustomOperation \nCompletionItemKind.IsEvent \nIsEvent \nCompletionItemKind.IsMethod \nIsMethod \nCompletionItemKind.SuggestedName \nSuggestedName \nCompletionItemKind.Field \nField \nCompletionItemKind.Property \nProperty \nCompletionItemKind.Method \nMethod \nCompletionItemKind.Event \nEvent \nCompletionItemKind.Argument \nArgument \nCompletionItemKind.CustomOperation \nCustomOperation \nCompletionItemKind.Other \nOther","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-completionitemkind.html#IsSuggestedName","title":"CompletionItemKind.IsSuggestedName","content":"CompletionItemKind.IsSuggestedName \nIsSuggestedName \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-completionitemkind.html#IsArgument","title":"CompletionItemKind.IsArgument","content":"CompletionItemKind.IsArgument \nIsArgument \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-completionitemkind.html#IsField","title":"CompletionItemKind.IsField","content":"CompletionItemKind.IsField \nIsField \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-completionitemkind.html#IsProperty","title":"CompletionItemKind.IsProperty","content":"CompletionItemKind.IsProperty \nIsProperty \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-completionitemkind.html#IsOther","title":"CompletionItemKind.IsOther","content":"CompletionItemKind.IsOther \nIsOther \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-completionitemkind.html#IsCustomOperation","title":"CompletionItemKind.IsCustomOperation","content":"CompletionItemKind.IsCustomOperation \nIsCustomOperation \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-completionitemkind.html#IsEvent","title":"CompletionItemKind.IsEvent","content":"CompletionItemKind.IsEvent \nIsEvent \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-completionitemkind.html#IsMethod","title":"CompletionItemKind.IsMethod","content":"CompletionItemKind.IsMethod \nIsMethod \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-completionitemkind.html#SuggestedName","title":"CompletionItemKind.SuggestedName","content":"CompletionItemKind.SuggestedName \nSuggestedName \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-completionitemkind.html#Field","title":"CompletionItemKind.Field","content":"CompletionItemKind.Field \nField \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-completionitemkind.html#Property","title":"CompletionItemKind.Property","content":"CompletionItemKind.Property \nProperty \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-completionitemkind.html#Method","title":"CompletionItemKind.Method","content":"CompletionItemKind.Method \nMethod \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-completionitemkind.html#Event","title":"CompletionItemKind.Event","content":"CompletionItemKind.Event \nEvent \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-completionitemkind.html#Argument","title":"CompletionItemKind.Argument","content":"CompletionItemKind.Argument \nArgument \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-completionitemkind.html#CustomOperation","title":"CompletionItemKind.CustomOperation","content":"CompletionItemKind.CustomOperation \nCustomOperation \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-completionitemkind.html#Other","title":"CompletionItemKind.Other","content":"CompletionItemKind.Other \nOther \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-declarationlistinfo.html","title":"DeclarationListInfo","content":"DeclarationListInfo \n Represents a set of declarations in F# source code, with information attached ready for display by an editor.\n Returned by GetDeclarations. \nDeclarationListInfo.Items \nItems \nDeclarationListInfo.IsForType \nIsForType \nDeclarationListInfo.IsError \nIsError \nDeclarationListInfo.Empty \nEmpty","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-declarationlistinfo.html#Items","title":"DeclarationListInfo.Items","content":"DeclarationListInfo.Items \nItems \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-declarationlistinfo.html#IsForType","title":"DeclarationListInfo.IsForType","content":"DeclarationListInfo.IsForType \nIsForType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-declarationlistinfo.html#IsError","title":"DeclarationListInfo.IsError","content":"DeclarationListInfo.IsError \nIsError \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-declarationlistinfo.html#Empty","title":"DeclarationListInfo.Empty","content":"DeclarationListInfo.Empty \nEmpty \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-declarationlistitem.html","title":"DeclarationListItem","content":"DeclarationListItem \n Represents a declaration in F# source code, with information attached ready for display by an editor.\n Returned by GetDeclarations. \nDeclarationListItem.IsOwnMember \nIsOwnMember \nDeclarationListItem.NameInList \nNameInList \nDeclarationListItem.FullName \nFullName \nDeclarationListItem.Accessibility \nAccessibility \nDeclarationListItem.Name \nName \nDeclarationListItem.NameInCode \nNameInCode \nDeclarationListItem.MinorPriority \nMinorPriority \nDeclarationListItem.Kind \nKind \nDeclarationListItem.IsResolved \nIsResolved \nDeclarationListItem.NamespaceToOpen \nNamespaceToOpen \nDeclarationListItem.Description \nDescription \nDeclarationListItem.Glyph \nGlyph","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-declarationlistitem.html#IsOwnMember","title":"DeclarationListItem.IsOwnMember","content":"DeclarationListItem.IsOwnMember \nIsOwnMember \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-declarationlistitem.html#NameInList","title":"DeclarationListItem.NameInList","content":"DeclarationListItem.NameInList \nNameInList \n Get the text to display in the declaration list for the declaration.\n\n This is a display name without backticks.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-declarationlistitem.html#FullName","title":"DeclarationListItem.FullName","content":"DeclarationListItem.FullName \nFullName \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-declarationlistitem.html#Accessibility","title":"DeclarationListItem.Accessibility","content":"DeclarationListItem.Accessibility \nAccessibility \n Get the accessibility of the item","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-declarationlistitem.html#Name","title":"DeclarationListItem.Name","content":"DeclarationListItem.Name \nName \n Get the text to display in the declaration list for the declaration.\n\n This is a display name without backticks.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-declarationlistitem.html#NameInCode","title":"DeclarationListItem.NameInCode","content":"DeclarationListItem.NameInCode \nNameInCode \n Get the text for the declaration as it\u0027s to be inserted into source code.\n\n This is a display name with backticks if necessary.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-declarationlistitem.html#MinorPriority","title":"DeclarationListItem.MinorPriority","content":"DeclarationListItem.MinorPriority \nMinorPriority \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-declarationlistitem.html#Kind","title":"DeclarationListItem.Kind","content":"DeclarationListItem.Kind \nKind \n Get the completion kind of the item","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-declarationlistitem.html#IsResolved","title":"DeclarationListItem.IsResolved","content":"DeclarationListItem.IsResolved \nIsResolved \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-declarationlistitem.html#NamespaceToOpen","title":"DeclarationListItem.NamespaceToOpen","content":"DeclarationListItem.NamespaceToOpen \nNamespaceToOpen \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-declarationlistitem.html#Description","title":"DeclarationListItem.Description","content":"DeclarationListItem.Description \nDescription \n Get the description","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-declarationlistitem.html#Glyph","title":"DeclarationListItem.Glyph","content":"DeclarationListItem.Glyph \nGlyph \n Get the glyph to use","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-entitycache.html","title":"EntityCache","content":"EntityCache \n Thread safe wrapper over \u0060IAssemblyContentCache\u0060. \nEntityCache.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nEntityCache.Clear \nClear \nEntityCache.Locking \nLocking","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-entitycache.html#\u0060\u0060.ctor\u0060\u0060","title":"EntityCache.\u0060\u0060.ctor\u0060\u0060","content":"EntityCache.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-entitycache.html#Clear","title":"EntityCache.Clear","content":"EntityCache.Clear \nClear \n Clears the cache.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-entitycache.html#Locking","title":"EntityCache.Locking","content":"EntityCache.Locking \nLocking \n Performs an operation on the cache in thread safe manner.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-entitykind.html","title":"EntityKind","content":"EntityKind \n \nEntityKind.IsType \nIsType \nEntityKind.IsFunctionOrValue \nIsFunctionOrValue \nEntityKind.IsModule \nIsModule \nEntityKind.IsAttribute \nIsAttribute \nEntityKind.Attribute \nAttribute \nEntityKind.Type \nType \nEntityKind.FunctionOrValue \nFunctionOrValue \nEntityKind.Module \nModule","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-entitykind.html#IsType","title":"EntityKind.IsType","content":"EntityKind.IsType \nIsType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-entitykind.html#IsFunctionOrValue","title":"EntityKind.IsFunctionOrValue","content":"EntityKind.IsFunctionOrValue \nIsFunctionOrValue \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-entitykind.html#IsModule","title":"EntityKind.IsModule","content":"EntityKind.IsModule \nIsModule \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-entitykind.html#IsAttribute","title":"EntityKind.IsAttribute","content":"EntityKind.IsAttribute \nIsAttribute \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-entitykind.html#Attribute","title":"EntityKind.Attribute","content":"EntityKind.Attribute \nAttribute \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-entitykind.html#Type","title":"EntityKind.Type","content":"EntityKind.Type \nType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-entitykind.html#FunctionOrValue","title":"EntityKind.FunctionOrValue","content":"EntityKind.FunctionOrValue \nFunctionOrValue \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-entitykind.html#Module","title":"EntityKind.Module","content":"EntityKind.Module \nModule \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-fsharpglyph.html","title":"FSharpGlyph","content":"FSharpGlyph \n \nFSharpGlyph.IsType \nIsType \nFSharpGlyph.IsClass \nIsClass \nFSharpGlyph.IsException \nIsException \nFSharpGlyph.IsTypedef \nIsTypedef \nFSharpGlyph.IsConstant \nIsConstant \nFSharpGlyph.IsTypeParameter \nIsTypeParameter \nFSharpGlyph.IsEnum \nIsEnum \nFSharpGlyph.IsExtensionMethod \nIsExtensionMethod \nFSharpGlyph.IsField \nIsField \nFSharpGlyph.IsProperty \nIsProperty \nFSharpGlyph.IsInterface \nIsInterface \nFSharpGlyph.IsOverridenMethod \nIsOverridenMethod \nFSharpGlyph.IsEnumMember \nIsEnumMember \nFSharpGlyph.IsDelegate \nIsDelegate \nFSharpGlyph.IsModule \nIsModule \nFSharpGlyph.IsStruct \nIsStruct \nFSharpGlyph.IsVariable \nIsVariable \nFSharpGlyph.IsEvent \nIsEvent \nFSharpGlyph.IsMethod \nIsMethod \nFSharpGlyph.IsNameSpace \nIsNameSpace \nFSharpGlyph.IsUnion \nIsUnion \nFSharpGlyph.IsError \nIsError \nFSharpGlyph.Class \nClass \nFSharpGlyph.Constant \nConstant \nFSharpGlyph.Delegate \nDelegate \nFSharpGlyph.Enum \nEnum \nFSharpGlyph.EnumMember \nEnumMember \nFSharpGlyph.Event \nEvent \nFSharpGlyph.Exception \nException \nFSharpGlyph.Field \nField \nFSharpGlyph.Interface \nInterface \nFSharpGlyph.Method \nMethod \nFSharpGlyph.OverridenMethod \nOverridenMethod \nFSharpGlyph.Module \nModule \nFSharpGlyph.NameSpace \nNameSpace \nFSharpGlyph.Property \nProperty \nFSharpGlyph.Struct \nStruct \nFSharpGlyph.Typedef \nTypedef \nFSharpGlyph.Type \nType \nFSharpGlyph.Union \nUnion \nFSharpGlyph.Variable \nVariable \nFSharpGlyph.ExtensionMethod \nExtensionMethod \nFSharpGlyph.Error \nError \nFSharpGlyph.TypeParameter \nTypeParameter","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-fsharpglyph.html#IsType","title":"FSharpGlyph.IsType","content":"FSharpGlyph.IsType \nIsType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-fsharpglyph.html#IsClass","title":"FSharpGlyph.IsClass","content":"FSharpGlyph.IsClass \nIsClass \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-fsharpglyph.html#IsException","title":"FSharpGlyph.IsException","content":"FSharpGlyph.IsException \nIsException \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-fsharpglyph.html#IsTypedef","title":"FSharpGlyph.IsTypedef","content":"FSharpGlyph.IsTypedef \nIsTypedef \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-fsharpglyph.html#IsConstant","title":"FSharpGlyph.IsConstant","content":"FSharpGlyph.IsConstant \nIsConstant \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-fsharpglyph.html#IsTypeParameter","title":"FSharpGlyph.IsTypeParameter","content":"FSharpGlyph.IsTypeParameter \nIsTypeParameter \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-fsharpglyph.html#IsEnum","title":"FSharpGlyph.IsEnum","content":"FSharpGlyph.IsEnum \nIsEnum \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-fsharpglyph.html#IsExtensionMethod","title":"FSharpGlyph.IsExtensionMethod","content":"FSharpGlyph.IsExtensionMethod \nIsExtensionMethod \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-fsharpglyph.html#IsField","title":"FSharpGlyph.IsField","content":"FSharpGlyph.IsField \nIsField \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-fsharpglyph.html#IsProperty","title":"FSharpGlyph.IsProperty","content":"FSharpGlyph.IsProperty \nIsProperty \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-fsharpglyph.html#IsInterface","title":"FSharpGlyph.IsInterface","content":"FSharpGlyph.IsInterface \nIsInterface \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-fsharpglyph.html#IsOverridenMethod","title":"FSharpGlyph.IsOverridenMethod","content":"FSharpGlyph.IsOverridenMethod \nIsOverridenMethod \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-fsharpglyph.html#IsEnumMember","title":"FSharpGlyph.IsEnumMember","content":"FSharpGlyph.IsEnumMember \nIsEnumMember \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-fsharpglyph.html#IsDelegate","title":"FSharpGlyph.IsDelegate","content":"FSharpGlyph.IsDelegate \nIsDelegate \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-fsharpglyph.html#IsModule","title":"FSharpGlyph.IsModule","content":"FSharpGlyph.IsModule \nIsModule \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-fsharpglyph.html#IsStruct","title":"FSharpGlyph.IsStruct","content":"FSharpGlyph.IsStruct \nIsStruct \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-fsharpglyph.html#IsVariable","title":"FSharpGlyph.IsVariable","content":"FSharpGlyph.IsVariable \nIsVariable \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-fsharpglyph.html#IsEvent","title":"FSharpGlyph.IsEvent","content":"FSharpGlyph.IsEvent \nIsEvent \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-fsharpglyph.html#IsMethod","title":"FSharpGlyph.IsMethod","content":"FSharpGlyph.IsMethod \nIsMethod \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-fsharpglyph.html#IsNameSpace","title":"FSharpGlyph.IsNameSpace","content":"FSharpGlyph.IsNameSpace \nIsNameSpace \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-fsharpglyph.html#IsUnion","title":"FSharpGlyph.IsUnion","content":"FSharpGlyph.IsUnion \nIsUnion \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-fsharpglyph.html#IsError","title":"FSharpGlyph.IsError","content":"FSharpGlyph.IsError \nIsError \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-fsharpglyph.html#Class","title":"FSharpGlyph.Class","content":"FSharpGlyph.Class \nClass \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-fsharpglyph.html#Constant","title":"FSharpGlyph.Constant","content":"FSharpGlyph.Constant \nConstant \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-fsharpglyph.html#Delegate","title":"FSharpGlyph.Delegate","content":"FSharpGlyph.Delegate \nDelegate \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-fsharpglyph.html#Enum","title":"FSharpGlyph.Enum","content":"FSharpGlyph.Enum \nEnum \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-fsharpglyph.html#EnumMember","title":"FSharpGlyph.EnumMember","content":"FSharpGlyph.EnumMember \nEnumMember \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-fsharpglyph.html#Event","title":"FSharpGlyph.Event","content":"FSharpGlyph.Event \nEvent \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-fsharpglyph.html#Exception","title":"FSharpGlyph.Exception","content":"FSharpGlyph.Exception \nException \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-fsharpglyph.html#Field","title":"FSharpGlyph.Field","content":"FSharpGlyph.Field \nField \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-fsharpglyph.html#Interface","title":"FSharpGlyph.Interface","content":"FSharpGlyph.Interface \nInterface \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-fsharpglyph.html#Method","title":"FSharpGlyph.Method","content":"FSharpGlyph.Method \nMethod \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-fsharpglyph.html#OverridenMethod","title":"FSharpGlyph.OverridenMethod","content":"FSharpGlyph.OverridenMethod \nOverridenMethod \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-fsharpglyph.html#Module","title":"FSharpGlyph.Module","content":"FSharpGlyph.Module \nModule \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-fsharpglyph.html#NameSpace","title":"FSharpGlyph.NameSpace","content":"FSharpGlyph.NameSpace \nNameSpace \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-fsharpglyph.html#Property","title":"FSharpGlyph.Property","content":"FSharpGlyph.Property \nProperty \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-fsharpglyph.html#Struct","title":"FSharpGlyph.Struct","content":"FSharpGlyph.Struct \nStruct \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-fsharpglyph.html#Typedef","title":"FSharpGlyph.Typedef","content":"FSharpGlyph.Typedef \nTypedef \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-fsharpglyph.html#Type","title":"FSharpGlyph.Type","content":"FSharpGlyph.Type \nType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-fsharpglyph.html#Union","title":"FSharpGlyph.Union","content":"FSharpGlyph.Union \nUnion \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-fsharpglyph.html#Variable","title":"FSharpGlyph.Variable","content":"FSharpGlyph.Variable \nVariable \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-fsharpglyph.html#ExtensionMethod","title":"FSharpGlyph.ExtensionMethod","content":"FSharpGlyph.ExtensionMethod \nExtensionMethod \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-fsharpglyph.html#Error","title":"FSharpGlyph.Error","content":"FSharpGlyph.Error \nError \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-fsharpglyph.html#TypeParameter","title":"FSharpGlyph.TypeParameter","content":"FSharpGlyph.TypeParameter \nTypeParameter \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-finddeclexternalparam.html","title":"FindDeclExternalParam","content":"FindDeclExternalParam \n Represents the type of a single method parameter \nFindDeclExternalParam.IsByRef \nIsByRef \nFindDeclExternalParam.ParameterType \nParameterType \nFindDeclExternalParam.Create \nCreate","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-finddeclexternalparam.html#IsByRef","title":"FindDeclExternalParam.IsByRef","content":"FindDeclExternalParam.IsByRef \nIsByRef \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-finddeclexternalparam.html#ParameterType","title":"FindDeclExternalParam.ParameterType","content":"FindDeclExternalParam.ParameterType \nParameterType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-finddeclexternalparam.html#Create","title":"FindDeclExternalParam.Create","content":"FindDeclExternalParam.Create \nCreate \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-finddeclexternalsymbol.html","title":"FindDeclExternalSymbol","content":"FindDeclExternalSymbol \n Represents a symbol in an external (non F#) assembly \nFindDeclExternalSymbol.IsType \nIsType \nFindDeclExternalSymbol.IsField \nIsField \nFindDeclExternalSymbol.IsProperty \nIsProperty \nFindDeclExternalSymbol.IsConstructor \nIsConstructor \nFindDeclExternalSymbol.IsEvent \nIsEvent \nFindDeclExternalSymbol.IsMethod \nIsMethod \nFindDeclExternalSymbol.Type \nType \nFindDeclExternalSymbol.Constructor \nConstructor \nFindDeclExternalSymbol.Method \nMethod \nFindDeclExternalSymbol.Field \nField \nFindDeclExternalSymbol.Event \nEvent \nFindDeclExternalSymbol.Property \nProperty","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-finddeclexternalsymbol.html#IsType","title":"FindDeclExternalSymbol.IsType","content":"FindDeclExternalSymbol.IsType \nIsType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-finddeclexternalsymbol.html#IsField","title":"FindDeclExternalSymbol.IsField","content":"FindDeclExternalSymbol.IsField \nIsField \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-finddeclexternalsymbol.html#IsProperty","title":"FindDeclExternalSymbol.IsProperty","content":"FindDeclExternalSymbol.IsProperty \nIsProperty \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-finddeclexternalsymbol.html#IsConstructor","title":"FindDeclExternalSymbol.IsConstructor","content":"FindDeclExternalSymbol.IsConstructor \nIsConstructor \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-finddeclexternalsymbol.html#IsEvent","title":"FindDeclExternalSymbol.IsEvent","content":"FindDeclExternalSymbol.IsEvent \nIsEvent \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-finddeclexternalsymbol.html#IsMethod","title":"FindDeclExternalSymbol.IsMethod","content":"FindDeclExternalSymbol.IsMethod \nIsMethod \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-finddeclexternalsymbol.html#Type","title":"FindDeclExternalSymbol.Type","content":"FindDeclExternalSymbol.Type \nType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-finddeclexternalsymbol.html#Constructor","title":"FindDeclExternalSymbol.Constructor","content":"FindDeclExternalSymbol.Constructor \nConstructor \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-finddeclexternalsymbol.html#Method","title":"FindDeclExternalSymbol.Method","content":"FindDeclExternalSymbol.Method \nMethod \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-finddeclexternalsymbol.html#Field","title":"FindDeclExternalSymbol.Field","content":"FindDeclExternalSymbol.Field \nField \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-finddeclexternalsymbol.html#Event","title":"FindDeclExternalSymbol.Event","content":"FindDeclExternalSymbol.Event \nEvent \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-finddeclexternalsymbol.html#Property","title":"FindDeclExternalSymbol.Property","content":"FindDeclExternalSymbol.Property \nProperty \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-finddeclexternaltype.html","title":"FindDeclExternalType","content":"FindDeclExternalType \n Represents a type in an external (non F#) assembly. \nFindDeclExternalType.IsType \nIsType \nFindDeclExternalType.IsPointer \nIsPointer \nFindDeclExternalType.IsTypeVar \nIsTypeVar \nFindDeclExternalType.IsArray \nIsArray \nFindDeclExternalType.Type \nType \nFindDeclExternalType.Array \nArray \nFindDeclExternalType.Pointer \nPointer \nFindDeclExternalType.TypeVar \nTypeVar","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-finddeclexternaltype.html#IsType","title":"FindDeclExternalType.IsType","content":"FindDeclExternalType.IsType \nIsType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-finddeclexternaltype.html#IsPointer","title":"FindDeclExternalType.IsPointer","content":"FindDeclExternalType.IsPointer \nIsPointer \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-finddeclexternaltype.html#IsTypeVar","title":"FindDeclExternalType.IsTypeVar","content":"FindDeclExternalType.IsTypeVar \nIsTypeVar \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-finddeclexternaltype.html#IsArray","title":"FindDeclExternalType.IsArray","content":"FindDeclExternalType.IsArray \nIsArray \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-finddeclexternaltype.html#Type","title":"FindDeclExternalType.Type","content":"FindDeclExternalType.Type \nType \n Type defined in non-F# assembly.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-finddeclexternaltype.html#Array","title":"FindDeclExternalType.Array","content":"FindDeclExternalType.Array \nArray \n Array of type that is defined in non-F# assembly.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-finddeclexternaltype.html#Pointer","title":"FindDeclExternalType.Pointer","content":"FindDeclExternalType.Pointer \nPointer \n Pointer defined in non-F# assembly.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-finddeclexternaltype.html#TypeVar","title":"FindDeclExternalType.TypeVar","content":"FindDeclExternalType.TypeVar \nTypeVar \n Type variable defined in non-F# assembly.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-finddeclfailurereason.html","title":"FindDeclFailureReason","content":"FindDeclFailureReason \n Represents the reason why the GetDeclarationLocation operation failed. \nFindDeclFailureReason.IsProvidedMember \nIsProvidedMember \nFindDeclFailureReason.IsProvidedType \nIsProvidedType \nFindDeclFailureReason.IsNoSourceCode \nIsNoSourceCode \nFindDeclFailureReason.IsUnknown \nIsUnknown \nFindDeclFailureReason.Unknown \nUnknown \nFindDeclFailureReason.NoSourceCode \nNoSourceCode \nFindDeclFailureReason.ProvidedType \nProvidedType \nFindDeclFailureReason.ProvidedMember \nProvidedMember","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-finddeclfailurereason.html#IsProvidedMember","title":"FindDeclFailureReason.IsProvidedMember","content":"FindDeclFailureReason.IsProvidedMember \nIsProvidedMember \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-finddeclfailurereason.html#IsProvidedType","title":"FindDeclFailureReason.IsProvidedType","content":"FindDeclFailureReason.IsProvidedType \nIsProvidedType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-finddeclfailurereason.html#IsNoSourceCode","title":"FindDeclFailureReason.IsNoSourceCode","content":"FindDeclFailureReason.IsNoSourceCode \nIsNoSourceCode \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-finddeclfailurereason.html#IsUnknown","title":"FindDeclFailureReason.IsUnknown","content":"FindDeclFailureReason.IsUnknown \nIsUnknown \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-finddeclfailurereason.html#Unknown","title":"FindDeclFailureReason.Unknown","content":"FindDeclFailureReason.Unknown \nUnknown \n Generic reason: no particular information about error apart from a message","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-finddeclfailurereason.html#NoSourceCode","title":"FindDeclFailureReason.NoSourceCode","content":"FindDeclFailureReason.NoSourceCode \nNoSourceCode \n Source code file is not available","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-finddeclfailurereason.html#ProvidedType","title":"FindDeclFailureReason.ProvidedType","content":"FindDeclFailureReason.ProvidedType \nProvidedType \n Trying to find declaration of ProvidedType without TypeProviderDefinitionLocationAttribute","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-finddeclfailurereason.html#ProvidedMember","title":"FindDeclFailureReason.ProvidedMember","content":"FindDeclFailureReason.ProvidedMember \nProvidedMember \n Trying to find declaration of ProvidedMember without TypeProviderDefinitionLocationAttribute","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-finddeclresult.html","title":"FindDeclResult","content":"FindDeclResult \n Represents the result of the GetDeclarationLocation operation. \nFindDeclResult.IsExternalDecl \nIsExternalDecl \nFindDeclResult.IsDeclFound \nIsDeclFound \nFindDeclResult.IsDeclNotFound \nIsDeclNotFound \nFindDeclResult.DeclNotFound \nDeclNotFound \nFindDeclResult.DeclFound \nDeclFound \nFindDeclResult.ExternalDecl \nExternalDecl","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-finddeclresult.html#IsExternalDecl","title":"FindDeclResult.IsExternalDecl","content":"FindDeclResult.IsExternalDecl \nIsExternalDecl \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-finddeclresult.html#IsDeclFound","title":"FindDeclResult.IsDeclFound","content":"FindDeclResult.IsDeclFound \nIsDeclFound \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-finddeclresult.html#IsDeclNotFound","title":"FindDeclResult.IsDeclNotFound","content":"FindDeclResult.IsDeclNotFound \nIsDeclNotFound \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-finddeclresult.html#DeclNotFound","title":"FindDeclResult.DeclNotFound","content":"FindDeclResult.DeclNotFound \nDeclNotFound \n Indicates a declaration location was not found, with an additional reason","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-finddeclresult.html#DeclFound","title":"FindDeclResult.DeclFound","content":"FindDeclResult.DeclFound \nDeclFound \n Indicates a declaration location was found","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-finddeclresult.html#ExternalDecl","title":"FindDeclResult.ExternalDecl","content":"FindDeclResult.ExternalDecl \nExternalDecl \n Indicates an external declaration was found","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-iassemblycontentcache.html","title":"IAssemblyContentCache","content":"IAssemblyContentCache \n Assembly content cache. \nIAssemblyContentCache.Set \nSet \nIAssemblyContentCache.TryGet \nTryGet","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-iassemblycontentcache.html#Set","title":"IAssemblyContentCache.Set","content":"IAssemblyContentCache.Set \nSet \n Store an assembly content.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-iassemblycontentcache.html#TryGet","title":"IAssemblyContentCache.TryGet","content":"IAssemblyContentCache.TryGet \nTryGet \n Try get an assembly cached content.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-inheritancecontext.html","title":"InheritanceContext","content":"InheritanceContext \n \nInheritanceContext.IsClass \nIsClass \nInheritanceContext.IsInterface \nIsInterface \nInheritanceContext.IsUnknown \nIsUnknown \nInheritanceContext.Class \nClass \nInheritanceContext.Interface \nInterface \nInheritanceContext.Unknown \nUnknown","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-inheritancecontext.html#IsClass","title":"InheritanceContext.IsClass","content":"InheritanceContext.IsClass \nIsClass \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-inheritancecontext.html#IsInterface","title":"InheritanceContext.IsInterface","content":"InheritanceContext.IsInterface \nIsInterface \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-inheritancecontext.html#IsUnknown","title":"InheritanceContext.IsUnknown","content":"InheritanceContext.IsUnknown \nIsUnknown \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-inheritancecontext.html#Class","title":"InheritanceContext.Class","content":"InheritanceContext.Class \nClass \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-inheritancecontext.html#Interface","title":"InheritanceContext.Interface","content":"InheritanceContext.Interface \nInterface \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-inheritancecontext.html#Unknown","title":"InheritanceContext.Unknown","content":"InheritanceContext.Unknown \nUnknown \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-insertioncontext.html","title":"InsertionContext","content":"InsertionContext \n Insert open namespace context. \nInsertionContext.ScopeKind \nScopeKind \nInsertionContext.Pos \nPos","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-insertioncontext.html#ScopeKind","title":"InsertionContext.ScopeKind","content":"InsertionContext.ScopeKind \nScopeKind \n Current scope kind.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-insertioncontext.html#Pos","title":"InsertionContext.Pos","content":"InsertionContext.Pos \nPos \n Current position (F# compiler line number).","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-insertioncontextentity.html","title":"InsertionContextEntity","content":"InsertionContextEntity \n Helper data structure representing a symbol, suitable for implementing unresolved identifiers resolution code fixes. \nInsertionContextEntity.FullRelativeName \nFullRelativeName \nInsertionContextEntity.Qualifier \nQualifier \nInsertionContextEntity.Namespace \nNamespace \nInsertionContextEntity.FullDisplayName \nFullDisplayName \nInsertionContextEntity.LastIdent \nLastIdent","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-insertioncontextentity.html#FullRelativeName","title":"InsertionContextEntity.FullRelativeName","content":"InsertionContextEntity.FullRelativeName \nFullRelativeName \n Full name, relative to the current scope.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-insertioncontextentity.html#Qualifier","title":"InsertionContextEntity.Qualifier","content":"InsertionContextEntity.Qualifier \nQualifier \n Ident parts needed to append to the current ident to make it resolvable in current scope.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-insertioncontextentity.html#Namespace","title":"InsertionContextEntity.Namespace","content":"InsertionContextEntity.Namespace \nNamespace \n Namespace that is needed to open to make the entity resolvable in the current scope.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-insertioncontextentity.html#FullDisplayName","title":"InsertionContextEntity.FullDisplayName","content":"InsertionContextEntity.FullDisplayName \nFullDisplayName \n Full display name (i.e. last ident plus modules with \u0060RequireQualifiedAccess\u0060 attribute prefixed).","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-insertioncontextentity.html#LastIdent","title":"InsertionContextEntity.LastIdent","content":"InsertionContextEntity.LastIdent \nLastIdent \n Last part of the entity\u0027s full name.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-interfacedata.html","title":"InterfaceData","content":"InterfaceData \n Capture information about an interface in ASTs \nInterfaceData.TypeParameters \nTypeParameters \nInterfaceData.Range \nRange \nInterfaceData.IsInterface \nIsInterface \nInterfaceData.IsObjExpr \nIsObjExpr \nInterfaceData.Interface \nInterface \nInterfaceData.ObjExpr \nObjExpr","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-interfacedata.html#TypeParameters","title":"InterfaceData.TypeParameters","content":"InterfaceData.TypeParameters \nTypeParameters \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-interfacedata.html#Range","title":"InterfaceData.Range","content":"InterfaceData.Range \nRange \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-interfacedata.html#IsInterface","title":"InterfaceData.IsInterface","content":"InterfaceData.IsInterface \nIsInterface \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-interfacedata.html#IsObjExpr","title":"InterfaceData.IsObjExpr","content":"InterfaceData.IsObjExpr \nIsObjExpr \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-interfacedata.html#Interface","title":"InterfaceData.Interface","content":"InterfaceData.Interface \nInterface \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-interfacedata.html#ObjExpr","title":"InterfaceData.ObjExpr","content":"InterfaceData.ObjExpr \nObjExpr \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-lookuptype.html","title":"LookupType","content":"LookupType \n Entity lookup type. \nLookupType.IsFuzzy \nIsFuzzy \nLookupType.IsPrecise \nIsPrecise \nLookupType.Fuzzy \nFuzzy \nLookupType.Precise \nPrecise","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-lookuptype.html#IsFuzzy","title":"LookupType.IsFuzzy","content":"LookupType.IsFuzzy \nIsFuzzy \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-lookuptype.html#IsPrecise","title":"LookupType.IsPrecise","content":"LookupType.IsPrecise \nIsPrecise \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-lookuptype.html#Fuzzy","title":"LookupType.Fuzzy","content":"LookupType.Fuzzy \nFuzzy \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-lookuptype.html#Precise","title":"LookupType.Precise","content":"LookupType.Precise \nPrecise \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-maybeunresolvedident.html","title":"MaybeUnresolvedIdent","content":"MaybeUnresolvedIdent \n \u0060ShortIdent\u0060 with a flag indicating if it\u0027s resolved in some scope. \nMaybeUnresolvedIdent.Ident \nIdent \nMaybeUnresolvedIdent.Resolved \nResolved","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-maybeunresolvedident.html#Ident","title":"MaybeUnresolvedIdent.Ident","content":"MaybeUnresolvedIdent.Ident \nIdent \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-maybeunresolvedident.html#Resolved","title":"MaybeUnresolvedIdent.Resolved","content":"MaybeUnresolvedIdent.Resolved \nResolved \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-methodgroup.html","title":"MethodGroup","content":"MethodGroup \n Represents a group of methods (or other items) returned by GetMethods.   \nMethodGroup.Methods \nMethods \nMethodGroup.MethodName \nMethodName","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-methodgroup.html#Methods","title":"MethodGroup.Methods","content":"MethodGroup.Methods \nMethods \n The methods (or other items) in the group","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-methodgroup.html#MethodName","title":"MethodGroup.MethodName","content":"MethodGroup.MethodName \nMethodName \n The shared name of the methods (or other items) in the group","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-methodgroupitem.html","title":"MethodGroupItem","content":"MethodGroupItem \n Represents one method (or other item) in a method group. The item may represent either a method or \n a single, non-overloaded item such as union case or a named function value. \nMethodGroupItem.HasParamArrayArg \nHasParamArrayArg \nMethodGroupItem.ReturnTypeText \nReturnTypeText \nMethodGroupItem.Parameters \nParameters \nMethodGroupItem.StaticParameters \nStaticParameters \nMethodGroupItem.XmlDoc \nXmlDoc \nMethodGroupItem.HasParameters \nHasParameters \nMethodGroupItem.Description \nDescription","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-methodgroupitem.html#HasParamArrayArg","title":"MethodGroupItem.HasParamArrayArg","content":"MethodGroupItem.HasParamArrayArg \nHasParamArrayArg \n Does the method support a params list arg?","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-methodgroupitem.html#ReturnTypeText","title":"MethodGroupItem.ReturnTypeText","content":"MethodGroupItem.ReturnTypeText \nReturnTypeText \n The tagged text for the return type for the method (or other item)","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-methodgroupitem.html#Parameters","title":"MethodGroupItem.Parameters","content":"MethodGroupItem.Parameters \nParameters \n The parameters of the method in the overload set","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-methodgroupitem.html#StaticParameters","title":"MethodGroupItem.StaticParameters","content":"MethodGroupItem.StaticParameters \nStaticParameters \n Does the type name or method support a static arguments list, like TP\u003C42,\u0022foo\u0022\u003E or conn.CreateCommand\u003C42, \u0022foo\u0022\u003E(arg1, arg2)?","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-methodgroupitem.html#XmlDoc","title":"MethodGroupItem.XmlDoc","content":"MethodGroupItem.XmlDoc \nXmlDoc \n The documentation for the item","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-methodgroupitem.html#HasParameters","title":"MethodGroupItem.HasParameters","content":"MethodGroupItem.HasParameters \nHasParameters \n Does the method support an arguments list?  This is always true except for static type instantiations like TP\u003C42,\u0022foo\u0022\u003E.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-methodgroupitem.html#Description","title":"MethodGroupItem.Description","content":"MethodGroupItem.Description \nDescription \n The description representation for the method (or other item)","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-methodgroupitemparameter.html","title":"MethodGroupItemParameter","content":"MethodGroupItemParameter \n Represents one parameter for one method (or other item) in a group.  \nMethodGroupItemParameter.ParameterName \nParameterName \nMethodGroupItemParameter.IsOptional \nIsOptional \nMethodGroupItemParameter.CanonicalTypeTextForSorting \nCanonicalTypeTextForSorting \nMethodGroupItemParameter.Display \nDisplay","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-methodgroupitemparameter.html#ParameterName","title":"MethodGroupItemParameter.ParameterName","content":"MethodGroupItemParameter.ParameterName \nParameterName \n The name of the parameter.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-methodgroupitemparameter.html#IsOptional","title":"MethodGroupItemParameter.IsOptional","content":"MethodGroupItemParameter.IsOptional \nIsOptional \n Is the parameter optional","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-methodgroupitemparameter.html#CanonicalTypeTextForSorting","title":"MethodGroupItemParameter.CanonicalTypeTextForSorting","content":"MethodGroupItemParameter.CanonicalTypeTextForSorting \nCanonicalTypeTextForSorting \n A key that can be used for sorting the parameters, used to help sort overloads.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-methodgroupitemparameter.html#Display","title":"MethodGroupItemParameter.Display","content":"MethodGroupItemParameter.Display \nDisplay \n The representation for the parameter including its name, its type and visual indicators of other\n information such as whether it is optional.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-methodoverridecompletioncontext.html","title":"MethodOverrideCompletionContext","content":"MethodOverrideCompletionContext \n \nMethodOverrideCompletionContext.IsClass \nIsClass \nMethodOverrideCompletionContext.IsInterface \nIsInterface \nMethodOverrideCompletionContext.IsObjExpr \nIsObjExpr \nMethodOverrideCompletionContext.Class \nClass \nMethodOverrideCompletionContext.Interface \nInterface \nMethodOverrideCompletionContext.ObjExpr \nObjExpr","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-methodoverridecompletioncontext.html#IsClass","title":"MethodOverrideCompletionContext.IsClass","content":"MethodOverrideCompletionContext.IsClass \nIsClass \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-methodoverridecompletioncontext.html#IsInterface","title":"MethodOverrideCompletionContext.IsInterface","content":"MethodOverrideCompletionContext.IsInterface \nIsInterface \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-methodoverridecompletioncontext.html#IsObjExpr","title":"MethodOverrideCompletionContext.IsObjExpr","content":"MethodOverrideCompletionContext.IsObjExpr \nIsObjExpr \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-methodoverridecompletioncontext.html#Class","title":"MethodOverrideCompletionContext.Class","content":"MethodOverrideCompletionContext.Class \nClass \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-methodoverridecompletioncontext.html#Interface","title":"MethodOverrideCompletionContext.Interface","content":"MethodOverrideCompletionContext.Interface \nInterface \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-methodoverridecompletioncontext.html#ObjExpr","title":"MethodOverrideCompletionContext.ObjExpr","content":"MethodOverrideCompletionContext.ObjExpr \nObjExpr \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-modulekind.html","title":"ModuleKind","content":"ModuleKind \n \nModuleKind.IsAutoOpen \nIsAutoOpen \nModuleKind.HasModuleSuffix \nHasModuleSuffix","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-modulekind.html#IsAutoOpen","title":"ModuleKind.IsAutoOpen","content":"ModuleKind.IsAutoOpen \nIsAutoOpen \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-modulekind.html#HasModuleSuffix","title":"ModuleKind.HasModuleSuffix","content":"ModuleKind.HasModuleSuffix \nHasModuleSuffix \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigablecontainer.html","title":"NavigableContainer","content":"NavigableContainer \n \nNavigableContainer.FullName \nFullName \nNavigableContainer.Name \nName \nNavigableContainer.Type \nType","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigablecontainer.html#FullName","title":"NavigableContainer.FullName","content":"NavigableContainer.FullName \nFullName \n The fully qualified name of the container.\n For files it returns empty string.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigablecontainer.html#Name","title":"NavigableContainer.Name","content":"NavigableContainer.Name \nName \n The name of the container or file","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigablecontainer.html#Type","title":"NavigableContainer.Type","content":"NavigableContainer.Type \nType \n The kind of container.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigablecontainertype.html","title":"NavigableContainerType","content":"NavigableContainerType \n \nNavigableContainerType.IsType \nIsType \nNavigableContainerType.IsException \nIsException \nNavigableContainerType.IsFile \nIsFile \nNavigableContainerType.IsNamespace \nIsNamespace \nNavigableContainerType.IsModule \nIsModule \nNavigableContainerType.File \nFile \nNavigableContainerType.Namespace \nNamespace \nNavigableContainerType.Module \nModule \nNavigableContainerType.Type \nType \nNavigableContainerType.Exception \nException","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigablecontainertype.html#IsType","title":"NavigableContainerType.IsType","content":"NavigableContainerType.IsType \nIsType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigablecontainertype.html#IsException","title":"NavigableContainerType.IsException","content":"NavigableContainerType.IsException \nIsException \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigablecontainertype.html#IsFile","title":"NavigableContainerType.IsFile","content":"NavigableContainerType.IsFile \nIsFile \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigablecontainertype.html#IsNamespace","title":"NavigableContainerType.IsNamespace","content":"NavigableContainerType.IsNamespace \nIsNamespace \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigablecontainertype.html#IsModule","title":"NavigableContainerType.IsModule","content":"NavigableContainerType.IsModule \nIsModule \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigablecontainertype.html#File","title":"NavigableContainerType.File","content":"NavigableContainerType.File \nFile \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigablecontainertype.html#Namespace","title":"NavigableContainerType.Namespace","content":"NavigableContainerType.Namespace \nNamespace \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigablecontainertype.html#Module","title":"NavigableContainerType.Module","content":"NavigableContainerType.Module \nModule \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigablecontainertype.html#Type","title":"NavigableContainerType.Type","content":"NavigableContainerType.Type \nType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigablecontainertype.html#Exception","title":"NavigableContainerType.Exception","content":"NavigableContainerType.Exception \nException \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigableitem.html","title":"NavigableItem","content":"NavigableItem \n \nNavigableItem.Name \nName \nNavigableItem.NeedsBackticks \nNeedsBackticks \nNavigableItem.Range \nRange \nNavigableItem.IsSignature \nIsSignature \nNavigableItem.Kind \nKind \nNavigableItem.Container \nContainer","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigableitem.html#Name","title":"NavigableItem.Name","content":"NavigableItem.Name \nName \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigableitem.html#NeedsBackticks","title":"NavigableItem.NeedsBackticks","content":"NavigableItem.NeedsBackticks \nNeedsBackticks \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigableitem.html#Range","title":"NavigableItem.Range","content":"NavigableItem.Range \nRange \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigableitem.html#IsSignature","title":"NavigableItem.IsSignature","content":"NavigableItem.IsSignature \nIsSignature \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigableitem.html#Kind","title":"NavigableItem.Kind","content":"NavigableItem.Kind \nKind \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigableitem.html#Container","title":"NavigableItem.Container","content":"NavigableItem.Container \nContainer \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigableitemkind.html","title":"NavigableItemKind","content":"NavigableItemKind \n \nNavigableItemKind.IsType \nIsType \nNavigableItemKind.IsUnionCase \nIsUnionCase \nNavigableItemKind.IsException \nIsException \nNavigableItemKind.IsModuleAbbreviation \nIsModuleAbbreviation \nNavigableItemKind.IsField \nIsField \nNavigableItemKind.IsProperty \nIsProperty \nNavigableItemKind.IsEnumCase \nIsEnumCase \nNavigableItemKind.IsModuleValue \nIsModuleValue \nNavigableItemKind.IsModule \nIsModule \nNavigableItemKind.IsConstructor \nIsConstructor \nNavigableItemKind.IsMember \nIsMember \nNavigableItemKind.Module \nModule \nNavigableItemKind.ModuleAbbreviation \nModuleAbbreviation \nNavigableItemKind.Exception \nException \nNavigableItemKind.Type \nType \nNavigableItemKind.ModuleValue \nModuleValue \nNavigableItemKind.Field \nField \nNavigableItemKind.Property \nProperty \nNavigableItemKind.Constructor \nConstructor \nNavigableItemKind.Member \nMember \nNavigableItemKind.EnumCase \nEnumCase \nNavigableItemKind.UnionCase \nUnionCase","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigableitemkind.html#IsType","title":"NavigableItemKind.IsType","content":"NavigableItemKind.IsType \nIsType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigableitemkind.html#IsUnionCase","title":"NavigableItemKind.IsUnionCase","content":"NavigableItemKind.IsUnionCase \nIsUnionCase \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigableitemkind.html#IsException","title":"NavigableItemKind.IsException","content":"NavigableItemKind.IsException \nIsException \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigableitemkind.html#IsModuleAbbreviation","title":"NavigableItemKind.IsModuleAbbreviation","content":"NavigableItemKind.IsModuleAbbreviation \nIsModuleAbbreviation \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigableitemkind.html#IsField","title":"NavigableItemKind.IsField","content":"NavigableItemKind.IsField \nIsField \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigableitemkind.html#IsProperty","title":"NavigableItemKind.IsProperty","content":"NavigableItemKind.IsProperty \nIsProperty \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigableitemkind.html#IsEnumCase","title":"NavigableItemKind.IsEnumCase","content":"NavigableItemKind.IsEnumCase \nIsEnumCase \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigableitemkind.html#IsModuleValue","title":"NavigableItemKind.IsModuleValue","content":"NavigableItemKind.IsModuleValue \nIsModuleValue \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigableitemkind.html#IsModule","title":"NavigableItemKind.IsModule","content":"NavigableItemKind.IsModule \nIsModule \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigableitemkind.html#IsConstructor","title":"NavigableItemKind.IsConstructor","content":"NavigableItemKind.IsConstructor \nIsConstructor \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigableitemkind.html#IsMember","title":"NavigableItemKind.IsMember","content":"NavigableItemKind.IsMember \nIsMember \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigableitemkind.html#Module","title":"NavigableItemKind.Module","content":"NavigableItemKind.Module \nModule \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigableitemkind.html#ModuleAbbreviation","title":"NavigableItemKind.ModuleAbbreviation","content":"NavigableItemKind.ModuleAbbreviation \nModuleAbbreviation \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigableitemkind.html#Exception","title":"NavigableItemKind.Exception","content":"NavigableItemKind.Exception \nException \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigableitemkind.html#Type","title":"NavigableItemKind.Type","content":"NavigableItemKind.Type \nType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigableitemkind.html#ModuleValue","title":"NavigableItemKind.ModuleValue","content":"NavigableItemKind.ModuleValue \nModuleValue \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigableitemkind.html#Field","title":"NavigableItemKind.Field","content":"NavigableItemKind.Field \nField \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigableitemkind.html#Property","title":"NavigableItemKind.Property","content":"NavigableItemKind.Property \nProperty \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigableitemkind.html#Constructor","title":"NavigableItemKind.Constructor","content":"NavigableItemKind.Constructor \nConstructor \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigableitemkind.html#Member","title":"NavigableItemKind.Member","content":"NavigableItemKind.Member \nMember \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigableitemkind.html#EnumCase","title":"NavigableItemKind.EnumCase","content":"NavigableItemKind.EnumCase \nEnumCase \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigableitemkind.html#UnionCase","title":"NavigableItemKind.UnionCase","content":"NavigableItemKind.UnionCase \nUnionCase \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationentitykind.html","title":"NavigationEntityKind","content":"NavigationEntityKind \n \nNavigationEntityKind.IsClass \nIsClass \nNavigationEntityKind.IsException \nIsException \nNavigationEntityKind.IsEnum \nIsEnum \nNavigationEntityKind.IsNamespace \nIsNamespace \nNavigationEntityKind.IsInterface \nIsInterface \nNavigationEntityKind.IsRecord \nIsRecord \nNavigationEntityKind.IsModule \nIsModule \nNavigationEntityKind.IsUnion \nIsUnion \nNavigationEntityKind.Namespace \nNamespace \nNavigationEntityKind.Module \nModule \nNavigationEntityKind.Class \nClass \nNavigationEntityKind.Exception \nException \nNavigationEntityKind.Interface \nInterface \nNavigationEntityKind.Record \nRecord \nNavigationEntityKind.Enum \nEnum \nNavigationEntityKind.Union \nUnion","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationentitykind.html#IsClass","title":"NavigationEntityKind.IsClass","content":"NavigationEntityKind.IsClass \nIsClass \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationentitykind.html#IsException","title":"NavigationEntityKind.IsException","content":"NavigationEntityKind.IsException \nIsException \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationentitykind.html#IsEnum","title":"NavigationEntityKind.IsEnum","content":"NavigationEntityKind.IsEnum \nIsEnum \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationentitykind.html#IsNamespace","title":"NavigationEntityKind.IsNamespace","content":"NavigationEntityKind.IsNamespace \nIsNamespace \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationentitykind.html#IsInterface","title":"NavigationEntityKind.IsInterface","content":"NavigationEntityKind.IsInterface \nIsInterface \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationentitykind.html#IsRecord","title":"NavigationEntityKind.IsRecord","content":"NavigationEntityKind.IsRecord \nIsRecord \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationentitykind.html#IsModule","title":"NavigationEntityKind.IsModule","content":"NavigationEntityKind.IsModule \nIsModule \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationentitykind.html#IsUnion","title":"NavigationEntityKind.IsUnion","content":"NavigationEntityKind.IsUnion \nIsUnion \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationentitykind.html#Namespace","title":"NavigationEntityKind.Namespace","content":"NavigationEntityKind.Namespace \nNamespace \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationentitykind.html#Module","title":"NavigationEntityKind.Module","content":"NavigationEntityKind.Module \nModule \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationentitykind.html#Class","title":"NavigationEntityKind.Class","content":"NavigationEntityKind.Class \nClass \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationentitykind.html#Exception","title":"NavigationEntityKind.Exception","content":"NavigationEntityKind.Exception \nException \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationentitykind.html#Interface","title":"NavigationEntityKind.Interface","content":"NavigationEntityKind.Interface \nInterface \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationentitykind.html#Record","title":"NavigationEntityKind.Record","content":"NavigationEntityKind.Record \nRecord \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationentitykind.html#Enum","title":"NavigationEntityKind.Enum","content":"NavigationEntityKind.Enum \nEnum \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationentitykind.html#Union","title":"NavigationEntityKind.Union","content":"NavigationEntityKind.Union \nUnion \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationitem.html","title":"NavigationItem","content":"NavigationItem \n Represents an item to be displayed in the navigation bar \nNavigationItem.IsAbstract \nIsAbstract \nNavigationItem.LogicalName \nLogicalName \nNavigationItem.Range \nRange \nNavigationItem.IsSingleTopLevel \nIsSingleTopLevel \nNavigationItem.Access \nAccess \nNavigationItem.UniqueName \nUniqueName \nNavigationItem.Kind \nKind \nNavigationItem.BodyRange \nBodyRange \nNavigationItem.EnclosingEntityKind \nEnclosingEntityKind \nNavigationItem.Glyph \nGlyph","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationitem.html#IsAbstract","title":"NavigationItem.IsAbstract","content":"NavigationItem.IsAbstract \nIsAbstract \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationitem.html#LogicalName","title":"NavigationItem.LogicalName","content":"NavigationItem.LogicalName \nLogicalName \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationitem.html#Range","title":"NavigationItem.Range","content":"NavigationItem.Range \nRange \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationitem.html#IsSingleTopLevel","title":"NavigationItem.IsSingleTopLevel","content":"NavigationItem.IsSingleTopLevel \nIsSingleTopLevel \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationitem.html#Access","title":"NavigationItem.Access","content":"NavigationItem.Access \nAccess \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationitem.html#UniqueName","title":"NavigationItem.UniqueName","content":"NavigationItem.UniqueName \nUniqueName \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationitem.html#Kind","title":"NavigationItem.Kind","content":"NavigationItem.Kind \nKind \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationitem.html#BodyRange","title":"NavigationItem.BodyRange","content":"NavigationItem.BodyRange \nBodyRange \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationitem.html#EnclosingEntityKind","title":"NavigationItem.EnclosingEntityKind","content":"NavigationItem.EnclosingEntityKind \nEnclosingEntityKind \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationitem.html#Glyph","title":"NavigationItem.Glyph","content":"NavigationItem.Glyph \nGlyph \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationitemkind.html","title":"NavigationItemKind","content":"NavigationItemKind \n Indicates a kind of item to show in an F# navigation bar \nNavigationItemKind.IsType \nIsType \nNavigationItemKind.IsException \nIsException \nNavigationItemKind.IsModuleFile \nIsModuleFile \nNavigationItemKind.IsField \nIsField \nNavigationItemKind.IsProperty \nIsProperty \nNavigationItemKind.IsNamespace \nIsNamespace \nNavigationItemKind.IsOther \nIsOther \nNavigationItemKind.IsModule \nIsModule \nNavigationItemKind.IsMethod \nIsMethod \nNavigationItemKind.Namespace \nNamespace \nNavigationItemKind.ModuleFile \nModuleFile \nNavigationItemKind.Exception \nException \nNavigationItemKind.Module \nModule \nNavigationItemKind.Type \nType \nNavigationItemKind.Method \nMethod \nNavigationItemKind.Property \nProperty \nNavigationItemKind.Field \nField \nNavigationItemKind.Other \nOther","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationitemkind.html#IsType","title":"NavigationItemKind.IsType","content":"NavigationItemKind.IsType \nIsType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationitemkind.html#IsException","title":"NavigationItemKind.IsException","content":"NavigationItemKind.IsException \nIsException \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationitemkind.html#IsModuleFile","title":"NavigationItemKind.IsModuleFile","content":"NavigationItemKind.IsModuleFile \nIsModuleFile \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationitemkind.html#IsField","title":"NavigationItemKind.IsField","content":"NavigationItemKind.IsField \nIsField \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationitemkind.html#IsProperty","title":"NavigationItemKind.IsProperty","content":"NavigationItemKind.IsProperty \nIsProperty \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationitemkind.html#IsNamespace","title":"NavigationItemKind.IsNamespace","content":"NavigationItemKind.IsNamespace \nIsNamespace \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationitemkind.html#IsOther","title":"NavigationItemKind.IsOther","content":"NavigationItemKind.IsOther \nIsOther \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationitemkind.html#IsModule","title":"NavigationItemKind.IsModule","content":"NavigationItemKind.IsModule \nIsModule \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationitemkind.html#IsMethod","title":"NavigationItemKind.IsMethod","content":"NavigationItemKind.IsMethod \nIsMethod \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationitemkind.html#Namespace","title":"NavigationItemKind.Namespace","content":"NavigationItemKind.Namespace \nNamespace \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationitemkind.html#ModuleFile","title":"NavigationItemKind.ModuleFile","content":"NavigationItemKind.ModuleFile \nModuleFile \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationitemkind.html#Exception","title":"NavigationItemKind.Exception","content":"NavigationItemKind.Exception \nException \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationitemkind.html#Module","title":"NavigationItemKind.Module","content":"NavigationItemKind.Module \nModule \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationitemkind.html#Type","title":"NavigationItemKind.Type","content":"NavigationItemKind.Type \nType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationitemkind.html#Method","title":"NavigationItemKind.Method","content":"NavigationItemKind.Method \nMethod \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationitemkind.html#Property","title":"NavigationItemKind.Property","content":"NavigationItemKind.Property \nProperty \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationitemkind.html#Field","title":"NavigationItemKind.Field","content":"NavigationItemKind.Field \nField \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationitemkind.html#Other","title":"NavigationItemKind.Other","content":"NavigationItemKind.Other \nOther \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationitems.html","title":"NavigationItems","content":"NavigationItems \n Represents result of \u0027GetNavigationItems\u0027 operation - this contains\n all the members and currently selected indices. First level correspond to\n types \u0026 modules and second level are methods etc. \nNavigationItems.Declarations \nDeclarations","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationitems.html#Declarations","title":"NavigationItems.Declarations","content":"NavigationItems.Declarations \nDeclarations \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationtopleveldeclaration.html","title":"NavigationTopLevelDeclaration","content":"NavigationTopLevelDeclaration \n Represents top-level declarations (that should be in the type drop-down)\n with nested declarations (that can be shown in the member drop-down) \nNavigationTopLevelDeclaration.Declaration \nDeclaration \nNavigationTopLevelDeclaration.Nested \nNested","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationtopleveldeclaration.html#Declaration","title":"NavigationTopLevelDeclaration.Declaration","content":"NavigationTopLevelDeclaration.Declaration \nDeclaration \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationtopleveldeclaration.html#Nested","title":"NavigationTopLevelDeclaration.Nested","content":"NavigationTopLevelDeclaration.Nested \nNested \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-openstatementinsertionpoint.html","title":"OpenStatementInsertionPoint","content":"OpenStatementInsertionPoint \n Where open statements should be added. \nOpenStatementInsertionPoint.IsTopLevel \nIsTopLevel \nOpenStatementInsertionPoint.IsNearest \nIsNearest \nOpenStatementInsertionPoint.TopLevel \nTopLevel \nOpenStatementInsertionPoint.Nearest \nNearest","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-openstatementinsertionpoint.html#IsTopLevel","title":"OpenStatementInsertionPoint.IsTopLevel","content":"OpenStatementInsertionPoint.IsTopLevel \nIsTopLevel \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-openstatementinsertionpoint.html#IsNearest","title":"OpenStatementInsertionPoint.IsNearest","content":"OpenStatementInsertionPoint.IsNearest \nIsNearest \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-openstatementinsertionpoint.html#TopLevel","title":"OpenStatementInsertionPoint.TopLevel","content":"OpenStatementInsertionPoint.TopLevel \nTopLevel \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-openstatementinsertionpoint.html#Nearest","title":"OpenStatementInsertionPoint.Nearest","content":"OpenStatementInsertionPoint.Nearest \nNearest \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-parameterlocations.html","title":"ParameterLocations","content":"ParameterLocations \n Represents the locations relevant to activating parameter info in an IDE \nParameterLocations.LongIdEndLocation \nLongIdEndLocation \nParameterLocations.TupleEndLocations \nTupleEndLocations \nParameterLocations.IsThereACloseParen \nIsThereACloseParen \nParameterLocations.OpenParenLocation \nOpenParenLocation \nParameterLocations.ArgumentLocations \nArgumentLocations \nParameterLocations.LongIdStartLocation \nLongIdStartLocation \nParameterLocations.NamedParamNames \nNamedParamNames \nParameterLocations.LongId \nLongId \nParameterLocations.Find \nFind","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-parameterlocations.html#LongIdEndLocation","title":"ParameterLocations.LongIdEndLocation","content":"ParameterLocations.LongIdEndLocation \nLongIdEndLocation \n The end location of long identifier prior to the open-parentheses","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-parameterlocations.html#TupleEndLocations","title":"ParameterLocations.TupleEndLocations","content":"ParameterLocations.TupleEndLocations \nTupleEndLocations \n The locations of commas and close parenthesis (or, last char of last arg, if no final close parenthesis)","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-parameterlocations.html#IsThereACloseParen","title":"ParameterLocations.IsThereACloseParen","content":"ParameterLocations.IsThereACloseParen \nIsThereACloseParen \n Is false if either this is a call without parens \u0022f x\u0022 or the parser recovered as in \u0022f(x,y\u0022","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-parameterlocations.html#OpenParenLocation","title":"ParameterLocations.OpenParenLocation","content":"ParameterLocations.OpenParenLocation \nOpenParenLocation \n The location of the open-parentheses","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-parameterlocations.html#ArgumentLocations","title":"ParameterLocations.ArgumentLocations","content":"ParameterLocations.ArgumentLocations \nArgumentLocations \n Array of locations for each argument, and a flag if that argument is named","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-parameterlocations.html#LongIdStartLocation","title":"ParameterLocations.LongIdStartLocation","content":"ParameterLocations.LongIdStartLocation \nLongIdStartLocation \n The start location of long identifier prior to the open-parentheses","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-parameterlocations.html#NamedParamNames","title":"ParameterLocations.NamedParamNames","content":"ParameterLocations.NamedParamNames \nNamedParamNames \n Either empty or a name if an actual named parameter; f(0,a=4,?b=None) would be [|None; Some \u0022a\u0022; Some \u0022b\u0022|]","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-parameterlocations.html#LongId","title":"ParameterLocations.LongId","content":"ParameterLocations.LongId \nLongId \n The text of the long identifier prior to the open-parentheses","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-parameterlocations.html#Find","title":"ParameterLocations.Find","content":"ParameterLocations.Find \nFind \n Find the information about parameter info locations at a particular source location","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-partiallongname.html","title":"PartialLongName","content":"PartialLongName \n Qualified long name. \nPartialLongName.Empty \nEmpty \nPartialLongName.QualifyingIdents \nQualifyingIdents \nPartialLongName.PartialIdent \nPartialIdent \nPartialLongName.EndColumn \nEndColumn \nPartialLongName.LastDotPos \nLastDotPos","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-partiallongname.html#Empty","title":"PartialLongName.Empty","content":"PartialLongName.Empty \nEmpty \n Empty partial long name.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-partiallongname.html#QualifyingIdents","title":"PartialLongName.QualifyingIdents","content":"PartialLongName.QualifyingIdents \nQualifyingIdents \n Qualifying idents, prior to the last dot, not including the last part.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-partiallongname.html#PartialIdent","title":"PartialLongName.PartialIdent","content":"PartialLongName.PartialIdent \nPartialIdent \n Last part of long ident.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-partiallongname.html#EndColumn","title":"PartialLongName.EndColumn","content":"PartialLongName.EndColumn \nEndColumn \n The column number at the end of full partial name.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-partiallongname.html#LastDotPos","title":"PartialLongName.LastDotPos","content":"PartialLongName.LastDotPos \nLastDotPos \n Position of the last dot.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-patterncontext.html","title":"PatternContext","content":"PatternContext \n \nPatternContext.IsPositionalUnionCaseField \nIsPositionalUnionCaseField \nPatternContext.IsRecordFieldIdentifier \nIsRecordFieldIdentifier \nPatternContext.IsNamedUnionCaseField \nIsNamedUnionCaseField \nPatternContext.IsOther \nIsOther \nPatternContext.IsUnionCaseFieldIdentifier \nIsUnionCaseFieldIdentifier \nPatternContext.PositionalUnionCaseField \nPositionalUnionCaseField \nPatternContext.NamedUnionCaseField \nNamedUnionCaseField \nPatternContext.UnionCaseFieldIdentifier \nUnionCaseFieldIdentifier \nPatternContext.RecordFieldIdentifier \nRecordFieldIdentifier \nPatternContext.Other \nOther","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-patterncontext.html#IsPositionalUnionCaseField","title":"PatternContext.IsPositionalUnionCaseField","content":"PatternContext.IsPositionalUnionCaseField \nIsPositionalUnionCaseField \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-patterncontext.html#IsRecordFieldIdentifier","title":"PatternContext.IsRecordFieldIdentifier","content":"PatternContext.IsRecordFieldIdentifier \nIsRecordFieldIdentifier \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-patterncontext.html#IsNamedUnionCaseField","title":"PatternContext.IsNamedUnionCaseField","content":"PatternContext.IsNamedUnionCaseField \nIsNamedUnionCaseField \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-patterncontext.html#IsOther","title":"PatternContext.IsOther","content":"PatternContext.IsOther \nIsOther \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-patterncontext.html#IsUnionCaseFieldIdentifier","title":"PatternContext.IsUnionCaseFieldIdentifier","content":"PatternContext.IsUnionCaseFieldIdentifier \nIsUnionCaseFieldIdentifier \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-patterncontext.html#PositionalUnionCaseField","title":"PatternContext.PositionalUnionCaseField","content":"PatternContext.PositionalUnionCaseField \nPositionalUnionCaseField \nCompleting union case field pattern (e.g. fun (Some v| ) -\u003E ) or fun (Some (v| )) -\u003E ). In theory, this could also be parameterized active pattern usage.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-patterncontext.html#NamedUnionCaseField","title":"PatternContext.NamedUnionCaseField","content":"PatternContext.NamedUnionCaseField \nNamedUnionCaseField \n Completing union case field pattern (e.g. fun (Some (Value = v| )) -\u003E )","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-patterncontext.html#UnionCaseFieldIdentifier","title":"PatternContext.UnionCaseFieldIdentifier","content":"PatternContext.UnionCaseFieldIdentifier \nUnionCaseFieldIdentifier \n Completing union case field identifier in a pattern (e.g. fun (Case (field1 = a; fie| )) -\u003E )","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-patterncontext.html#RecordFieldIdentifier","title":"PatternContext.RecordFieldIdentifier","content":"PatternContext.RecordFieldIdentifier \nRecordFieldIdentifier \n Completing a record field identifier in a pattern (e.g. fun { Field1 = a; Fie| } -\u003E )","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-patterncontext.html#Other","title":"PatternContext.Other","content":"PatternContext.Other \nOther \n Any other position in a pattern that does not need special handling","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-recordcontext.html","title":"RecordContext","content":"RecordContext \n \nRecordContext.IsNew \nIsNew \nRecordContext.IsDeclaration \nIsDeclaration \nRecordContext.IsCopyOnUpdate \nIsCopyOnUpdate \nRecordContext.IsConstructor \nIsConstructor \nRecordContext.IsEmpty \nIsEmpty \nRecordContext.CopyOnUpdate \nCopyOnUpdate \nRecordContext.Constructor \nConstructor \nRecordContext.Empty \nEmpty \nRecordContext.New \nNew \nRecordContext.Declaration \nDeclaration","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-recordcontext.html#IsNew","title":"RecordContext.IsNew","content":"RecordContext.IsNew \nIsNew \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-recordcontext.html#IsDeclaration","title":"RecordContext.IsDeclaration","content":"RecordContext.IsDeclaration \nIsDeclaration \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-recordcontext.html#IsCopyOnUpdate","title":"RecordContext.IsCopyOnUpdate","content":"RecordContext.IsCopyOnUpdate \nIsCopyOnUpdate \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-recordcontext.html#IsConstructor","title":"RecordContext.IsConstructor","content":"RecordContext.IsConstructor \nIsConstructor \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-recordcontext.html#IsEmpty","title":"RecordContext.IsEmpty","content":"RecordContext.IsEmpty \nIsEmpty \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-recordcontext.html#CopyOnUpdate","title":"RecordContext.CopyOnUpdate","content":"RecordContext.CopyOnUpdate \nCopyOnUpdate \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-recordcontext.html#Constructor","title":"RecordContext.Constructor","content":"RecordContext.Constructor \nConstructor \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-recordcontext.html#Empty","title":"RecordContext.Empty","content":"RecordContext.Empty \nEmpty \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-recordcontext.html#New","title":"RecordContext.New","content":"RecordContext.New \nNew \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-recordcontext.html#Declaration","title":"RecordContext.Declaration","content":"RecordContext.Declaration \nDeclaration \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-scopekind.html","title":"ScopeKind","content":"ScopeKind \n Kind of lexical scope. \nScopeKind.IsNestedModule \nIsNestedModule \nScopeKind.IsTopModule \nIsTopModule \nScopeKind.IsNamespace \nIsNamespace \nScopeKind.IsHashDirective \nIsHashDirective \nScopeKind.IsOpenDeclaration \nIsOpenDeclaration \nScopeKind.Namespace \nNamespace \nScopeKind.TopModule \nTopModule \nScopeKind.NestedModule \nNestedModule \nScopeKind.OpenDeclaration \nOpenDeclaration \nScopeKind.HashDirective \nHashDirective","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-scopekind.html#IsNestedModule","title":"ScopeKind.IsNestedModule","content":"ScopeKind.IsNestedModule \nIsNestedModule \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-scopekind.html#IsTopModule","title":"ScopeKind.IsTopModule","content":"ScopeKind.IsTopModule \nIsTopModule \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-scopekind.html#IsNamespace","title":"ScopeKind.IsNamespace","content":"ScopeKind.IsNamespace \nIsNamespace \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-scopekind.html#IsHashDirective","title":"ScopeKind.IsHashDirective","content":"ScopeKind.IsHashDirective \nIsHashDirective \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-scopekind.html#IsOpenDeclaration","title":"ScopeKind.IsOpenDeclaration","content":"ScopeKind.IsOpenDeclaration \nIsOpenDeclaration \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-scopekind.html#Namespace","title":"ScopeKind.Namespace","content":"ScopeKind.Namespace \nNamespace \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-scopekind.html#TopModule","title":"ScopeKind.TopModule","content":"ScopeKind.TopModule \nTopModule \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-scopekind.html#NestedModule","title":"ScopeKind.NestedModule","content":"ScopeKind.NestedModule \nNestedModule \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-scopekind.html#OpenDeclaration","title":"ScopeKind.OpenDeclaration","content":"ScopeKind.OpenDeclaration \nOpenDeclaration \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-scopekind.html#HashDirective","title":"ScopeKind.HashDirective","content":"ScopeKind.HashDirective \nHashDirective \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationitem.html","title":"SemanticClassificationItem","content":"SemanticClassificationItem \n \nSemanticClassificationItem.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nSemanticClassificationItem.Range \nRange \nSemanticClassificationItem.Type \nType","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationitem.html#\u0060\u0060.ctor\u0060\u0060","title":"SemanticClassificationItem.\u0060\u0060.ctor\u0060\u0060","content":"SemanticClassificationItem.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationitem.html#Range","title":"SemanticClassificationItem.Range","content":"SemanticClassificationItem.Range \nRange \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationitem.html#Type","title":"SemanticClassificationItem.Type","content":"SemanticClassificationItem.Type \nType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html","title":"SemanticClassificationType","content":"SemanticClassificationType \n A kind that determines what range in a source\u0027s text is semantically classified as after type-checking. \nSemanticClassificationType.ReferenceType \nReferenceType \nSemanticClassificationType.ValueType \nValueType \nSemanticClassificationType.UnionCase \nUnionCase \nSemanticClassificationType.UnionCaseField \nUnionCaseField \nSemanticClassificationType.Function \nFunction \nSemanticClassificationType.Property \nProperty \nSemanticClassificationType.MutableVar \nMutableVar \nSemanticClassificationType.Module \nModule \nSemanticClassificationType.Namespace \nNamespace \nSemanticClassificationType.Printf \nPrintf \nSemanticClassificationType.ComputationExpression \nComputationExpression \nSemanticClassificationType.IntrinsicFunction \nIntrinsicFunction \nSemanticClassificationType.Enumeration \nEnumeration \nSemanticClassificationType.Interface \nInterface \nSemanticClassificationType.TypeArgument \nTypeArgument \nSemanticClassificationType.Operator \nOperator \nSemanticClassificationType.DisposableType \nDisposableType \nSemanticClassificationType.DisposableTopLevelValue \nDisposableTopLevelValue \nSemanticClassificationType.DisposableLocalValue \nDisposableLocalValue \nSemanticClassificationType.Method \nMethod \nSemanticClassificationType.ExtensionMethod \nExtensionMethod \nSemanticClassificationType.ConstructorForReferenceType \nConstructorForReferenceType \nSemanticClassificationType.ConstructorForValueType \nConstructorForValueType \nSemanticClassificationType.Literal \nLiteral \nSemanticClassificationType.RecordField \nRecordField \nSemanticClassificationType.MutableRecordField \nMutableRecordField \nSemanticClassificationType.RecordFieldAsFunction \nRecordFieldAsFunction \nSemanticClassificationType.Exception \nException \nSemanticClassificationType.Field \nField \nSemanticClassificationType.Event \nEvent \nSemanticClassificationType.Delegate \nDelegate \nSemanticClassificationType.NamedArgument \nNamedArgument \nSemanticClassificationType.Value \nValue \nSemanticClassificationType.LocalValue \nLocalValue \nSemanticClassificationType.Type \nType \nSemanticClassificationType.TypeDef \nTypeDef \nSemanticClassificationType.Plaintext \nPlaintext","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html#ReferenceType","title":"SemanticClassificationType.ReferenceType","content":"SemanticClassificationType.ReferenceType \nReferenceType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html#ValueType","title":"SemanticClassificationType.ValueType","content":"SemanticClassificationType.ValueType \nValueType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html#UnionCase","title":"SemanticClassificationType.UnionCase","content":"SemanticClassificationType.UnionCase \nUnionCase \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html#UnionCaseField","title":"SemanticClassificationType.UnionCaseField","content":"SemanticClassificationType.UnionCaseField \nUnionCaseField \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html#Function","title":"SemanticClassificationType.Function","content":"SemanticClassificationType.Function \nFunction \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html#Property","title":"SemanticClassificationType.Property","content":"SemanticClassificationType.Property \nProperty \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html#MutableVar","title":"SemanticClassificationType.MutableVar","content":"SemanticClassificationType.MutableVar \nMutableVar \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html#Module","title":"SemanticClassificationType.Module","content":"SemanticClassificationType.Module \nModule \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html#Namespace","title":"SemanticClassificationType.Namespace","content":"SemanticClassificationType.Namespace \nNamespace \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html#Printf","title":"SemanticClassificationType.Printf","content":"SemanticClassificationType.Printf \nPrintf \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html#ComputationExpression","title":"SemanticClassificationType.ComputationExpression","content":"SemanticClassificationType.ComputationExpression \nComputationExpression \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html#IntrinsicFunction","title":"SemanticClassificationType.IntrinsicFunction","content":"SemanticClassificationType.IntrinsicFunction \nIntrinsicFunction \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html#Enumeration","title":"SemanticClassificationType.Enumeration","content":"SemanticClassificationType.Enumeration \nEnumeration \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html#Interface","title":"SemanticClassificationType.Interface","content":"SemanticClassificationType.Interface \nInterface \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html#TypeArgument","title":"SemanticClassificationType.TypeArgument","content":"SemanticClassificationType.TypeArgument \nTypeArgument \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html#Operator","title":"SemanticClassificationType.Operator","content":"SemanticClassificationType.Operator \nOperator \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html#DisposableType","title":"SemanticClassificationType.DisposableType","content":"SemanticClassificationType.DisposableType \nDisposableType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html#DisposableTopLevelValue","title":"SemanticClassificationType.DisposableTopLevelValue","content":"SemanticClassificationType.DisposableTopLevelValue \nDisposableTopLevelValue \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html#DisposableLocalValue","title":"SemanticClassificationType.DisposableLocalValue","content":"SemanticClassificationType.DisposableLocalValue \nDisposableLocalValue \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html#Method","title":"SemanticClassificationType.Method","content":"SemanticClassificationType.Method \nMethod \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html#ExtensionMethod","title":"SemanticClassificationType.ExtensionMethod","content":"SemanticClassificationType.ExtensionMethod \nExtensionMethod \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html#ConstructorForReferenceType","title":"SemanticClassificationType.ConstructorForReferenceType","content":"SemanticClassificationType.ConstructorForReferenceType \nConstructorForReferenceType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html#ConstructorForValueType","title":"SemanticClassificationType.ConstructorForValueType","content":"SemanticClassificationType.ConstructorForValueType \nConstructorForValueType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html#Literal","title":"SemanticClassificationType.Literal","content":"SemanticClassificationType.Literal \nLiteral \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html#RecordField","title":"SemanticClassificationType.RecordField","content":"SemanticClassificationType.RecordField \nRecordField \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html#MutableRecordField","title":"SemanticClassificationType.MutableRecordField","content":"SemanticClassificationType.MutableRecordField \nMutableRecordField \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html#RecordFieldAsFunction","title":"SemanticClassificationType.RecordFieldAsFunction","content":"SemanticClassificationType.RecordFieldAsFunction \nRecordFieldAsFunction \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html#Exception","title":"SemanticClassificationType.Exception","content":"SemanticClassificationType.Exception \nException \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html#Field","title":"SemanticClassificationType.Field","content":"SemanticClassificationType.Field \nField \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html#Event","title":"SemanticClassificationType.Event","content":"SemanticClassificationType.Event \nEvent \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html#Delegate","title":"SemanticClassificationType.Delegate","content":"SemanticClassificationType.Delegate \nDelegate \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html#NamedArgument","title":"SemanticClassificationType.NamedArgument","content":"SemanticClassificationType.NamedArgument \nNamedArgument \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html#Value","title":"SemanticClassificationType.Value","content":"SemanticClassificationType.Value \nValue \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html#LocalValue","title":"SemanticClassificationType.LocalValue","content":"SemanticClassificationType.LocalValue \nLocalValue \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html#Type","title":"SemanticClassificationType.Type","content":"SemanticClassificationType.Type \nType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html#TypeDef","title":"SemanticClassificationType.TypeDef","content":"SemanticClassificationType.TypeDef \nTypeDef \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html#Plaintext","title":"SemanticClassificationType.Plaintext","content":"SemanticClassificationType.Plaintext \nPlaintext \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationview.html","title":"SemanticClassificationView","content":"SemanticClassificationView \n Provides a read only view to iterate over the semantic classification contents. \nSemanticClassificationView.ForEach \nForEach","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationview.html#ForEach","title":"SemanticClassificationView.ForEach","content":"SemanticClassificationView.ForEach \nForEach \n Iterate through the stored SemanticClassificationItem entries from the store and apply the passed function on each entry.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-shortidents.html","title":"ShortIdents","content":"ShortIdents \n An array of \u0060ShortIdent\u0060.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-tooltipelement.html","title":"ToolTipElement","content":"ToolTipElement \n A single tool tip display element \nToolTipElement.IsNone \nIsNone \nToolTipElement.IsCompositionError \nIsCompositionError \nToolTipElement.IsGroup \nIsGroup \nToolTipElement.Single \nSingle \nToolTipElement.None \nNone \nToolTipElement.Group \nGroup \nToolTipElement.CompositionError \nCompositionError","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-tooltipelement.html#IsNone","title":"ToolTipElement.IsNone","content":"ToolTipElement.IsNone \nIsNone \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-tooltipelement.html#IsCompositionError","title":"ToolTipElement.IsCompositionError","content":"ToolTipElement.IsCompositionError \nIsCompositionError \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-tooltipelement.html#IsGroup","title":"ToolTipElement.IsGroup","content":"ToolTipElement.IsGroup \nIsGroup \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-tooltipelement.html#Single","title":"ToolTipElement.Single","content":"ToolTipElement.Single \nSingle \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-tooltipelement.html#None","title":"ToolTipElement.None","content":"ToolTipElement.None \nNone \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-tooltipelement.html#Group","title":"ToolTipElement.Group","content":"ToolTipElement.Group \nGroup \n A single type, method, etc with comment. May represent a method overload group.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-tooltipelement.html#CompositionError","title":"ToolTipElement.CompositionError","content":"ToolTipElement.CompositionError \nCompositionError \n An error occurred formatting this element","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-tooltipelementdata.html","title":"ToolTipElementData","content":"ToolTipElementData \n A single data tip display element \nToolTipElementData.Symbol \nSymbol \nToolTipElementData.MainDescription \nMainDescription \nToolTipElementData.XmlDoc \nXmlDoc \nToolTipElementData.TypeMapping \nTypeMapping \nToolTipElementData.Remarks \nRemarks \nToolTipElementData.ParamName \nParamName","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-tooltipelementdata.html#Symbol","title":"ToolTipElementData.Symbol","content":"ToolTipElementData.Symbol \nSymbol \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-tooltipelementdata.html#MainDescription","title":"ToolTipElementData.MainDescription","content":"ToolTipElementData.MainDescription \nMainDescription \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-tooltipelementdata.html#XmlDoc","title":"ToolTipElementData.XmlDoc","content":"ToolTipElementData.XmlDoc \nXmlDoc \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-tooltipelementdata.html#TypeMapping","title":"ToolTipElementData.TypeMapping","content":"ToolTipElementData.TypeMapping \nTypeMapping \n typar instantiation text, to go after xml","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-tooltipelementdata.html#Remarks","title":"ToolTipElementData.Remarks","content":"ToolTipElementData.Remarks \nRemarks \n Extra text, goes at the end","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-tooltipelementdata.html#ParamName","title":"ToolTipElementData.ParamName","content":"ToolTipElementData.ParamName \nParamName \n Parameter name","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-tooltiptext.html","title":"ToolTipText","content":"ToolTipText \n Information for building a tool tip box. \nToolTipText.ToolTipText \nToolTipText","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-tooltiptext.html#ToolTipText","title":"ToolTipText.ToolTipText","content":"ToolTipText.ToolTipText \nToolTipText \n A list of data tip elements to display.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-tupledargumentlocation.html","title":"TupledArgumentLocation","content":"TupledArgumentLocation \n Represents the location of a tupled argument, which can optionally be a named argument. \nTupledArgumentLocation.IsNamedArgument \nIsNamedArgument \nTupledArgumentLocation.ArgumentRange \nArgumentRange","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-tupledargumentlocation.html#IsNamedArgument","title":"TupledArgumentLocation.IsNamedArgument","content":"TupledArgumentLocation.IsNamedArgument \nIsNamedArgument \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-tupledargumentlocation.html#ArgumentRange","title":"TupledArgumentLocation.ArgumentRange","content":"TupledArgumentLocation.ArgumentRange \nArgumentRange \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-unresolvedsymbol.html","title":"UnresolvedSymbol","content":"UnresolvedSymbol \n \nUnresolvedSymbol.FullName \nFullName \nUnresolvedSymbol.DisplayName \nDisplayName \nUnresolvedSymbol.Namespace \nNamespace","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-unresolvedsymbol.html#FullName","title":"UnresolvedSymbol.FullName","content":"UnresolvedSymbol.FullName \nFullName \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-unresolvedsymbol.html#DisplayName","title":"UnresolvedSymbol.DisplayName","content":"UnresolvedSymbol.DisplayName \nDisplayName \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-unresolvedsymbol.html#Namespace","title":"UnresolvedSymbol.Namespace","content":"UnresolvedSymbol.Namespace \nNamespace \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-xmldocable.html","title":"XmlDocable","content":"XmlDocable \n Represent an Xml documentation block in source code \nXmlDocable.XmlDocable \nXmlDocable","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-xmldocable.html#XmlDocable","title":"XmlDocable.XmlDocable","content":"XmlDocable.XmlDocable \nXmlDocable \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-filesystemautoopens.html","title":"FileSystemAutoOpens","content":"FileSystemAutoOpens \n \nFileSystemAutoOpens.FileSystem \nFileSystem","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-filesystemautoopens.html#FileSystem","title":"FileSystemAutoOpens.FileSystem","content":"FileSystemAutoOpens.FileSystem \nFileSystem \n The global hook into the file system","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-streamextensions.html","title":"StreamExtensions","content":"StreamExtensions \n \nStreamExtensions.GetWriter \nGetWriter \nStreamExtensions.WriteAllLines \nWriteAllLines \nStreamExtensions.Write \nWrite \nStreamExtensions.GetReader \nGetReader \nStreamExtensions.ReadBytes \nReadBytes \nStreamExtensions.ReadAllBytes \nReadAllBytes \nStreamExtensions.ReadAllText \nReadAllText \nStreamExtensions.ReadLines \nReadLines \nStreamExtensions.ReadAllLines \nReadAllLines \nStreamExtensions.WriteAllText \nWriteAllText \nStreamExtensions.AsByteMemory \nAsByteMemory","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-streamextensions.html#GetWriter","title":"StreamExtensions.GetWriter","content":"StreamExtensions.GetWriter \nGetWriter \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-streamextensions.html#WriteAllLines","title":"StreamExtensions.WriteAllLines","content":"StreamExtensions.WriteAllLines \nWriteAllLines \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-streamextensions.html#Write","title":"StreamExtensions.Write","content":"StreamExtensions.Write \nWrite \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-streamextensions.html#GetReader","title":"StreamExtensions.GetReader","content":"StreamExtensions.GetReader \nGetReader \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-streamextensions.html#ReadBytes","title":"StreamExtensions.ReadBytes","content":"StreamExtensions.ReadBytes \nReadBytes \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-streamextensions.html#ReadAllBytes","title":"StreamExtensions.ReadAllBytes","content":"StreamExtensions.ReadAllBytes \nReadAllBytes \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-streamextensions.html#ReadAllText","title":"StreamExtensions.ReadAllText","content":"StreamExtensions.ReadAllText \nReadAllText \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-streamextensions.html#ReadLines","title":"StreamExtensions.ReadLines","content":"StreamExtensions.ReadLines \nReadLines \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-streamextensions.html#ReadAllLines","title":"StreamExtensions.ReadAllLines","content":"StreamExtensions.ReadAllLines \nReadAllLines \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-streamextensions.html#WriteAllText","title":"StreamExtensions.WriteAllText","content":"StreamExtensions.WriteAllText \nWriteAllText \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-streamextensions.html#AsByteMemory","title":"StreamExtensions.AsByteMemory","content":"StreamExtensions.AsByteMemory \nAsByteMemory \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-bytememory.html","title":"ByteMemory","content":"ByteMemory \n A view over bytes.\n May be backed by managed or unmanaged memory, or memory mapped file. \nByteMemory.AsReadOnly \nAsReadOnly \nByteMemory.AsReadOnlyStream \nAsReadOnlyStream \nByteMemory.AsStream \nAsStream \nByteMemory.Copy \nCopy \nByteMemory.CopyTo \nCopyTo \nByteMemory.ReadAllBytes \nReadAllBytes \nByteMemory.ReadBytes \nReadBytes \nByteMemory.ReadInt32 \nReadInt32 \nByteMemory.ReadUInt16 \nReadUInt16 \nByteMemory.ReadUtf8String \nReadUtf8String \nByteMemory.Slice \nSlice \nByteMemory.ToArray \nToArray \nByteMemory.Item \nItem \nByteMemory.Length \nLength \nByteMemory.FromArray \nFromArray \nByteMemory.FromArray \nFromArray \nByteMemory.FromMemoryMappedFile \nFromMemoryMappedFile \nByteMemory.FromUnsafePointer \nFromUnsafePointer \nByteMemory.Empty \nEmpty","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-bytememory.html#AsReadOnly","title":"ByteMemory.AsReadOnly","content":"ByteMemory.AsReadOnly \nAsReadOnly \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-bytememory.html#AsReadOnlyStream","title":"ByteMemory.AsReadOnlyStream","content":"ByteMemory.AsReadOnlyStream \nAsReadOnlyStream \n Get a stream representation of the backing memory.\n Disposing this will not free up any of the backing memory.\n Stream cannot be written to.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-bytememory.html#AsStream","title":"ByteMemory.AsStream","content":"ByteMemory.AsStream \nAsStream \n Get a stream representation of the backing memory.\n Disposing this will not free up any of the backing memory.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-bytememory.html#Copy","title":"ByteMemory.Copy","content":"ByteMemory.Copy \nCopy \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-bytememory.html#CopyTo","title":"ByteMemory.CopyTo","content":"ByteMemory.CopyTo \nCopyTo \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-bytememory.html#ReadAllBytes","title":"ByteMemory.ReadAllBytes","content":"ByteMemory.ReadAllBytes \nReadAllBytes \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-bytememory.html#ReadBytes","title":"ByteMemory.ReadBytes","content":"ByteMemory.ReadBytes \nReadBytes \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-bytememory.html#ReadInt32","title":"ByteMemory.ReadInt32","content":"ByteMemory.ReadInt32 \nReadInt32 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-bytememory.html#ReadUInt16","title":"ByteMemory.ReadUInt16","content":"ByteMemory.ReadUInt16 \nReadUInt16 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-bytememory.html#ReadUtf8String","title":"ByteMemory.ReadUtf8String","content":"ByteMemory.ReadUtf8String \nReadUtf8String \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-bytememory.html#Slice","title":"ByteMemory.Slice","content":"ByteMemory.Slice \nSlice \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-bytememory.html#ToArray","title":"ByteMemory.ToArray","content":"ByteMemory.ToArray \nToArray \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-bytememory.html#Item","title":"ByteMemory.Item","content":"ByteMemory.Item \nItem \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-bytememory.html#Length","title":"ByteMemory.Length","content":"ByteMemory.Length \nLength \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-bytememory.html#FromArray","title":"ByteMemory.FromArray","content":"ByteMemory.FromArray \nFromArray \n Creates a ByteMemory object that is backed by a byte array.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-bytememory.html#FromArray","title":"ByteMemory.FromArray","content":"ByteMemory.FromArray \nFromArray \n Creates a ByteMemory object that is backed by a byte array with the specified offset and length.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-bytememory.html#FromMemoryMappedFile","title":"ByteMemory.FromMemoryMappedFile","content":"ByteMemory.FromMemoryMappedFile \nFromMemoryMappedFile \n Create a ByteMemory object that has a backing memory mapped file.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-bytememory.html#FromUnsafePointer","title":"ByteMemory.FromUnsafePointer","content":"ByteMemory.FromUnsafePointer \nFromUnsafePointer \n Creates a ByteMemory object that is backed by a raw pointer.\n Use with care.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-bytememory.html#Empty","title":"ByteMemory.Empty","content":"ByteMemory.Empty \nEmpty \n Empty byte memory.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-defaultassemblyloader.html","title":"DefaultAssemblyLoader","content":"DefaultAssemblyLoader \n Default implementation for IAssemblyLoader \nDefaultAssemblyLoader.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-defaultassemblyloader.html#\u0060\u0060.ctor\u0060\u0060","title":"DefaultAssemblyLoader.\u0060\u0060.ctor\u0060\u0060","content":"DefaultAssemblyLoader.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-defaultfilesystem.html","title":"DefaultFileSystem","content":"DefaultFileSystem \n Represents a default (memory-mapped) implementation of the file system \nDefaultFileSystem.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nDefaultFileSystem.ChangeExtensionShim \nChangeExtensionShim \nDefaultFileSystem.CopyShim \nCopyShim \nDefaultFileSystem.DirectoryCreateShim \nDirectoryCreateShim \nDefaultFileSystem.DirectoryDeleteShim \nDirectoryDeleteShim \nDefaultFileSystem.DirectoryExistsShim \nDirectoryExistsShim \nDefaultFileSystem.EnumerateDirectoriesShim \nEnumerateDirectoriesShim \nDefaultFileSystem.EnumerateFilesShim \nEnumerateFilesShim \nDefaultFileSystem.FileDeleteShim \nFileDeleteShim \nDefaultFileSystem.FileExistsShim \nFileExistsShim \nDefaultFileSystem.GetCreationTimeShim \nGetCreationTimeShim \nDefaultFileSystem.GetDirectoryNameShim \nGetDirectoryNameShim \nDefaultFileSystem.GetFullFilePathInDirectoryShim \nGetFullFilePathInDirectoryShim \nDefaultFileSystem.GetFullPathShim \nGetFullPathShim \nDefaultFileSystem.GetLastWriteTimeShim \nGetLastWriteTimeShim \nDefaultFileSystem.GetTempPathShim \nGetTempPathShim \nDefaultFileSystem.IsInvalidPathShim \nIsInvalidPathShim \nDefaultFileSystem.IsPathRootedShim \nIsPathRootedShim \nDefaultFileSystem.IsStableFileHeuristic \nIsStableFileHeuristic \nDefaultFileSystem.NormalizePathShim \nNormalizePathShim \nDefaultFileSystem.OpenFileForReadShim \nOpenFileForReadShim \nDefaultFileSystem.OpenFileForWriteShim \nOpenFileForWriteShim \nDefaultFileSystem.AssemblyLoader \nAssemblyLoader","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-defaultfilesystem.html#\u0060\u0060.ctor\u0060\u0060","title":"DefaultFileSystem.\u0060\u0060.ctor\u0060\u0060","content":"DefaultFileSystem.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n Create a default implementation of the file system","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-defaultfilesystem.html#ChangeExtensionShim","title":"DefaultFileSystem.ChangeExtensionShim","content":"DefaultFileSystem.ChangeExtensionShim \nChangeExtensionShim \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-defaultfilesystem.html#CopyShim","title":"DefaultFileSystem.CopyShim","content":"DefaultFileSystem.CopyShim \nCopyShim \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-defaultfilesystem.html#DirectoryCreateShim","title":"DefaultFileSystem.DirectoryCreateShim","content":"DefaultFileSystem.DirectoryCreateShim \nDirectoryCreateShim \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-defaultfilesystem.html#DirectoryDeleteShim","title":"DefaultFileSystem.DirectoryDeleteShim","content":"DefaultFileSystem.DirectoryDeleteShim \nDirectoryDeleteShim \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-defaultfilesystem.html#DirectoryExistsShim","title":"DefaultFileSystem.DirectoryExistsShim","content":"DefaultFileSystem.DirectoryExistsShim \nDirectoryExistsShim \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-defaultfilesystem.html#EnumerateDirectoriesShim","title":"DefaultFileSystem.EnumerateDirectoriesShim","content":"DefaultFileSystem.EnumerateDirectoriesShim \nEnumerateDirectoriesShim \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-defaultfilesystem.html#EnumerateFilesShim","title":"DefaultFileSystem.EnumerateFilesShim","content":"DefaultFileSystem.EnumerateFilesShim \nEnumerateFilesShim \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-defaultfilesystem.html#FileDeleteShim","title":"DefaultFileSystem.FileDeleteShim","content":"DefaultFileSystem.FileDeleteShim \nFileDeleteShim \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-defaultfilesystem.html#FileExistsShim","title":"DefaultFileSystem.FileExistsShim","content":"DefaultFileSystem.FileExistsShim \nFileExistsShim \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-defaultfilesystem.html#GetCreationTimeShim","title":"DefaultFileSystem.GetCreationTimeShim","content":"DefaultFileSystem.GetCreationTimeShim \nGetCreationTimeShim \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-defaultfilesystem.html#GetDirectoryNameShim","title":"DefaultFileSystem.GetDirectoryNameShim","content":"DefaultFileSystem.GetDirectoryNameShim \nGetDirectoryNameShim \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-defaultfilesystem.html#GetFullFilePathInDirectoryShim","title":"DefaultFileSystem.GetFullFilePathInDirectoryShim","content":"DefaultFileSystem.GetFullFilePathInDirectoryShim \nGetFullFilePathInDirectoryShim \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-defaultfilesystem.html#GetFullPathShim","title":"DefaultFileSystem.GetFullPathShim","content":"DefaultFileSystem.GetFullPathShim \nGetFullPathShim \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-defaultfilesystem.html#GetLastWriteTimeShim","title":"DefaultFileSystem.GetLastWriteTimeShim","content":"DefaultFileSystem.GetLastWriteTimeShim \nGetLastWriteTimeShim \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-defaultfilesystem.html#GetTempPathShim","title":"DefaultFileSystem.GetTempPathShim","content":"DefaultFileSystem.GetTempPathShim \nGetTempPathShim \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-defaultfilesystem.html#IsInvalidPathShim","title":"DefaultFileSystem.IsInvalidPathShim","content":"DefaultFileSystem.IsInvalidPathShim \nIsInvalidPathShim \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-defaultfilesystem.html#IsPathRootedShim","title":"DefaultFileSystem.IsPathRootedShim","content":"DefaultFileSystem.IsPathRootedShim \nIsPathRootedShim \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-defaultfilesystem.html#IsStableFileHeuristic","title":"DefaultFileSystem.IsStableFileHeuristic","content":"DefaultFileSystem.IsStableFileHeuristic \nIsStableFileHeuristic \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-defaultfilesystem.html#NormalizePathShim","title":"DefaultFileSystem.NormalizePathShim","content":"DefaultFileSystem.NormalizePathShim \nNormalizePathShim \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-defaultfilesystem.html#OpenFileForReadShim","title":"DefaultFileSystem.OpenFileForReadShim","content":"DefaultFileSystem.OpenFileForReadShim \nOpenFileForReadShim \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-defaultfilesystem.html#OpenFileForWriteShim","title":"DefaultFileSystem.OpenFileForWriteShim","content":"DefaultFileSystem.OpenFileForWriteShim \nOpenFileForWriteShim \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-defaultfilesystem.html#AssemblyLoader","title":"DefaultFileSystem.AssemblyLoader","content":"DefaultFileSystem.AssemblyLoader \nAssemblyLoader \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-iassemblyloader.html","title":"IAssemblyLoader","content":"IAssemblyLoader \n Type which we use to load assemblies. \nIAssemblyLoader.AssemblyLoad \nAssemblyLoad \nIAssemblyLoader.AssemblyLoadFrom \nAssemblyLoadFrom","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-iassemblyloader.html#AssemblyLoad","title":"IAssemblyLoader.AssemblyLoad","content":"IAssemblyLoader.AssemblyLoad \nAssemblyLoad \n Used to load a dependency for F# Interactive and in an unused corner-case of type provider loading","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-iassemblyloader.html#AssemblyLoadFrom","title":"IAssemblyLoader.AssemblyLoadFrom","content":"IAssemblyLoader.AssemblyLoadFrom \nAssemblyLoadFrom \n Used to load type providers and located assemblies in F# Interactive","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-ifilesystem.html","title":"IFileSystem","content":"IFileSystem \n Represents a shim for the file system \nIFileSystem.ChangeExtensionShim \nChangeExtensionShim \nIFileSystem.CopyShim \nCopyShim \nIFileSystem.DirectoryCreateShim \nDirectoryCreateShim \nIFileSystem.DirectoryDeleteShim \nDirectoryDeleteShim \nIFileSystem.DirectoryExistsShim \nDirectoryExistsShim \nIFileSystem.EnumerateDirectoriesShim \nEnumerateDirectoriesShim \nIFileSystem.EnumerateFilesShim \nEnumerateFilesShim \nIFileSystem.FileDeleteShim \nFileDeleteShim \nIFileSystem.FileExistsShim \nFileExistsShim \nIFileSystem.GetCreationTimeShim \nGetCreationTimeShim \nIFileSystem.GetDirectoryNameShim \nGetDirectoryNameShim \nIFileSystem.GetFullFilePathInDirectoryShim \nGetFullFilePathInDirectoryShim \nIFileSystem.GetFullPathShim \nGetFullPathShim \nIFileSystem.GetLastWriteTimeShim \nGetLastWriteTimeShim \nIFileSystem.GetTempPathShim \nGetTempPathShim \nIFileSystem.IsInvalidPathShim \nIsInvalidPathShim \nIFileSystem.IsPathRootedShim \nIsPathRootedShim \nIFileSystem.IsStableFileHeuristic \nIsStableFileHeuristic \nIFileSystem.NormalizePathShim \nNormalizePathShim \nIFileSystem.OpenFileForReadShim \nOpenFileForReadShim \nIFileSystem.OpenFileForWriteShim \nOpenFileForWriteShim \nIFileSystem.AssemblyLoader \nAssemblyLoader","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-ifilesystem.html#ChangeExtensionShim","title":"IFileSystem.ChangeExtensionShim","content":"IFileSystem.ChangeExtensionShim \nChangeExtensionShim \n A shim over Path.ChangeExtension","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-ifilesystem.html#CopyShim","title":"IFileSystem.CopyShim","content":"IFileSystem.CopyShim \nCopyShim \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-ifilesystem.html#DirectoryCreateShim","title":"IFileSystem.DirectoryCreateShim","content":"IFileSystem.DirectoryCreateShim \nDirectoryCreateShim \n A shim over Directory.Exists, but returns a string, the FullName of the resulting\n DirectoryInfo.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-ifilesystem.html#DirectoryDeleteShim","title":"IFileSystem.DirectoryDeleteShim","content":"IFileSystem.DirectoryDeleteShim \nDirectoryDeleteShim \n A shim over Directory.Delete","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-ifilesystem.html#DirectoryExistsShim","title":"IFileSystem.DirectoryExistsShim","content":"IFileSystem.DirectoryExistsShim \nDirectoryExistsShim \n A shim over Directory.Exists","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-ifilesystem.html#EnumerateDirectoriesShim","title":"IFileSystem.EnumerateDirectoriesShim","content":"IFileSystem.EnumerateDirectoriesShim \nEnumerateDirectoriesShim \n A shim over Directory.EnumerateDirectories","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-ifilesystem.html#EnumerateFilesShim","title":"IFileSystem.EnumerateFilesShim","content":"IFileSystem.EnumerateFilesShim \nEnumerateFilesShim \n A shim over Directory.EnumerateFiles","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-ifilesystem.html#FileDeleteShim","title":"IFileSystem.FileDeleteShim","content":"IFileSystem.FileDeleteShim \nFileDeleteShim \n A shim over File.Delete","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-ifilesystem.html#FileExistsShim","title":"IFileSystem.FileExistsShim","content":"IFileSystem.FileExistsShim \nFileExistsShim \n A shim over File.Exists","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-ifilesystem.html#GetCreationTimeShim","title":"IFileSystem.GetCreationTimeShim","content":"IFileSystem.GetCreationTimeShim \nGetCreationTimeShim \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-ifilesystem.html#GetDirectoryNameShim","title":"IFileSystem.GetDirectoryNameShim","content":"IFileSystem.GetDirectoryNameShim \nGetDirectoryNameShim \n A shim for getting directory name from path","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-ifilesystem.html#GetFullFilePathInDirectoryShim","title":"IFileSystem.GetFullFilePathInDirectoryShim","content":"IFileSystem.GetFullFilePathInDirectoryShim \nGetFullFilePathInDirectoryShim \n Take in a directory, filename, and return canonicalized path to the file name in directory.\n If file name path is rooted, ignores directory and returns file name path.\n Otherwise, combines directory with file name and gets full path via GetFullPathShim(string).","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-ifilesystem.html#GetFullPathShim","title":"IFileSystem.GetFullPathShim","content":"IFileSystem.GetFullPathShim \nGetFullPathShim \n Take in a file name with an absolute path, and return the same file name\n but canonicalized with respect to extra path separators (e.g. C:\\\\\\\\foo.txt)\n and \u0027..\u0027 portions","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-ifilesystem.html#GetLastWriteTimeShim","title":"IFileSystem.GetLastWriteTimeShim","content":"IFileSystem.GetLastWriteTimeShim \nGetLastWriteTimeShim \n Utc time of the last modification","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-ifilesystem.html#GetTempPathShim","title":"IFileSystem.GetTempPathShim","content":"IFileSystem.GetTempPathShim \nGetTempPathShim \n A shim over Path.GetTempPath","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-ifilesystem.html#IsInvalidPathShim","title":"IFileSystem.IsInvalidPathShim","content":"IFileSystem.IsInvalidPathShim \nIsInvalidPathShim \n A shim over Path.IsInvalidPath","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-ifilesystem.html#IsPathRootedShim","title":"IFileSystem.IsPathRootedShim","content":"IFileSystem.IsPathRootedShim \nIsPathRootedShim \n A shim over Path.IsPathRooted","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-ifilesystem.html#IsStableFileHeuristic","title":"IFileSystem.IsStableFileHeuristic","content":"IFileSystem.IsStableFileHeuristic \nIsStableFileHeuristic \n Used to determine if a file will not be subject to deletion during the lifetime of a typical client process.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-ifilesystem.html#NormalizePathShim","title":"IFileSystem.NormalizePathShim","content":"IFileSystem.NormalizePathShim \nNormalizePathShim \n Removes relative parts from any full paths","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-ifilesystem.html#OpenFileForReadShim","title":"IFileSystem.OpenFileForReadShim","content":"IFileSystem.OpenFileForReadShim \nOpenFileForReadShim \n Open the file for read, returns ByteMemory, uses either FileStream (for smaller files) or MemoryMappedFile (for potentially big files, such as dlls).","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-ifilesystem.html#OpenFileForWriteShim","title":"IFileSystem.OpenFileForWriteShim","content":"IFileSystem.OpenFileForWriteShim \nOpenFileForWriteShim \n Open the file for writing. Returns a Stream.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-ifilesystem.html#AssemblyLoader","title":"IFileSystem.AssemblyLoader","content":"IFileSystem.AssemblyLoader \nAssemblyLoader \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-ctrlbreakhandlers.html","title":"CtrlBreakHandlers","content":"CtrlBreakHandlers \n \nCtrlBreakHandlers.CtrlBreakClient \nCtrlBreakClient \nCtrlBreakHandlers.CtrlBreakService \nCtrlBreakService","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-ctrlbreakhandlers-ctrlbreakclient.html","title":"CtrlBreakClient","content":"CtrlBreakClient \n \nCtrlBreakClient.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nCtrlBreakClient.Interrupt \nInterrupt","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-ctrlbreakhandlers-ctrlbreakclient.html#\u0060\u0060.ctor\u0060\u0060","title":"CtrlBreakClient.\u0060\u0060.ctor\u0060\u0060","content":"CtrlBreakClient.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-ctrlbreakhandlers-ctrlbreakclient.html#Interrupt","title":"CtrlBreakClient.Interrupt","content":"CtrlBreakClient.Interrupt \nInterrupt \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-ctrlbreakhandlers-ctrlbreakservice.html","title":"CtrlBreakService","content":"CtrlBreakService \n \nCtrlBreakService.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nCtrlBreakService.Interrupt \nInterrupt \nCtrlBreakService.Run \nRun","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-ctrlbreakhandlers-ctrlbreakservice.html#\u0060\u0060.ctor\u0060\u0060","title":"CtrlBreakService.\u0060\u0060.ctor\u0060\u0060","content":"CtrlBreakService.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-ctrlbreakhandlers-ctrlbreakservice.html#Interrupt","title":"CtrlBreakService.Interrupt","content":"CtrlBreakService.Interrupt \nInterrupt \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-ctrlbreakhandlers-ctrlbreakservice.html#Run","title":"CtrlBreakService.Run","content":"CtrlBreakService.Run \nRun \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-fsihelp.html","title":"FsiHelp","content":"FsiHelp \n \nFsiHelp.Logic \nLogic \nFsiHelp.Parser \nParser","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-fsihelp-logic.html","title":"Logic","content":"Logic \n \nLogic.Quoted \nQuoted","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-fsihelp-logic-quoted.html","title":"Quoted","content":"Quoted \n \nQuoted.tryGetHelp \ntryGetHelp \nQuoted.h \nh","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-fsihelp-logic-quoted.html#tryGetHelp","title":"Quoted.tryGetHelp","content":"Quoted.tryGetHelp \ntryGetHelp \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-fsihelp-logic-quoted.html#h","title":"Quoted.h","content":"Quoted.h \nh \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-fsihelp-parser.html","title":"Parser","content":"Parser \n \nParser.Help \nHelp","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-fsihelp-parser-help.html","title":"Help","content":"Help \n \nHelp.ToDisplayString \nToDisplayString \nHelp.Summary \nSummary \nHelp.Remarks \nRemarks \nHelp.Parameters \nParameters \nHelp.Returns \nReturns \nHelp.Exceptions \nExceptions \nHelp.Examples \nExamples \nHelp.FullName \nFullName \nHelp.Assembly \nAssembly","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-fsihelp-parser-help.html#ToDisplayString","title":"Help.ToDisplayString","content":"Help.ToDisplayString \nToDisplayString \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-fsihelp-parser-help.html#Summary","title":"Help.Summary","content":"Help.Summary \nSummary \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-fsihelp-parser-help.html#Remarks","title":"Help.Remarks","content":"Help.Remarks \nRemarks \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-fsihelp-parser-help.html#Parameters","title":"Help.Parameters","content":"Help.Parameters \nParameters \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-fsihelp-parser-help.html#Returns","title":"Help.Returns","content":"Help.Returns \nReturns \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-fsihelp-parser-help.html#Exceptions","title":"Help.Exceptions","content":"Help.Exceptions \nExceptions \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-fsihelp-parser-help.html#Examples","title":"Help.Examples","content":"Help.Examples \nExamples \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-fsihelp-parser-help.html#FullName","title":"Help.FullName","content":"Help.FullName \nFullName \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-fsihelp-parser-help.html#Assembly","title":"Help.Assembly","content":"Help.Assembly \nAssembly \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell.html","title":"Shell","content":"Shell \n \nShell.Settings \nSettings \nShell.CompilerInputStream \nCompilerInputStream \nShell.CompilerOutputStream \nCompilerOutputStream \nShell.EvaluationEventArgs \nEvaluationEventArgs \nShell.FsiBoundValue \nFsiBoundValue \nShell.FsiCompilationException \nFsiCompilationException \nShell.FsiEvaluationSession \nFsiEvaluationSession \nShell.FsiEvaluationSessionHostConfig \nFsiEvaluationSessionHostConfig \nShell.FsiValue \nFsiValue","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-settings.html","title":"Settings","content":"Settings \n A default implementation of the \u0027fsi\u0027 object, used by GetDefaultConfiguration() \nSettings.IEventLoop \nIEventLoop \nSettings.InteractiveSettings \nInteractiveSettings \nSettings.fsi \nfsi","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-settings.html#fsi","title":"Settings.fsi","content":"Settings.fsi \nfsi \n A default implementation of the \u0027fsi\u0027 object, used by GetDefaultConfiguration().  Note this\n is a different object to FSharp.Compiler.Interactive.Settings.fsi in FSharp.Compiler.Interactive.Settings.dll,\n which can be used as an alternative implementation of the interactive settings if passed as a parameter\n to GetDefaultConfiguration(fsiObj).","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-settings-ieventloop.html","title":"IEventLoop","content":"IEventLoop \n\u003Cpre\u003EAn event loop used by the currently executing F# Interactive session to execute code\n in the context of a GUI or another event-based system.\u003C/pre\u003E \nIEventLoop.Invoke \nInvoke \nIEventLoop.Run \nRun \nIEventLoop.ScheduleRestart \nScheduleRestart","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-settings-ieventloop.html#Invoke","title":"IEventLoop.Invoke","content":"IEventLoop.Invoke \nInvoke \nRequest that the given operation be run synchronously on the event loop.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-settings-ieventloop.html#Run","title":"IEventLoop.Run","content":"IEventLoop.Run \nRun \nRun the event loop.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-settings-ieventloop.html#ScheduleRestart","title":"IEventLoop.ScheduleRestart","content":"IEventLoop.ScheduleRestart \nScheduleRestart \nSchedule a restart for the event loop.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-settings-interactivesettings.html","title":"InteractiveSettings","content":"InteractiveSettings \n Operations supported by the currently executing F# Interactive session. \nInteractiveSettings.AddPrintTransformer \nAddPrintTransformer \nInteractiveSettings.AddPrinter \nAddPrinter \nInteractiveSettings.FloatingPointFormat \nFloatingPointFormat \nInteractiveSettings.ShowIEnumerable \nShowIEnumerable \nInteractiveSettings.PrintDepth \nPrintDepth \nInteractiveSettings.PrintWidth \nPrintWidth \nInteractiveSettings.CommandLineArgs \nCommandLineArgs \nInteractiveSettings.EventLoop \nEventLoop \nInteractiveSettings.ShowDeclarationValues \nShowDeclarationValues \nInteractiveSettings.FormatProvider \nFormatProvider \nInteractiveSettings.ShowProperties \nShowProperties \nInteractiveSettings.PrintLength \nPrintLength \nInteractiveSettings.PrintSize \nPrintSize","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-settings-interactivesettings.html#AddPrintTransformer","title":"InteractiveSettings.AddPrintTransformer","content":"InteractiveSettings.AddPrintTransformer \nAddPrintTransformer \nRegister a print transformer that controls the output of the interactive session.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-settings-interactivesettings.html#AddPrinter","title":"InteractiveSettings.AddPrinter","content":"InteractiveSettings.AddPrinter \nAddPrinter \nRegister a printer that controls the output of the interactive session.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-settings-interactivesettings.html#FloatingPointFormat","title":"InteractiveSettings.FloatingPointFormat","content":"InteractiveSettings.FloatingPointFormat \nFloatingPointFormat \nGet or set the floating point format used in the output of the interactive session.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-settings-interactivesettings.html#ShowIEnumerable","title":"InteractiveSettings.ShowIEnumerable","content":"InteractiveSettings.ShowIEnumerable \nShowIEnumerable \nWhen set to \u0027false\u0027, disables the display of sequences in the output of the interactive session.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-settings-interactivesettings.html#PrintDepth","title":"InteractiveSettings.PrintDepth","content":"InteractiveSettings.PrintDepth \nPrintDepth \nGet or set the print depth of the interactive session.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-settings-interactivesettings.html#PrintWidth","title":"InteractiveSettings.PrintWidth","content":"InteractiveSettings.PrintWidth \nPrintWidth \nGet or set the print width of the interactive session.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-settings-interactivesettings.html#CommandLineArgs","title":"InteractiveSettings.CommandLineArgs","content":"InteractiveSettings.CommandLineArgs \nCommandLineArgs \n\u003Cpre\u003EThe command line arguments after ignoring the arguments relevant to the interactive\n environment and replacing the first argument with the name of the last script file,\n if any. Thus \u0027fsi.exe test1.fs test2.fs -- hello goodbye\u0027 will give arguments\n \u0027test2.fs\u0027, \u0027hello\u0027, \u0027goodbye\u0027.  This value will normally be different to those\n returned by System.Environment.GetCommandLineArgs.\u003C/pre\u003E","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-settings-interactivesettings.html#EventLoop","title":"InteractiveSettings.EventLoop","content":"InteractiveSettings.EventLoop \nEventLoop \nGets or sets the current event loop being used to process interactions.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-settings-interactivesettings.html#ShowDeclarationValues","title":"InteractiveSettings.ShowDeclarationValues","content":"InteractiveSettings.ShowDeclarationValues \nShowDeclarationValues \nWhen set to \u0027false\u0027, disables the display of declaration values in the output of the interactive session.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-settings-interactivesettings.html#FormatProvider","title":"InteractiveSettings.FormatProvider","content":"InteractiveSettings.FormatProvider \nFormatProvider \nGet or set the format provider used in the output of the interactive session.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-settings-interactivesettings.html#ShowProperties","title":"InteractiveSettings.ShowProperties","content":"InteractiveSettings.ShowProperties \nShowProperties \nWhen set to \u0027false\u0027, disables the display of properties of evaluated objects in the output of the interactive session.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-settings-interactivesettings.html#PrintLength","title":"InteractiveSettings.PrintLength","content":"InteractiveSettings.PrintLength \nPrintLength \nGet or set the total print length of the interactive session.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-settings-interactivesettings.html#PrintSize","title":"InteractiveSettings.PrintSize","content":"InteractiveSettings.PrintSize \nPrintSize \nGet or set the total print size of the interactive session.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-compilerinputstream.html","title":"CompilerInputStream","content":"CompilerInputStream \n Defines a read-only input stream used to feed content to the hosted F# Interactive dynamic compiler. \nCompilerInputStream.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nCompilerInputStream.Add \nAdd","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-compilerinputstream.html#\u0060\u0060.ctor\u0060\u0060","title":"CompilerInputStream.\u0060\u0060.ctor\u0060\u0060","content":"CompilerInputStream.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-compilerinputstream.html#Add","title":"CompilerInputStream.Add","content":"CompilerInputStream.Add \nAdd \n Feeds content into the stream.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-compileroutputstream.html","title":"CompilerOutputStream","content":"CompilerOutputStream \n Defines a write-only stream used to capture output of the hosted F# Interactive dynamic compiler. \nCompilerOutputStream.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nCompilerOutputStream.Read \nRead","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-compileroutputstream.html#\u0060\u0060.ctor\u0060\u0060","title":"CompilerOutputStream.\u0060\u0060.ctor\u0060\u0060","content":"CompilerOutputStream.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-compileroutputstream.html#Read","title":"CompilerOutputStream.Read","content":"CompilerOutputStream.Read \nRead \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-evaluationeventargs.html","title":"EvaluationEventArgs","content":"EvaluationEventArgs \n \nEvaluationEventArgs.ImplementationDeclaration \nImplementationDeclaration \nEvaluationEventArgs.FsiValue \nFsiValue \nEvaluationEventArgs.Name \nName \nEvaluationEventArgs.Symbol \nSymbol \nEvaluationEventArgs.SymbolUse \nSymbolUse","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-evaluationeventargs.html#ImplementationDeclaration","title":"EvaluationEventArgs.ImplementationDeclaration","content":"EvaluationEventArgs.ImplementationDeclaration \nImplementationDeclaration \n The details of the expression defined","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-evaluationeventargs.html#FsiValue","title":"EvaluationEventArgs.FsiValue","content":"EvaluationEventArgs.FsiValue \nFsiValue \n The value of the symbol defined, if any","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-evaluationeventargs.html#Name","title":"EvaluationEventArgs.Name","content":"EvaluationEventArgs.Name \nName \n The display name of the symbol defined","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-evaluationeventargs.html#Symbol","title":"EvaluationEventArgs.Symbol","content":"EvaluationEventArgs.Symbol \nSymbol \n The symbol defined","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-evaluationeventargs.html#SymbolUse","title":"EvaluationEventArgs.SymbolUse","content":"EvaluationEventArgs.SymbolUse \nSymbolUse \n The FSharpSymbolUse for the symbol defined","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsiboundvalue.html","title":"FsiBoundValue","content":"FsiBoundValue \n Represents an evaluated F# value that is bound to an identifier \nFsiBoundValue.Name \nName \nFsiBoundValue.Value \nValue","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsiboundvalue.html#Name","title":"FsiBoundValue.Name","content":"FsiBoundValue.Name \nName \n The identifier of the value","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsiboundvalue.html#Value","title":"FsiBoundValue.Value","content":"FsiBoundValue.Value \nValue \n The evaluated F# value","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsicompilationexception.html","title":"FsiCompilationException","content":"FsiCompilationException \n Thrown when there was an error compiling the given code in FSI. \nFsiCompilationException.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nFsiCompilationException.ErrorInfos \nErrorInfos","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsicompilationexception.html#\u0060\u0060.ctor\u0060\u0060","title":"FsiCompilationException.\u0060\u0060.ctor\u0060\u0060","content":"FsiCompilationException.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsicompilationexception.html#ErrorInfos","title":"FsiCompilationException.ErrorInfos","content":"FsiCompilationException.ErrorInfos \nErrorInfos \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsession.html","title":"FsiEvaluationSession","content":"FsiEvaluationSession \n Represents an F# Interactive evaluation session. \nFsiEvaluationSession.AddBoundValue \nAddBoundValue \nFsiEvaluationSession.EvalExpression \nEvalExpression \nFsiEvaluationSession.EvalExpression \nEvalExpression \nFsiEvaluationSession.EvalExpressionNonThrowing \nEvalExpressionNonThrowing \nFsiEvaluationSession.EvalExpressionNonThrowing \nEvalExpressionNonThrowing \nFsiEvaluationSession.EvalInteraction \nEvalInteraction \nFsiEvaluationSession.EvalInteraction \nEvalInteraction \nFsiEvaluationSession.EvalInteractionNonThrowing \nEvalInteractionNonThrowing \nFsiEvaluationSession.EvalInteractionNonThrowing \nEvalInteractionNonThrowing \nFsiEvaluationSession.EvalScript \nEvalScript \nFsiEvaluationSession.EvalScriptNonThrowing \nEvalScriptNonThrowing \nFsiEvaluationSession.FormatValue \nFormatValue \nFsiEvaluationSession.GetBoundValues \nGetBoundValues \nFsiEvaluationSession.GetCompletions \nGetCompletions \nFsiEvaluationSession.Interrupt \nInterrupt \nFsiEvaluationSession.ParseAndCheckInteraction \nParseAndCheckInteraction \nFsiEvaluationSession.ReportUnhandledException \nReportUnhandledException \nFsiEvaluationSession.Run \nRun \nFsiEvaluationSession.TryFindBoundValue \nTryFindBoundValue \nFsiEvaluationSession.DynamicAssemblies \nDynamicAssemblies \nFsiEvaluationSession.LCID \nLCID \nFsiEvaluationSession.CurrentPartialAssemblySignature \nCurrentPartialAssemblySignature \nFsiEvaluationSession.ValueBound \nValueBound \nFsiEvaluationSession.InteractiveChecker \nInteractiveChecker \nFsiEvaluationSession.IsGui \nIsGui \nFsiEvaluationSession.PartialAssemblySignatureUpdated \nPartialAssemblySignatureUpdated \nFsiEvaluationSession.Create \nCreate \nFsiEvaluationSession.GetDefaultConfiguration \nGetDefaultConfiguration \nFsiEvaluationSession.GetDefaultConfiguration \nGetDefaultConfiguration \nFsiEvaluationSession.GetDefaultConfiguration \nGetDefaultConfiguration","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsession.html#AddBoundValue","title":"FsiEvaluationSession.AddBoundValue","content":"FsiEvaluationSession.AddBoundValue \nAddBoundValue \n Creates a root-level value with the given name and .NET object.\n If the .NET object contains types from assemblies that are not referenced in the interactive session, it will try to implicitly resolve them by default configuration.\n Name must be a valid identifier.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsession.html#EvalExpression","title":"FsiEvaluationSession.EvalExpression","content":"FsiEvaluationSession.EvalExpression \nEvalExpression \n Execute the code as if it had been entered as one or more interactions, with an\n implicit termination at the end of the input. Stop on first error, discarding the rest\n of the input. Errors are sent to the output writer. Parsing is performed on the current thread, and execution is performed\n synchronously on the \u0027main\u0027 thread.\n\n Due to a current limitation, it is not fully thread-safe to run this operation concurrently with evaluation triggered\n by input from \u0027stdin\u0027.\n The scriptFileName parameter is used to report errors including this file name.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsession.html#EvalExpression","title":"FsiEvaluationSession.EvalExpression","content":"FsiEvaluationSession.EvalExpression \nEvalExpression \n Execute the code as if it had been entered as one or more interactions, with an\n implicit termination at the end of the input. Stop on first error, discarding the rest\n of the input. Errors are sent to the output writer. Parsing is performed on the current thread, and execution is performed\n synchronously on the \u0027main\u0027 thread.\n\n Due to a current limitation, it is not fully thread-safe to run this operation concurrently with evaluation triggered\n by input from \u0027stdin\u0027.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsession.html#EvalExpressionNonThrowing","title":"FsiEvaluationSession.EvalExpressionNonThrowing","content":"FsiEvaluationSession.EvalExpressionNonThrowing \nEvalExpressionNonThrowing \n Execute the code as if it had been entered as one or more interactions, with an\n implicit termination at the end of the input. Stop on first error, discarding the rest\n of the input. Errors and warnings are collected apart from any exception arising from execution\n which is returned via a Choice. Parsing is performed on the current thread, and execution is performed\n synchronously on the \u0027main\u0027 thread.\n\n Due to a current limitation, it is not fully thread-safe to run this operation concurrently with evaluation triggered\n by input from \u0027stdin\u0027.\n The scriptFileName parameter is used to report errors including this file name.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsession.html#EvalExpressionNonThrowing","title":"FsiEvaluationSession.EvalExpressionNonThrowing","content":"FsiEvaluationSession.EvalExpressionNonThrowing \nEvalExpressionNonThrowing \n Execute the code as if it had been entered as one or more interactions, with an\n implicit termination at the end of the input. Stop on first error, discarding the rest\n of the input. Errors and warnings are collected apart from any exception arising from execution\n which is returned via a Choice. Parsing is performed on the current thread, and execution is performed\n synchronously on the \u0027main\u0027 thread.\n\n Due to a current limitation, it is not fully thread-safe to run this operation concurrently with evaluation triggered\n by input from \u0027stdin\u0027.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsession.html#EvalInteraction","title":"FsiEvaluationSession.EvalInteraction","content":"FsiEvaluationSession.EvalInteraction \nEvalInteraction \n Execute the code as if it had been entered as one or more interactions, with an\n implicit termination at the end of the input. Stop on first error, discarding the rest\n of the input. Errors are sent to the output writer, a \u0027true\u0027 return value indicates there\n were no errors overall. Execution is performed on the \u0027Run()\u0027 thread.\n\n Due to a current limitation, it is not fully thread-safe to run this operation concurrently with evaluation triggered\n by input from \u0027stdin\u0027.\n The scriptFileName parameter is used to report errors including this file name.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsession.html#EvalInteraction","title":"FsiEvaluationSession.EvalInteraction","content":"FsiEvaluationSession.EvalInteraction \nEvalInteraction \n Execute the code as if it had been entered as one or more interactions, with an\n implicit termination at the end of the input. Stop on first error, discarding the rest\n of the input. Errors are sent to the output writer, a \u0027true\u0027 return value indicates there\n were no errors overall. Execution is performed on the \u0027Run()\u0027 thread.\n\n Due to a current limitation, it is not fully thread-safe to run this operation concurrently with evaluation triggered\n by input from \u0027stdin\u0027.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsession.html#EvalInteractionNonThrowing","title":"FsiEvaluationSession.EvalInteractionNonThrowing","content":"FsiEvaluationSession.EvalInteractionNonThrowing \nEvalInteractionNonThrowing \n Execute the code as if it had been entered as one or more interactions, with an\n implicit termination at the end of the input. Stop on first error, discarding the rest\n of the input. Errors and warnings are collected apart from any exception arising from execution\n which is returned via a Choice. Execution is performed on the \u0027Run()\u0027 thread.\n\n Due to a current limitation, it is not fully thread-safe to run this operation concurrently with evaluation triggered\n by input from \u0027stdin\u0027.\n The scriptFileName parameter is used to report errors including this file name.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsession.html#EvalInteractionNonThrowing","title":"FsiEvaluationSession.EvalInteractionNonThrowing","content":"FsiEvaluationSession.EvalInteractionNonThrowing \nEvalInteractionNonThrowing \n Execute the code as if it had been entered as one or more interactions, with an\n implicit termination at the end of the input. Stop on first error, discarding the rest\n of the input. Errors and warnings are collected apart from any exception arising from execution\n which is returned via a Choice. Execution is performed on the \u0027Run()\u0027 thread.\n\n Due to a current limitation, it is not fully thread-safe to run this operation concurrently with evaluation triggered\n by input from \u0027stdin\u0027.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsession.html#EvalScript","title":"FsiEvaluationSession.EvalScript","content":"FsiEvaluationSession.EvalScript \nEvalScript \n Execute the given script. Stop on first error, discarding the rest\n of the script. Errors are sent to the output writer, a \u0027true\u0027 return value indicates there\n were no errors overall. Execution is performed on the \u0027Run()\u0027 thread.\n\n Due to a current limitation, it is not fully thread-safe to run this operation concurrently with evaluation triggered\n by input from \u0027stdin\u0027.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsession.html#EvalScriptNonThrowing","title":"FsiEvaluationSession.EvalScriptNonThrowing","content":"FsiEvaluationSession.EvalScriptNonThrowing \nEvalScriptNonThrowing \n Execute the given script. Stop on first error, discarding the rest\n of the script. Errors and warnings are collected apart from any exception arising from execution\n which is returned via a Choice. Execution is performed on the \u0027Run()\u0027 thread.\n\n Due to a current limitation, it is not fully thread-safe to run this operation concurrently with evaluation triggered\n by input from \u0027stdin\u0027.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsession.html#FormatValue","title":"FsiEvaluationSession.FormatValue","content":"FsiEvaluationSession.FormatValue \nFormatValue \n Format a value to a string using the current PrintDepth, PrintLength etc settings provided by the active fsi configuration object","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsession.html#GetBoundValues","title":"FsiEvaluationSession.GetBoundValues","content":"FsiEvaluationSession.GetBoundValues \nGetBoundValues \n Gets the root-level values that are bound to an identifier","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsession.html#GetCompletions","title":"FsiEvaluationSession.GetCompletions","content":"FsiEvaluationSession.GetCompletions \nGetCompletions \n A host calls this to get the completions for a long identifier, e.g. in the console\n\n Due to a current limitation, it is not fully thread-safe to run this operation concurrently with evaluation triggered\n by input from \u0027stdin\u0027.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsession.html#Interrupt","title":"FsiEvaluationSession.Interrupt","content":"FsiEvaluationSession.Interrupt \nInterrupt \n A host calls this to request an interrupt on the evaluation thread.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsession.html#ParseAndCheckInteraction","title":"FsiEvaluationSession.ParseAndCheckInteraction","content":"FsiEvaluationSession.ParseAndCheckInteraction \nParseAndCheckInteraction \n Typecheck the given script fragment in the type checking context implied by the current state\n of F# Interactive. The results can be used to access intellisense, perform resolutions,\n check brace matching and other information.\n\n Operations may be run concurrently with other requests to the InteractiveChecker.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsession.html#ReportUnhandledException","title":"FsiEvaluationSession.ReportUnhandledException","content":"FsiEvaluationSession.ReportUnhandledException \nReportUnhandledException \n A host calls this to report an unhandled exception in a standard way, e.g. an exception on the GUI thread gets printed to stderr","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsession.html#Run","title":"FsiEvaluationSession.Run","content":"FsiEvaluationSession.Run \nRun \n\u003Cpre\u003E Load the dummy interaction, load the initial files, and,\n if interacting, start the background thread to read the standard input.\n\n Performs these steps:\n    - Load the dummy interaction, if any\n    - Set up exception handling, if any\n    - Load the initial files, if any\n    - Start the background thread to read the standard input, if any\n    - Sit in the GUI event loop indefinitely, if needed\u003C/pre\u003E","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsession.html#TryFindBoundValue","title":"FsiEvaluationSession.TryFindBoundValue","content":"FsiEvaluationSession.TryFindBoundValue \nTryFindBoundValue \n Tries to find a root-level value that is bound to the given identifier","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsession.html#DynamicAssemblies","title":"FsiEvaluationSession.DynamicAssemblies","content":"FsiEvaluationSession.DynamicAssemblies \nDynamicAssemblies \n Get all the dynamically generated assemblies","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsession.html#LCID","title":"FsiEvaluationSession.LCID","content":"FsiEvaluationSession.LCID \nLCID \n A host calls this to get the active language ID if provided by fsi-server-lcid","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsession.html#CurrentPartialAssemblySignature","title":"FsiEvaluationSession.CurrentPartialAssemblySignature","content":"FsiEvaluationSession.CurrentPartialAssemblySignature \nCurrentPartialAssemblySignature \n Get a handle to the resolved view of the current signature of the incrementally generated assembly.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsession.html#ValueBound","title":"FsiEvaluationSession.ValueBound","content":"FsiEvaluationSession.ValueBound \nValueBound \n Event fires when a root-level value is bound to an identifier, e.g., via \u0060let x = ...\u0060.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsession.html#InteractiveChecker","title":"FsiEvaluationSession.InteractiveChecker","content":"FsiEvaluationSession.InteractiveChecker \nInteractiveChecker \n The single, global interactive checker to use in conjunction with other operations\n on the FsiEvaluationSession.\n\n If you are using an FsiEvaluationSession in this process, you should only use this InteractiveChecker\n for additional checking operations.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsession.html#IsGui","title":"FsiEvaluationSession.IsGui","content":"FsiEvaluationSession.IsGui \nIsGui \n A host calls this to determine if the --gui parameter is active","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsession.html#PartialAssemblySignatureUpdated","title":"FsiEvaluationSession.PartialAssemblySignatureUpdated","content":"FsiEvaluationSession.PartialAssemblySignatureUpdated \nPartialAssemblySignatureUpdated \n Raised when an interaction is successfully typechecked and executed, resulting in an update to the\n type checking state.\n\n This event is triggered after parsing and checking, either via input from \u0027stdin\u0027, or via a call to EvalInteraction.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsession.html#Create","title":"FsiEvaluationSession.Create","content":"FsiEvaluationSession.Create \nCreate \nCreate an FsiEvaluationSession, reading from the given text input, writing to the given text output and error writers","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsession.html#GetDefaultConfiguration","title":"FsiEvaluationSession.GetDefaultConfiguration","content":"FsiEvaluationSession.GetDefaultConfiguration \nGetDefaultConfiguration \n Get a configuration that uses a private inbuilt implementation of the \u0027fsi\u0027 object and does not\n implicitly reference FSharp.Compiler.Interactive.Settings.dll.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsession.html#GetDefaultConfiguration","title":"FsiEvaluationSession.GetDefaultConfiguration","content":"FsiEvaluationSession.GetDefaultConfiguration \nGetDefaultConfiguration \n Get a configuration that uses the \u0027fsi\u0027 object (normally from FSharp.Compiler.Interactive.Settings.dll,\n an object from another DLL with identical characteristics) to provide an implementation of the configuration.\n FSharp.Compiler.Interactive.Settings.dll  is referenced by default.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsession.html#GetDefaultConfiguration","title":"FsiEvaluationSession.GetDefaultConfiguration","content":"FsiEvaluationSession.GetDefaultConfiguration \nGetDefaultConfiguration \n Get a configuration that uses the \u0027fsi\u0027 object (normally from FSharp.Compiler.Interactive.Settings.dll,\n an object from another DLL with identical characteristics) to provide an implementation of the configuration.\n The flag indicates if FSharp.Compiler.Interactive.Settings.dll  is referenced by default.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsessionhostconfig.html","title":"FsiEvaluationSessionHostConfig","content":"FsiEvaluationSessionHostConfig \n \nFsiEvaluationSessionHostConfig.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nFsiEvaluationSessionHostConfig.EventLoopInvoke \nEventLoopInvoke \nFsiEvaluationSessionHostConfig.EventLoopRun \nEventLoopRun \nFsiEvaluationSessionHostConfig.EventLoopScheduleRestart \nEventLoopScheduleRestart \nFsiEvaluationSessionHostConfig.GetOptionalConsoleReadLine \nGetOptionalConsoleReadLine \nFsiEvaluationSessionHostConfig.ReportUserCommandLineArgs \nReportUserCommandLineArgs \nFsiEvaluationSessionHostConfig.StartServer \nStartServer \nFsiEvaluationSessionHostConfig.FloatingPointFormat \nFloatingPointFormat \nFsiEvaluationSessionHostConfig.ShowIEnumerable \nShowIEnumerable \nFsiEvaluationSessionHostConfig.OnEvaluation \nOnEvaluation \nFsiEvaluationSessionHostConfig.PrintDepth \nPrintDepth \nFsiEvaluationSessionHostConfig.PrintWidth \nPrintWidth \nFsiEvaluationSessionHostConfig.ShowDeclarationValues \nShowDeclarationValues \nFsiEvaluationSessionHostConfig.FormatProvider \nFormatProvider \nFsiEvaluationSessionHostConfig.ShowProperties \nShowProperties \nFsiEvaluationSessionHostConfig.PrintLength \nPrintLength \nFsiEvaluationSessionHostConfig.AddedPrinters \nAddedPrinters \nFsiEvaluationSessionHostConfig.UseFsiAuxLib \nUseFsiAuxLib \nFsiEvaluationSessionHostConfig.PrintSize \nPrintSize","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsessionhostconfig.html#\u0060\u0060.ctor\u0060\u0060","title":"FsiEvaluationSessionHostConfig.\u0060\u0060.ctor\u0060\u0060","content":"FsiEvaluationSessionHostConfig.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsessionhostconfig.html#EventLoopInvoke","title":"FsiEvaluationSessionHostConfig.EventLoopInvoke","content":"FsiEvaluationSessionHostConfig.EventLoopInvoke \nEventLoopInvoke \n Request that the given operation be run synchronously on the event loop.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsessionhostconfig.html#EventLoopRun","title":"FsiEvaluationSessionHostConfig.EventLoopRun","content":"FsiEvaluationSessionHostConfig.EventLoopRun \nEventLoopRun \n Called by the evaluation session to ask the host to enter a dispatch loop like Application.Run().\n Only called if --gui option is used (which is the default).\n Gets called towards the end of startup and every time a ThreadAbort escaped to the backup driver loop.\n Return true if a \u0027restart\u0027 is required, which is a bit meaningless.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsessionhostconfig.html#EventLoopScheduleRestart","title":"FsiEvaluationSessionHostConfig.EventLoopScheduleRestart","content":"FsiEvaluationSessionHostConfig.EventLoopScheduleRestart \nEventLoopScheduleRestart \n Schedule a restart for the event loop.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsessionhostconfig.html#GetOptionalConsoleReadLine","title":"FsiEvaluationSessionHostConfig.GetOptionalConsoleReadLine","content":"FsiEvaluationSessionHostConfig.GetOptionalConsoleReadLine \nGetOptionalConsoleReadLine \n\u003Cp class=\u0027fsdocs-para\u0027\u003EIndicate a special console \u0022readline\u0022 reader for the evaluation session, if any.\u003C/p\u003E\u003Cp class=\u0027fsdocs-para\u0027\u003E\u00A0\u003C/p\u003E\u003Cp class=\u0027fsdocs-para\u0027\u003EA \u0022console\u0022 gets used if --readline is specified (the default on Windows \u002B .NET); and --fsi-server is  not\n given (always combine with --readline-), and OptionalConsoleReadLine is given.\n When a console is used, special rules apply to \u0022peekahead\u0022, which allows early typing on the console.\n Peekahead happens if --peekahead- is not specified (the default).\n In this case, a prompt is printed early, a background thread is created and\n the OptionalConsoleReadLine is used to read the first line.\n If a console is not used, then inReader.Peek() is called early instead.\n \u003C/p\u003E\u003Cp class=\u0027fsdocs-para\u0027\u003E\u00A0\u003C/p\u003E\u003Cp class=\u0027fsdocs-para\u0027\u003EFurther lines are read using OptionalConsoleReadLine().\n If not provided, lines are read using inReader.ReadLine().\u003C/p\u003E\u003Cp class=\u0027fsdocs-para\u0027\u003E\u00A0\u003C/p\u003E","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsessionhostconfig.html#ReportUserCommandLineArgs","title":"FsiEvaluationSessionHostConfig.ReportUserCommandLineArgs","content":"FsiEvaluationSessionHostConfig.ReportUserCommandLineArgs \nReportUserCommandLineArgs \n The evaluation session calls this to report the preferred view of the command line arguments after\n stripping things like \u0022/use:file.fsx\u0022, \u0022-r:Foo.dll\u0022 etc.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsessionhostconfig.html#StartServer","title":"FsiEvaluationSessionHostConfig.StartServer","content":"FsiEvaluationSessionHostConfig.StartServer \nStartServer \n The evaluation session calls this at an appropriate point in the startup phase if the --fsi-server parameter was given","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsessionhostconfig.html#FloatingPointFormat","title":"FsiEvaluationSessionHostConfig.FloatingPointFormat","content":"FsiEvaluationSessionHostConfig.FloatingPointFormat \nFloatingPointFormat \n Called by the evaluation session to ask the host for parameters to format text for output","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsessionhostconfig.html#ShowIEnumerable","title":"FsiEvaluationSessionHostConfig.ShowIEnumerable","content":"FsiEvaluationSessionHostConfig.ShowIEnumerable \nShowIEnumerable \n Called by the evaluation session to ask the host for parameters to format text for output","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsessionhostconfig.html#OnEvaluation","title":"FsiEvaluationSessionHostConfig.OnEvaluation","content":"FsiEvaluationSessionHostConfig.OnEvaluation \nOnEvaluation \n Hook for listening for evaluation bindings","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsessionhostconfig.html#PrintDepth","title":"FsiEvaluationSessionHostConfig.PrintDepth","content":"FsiEvaluationSessionHostConfig.PrintDepth \nPrintDepth \n Called by the evaluation session to ask the host for parameters to format text for output","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsessionhostconfig.html#PrintWidth","title":"FsiEvaluationSessionHostConfig.PrintWidth","content":"FsiEvaluationSessionHostConfig.PrintWidth \nPrintWidth \n Called by the evaluation session to ask the host for parameters to format text for output","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsessionhostconfig.html#ShowDeclarationValues","title":"FsiEvaluationSessionHostConfig.ShowDeclarationValues","content":"FsiEvaluationSessionHostConfig.ShowDeclarationValues \nShowDeclarationValues \n Called by the evaluation session to ask the host for parameters to format text for output","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsessionhostconfig.html#FormatProvider","title":"FsiEvaluationSessionHostConfig.FormatProvider","content":"FsiEvaluationSessionHostConfig.FormatProvider \nFormatProvider \n Called by the evaluation session to ask the host for parameters to format text for output","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsessionhostconfig.html#ShowProperties","title":"FsiEvaluationSessionHostConfig.ShowProperties","content":"FsiEvaluationSessionHostConfig.ShowProperties \nShowProperties \n Called by the evaluation session to ask the host for parameters to format text for output","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsessionhostconfig.html#PrintLength","title":"FsiEvaluationSessionHostConfig.PrintLength","content":"FsiEvaluationSessionHostConfig.PrintLength \nPrintLength \n Called by the evaluation session to ask the host for parameters to format text for output","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsessionhostconfig.html#AddedPrinters","title":"FsiEvaluationSessionHostConfig.AddedPrinters","content":"FsiEvaluationSessionHostConfig.AddedPrinters \nAddedPrinters \n Called by the evaluation session to ask the host for parameters to format text for output","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsessionhostconfig.html#UseFsiAuxLib","title":"FsiEvaluationSessionHostConfig.UseFsiAuxLib","content":"FsiEvaluationSessionHostConfig.UseFsiAuxLib \nUseFsiAuxLib \n Implicitly reference FSharp.Compiler.Interactive.Settings.dll","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsessionhostconfig.html#PrintSize","title":"FsiEvaluationSessionHostConfig.PrintSize","content":"FsiEvaluationSessionHostConfig.PrintSize \nPrintSize \n Called by the evaluation session to ask the host for parameters to format text for output","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsivalue.html","title":"FsiValue","content":"FsiValue \n Represents an evaluated F# value \nFsiValue.ReflectionValue \nReflectionValue \nFsiValue.FSharpType \nFSharpType \nFsiValue.ReflectionType \nReflectionType","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsivalue.html#ReflectionValue","title":"FsiValue.ReflectionValue","content":"FsiValue.ReflectionValue \nReflectionValue \n The value, as an object","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsivalue.html#FSharpType","title":"FsiValue.FSharpType","content":"FsiValue.FSharpType \nFSharpType \n The type of the value, from the point of view of the F# type system","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsivalue.html#ReflectionType","title":"FsiValue.ReflectionType","content":"FsiValue.ReflectionType \nReflectionType \n The type of the value, from the point of view of the .NET type system","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html","title":"FSharpExprPatterns","content":"FSharpExprPatterns \n A collection of active patterns to analyze expressions \nFSharpExprPatterns.(|Value|_|) \n(|Value|_|) \nFSharpExprPatterns.(|Application|_|) \n(|Application|_|) \nFSharpExprPatterns.(|TypeLambda|_|) \n(|TypeLambda|_|) \nFSharpExprPatterns.(|DecisionTree|_|) \n(|DecisionTree|_|) \nFSharpExprPatterns.(|DecisionTreeSuccess|_|) \n(|DecisionTreeSuccess|_|) \nFSharpExprPatterns.(|Lambda|_|) \n(|Lambda|_|) \nFSharpExprPatterns.(|IfThenElse|_|) \n(|IfThenElse|_|) \nFSharpExprPatterns.(|Let|_|) \n(|Let|_|) \nFSharpExprPatterns.(|Call|_|) \n(|Call|_|) \nFSharpExprPatterns.(|CallWithWitnesses|_|) \n(|CallWithWitnesses|_|) \nFSharpExprPatterns.(|NewObject|_|) \n(|NewObject|_|) \nFSharpExprPatterns.(|ThisValue|_|) \n(|ThisValue|_|) \nFSharpExprPatterns.(|BaseValue|_|) \n(|BaseValue|_|) \nFSharpExprPatterns.(|Quote|_|) \n(|Quote|_|) \nFSharpExprPatterns.(|LetRec|_|) \n(|LetRec|_|) \nFSharpExprPatterns.(|NewRecord|_|) \n(|NewRecord|_|) \nFSharpExprPatterns.(|NewAnonRecord|_|) \n(|NewAnonRecord|_|) \nFSharpExprPatterns.(|AnonRecordGet|_|) \n(|AnonRecordGet|_|) \nFSharpExprPatterns.(|FSharpFieldGet|_|) \n(|FSharpFieldGet|_|) \nFSharpExprPatterns.(|FSharpFieldSet|_|) \n(|FSharpFieldSet|_|) \nFSharpExprPatterns.(|NewUnionCase|_|) \n(|NewUnionCase|_|) \nFSharpExprPatterns.(|UnionCaseGet|_|) \n(|UnionCaseGet|_|) \nFSharpExprPatterns.(|UnionCaseSet|_|) \n(|UnionCaseSet|_|) \nFSharpExprPatterns.(|UnionCaseTag|_|) \n(|UnionCaseTag|_|) \nFSharpExprPatterns.(|UnionCaseTest|_|) \n(|UnionCaseTest|_|) \nFSharpExprPatterns.(|NewTuple|_|) \n(|NewTuple|_|) \nFSharpExprPatterns.(|TupleGet|_|) \n(|TupleGet|_|) \nFSharpExprPatterns.(|Coerce|_|) \n(|Coerce|_|) \nFSharpExprPatterns.(|NewArray|_|) \n(|NewArray|_|) \nFSharpExprPatterns.(|TypeTest|_|) \n(|TypeTest|_|) \nFSharpExprPatterns.(|AddressSet|_|) \n(|AddressSet|_|) \nFSharpExprPatterns.(|ValueSet|_|) \n(|ValueSet|_|) \nFSharpExprPatterns.(|DefaultValue|_|) \n(|DefaultValue|_|) \nFSharpExprPatterns.(|Const|_|) \n(|Const|_|) \nFSharpExprPatterns.(|AddressOf|_|) \n(|AddressOf|_|) \nFSharpExprPatterns.(|Sequential|_|) \n(|Sequential|_|) \nFSharpExprPatterns.(|DebugPoint|_|) \n(|DebugPoint|_|) \nFSharpExprPatterns.(|FastIntegerForLoop|_|) \n(|FastIntegerForLoop|_|) \nFSharpExprPatterns.(|WhileLoop|_|) \n(|WhileLoop|_|) \nFSharpExprPatterns.(|TryFinally|_|) \n(|TryFinally|_|) \nFSharpExprPatterns.(|TryWith|_|) \n(|TryWith|_|) \nFSharpExprPatterns.(|NewDelegate|_|) \n(|NewDelegate|_|) \nFSharpExprPatterns.(|ILAsm|_|) \n(|ILAsm|_|) \nFSharpExprPatterns.(|ILFieldGet|_|) \n(|ILFieldGet|_|) \nFSharpExprPatterns.(|ILFieldSet|_|) \n(|ILFieldSet|_|) \nFSharpExprPatterns.(|ObjectExpr|_|) \n(|ObjectExpr|_|) \nFSharpExprPatterns.(|TraitCall|_|) \n(|TraitCall|_|) \nFSharpExprPatterns.(|WitnessArg|_|) \n(|WitnessArg|_|)","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#(|Value|_|)","title":"FSharpExprPatterns.(|Value|_|)","content":"FSharpExprPatterns.(|Value|_|) \n(|Value|_|) \n Matches expressions which are uses of values","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#(|Application|_|)","title":"FSharpExprPatterns.(|Application|_|)","content":"FSharpExprPatterns.(|Application|_|) \n(|Application|_|) \n Matches expressions which are the application of function values","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#(|TypeLambda|_|)","title":"FSharpExprPatterns.(|TypeLambda|_|)","content":"FSharpExprPatterns.(|TypeLambda|_|) \n(|TypeLambda|_|) \n Matches expressions which are type abstractions","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#(|DecisionTree|_|)","title":"FSharpExprPatterns.(|DecisionTree|_|)","content":"FSharpExprPatterns.(|DecisionTree|_|) \n(|DecisionTree|_|) \n Matches expressions with a decision expression, each branch of which ends in DecisionTreeSuccess passing control and values to one of the targets.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#(|DecisionTreeSuccess|_|)","title":"FSharpExprPatterns.(|DecisionTreeSuccess|_|)","content":"FSharpExprPatterns.(|DecisionTreeSuccess|_|) \n(|DecisionTreeSuccess|_|) \n Special expressions at the end of a conditional decision structure in the decision expression node of a DecisionTree .\n The given expressions are passed as values to the decision tree target.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#(|Lambda|_|)","title":"FSharpExprPatterns.(|Lambda|_|)","content":"FSharpExprPatterns.(|Lambda|_|) \n(|Lambda|_|) \n Matches expressions which are lambda abstractions","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#(|IfThenElse|_|)","title":"FSharpExprPatterns.(|IfThenElse|_|)","content":"FSharpExprPatterns.(|IfThenElse|_|) \n(|IfThenElse|_|) \n Matches expressions which are conditionals","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#(|Let|_|)","title":"FSharpExprPatterns.(|Let|_|)","content":"FSharpExprPatterns.(|Let|_|) \n(|Let|_|) \n Matches expressions which are let definitions","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#(|Call|_|)","title":"FSharpExprPatterns.(|Call|_|)","content":"FSharpExprPatterns.(|Call|_|) \n(|Call|_|) \n Matches expressions which are calls to members or module-defined functions. When calling curried functions and members the\n arguments are collapsed to a single collection of arguments, as done in the compiled version of these.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#(|CallWithWitnesses|_|)","title":"FSharpExprPatterns.(|CallWithWitnesses|_|)","content":"FSharpExprPatterns.(|CallWithWitnesses|_|) \n(|CallWithWitnesses|_|) \n Like Call but also indicates witness arguments","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#(|NewObject|_|)","title":"FSharpExprPatterns.(|NewObject|_|)","content":"FSharpExprPatterns.(|NewObject|_|) \n(|NewObject|_|) \n Matches expressions which are calls to object constructors","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#(|ThisValue|_|)","title":"FSharpExprPatterns.(|ThisValue|_|)","content":"FSharpExprPatterns.(|ThisValue|_|) \n(|ThisValue|_|) \n Matches expressions which are uses of the \u0027this\u0027 value","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#(|BaseValue|_|)","title":"FSharpExprPatterns.(|BaseValue|_|)","content":"FSharpExprPatterns.(|BaseValue|_|) \n(|BaseValue|_|) \n Matches expressions which are uses of the \u0027base\u0027 value","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#(|Quote|_|)","title":"FSharpExprPatterns.(|Quote|_|)","content":"FSharpExprPatterns.(|Quote|_|) \n(|Quote|_|) \n Matches expressions which are quotation literals","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#(|LetRec|_|)","title":"FSharpExprPatterns.(|LetRec|_|)","content":"FSharpExprPatterns.(|LetRec|_|) \n(|LetRec|_|) \n Matches expressions which are let-rec definitions","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#(|NewRecord|_|)","title":"FSharpExprPatterns.(|NewRecord|_|)","content":"FSharpExprPatterns.(|NewRecord|_|) \n(|NewRecord|_|) \n Matches record expressions","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#(|NewAnonRecord|_|)","title":"FSharpExprPatterns.(|NewAnonRecord|_|)","content":"FSharpExprPatterns.(|NewAnonRecord|_|) \n(|NewAnonRecord|_|) \n Matches anonymous record expressions","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#(|AnonRecordGet|_|)","title":"FSharpExprPatterns.(|AnonRecordGet|_|)","content":"FSharpExprPatterns.(|AnonRecordGet|_|) \n(|AnonRecordGet|_|) \n Matches expressions getting a field from an anonymous record. The integer represents the\n index into the sorted fields of the anonymous record.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#(|FSharpFieldGet|_|)","title":"FSharpExprPatterns.(|FSharpFieldGet|_|)","content":"FSharpExprPatterns.(|FSharpFieldGet|_|) \n(|FSharpFieldGet|_|) \n Matches expressions which get a field from a record or class","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#(|FSharpFieldSet|_|)","title":"FSharpExprPatterns.(|FSharpFieldSet|_|)","content":"FSharpExprPatterns.(|FSharpFieldSet|_|) \n(|FSharpFieldSet|_|) \n Matches expressions which set a field in a record or class","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#(|NewUnionCase|_|)","title":"FSharpExprPatterns.(|NewUnionCase|_|)","content":"FSharpExprPatterns.(|NewUnionCase|_|) \n(|NewUnionCase|_|) \n Matches expressions which create an object corresponding to a union case","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#(|UnionCaseGet|_|)","title":"FSharpExprPatterns.(|UnionCaseGet|_|)","content":"FSharpExprPatterns.(|UnionCaseGet|_|) \n(|UnionCaseGet|_|) \n Matches expressions which get a field from a union case","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#(|UnionCaseSet|_|)","title":"FSharpExprPatterns.(|UnionCaseSet|_|)","content":"FSharpExprPatterns.(|UnionCaseSet|_|) \n(|UnionCaseSet|_|) \n Matches expressions which set a field from a union case (only used in FSharp.Core itself)","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#(|UnionCaseTag|_|)","title":"FSharpExprPatterns.(|UnionCaseTag|_|)","content":"FSharpExprPatterns.(|UnionCaseTag|_|) \n(|UnionCaseTag|_|) \n Matches expressions which gets the tag for a union case","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#(|UnionCaseTest|_|)","title":"FSharpExprPatterns.(|UnionCaseTest|_|)","content":"FSharpExprPatterns.(|UnionCaseTest|_|) \n(|UnionCaseTest|_|) \n Matches expressions which test if an expression corresponds to a particular union case","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#(|NewTuple|_|)","title":"FSharpExprPatterns.(|NewTuple|_|)","content":"FSharpExprPatterns.(|NewTuple|_|) \n(|NewTuple|_|) \n Matches tuple expressions","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#(|TupleGet|_|)","title":"FSharpExprPatterns.(|TupleGet|_|)","content":"FSharpExprPatterns.(|TupleGet|_|) \n(|TupleGet|_|) \n Matches expressions which get a value from a tuple","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#(|Coerce|_|)","title":"FSharpExprPatterns.(|Coerce|_|)","content":"FSharpExprPatterns.(|Coerce|_|) \n(|Coerce|_|) \n Matches expressions which coerce the type of a value","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#(|NewArray|_|)","title":"FSharpExprPatterns.(|NewArray|_|)","content":"FSharpExprPatterns.(|NewArray|_|) \n(|NewArray|_|) \n Matches array expressions","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#(|TypeTest|_|)","title":"FSharpExprPatterns.(|TypeTest|_|)","content":"FSharpExprPatterns.(|TypeTest|_|) \n(|TypeTest|_|) \n Matches expressions which test the runtime type of a value","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#(|AddressSet|_|)","title":"FSharpExprPatterns.(|AddressSet|_|)","content":"FSharpExprPatterns.(|AddressSet|_|) \n(|AddressSet|_|) \n Matches expressions which set the contents of an address","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#(|ValueSet|_|)","title":"FSharpExprPatterns.(|ValueSet|_|)","content":"FSharpExprPatterns.(|ValueSet|_|) \n(|ValueSet|_|) \n Matches expressions which set the contents of a mutable variable","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#(|DefaultValue|_|)","title":"FSharpExprPatterns.(|DefaultValue|_|)","content":"FSharpExprPatterns.(|DefaultValue|_|) \n(|DefaultValue|_|) \n Matches default-value expressions, including null expressions","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#(|Const|_|)","title":"FSharpExprPatterns.(|Const|_|)","content":"FSharpExprPatterns.(|Const|_|) \n(|Const|_|) \n Matches constant expressions, including signed and unsigned integers, strings, characters, booleans, arrays\n of bytes and arrays of unit16.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#(|AddressOf|_|)","title":"FSharpExprPatterns.(|AddressOf|_|)","content":"FSharpExprPatterns.(|AddressOf|_|) \n(|AddressOf|_|) \n Matches expressions which take the address of a location","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#(|Sequential|_|)","title":"FSharpExprPatterns.(|Sequential|_|)","content":"FSharpExprPatterns.(|Sequential|_|) \n(|Sequential|_|) \n Matches sequential expressions","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#(|DebugPoint|_|)","title":"FSharpExprPatterns.(|DebugPoint|_|)","content":"FSharpExprPatterns.(|DebugPoint|_|) \n(|DebugPoint|_|) \n Matches debug points at leaf expressions in control flow","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#(|FastIntegerForLoop|_|)","title":"FSharpExprPatterns.(|FastIntegerForLoop|_|)","content":"FSharpExprPatterns.(|FastIntegerForLoop|_|) \n(|FastIntegerForLoop|_|) \n Matches fast-integer loops (up or down)","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#(|WhileLoop|_|)","title":"FSharpExprPatterns.(|WhileLoop|_|)","content":"FSharpExprPatterns.(|WhileLoop|_|) \n(|WhileLoop|_|) \n Matches while loops","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#(|TryFinally|_|)","title":"FSharpExprPatterns.(|TryFinally|_|)","content":"FSharpExprPatterns.(|TryFinally|_|) \n(|TryFinally|_|) \n Matches try/finally expressions","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#(|TryWith|_|)","title":"FSharpExprPatterns.(|TryWith|_|)","content":"FSharpExprPatterns.(|TryWith|_|) \n(|TryWith|_|) \n Matches try/with expressions","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#(|NewDelegate|_|)","title":"FSharpExprPatterns.(|NewDelegate|_|)","content":"FSharpExprPatterns.(|NewDelegate|_|) \n(|NewDelegate|_|) \n Matches expressions which create an instance of a delegate type","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#(|ILAsm|_|)","title":"FSharpExprPatterns.(|ILAsm|_|)","content":"FSharpExprPatterns.(|ILAsm|_|) \n(|ILAsm|_|) \n Matches expressions which are IL assembly code","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#(|ILFieldGet|_|)","title":"FSharpExprPatterns.(|ILFieldGet|_|)","content":"FSharpExprPatterns.(|ILFieldGet|_|) \n(|ILFieldGet|_|) \n Matches expressions which fetch a field from a .NET type","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#(|ILFieldSet|_|)","title":"FSharpExprPatterns.(|ILFieldSet|_|)","content":"FSharpExprPatterns.(|ILFieldSet|_|) \n(|ILFieldSet|_|) \n Matches expressions which set a field in a .NET type","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#(|ObjectExpr|_|)","title":"FSharpExprPatterns.(|ObjectExpr|_|)","content":"FSharpExprPatterns.(|ObjectExpr|_|) \n(|ObjectExpr|_|) \n Matches object expressions, returning the base type, the base call, the overrides and the interface implementations","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#(|TraitCall|_|)","title":"FSharpExprPatterns.(|TraitCall|_|)","content":"FSharpExprPatterns.(|TraitCall|_|) \n(|TraitCall|_|) \n Matches expressions for an unresolved call to a trait","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#(|WitnessArg|_|)","title":"FSharpExprPatterns.(|WitnessArg|_|)","content":"FSharpExprPatterns.(|WitnessArg|_|) \n(|WitnessArg|_|) \n Indicates a witness argument index from the witness arguments supplied to the enclosing method","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbolpatterns.html","title":"FSharpSymbolPatterns","content":"FSharpSymbolPatterns \n Patterns over FSharpSymbol and derivatives. \nFSharpSymbolPatterns.(|AbbreviatedType|_|) \n(|AbbreviatedType|_|) \nFSharpSymbolPatterns.(|TypeWithDefinition|_|) \n(|TypeWithDefinition|_|) \nFSharpSymbolPatterns.(|Attribute|_|) \n(|Attribute|_|) \nFSharpSymbolPatterns.(|ValueType|_|) \n(|ValueType|_|) \nFSharpSymbolPatterns.(|Class|_|) \n(|Class|_|) \nFSharpSymbolPatterns.(|Record|_|) \n(|Record|_|) \nFSharpSymbolPatterns.(|UnionType|_|) \n(|UnionType|_|) \nFSharpSymbolPatterns.(|Delegate|_|) \n(|Delegate|_|) \nFSharpSymbolPatterns.(|FSharpException|_|) \n(|FSharpException|_|) \nFSharpSymbolPatterns.(|Interface|_|) \n(|Interface|_|) \nFSharpSymbolPatterns.(|AbstractClass|_|) \n(|AbstractClass|_|) \nFSharpSymbolPatterns.(|FSharpType|_|) \n(|FSharpType|_|) \nFSharpSymbolPatterns.(|ProvidedType|_|) \n(|ProvidedType|_|) \nFSharpSymbolPatterns.(|ByRef|_|) \n(|ByRef|_|) \nFSharpSymbolPatterns.(|Array|_|) \n(|Array|_|) \nFSharpSymbolPatterns.(|FSharpModule|_|) \n(|FSharpModule|_|) \nFSharpSymbolPatterns.(|Namespace|_|) \n(|Namespace|_|) \nFSharpSymbolPatterns.(|ProvidedAndErasedType|_|) \n(|ProvidedAndErasedType|_|) \nFSharpSymbolPatterns.(|Enum|_|) \n(|Enum|_|) \nFSharpSymbolPatterns.(|Tuple|_|) \n(|Tuple|_|) \nFSharpSymbolPatterns.(|RefCell|_|) \n(|RefCell|_|) \nFSharpSymbolPatterns.(|FunctionType|_|) \n(|FunctionType|_|) \nFSharpSymbolPatterns.(|Pattern|_|) \n(|Pattern|_|) \nFSharpSymbolPatterns.(|Field|_|) \n(|Field|_|) \nFSharpSymbolPatterns.(|MutableVar|_|) \n(|MutableVar|_|) \nFSharpSymbolPatterns.(|FSharpEntity|_|) \n(|FSharpEntity|_|) \nFSharpSymbolPatterns.(|Parameter|_|) \n(|Parameter|_|) \nFSharpSymbolPatterns.(|UnionCase|_|) \n(|UnionCase|_|) \nFSharpSymbolPatterns.(|RecordField|_|) \n(|RecordField|_|) \nFSharpSymbolPatterns.(|ActivePatternCase|_|) \n(|ActivePatternCase|_|) \nFSharpSymbolPatterns.(|MemberFunctionOrValue|_|) \n(|MemberFunctionOrValue|_|) \nFSharpSymbolPatterns.(|Constructor|_|) \n(|Constructor|_|) \nFSharpSymbolPatterns.(|Function|_|) \n(|Function|_|) \nFSharpSymbolPatterns.(|ExtensionMember|_|) \n(|ExtensionMember|_|) \nFSharpSymbolPatterns.(|Event|_|) \n(|Event|_|)","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbolpatterns.html#(|AbbreviatedType|_|)","title":"FSharpSymbolPatterns.(|AbbreviatedType|_|)","content":"FSharpSymbolPatterns.(|AbbreviatedType|_|) \n(|AbbreviatedType|_|) \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbolpatterns.html#(|TypeWithDefinition|_|)","title":"FSharpSymbolPatterns.(|TypeWithDefinition|_|)","content":"FSharpSymbolPatterns.(|TypeWithDefinition|_|) \n(|TypeWithDefinition|_|) \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbolpatterns.html#(|Attribute|_|)","title":"FSharpSymbolPatterns.(|Attribute|_|)","content":"FSharpSymbolPatterns.(|Attribute|_|) \n(|Attribute|_|) \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbolpatterns.html#(|ValueType|_|)","title":"FSharpSymbolPatterns.(|ValueType|_|)","content":"FSharpSymbolPatterns.(|ValueType|_|) \n(|ValueType|_|) \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbolpatterns.html#(|Class|_|)","title":"FSharpSymbolPatterns.(|Class|_|)","content":"FSharpSymbolPatterns.(|Class|_|) \n(|Class|_|) \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbolpatterns.html#(|Record|_|)","title":"FSharpSymbolPatterns.(|Record|_|)","content":"FSharpSymbolPatterns.(|Record|_|) \n(|Record|_|) \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbolpatterns.html#(|UnionType|_|)","title":"FSharpSymbolPatterns.(|UnionType|_|)","content":"FSharpSymbolPatterns.(|UnionType|_|) \n(|UnionType|_|) \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbolpatterns.html#(|Delegate|_|)","title":"FSharpSymbolPatterns.(|Delegate|_|)","content":"FSharpSymbolPatterns.(|Delegate|_|) \n(|Delegate|_|) \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbolpatterns.html#(|FSharpException|_|)","title":"FSharpSymbolPatterns.(|FSharpException|_|)","content":"FSharpSymbolPatterns.(|FSharpException|_|) \n(|FSharpException|_|) \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbolpatterns.html#(|Interface|_|)","title":"FSharpSymbolPatterns.(|Interface|_|)","content":"FSharpSymbolPatterns.(|Interface|_|) \n(|Interface|_|) \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbolpatterns.html#(|AbstractClass|_|)","title":"FSharpSymbolPatterns.(|AbstractClass|_|)","content":"FSharpSymbolPatterns.(|AbstractClass|_|) \n(|AbstractClass|_|) \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbolpatterns.html#(|FSharpType|_|)","title":"FSharpSymbolPatterns.(|FSharpType|_|)","content":"FSharpSymbolPatterns.(|FSharpType|_|) \n(|FSharpType|_|) \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbolpatterns.html#(|ProvidedType|_|)","title":"FSharpSymbolPatterns.(|ProvidedType|_|)","content":"FSharpSymbolPatterns.(|ProvidedType|_|) \n(|ProvidedType|_|) \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbolpatterns.html#(|ByRef|_|)","title":"FSharpSymbolPatterns.(|ByRef|_|)","content":"FSharpSymbolPatterns.(|ByRef|_|) \n(|ByRef|_|) \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbolpatterns.html#(|Array|_|)","title":"FSharpSymbolPatterns.(|Array|_|)","content":"FSharpSymbolPatterns.(|Array|_|) \n(|Array|_|) \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbolpatterns.html#(|FSharpModule|_|)","title":"FSharpSymbolPatterns.(|FSharpModule|_|)","content":"FSharpSymbolPatterns.(|FSharpModule|_|) \n(|FSharpModule|_|) \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbolpatterns.html#(|Namespace|_|)","title":"FSharpSymbolPatterns.(|Namespace|_|)","content":"FSharpSymbolPatterns.(|Namespace|_|) \n(|Namespace|_|) \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbolpatterns.html#(|ProvidedAndErasedType|_|)","title":"FSharpSymbolPatterns.(|ProvidedAndErasedType|_|)","content":"FSharpSymbolPatterns.(|ProvidedAndErasedType|_|) \n(|ProvidedAndErasedType|_|) \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbolpatterns.html#(|Enum|_|)","title":"FSharpSymbolPatterns.(|Enum|_|)","content":"FSharpSymbolPatterns.(|Enum|_|) \n(|Enum|_|) \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbolpatterns.html#(|Tuple|_|)","title":"FSharpSymbolPatterns.(|Tuple|_|)","content":"FSharpSymbolPatterns.(|Tuple|_|) \n(|Tuple|_|) \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbolpatterns.html#(|RefCell|_|)","title":"FSharpSymbolPatterns.(|RefCell|_|)","content":"FSharpSymbolPatterns.(|RefCell|_|) \n(|RefCell|_|) \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbolpatterns.html#(|FunctionType|_|)","title":"FSharpSymbolPatterns.(|FunctionType|_|)","content":"FSharpSymbolPatterns.(|FunctionType|_|) \n(|FunctionType|_|) \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbolpatterns.html#(|Pattern|_|)","title":"FSharpSymbolPatterns.(|Pattern|_|)","content":"FSharpSymbolPatterns.(|Pattern|_|) \n(|Pattern|_|) \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbolpatterns.html#(|Field|_|)","title":"FSharpSymbolPatterns.(|Field|_|)","content":"FSharpSymbolPatterns.(|Field|_|) \n(|Field|_|) \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbolpatterns.html#(|MutableVar|_|)","title":"FSharpSymbolPatterns.(|MutableVar|_|)","content":"FSharpSymbolPatterns.(|MutableVar|_|) \n(|MutableVar|_|) \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbolpatterns.html#(|FSharpEntity|_|)","title":"FSharpSymbolPatterns.(|FSharpEntity|_|)","content":"FSharpSymbolPatterns.(|FSharpEntity|_|) \n(|FSharpEntity|_|) \n Returns (originalEntity, abbreviatedEntity, abbreviatedType)","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbolpatterns.html#(|Parameter|_|)","title":"FSharpSymbolPatterns.(|Parameter|_|)","content":"FSharpSymbolPatterns.(|Parameter|_|) \n(|Parameter|_|) \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbolpatterns.html#(|UnionCase|_|)","title":"FSharpSymbolPatterns.(|UnionCase|_|)","content":"FSharpSymbolPatterns.(|UnionCase|_|) \n(|UnionCase|_|) \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbolpatterns.html#(|RecordField|_|)","title":"FSharpSymbolPatterns.(|RecordField|_|)","content":"FSharpSymbolPatterns.(|RecordField|_|) \n(|RecordField|_|) \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbolpatterns.html#(|ActivePatternCase|_|)","title":"FSharpSymbolPatterns.(|ActivePatternCase|_|)","content":"FSharpSymbolPatterns.(|ActivePatternCase|_|) \n(|ActivePatternCase|_|) \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbolpatterns.html#(|MemberFunctionOrValue|_|)","title":"FSharpSymbolPatterns.(|MemberFunctionOrValue|_|)","content":"FSharpSymbolPatterns.(|MemberFunctionOrValue|_|) \n(|MemberFunctionOrValue|_|) \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbolpatterns.html#(|Constructor|_|)","title":"FSharpSymbolPatterns.(|Constructor|_|)","content":"FSharpSymbolPatterns.(|Constructor|_|) \n(|Constructor|_|) \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbolpatterns.html#(|Function|_|)","title":"FSharpSymbolPatterns.(|Function|_|)","content":"FSharpSymbolPatterns.(|Function|_|) \n(|Function|_|) \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbolpatterns.html#(|ExtensionMember|_|)","title":"FSharpSymbolPatterns.(|ExtensionMember|_|)","content":"FSharpSymbolPatterns.(|ExtensionMember|_|) \n(|ExtensionMember|_|) \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbolpatterns.html#(|Event|_|)","title":"FSharpSymbolPatterns.(|Event|_|)","content":"FSharpSymbolPatterns.(|Event|_|) \n(|Event|_|) \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpabstractparameter.html","title":"FSharpAbstractParameter","content":"FSharpAbstractParameter \n Represents a parameter in an abstract method of a class or interface \nFSharpAbstractParameter.IsOutArg \nIsOutArg \nFSharpAbstractParameter.Name \nName \nFSharpAbstractParameter.IsOptionalArg \nIsOptionalArg \nFSharpAbstractParameter.Type \nType \nFSharpAbstractParameter.Attributes \nAttributes \nFSharpAbstractParameter.IsInArg \nIsInArg","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpabstractparameter.html#IsOutArg","title":"FSharpAbstractParameter.IsOutArg","content":"FSharpAbstractParameter.IsOutArg \nIsOutArg \n Indicate this is an out argument","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpabstractparameter.html#Name","title":"FSharpAbstractParameter.Name","content":"FSharpAbstractParameter.Name \nName \n The optional name of the parameter","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpabstractparameter.html#IsOptionalArg","title":"FSharpAbstractParameter.IsOptionalArg","content":"FSharpAbstractParameter.IsOptionalArg \nIsOptionalArg \n Indicate this is an optional argument","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpabstractparameter.html#Type","title":"FSharpAbstractParameter.Type","content":"FSharpAbstractParameter.Type \nType \n The declared or inferred type of the parameter","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpabstractparameter.html#Attributes","title":"FSharpAbstractParameter.Attributes","content":"FSharpAbstractParameter.Attributes \nAttributes \n The declared attributes of the parameter","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpabstractparameter.html#IsInArg","title":"FSharpAbstractParameter.IsInArg","content":"FSharpAbstractParameter.IsInArg \nIsInArg \n Indicate this is an in argument","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpabstractsignature.html","title":"FSharpAbstractSignature","content":"FSharpAbstractSignature \n Represents the signature of an abstract slot of a class or interface \nFSharpAbstractSignature.DeclaringTypeGenericParameters \nDeclaringTypeGenericParameters \nFSharpAbstractSignature.Name \nName \nFSharpAbstractSignature.MethodGenericParameters \nMethodGenericParameters \nFSharpAbstractSignature.AbstractArguments \nAbstractArguments \nFSharpAbstractSignature.AbstractReturnType \nAbstractReturnType \nFSharpAbstractSignature.DeclaringType \nDeclaringType","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpabstractsignature.html#DeclaringTypeGenericParameters","title":"FSharpAbstractSignature.DeclaringTypeGenericParameters","content":"FSharpAbstractSignature.DeclaringTypeGenericParameters \nDeclaringTypeGenericParameters \n Get the generic arguments of the type defining the abstract slot","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpabstractsignature.html#Name","title":"FSharpAbstractSignature.Name","content":"FSharpAbstractSignature.Name \nName \n Get the name of the abstract slot","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpabstractsignature.html#MethodGenericParameters","title":"FSharpAbstractSignature.MethodGenericParameters","content":"FSharpAbstractSignature.MethodGenericParameters \nMethodGenericParameters \n Get the generic arguments of the abstract slot","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpabstractsignature.html#AbstractArguments","title":"FSharpAbstractSignature.AbstractArguments","content":"FSharpAbstractSignature.AbstractArguments \nAbstractArguments \n Get the arguments of the abstract slot","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpabstractsignature.html#AbstractReturnType","title":"FSharpAbstractSignature.AbstractReturnType","content":"FSharpAbstractSignature.AbstractReturnType \nAbstractReturnType \n Get the return type of the abstract slot","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpabstractsignature.html#DeclaringType","title":"FSharpAbstractSignature.DeclaringType","content":"FSharpAbstractSignature.DeclaringType \nDeclaringType \n Get the declaring type of the abstract slot","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpaccessibility.html","title":"FSharpAccessibility","content":"FSharpAccessibility \n Indicates the accessibility of a symbol, as seen by the F# language \nFSharpAccessibility.IsPublic \nIsPublic \nFSharpAccessibility.IsPrivate \nIsPrivate \nFSharpAccessibility.IsProtected \nIsProtected \nFSharpAccessibility.IsInternal \nIsInternal","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpaccessibility.html#IsPublic","title":"FSharpAccessibility.IsPublic","content":"FSharpAccessibility.IsPublic \nIsPublic \n Indicates the symbol has public accessibility.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpaccessibility.html#IsPrivate","title":"FSharpAccessibility.IsPrivate","content":"FSharpAccessibility.IsPrivate \nIsPrivate \n Indicates the symbol has private accessibility.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpaccessibility.html#IsProtected","title":"FSharpAccessibility.IsProtected","content":"FSharpAccessibility.IsProtected \nIsProtected \n Indicates the symbol has protected accessibility.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpaccessibility.html#IsInternal","title":"FSharpAccessibility.IsInternal","content":"FSharpAccessibility.IsInternal \nIsInternal \n Indicates the symbol has internal accessibility.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpaccessibilityrights.html","title":"FSharpAccessibilityRights","content":"FSharpAccessibilityRights \n Represents the rights of a compilation to access symbols","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpactivepatterncase.html","title":"FSharpActivePatternCase","content":"FSharpActivePatternCase \n A subtype of FSharpSymbol that represents a single case within an active pattern \nFSharpActivePatternCase.Name \nName \nFSharpActivePatternCase.Group \nGroup \nFSharpActivePatternCase.XmlDocSig \nXmlDocSig \nFSharpActivePatternCase.XmlDoc \nXmlDoc \nFSharpActivePatternCase.Index \nIndex \nFSharpActivePatternCase.DeclarationLocation \nDeclarationLocation","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpactivepatterncase.html#Name","title":"FSharpActivePatternCase.Name","content":"FSharpActivePatternCase.Name \nName \n The name of the active pattern case","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpactivepatterncase.html#Group","title":"FSharpActivePatternCase.Group","content":"FSharpActivePatternCase.Group \nGroup \n The group of active pattern cases this belongs to","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpactivepatterncase.html#XmlDocSig","title":"FSharpActivePatternCase.XmlDocSig","content":"FSharpActivePatternCase.XmlDocSig \nXmlDocSig \n XML documentation signature for the active pattern case, used for .xml file lookup for compiled code","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpactivepatterncase.html#XmlDoc","title":"FSharpActivePatternCase.XmlDoc","content":"FSharpActivePatternCase.XmlDoc \nXmlDoc \n Get the XML documentation for the entity","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpactivepatterncase.html#Index","title":"FSharpActivePatternCase.Index","content":"FSharpActivePatternCase.Index \nIndex \n Index of the case in the pattern group","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpactivepatterncase.html#DeclarationLocation","title":"FSharpActivePatternCase.DeclarationLocation","content":"FSharpActivePatternCase.DeclarationLocation \nDeclarationLocation \n The location of declaration of the active pattern case","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpactivepatterngroup.html","title":"FSharpActivePatternGroup","content":"FSharpActivePatternGroup \n Represents all cases within an active pattern \nFSharpActivePatternGroup.IsTotal \nIsTotal \nFSharpActivePatternGroup.Name \nName \nFSharpActivePatternGroup.Names \nNames \nFSharpActivePatternGroup.DeclaringEntity \nDeclaringEntity \nFSharpActivePatternGroup.OverallType \nOverallType","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpactivepatterngroup.html#IsTotal","title":"FSharpActivePatternGroup.IsTotal","content":"FSharpActivePatternGroup.IsTotal \nIsTotal \n Indicate this is a total active pattern","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpactivepatterngroup.html#Name","title":"FSharpActivePatternGroup.Name","content":"FSharpActivePatternGroup.Name \nName \n The whole group name","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpactivepatterngroup.html#Names","title":"FSharpActivePatternGroup.Names","content":"FSharpActivePatternGroup.Names \nNames \n The names of the active pattern cases","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpactivepatterngroup.html#DeclaringEntity","title":"FSharpActivePatternGroup.DeclaringEntity","content":"FSharpActivePatternGroup.DeclaringEntity \nDeclaringEntity \n Try to get the entity in which the active pattern is declared","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpactivepatterngroup.html#OverallType","title":"FSharpActivePatternGroup.OverallType","content":"FSharpActivePatternGroup.OverallType \nOverallType \n Get the type indicating signature of the active pattern","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpanonrecordtypedetails.html","title":"FSharpAnonRecordTypeDetails","content":"FSharpAnonRecordTypeDetails \n A subtype of FSharpSymbol that represents a record or union case field as seen by the F# language \nFSharpAnonRecordTypeDetails.SortedFieldNames \nSortedFieldNames \nFSharpAnonRecordTypeDetails.CompiledName \nCompiledName \nFSharpAnonRecordTypeDetails.Assembly \nAssembly \nFSharpAnonRecordTypeDetails.EnclosingCompiledTypeNames \nEnclosingCompiledTypeNames","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpanonrecordtypedetails.html#SortedFieldNames","title":"FSharpAnonRecordTypeDetails.SortedFieldNames","content":"FSharpAnonRecordTypeDetails.SortedFieldNames \nSortedFieldNames \n The sorted labels of the anonymous type","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpanonrecordtypedetails.html#CompiledName","title":"FSharpAnonRecordTypeDetails.CompiledName","content":"FSharpAnonRecordTypeDetails.CompiledName \nCompiledName \n The name of the compiled form of the anonymous type","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpanonrecordtypedetails.html#Assembly","title":"FSharpAnonRecordTypeDetails.Assembly","content":"FSharpAnonRecordTypeDetails.Assembly \nAssembly \n The assembly where the compiled form of the anonymous type is defined","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpanonrecordtypedetails.html#EnclosingCompiledTypeNames","title":"FSharpAnonRecordTypeDetails.EnclosingCompiledTypeNames","content":"FSharpAnonRecordTypeDetails.EnclosingCompiledTypeNames \nEnclosingCompiledTypeNames \n Names of any enclosing types of the compiled form of the anonymous type (if the anonymous type was defined as a nested type)","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpassembly.html","title":"FSharpAssembly","content":"FSharpAssembly \n Represents an assembly as seen by the F# language \nFSharpAssembly.IsFSharp \nIsFSharp \nFSharpAssembly.IsProviderGenerated \nIsProviderGenerated \nFSharpAssembly.Contents \nContents \nFSharpAssembly.QualifiedName \nQualifiedName \nFSharpAssembly.FileName \nFileName \nFSharpAssembly.SimpleName \nSimpleName","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpassembly.html#IsFSharp","title":"FSharpAssembly.IsFSharp","content":"FSharpAssembly.IsFSharp \nIsFSharp \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpassembly.html#IsProviderGenerated","title":"FSharpAssembly.IsProviderGenerated","content":"FSharpAssembly.IsProviderGenerated \nIsProviderGenerated \n Indicates if the assembly was generated by a type provider and is due for static linking","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpassembly.html#Contents","title":"FSharpAssembly.Contents","content":"FSharpAssembly.Contents \nContents \n The contents of the this assembly","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpassembly.html#QualifiedName","title":"FSharpAssembly.QualifiedName","content":"FSharpAssembly.QualifiedName \nQualifiedName \n The qualified name of the assembly","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpassembly.html#FileName","title":"FSharpAssembly.FileName","content":"FSharpAssembly.FileName \nFileName \n The file name for the assembly, if any","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpassembly.html#SimpleName","title":"FSharpAssembly.SimpleName","content":"FSharpAssembly.SimpleName \nSimpleName \n The simple name for the assembly","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpassemblycontents.html","title":"FSharpAssemblyContents","content":"FSharpAssemblyContents \n Represents the definitional contents of an assembly, as seen by the F# language \nFSharpAssemblyContents.ImplementationFiles \nImplementationFiles","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpassemblycontents.html#ImplementationFiles","title":"FSharpAssemblyContents.ImplementationFiles","content":"FSharpAssemblyContents.ImplementationFiles \nImplementationFiles \n The contents of the implementation files in the assembly","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpassemblysignature.html","title":"FSharpAssemblySignature","content":"FSharpAssemblySignature \n Represents an inferred signature of part of an assembly as seen by the F# language \nFSharpAssemblySignature.FindEntityByPath \nFindEntityByPath \nFSharpAssemblySignature.TryGetEntities \nTryGetEntities \nFSharpAssemblySignature.Attributes \nAttributes \nFSharpAssemblySignature.Entities \nEntities","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpassemblysignature.html#FindEntityByPath","title":"FSharpAssemblySignature.FindEntityByPath","content":"FSharpAssemblySignature.FindEntityByPath \nFindEntityByPath \n Find entity using compiled names","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpassemblysignature.html#TryGetEntities","title":"FSharpAssemblySignature.TryGetEntities","content":"FSharpAssemblySignature.TryGetEntities \nTryGetEntities \n Safe version of \u0060Entities\u0060.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpassemblysignature.html#Attributes","title":"FSharpAssemblySignature.Attributes","content":"FSharpAssemblySignature.Attributes \nAttributes \n Get the declared attributes for the assembly.\n Only available when parsing an entire project.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpassemblysignature.html#Entities","title":"FSharpAssemblySignature.Entities","content":"FSharpAssemblySignature.Entities \nEntities \n The (non-nested) module and type definitions in this signature","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpattribute.html","title":"FSharpAttribute","content":"FSharpAttribute \n Represents a custom attribute attached to F# source code or a compiler .NET component \nFSharpAttribute.Format \nFormat \nFSharpAttribute.IsAttribute \nIsAttribute \nFSharpAttribute.AttributeType \nAttributeType \nFSharpAttribute.IsUnresolved \nIsUnresolved \nFSharpAttribute.ConstructorArguments \nConstructorArguments \nFSharpAttribute.NamedArguments \nNamedArguments \nFSharpAttribute.Range \nRange","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpattribute.html#Format","title":"FSharpAttribute.Format","content":"FSharpAttribute.Format \nFormat \n Format the attribute using the rules of the given display context","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpattribute.html#IsAttribute","title":"FSharpAttribute.IsAttribute","content":"FSharpAttribute.IsAttribute \nIsAttribute \n Indicates if attribute matches the full name of the given type parameter","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpattribute.html#AttributeType","title":"FSharpAttribute.AttributeType","content":"FSharpAttribute.AttributeType \nAttributeType \n The type of the attribute","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpattribute.html#IsUnresolved","title":"FSharpAttribute.IsUnresolved","content":"FSharpAttribute.IsUnresolved \nIsUnresolved \n Indicates if the attribute type is in an unresolved assembly","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpattribute.html#ConstructorArguments","title":"FSharpAttribute.ConstructorArguments","content":"FSharpAttribute.ConstructorArguments \nConstructorArguments \n The arguments to the constructor for the attribute","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpattribute.html#NamedArguments","title":"FSharpAttribute.NamedArguments","content":"FSharpAttribute.NamedArguments \nNamedArguments \n The named arguments for the attribute","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpattribute.html#Range","title":"FSharpAttribute.Range","content":"FSharpAttribute.Range \nRange \n Get the range of the name of the attribute","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpdelegatesignature.html","title":"FSharpDelegateSignature","content":"FSharpDelegateSignature \n Represents a delegate signature in an F# symbol \nFSharpDelegateSignature.DelegateArguments \nDelegateArguments \nFSharpDelegateSignature.DelegateReturnType \nDelegateReturnType","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpdelegatesignature.html#DelegateArguments","title":"FSharpDelegateSignature.DelegateArguments","content":"FSharpDelegateSignature.DelegateArguments \nDelegateArguments \n Get the argument types of the delegate signature","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpdelegatesignature.html#DelegateReturnType","title":"FSharpDelegateSignature.DelegateReturnType","content":"FSharpDelegateSignature.DelegateReturnType \nDelegateReturnType \n Get the return type of the delegate signature","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpdisplaycontext.html","title":"FSharpDisplayContext","content":"FSharpDisplayContext \n Represents the information needed to format types and other information in a style\n suitable for use in F# source text at a particular source location.\n\n Acquired via GetDisplayEnvAtLocationAlternate and similar methods. May be passed\n to the Format method on FSharpType and other methods. \nFSharpDisplayContext.WithPrefixGenericParameters \nWithPrefixGenericParameters \nFSharpDisplayContext.WithShortTypeNames \nWithShortTypeNames \nFSharpDisplayContext.WithSuffixGenericParameters \nWithSuffixGenericParameters \nFSharpDisplayContext.WithTopLevelPrefixGenericParameters \nWithTopLevelPrefixGenericParameters \nFSharpDisplayContext.Empty \nEmpty","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpdisplaycontext.html#WithPrefixGenericParameters","title":"FSharpDisplayContext.WithPrefixGenericParameters","content":"FSharpDisplayContext.WithPrefixGenericParameters \nWithPrefixGenericParameters \n Causes type signatures to be formatted with prefix-style generic parameters,\n for example \u0060list\u003Cint\u003E\u0060.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpdisplaycontext.html#WithShortTypeNames","title":"FSharpDisplayContext.WithShortTypeNames","content":"FSharpDisplayContext.WithShortTypeNames \nWithShortTypeNames \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpdisplaycontext.html#WithSuffixGenericParameters","title":"FSharpDisplayContext.WithSuffixGenericParameters","content":"FSharpDisplayContext.WithSuffixGenericParameters \nWithSuffixGenericParameters \n Causes type signatures to be formatted with suffix-style generic parameters,\n for example \u0060int list\u0060","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpdisplaycontext.html#WithTopLevelPrefixGenericParameters","title":"FSharpDisplayContext.WithTopLevelPrefixGenericParameters","content":"FSharpDisplayContext.WithTopLevelPrefixGenericParameters \nWithTopLevelPrefixGenericParameters \n Causes type signatures to be formatted with prefix-style generic parameters for a top level type\n while nested types inherit generic parameters style from the current \u0060FSharpDisplayContext\u0060 instance,\n for example, \u0060int list seq\u0060 becomes \u0060seq\u003Cint list\u003E\u0060","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpdisplaycontext.html#Empty","title":"FSharpDisplayContext.Empty","content":"FSharpDisplayContext.Empty \nEmpty \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html","title":"FSharpEntity","content":"FSharpEntity \n A subtype of FSharpSymbol that represents a type definition or module as seen by the F# language \nFSharpEntity.AsType \nAsType \nFSharpEntity.GetPublicNestedEntities \nGetPublicNestedEntities \nFSharpEntity.TryGetFullCompiledName \nTryGetFullCompiledName \nFSharpEntity.TryGetFullDisplayName \nTryGetFullDisplayName \nFSharpEntity.TryGetFullName \nTryGetFullName \nFSharpEntity.TryGetMembersFunctionsAndValues \nTryGetMembersFunctionsAndValues \nFSharpEntity.TryGetMetadataText \nTryGetMetadataText \nFSharpEntity.AllInterfaces \nAllInterfaces \nFSharpEntity.BaseType \nBaseType \nFSharpEntity.UsesPrefixDisplay \nUsesPrefixDisplay \nFSharpEntity.GenericArguments \nGenericArguments \nFSharpEntity.IsValueType \nIsValueType \nFSharpEntity.NestedEntities \nNestedEntities \nFSharpEntity.IsEnum \nIsEnum \nFSharpEntity.GenericParameters \nGenericParameters \nFSharpEntity.IsStaticInstantiation \nIsStaticInstantiation \nFSharpEntity.AbbreviatedType \nAbbreviatedType \nFSharpEntity.IsArrayType \nIsArrayType \nFSharpEntity.IsFSharpAbbreviation \nIsFSharpAbbreviation \nFSharpEntity.IsFSharpUnion \nIsFSharpUnion \nFSharpEntity.XmlDocSig \nXmlDocSig \nFSharpEntity.FSharpDelegateSignature \nFSharpDelegateSignature \nFSharpEntity.IsNamespace \nIsNamespace \nFSharpEntity.BasicQualifiedName \nBasicQualifiedName \nFSharpEntity.IsClass \nIsClass \nFSharpEntity.XmlDoc \nXmlDoc \nFSharpEntity.DisplayName \nDisplayName \nFSharpEntity.IsMeasure \nIsMeasure \nFSharpEntity.IsFSharp \nIsFSharp \nFSharpEntity.ArrayRank \nArrayRank \nFSharpEntity.IsProvided \nIsProvided \nFSharpEntity.IsAbstractClass \nIsAbstractClass \nFSharpEntity.HasAssemblyCodeRepresentation \nHasAssemblyCodeRepresentation \nFSharpEntity.IsFSharpModule \nIsFSharpModule \nFSharpEntity.FSharpFields \nFSharpFields \nFSharpEntity.CompiledName \nCompiledName \nFSharpEntity.DeclaringEntity \nDeclaringEntity \nFSharpEntity.UnionCases \nUnionCases \nFSharpEntity.IsProvidedAndErased \nIsProvidedAndErased \nFSharpEntity.IsAttributeType \nIsAttributeType \nFSharpEntity.IsByRef \nIsByRef \nFSharpEntity.HasFSharpModuleSuffix \nHasFSharpModuleSuffix \nFSharpEntity.IsOpaque \nIsOpaque \nFSharpEntity.Namespace \nNamespace \nFSharpEntity.IsDelegate \nIsDelegate \nFSharpEntity.IsInterface \nIsInterface \nFSharpEntity.RepresentationAccessibility \nRepresentationAccessibility \nFSharpEntity.QualifiedName \nQualifiedName \nFSharpEntity.MembersFunctionsAndValues \nMembersFunctionsAndValues \nFSharpEntity.AllCompilationPaths \nAllCompilationPaths \nFSharpEntity.ActivePatternCases \nActivePatternCases \nFSharpEntity.FullName \nFullName \nFSharpEntity.IsProvidedAndGenerated \nIsProvidedAndGenerated \nFSharpEntity.TryFullName \nTryFullName \nFSharpEntity.IsFSharpExceptionDeclaration \nIsFSharpExceptionDeclaration \nFSharpEntity.AccessPath \nAccessPath \nFSharpEntity.IsUnresolved \nIsUnresolved \nFSharpEntity.IsFSharpRecord \nIsFSharpRecord \nFSharpEntity.DeclarationLocation \nDeclarationLocation \nFSharpEntity.DeclaredInterfaces \nDeclaredInterfaces \nFSharpEntity.LogicalName \nLogicalName \nFSharpEntity.StaticParameters \nStaticParameters","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#AsType","title":"FSharpEntity.AsType","content":"FSharpEntity.AsType \nAsType \n Instantiates FSharpType","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#GetPublicNestedEntities","title":"FSharpEntity.GetPublicNestedEntities","content":"FSharpEntity.GetPublicNestedEntities \nGetPublicNestedEntities \n Public nested entities (methods, functions, values, nested modules).","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#TryGetFullCompiledName","title":"FSharpEntity.TryGetFullCompiledName","content":"FSharpEntity.TryGetFullCompiledName \nTryGetFullCompiledName \n Safe version of \u0060CompiledName\u0060.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#TryGetFullDisplayName","title":"FSharpEntity.TryGetFullDisplayName","content":"FSharpEntity.TryGetFullDisplayName \nTryGetFullDisplayName \n Safe version of \u0060DisplayName\u0060.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#TryGetFullName","title":"FSharpEntity.TryGetFullName","content":"FSharpEntity.TryGetFullName \nTryGetFullName \n Safe version of \u0060FullName\u0060.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#TryGetMembersFunctionsAndValues","title":"FSharpEntity.TryGetMembersFunctionsAndValues","content":"FSharpEntity.TryGetMembersFunctionsAndValues \nTryGetMembersFunctionsAndValues \n Safe version of \u0060GetMembersFunctionsAndValues\u0060.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#TryGetMetadataText","title":"FSharpEntity.TryGetMetadataText","content":"FSharpEntity.TryGetMetadataText \nTryGetMetadataText \n Get the source text of the entity\u0027s signature to be used as metadata.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#AllInterfaces","title":"FSharpEntity.AllInterfaces","content":"FSharpEntity.AllInterfaces \nAllInterfaces \n Get all the interface implementations, by walking the type hierarchy","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#BaseType","title":"FSharpEntity.BaseType","content":"FSharpEntity.BaseType \nBaseType \n Get the base type, if any","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#UsesPrefixDisplay","title":"FSharpEntity.UsesPrefixDisplay","content":"FSharpEntity.UsesPrefixDisplay \nUsesPrefixDisplay \n Indicates if the type prefers the \u0022tycon\u003Ca,b\u003E\u0022 syntax for display etc.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#GenericArguments","title":"FSharpEntity.GenericArguments","content":"FSharpEntity.GenericArguments \nGenericArguments \n Get the generic parameters, possibly including unit-of-measure parameters","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#IsValueType","title":"FSharpEntity.IsValueType","content":"FSharpEntity.IsValueType \nIsValueType \n Indicates if the entity is a struct or enum","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#NestedEntities","title":"FSharpEntity.NestedEntities","content":"FSharpEntity.NestedEntities \nNestedEntities \n Get the modules and types defined in a module, or the nested types of a type","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#IsEnum","title":"FSharpEntity.IsEnum","content":"FSharpEntity.IsEnum \nIsEnum \n Indicates if the entity is an enum type definition","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#GenericParameters","title":"FSharpEntity.GenericParameters","content":"FSharpEntity.GenericParameters \nGenericParameters \n Get the generic parameters, possibly including unit-of-measure parameters","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#IsStaticInstantiation","title":"FSharpEntity.IsStaticInstantiation","content":"FSharpEntity.IsStaticInstantiation \nIsStaticInstantiation \n Indicates if the entity is a \u0027fake\u0027 symbol related to a static instantiation of a type provider","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#AbbreviatedType","title":"FSharpEntity.AbbreviatedType","content":"FSharpEntity.AbbreviatedType \nAbbreviatedType \n Get the type abbreviated by an F# type abbreviation","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#IsArrayType","title":"FSharpEntity.IsArrayType","content":"FSharpEntity.IsArrayType \nIsArrayType \n Indicates if the entity is an array type","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#IsFSharpAbbreviation","title":"FSharpEntity.IsFSharpAbbreviation","content":"FSharpEntity.IsFSharpAbbreviation \nIsFSharpAbbreviation \n Indicates if the entity is a measure, type or exception abbreviation","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#IsFSharpUnion","title":"FSharpEntity.IsFSharpUnion","content":"FSharpEntity.IsFSharpUnion \nIsFSharpUnion \n Indicates if the entity is union type","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#XmlDocSig","title":"FSharpEntity.XmlDocSig","content":"FSharpEntity.XmlDocSig \nXmlDocSig \n Get the XML documentation signature for the entity, used for .xml file lookup for compiled code","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#FSharpDelegateSignature","title":"FSharpEntity.FSharpDelegateSignature","content":"FSharpEntity.FSharpDelegateSignature \nFSharpDelegateSignature \n Indicates if the type is a delegate with the given Invoke signature","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#IsNamespace","title":"FSharpEntity.IsNamespace","content":"FSharpEntity.IsNamespace \nIsNamespace \n Indicates if the entity is a part of a namespace path","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#BasicQualifiedName","title":"FSharpEntity.BasicQualifiedName","content":"FSharpEntity.BasicQualifiedName \nBasicQualifiedName \n The fully qualified name of the type or module without strong assembly name.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#IsClass","title":"FSharpEntity.IsClass","content":"FSharpEntity.IsClass \nIsClass \n Indicates if the entity is a class type definition","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#XmlDoc","title":"FSharpEntity.XmlDoc","content":"FSharpEntity.XmlDoc \nXmlDoc \n Get the XML documentation for the entity","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#DisplayName","title":"FSharpEntity.DisplayName","content":"FSharpEntity.DisplayName \nDisplayName \n Get the name of the type or module as displayed in F# code","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#IsMeasure","title":"FSharpEntity.IsMeasure","content":"FSharpEntity.IsMeasure \nIsMeasure \n Indicates if the entity is a measure definition","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#IsFSharp","title":"FSharpEntity.IsFSharp","content":"FSharpEntity.IsFSharp \nIsFSharp \n Indicates if this is a reference to something in an F#-compiled assembly","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#ArrayRank","title":"FSharpEntity.ArrayRank","content":"FSharpEntity.ArrayRank \nArrayRank \n Get the rank of an array type","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#IsProvided","title":"FSharpEntity.IsProvided","content":"FSharpEntity.IsProvided \nIsProvided \n Indicates if the entity is a provided type","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#IsAbstractClass","title":"FSharpEntity.IsAbstractClass","content":"FSharpEntity.IsAbstractClass \nIsAbstractClass \n Indicates if the entity is an abstract class","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#HasAssemblyCodeRepresentation","title":"FSharpEntity.HasAssemblyCodeRepresentation","content":"FSharpEntity.HasAssemblyCodeRepresentation \nHasAssemblyCodeRepresentation \n Indicates if the type is implemented through a mapping to IL assembly code. This is only\n true for types in FSharp.Core.dll","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#IsFSharpModule","title":"FSharpEntity.IsFSharpModule","content":"FSharpEntity.IsFSharpModule \nIsFSharpModule \n Indicates if the entity is an F# module definition","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#FSharpFields","title":"FSharpEntity.FSharpFields","content":"FSharpEntity.FSharpFields \nFSharpFields \n Get the fields of a record, class, struct or enum from the perspective of the F# language.\n This includes static fields, the \u0027val\u0027 bindings in classes and structs, and the value definitions in enums.\n For classes, the list may include compiler generated fields implied by the use of primary constructors.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#CompiledName","title":"FSharpEntity.CompiledName","content":"FSharpEntity.CompiledName \nCompiledName \n Get the compiled name of the type or module, possibly with \u0060n mangling. This is identical to LogicalName\n unless the CompiledName attribute is used.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#DeclaringEntity","title":"FSharpEntity.DeclaringEntity","content":"FSharpEntity.DeclaringEntity \nDeclaringEntity \n Get the enclosing entity for the definition","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#UnionCases","title":"FSharpEntity.UnionCases","content":"FSharpEntity.UnionCases \nUnionCases \n Get the cases of a union type","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#IsProvidedAndErased","title":"FSharpEntity.IsProvidedAndErased","content":"FSharpEntity.IsProvidedAndErased \nIsProvidedAndErased \n Indicates if the entity is an erased provided type","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#IsAttributeType","title":"FSharpEntity.IsAttributeType","content":"FSharpEntity.IsAttributeType \nIsAttributeType \n Check if the entity inherits from System.Attribute in its type hierarchy","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#IsByRef","title":"FSharpEntity.IsByRef","content":"FSharpEntity.IsByRef \nIsByRef \n Indicates if is the \u0027byref\u003C_\u003E\u0027 type definition used for byref types in F#-compiled assemblies","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#HasFSharpModuleSuffix","title":"FSharpEntity.HasFSharpModuleSuffix","content":"FSharpEntity.HasFSharpModuleSuffix \nHasFSharpModuleSuffix \n Indicates that a module is compiled to a class with the given mangled name. The mangling is reversed during lookup","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#IsOpaque","title":"FSharpEntity.IsOpaque","content":"FSharpEntity.IsOpaque \nIsOpaque \n Indicates if the entity is a type definition for a reference type where the implementation details are hidden by a signature","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#Namespace","title":"FSharpEntity.Namespace","content":"FSharpEntity.Namespace \nNamespace \n Get the namespace containing the type or module, if any. Use \u0027None\u0027 for item not in a namespace.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#IsDelegate","title":"FSharpEntity.IsDelegate","content":"FSharpEntity.IsDelegate \nIsDelegate \n Indicates if the entity is a delegate type definition","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#IsInterface","title":"FSharpEntity.IsInterface","content":"FSharpEntity.IsInterface \nIsInterface \n Indicates if the entity is an interface type definition","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#RepresentationAccessibility","title":"FSharpEntity.RepresentationAccessibility","content":"FSharpEntity.RepresentationAccessibility \nRepresentationAccessibility \n Get the declared accessibility of the representation, not taking signatures into account","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#QualifiedName","title":"FSharpEntity.QualifiedName","content":"FSharpEntity.QualifiedName \nQualifiedName \n Get the fully qualified name of the type or module","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#MembersFunctionsAndValues","title":"FSharpEntity.MembersFunctionsAndValues","content":"FSharpEntity.MembersFunctionsAndValues \nMembersFunctionsAndValues \n Get the properties, events and methods of a type definitions, or the functions and values of a module","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#AllCompilationPaths","title":"FSharpEntity.AllCompilationPaths","content":"FSharpEntity.AllCompilationPaths \nAllCompilationPaths \n Get all compilation paths, taking \u0060Module\u0060 suffixes into account.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#ActivePatternCases","title":"FSharpEntity.ActivePatternCases","content":"FSharpEntity.ActivePatternCases \nActivePatternCases \n Get all active pattern cases defined in all active patterns in the module.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#FullName","title":"FSharpEntity.FullName","content":"FSharpEntity.FullName \nFullName \n Get the full name of the type or module","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#IsProvidedAndGenerated","title":"FSharpEntity.IsProvidedAndGenerated","content":"FSharpEntity.IsProvidedAndGenerated \nIsProvidedAndGenerated \n Indicates if the entity is a generated provided type","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#TryFullName","title":"FSharpEntity.TryFullName","content":"FSharpEntity.TryFullName \nTryFullName \n Get the full name of the type or module if it is available","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#IsFSharpExceptionDeclaration","title":"FSharpEntity.IsFSharpExceptionDeclaration","content":"FSharpEntity.IsFSharpExceptionDeclaration \nIsFSharpExceptionDeclaration \n Indicates an F# exception declaration","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#AccessPath","title":"FSharpEntity.AccessPath","content":"FSharpEntity.AccessPath \nAccessPath \n Get the path used to address the entity (e.g. \u0022Namespace.Module1.NestedModule2\u0022). Gives\n \u0022global\u0022 for items not in a namespace.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#IsUnresolved","title":"FSharpEntity.IsUnresolved","content":"FSharpEntity.IsUnresolved \nIsUnresolved \n Indicates if the entity is in an unresolved assembly","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#IsFSharpRecord","title":"FSharpEntity.IsFSharpRecord","content":"FSharpEntity.IsFSharpRecord \nIsFSharpRecord \n Indicates if the entity is record type","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#DeclarationLocation","title":"FSharpEntity.DeclarationLocation","content":"FSharpEntity.DeclarationLocation \nDeclarationLocation \n Get the declaration location for the type constructor","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#DeclaredInterfaces","title":"FSharpEntity.DeclaredInterfaces","content":"FSharpEntity.DeclaredInterfaces \nDeclaredInterfaces \n Get the declared interface implementations","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#LogicalName","title":"FSharpEntity.LogicalName","content":"FSharpEntity.LogicalName \nLogicalName \n Get the name of the type or module, possibly with \u0060n mangling","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#StaticParameters","title":"FSharpEntity.StaticParameters","content":"FSharpEntity.StaticParameters \nStaticParameters \n Get the static parameters for a provided type","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexpr.html","title":"FSharpExpr","content":"FSharpExpr \n Represents a checked and reduced expression, as seen by the F# language.  The active patterns\n in \u0027FSharp.Compiler.Symbols.FSharpExprPatterns\u0027 can be used to analyze information about the expression.\n\n Pattern matching is reduced to decision trees and conditional tests. Some other\n constructs may be represented in reduced form. \nFSharpExpr.ImmediateSubExpressions \nImmediateSubExpressions \nFSharpExpr.Type \nType \nFSharpExpr.Range \nRange","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexpr.html#ImmediateSubExpressions","title":"FSharpExpr.ImmediateSubExpressions","content":"FSharpExpr.ImmediateSubExpressions \nImmediateSubExpressions \n The immediate sub-expressions of the expression.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexpr.html#Type","title":"FSharpExpr.Type","content":"FSharpExpr.Type \nType \n The type of the expression","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexpr.html#Range","title":"FSharpExpr.Range","content":"FSharpExpr.Range \nRange \n The range of the expression","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpfield.html","title":"FSharpField","content":"FSharpField \n A subtype of FSharpSymbol that represents a record or union case field as seen by the F# language \nFSharpField.IsCompilerGenerated \nIsCompilerGenerated \nFSharpField.IsLiteral \nIsLiteral \nFSharpField.IsUnresolved \nIsUnresolved \nFSharpField.Name \nName \nFSharpField.IsUnionCaseField \nIsUnionCaseField \nFSharpField.LiteralValue \nLiteralValue \nFSharpField.IsStatic \nIsStatic \nFSharpField.DeclaringUnionCase \nDeclaringUnionCase \nFSharpField.FieldAttributes \nFieldAttributes \nFSharpField.XmlDocSig \nXmlDocSig \nFSharpField.AnonRecordFieldDetails \nAnonRecordFieldDetails \nFSharpField.IsNameGenerated \nIsNameGenerated \nFSharpField.XmlDoc \nXmlDoc \nFSharpField.IsAnonRecordField \nIsAnonRecordField \nFSharpField.IsMutable \nIsMutable \nFSharpField.DeclaringEntity \nDeclaringEntity \nFSharpField.IsDefaultValue \nIsDefaultValue \nFSharpField.PropertyAttributes \nPropertyAttributes \nFSharpField.FieldType \nFieldType \nFSharpField.DeclarationLocation \nDeclarationLocation \nFSharpField.IsVolatile \nIsVolatile","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpfield.html#IsCompilerGenerated","title":"FSharpField.IsCompilerGenerated","content":"FSharpField.IsCompilerGenerated \nIsCompilerGenerated \n Indicates a compiler generated field, not visible to Intellisense or name resolution","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpfield.html#IsLiteral","title":"FSharpField.IsLiteral","content":"FSharpField.IsLiteral \nIsLiteral \n Indicates if the field has a literal value","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpfield.html#IsUnresolved","title":"FSharpField.IsUnresolved","content":"FSharpField.IsUnresolved \nIsUnresolved \n Indicates if the record field is for a type in an unresolved assembly","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpfield.html#Name","title":"FSharpField.Name","content":"FSharpField.Name \nName \n Get the name of the field","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpfield.html#IsUnionCaseField","title":"FSharpField.IsUnionCaseField","content":"FSharpField.IsUnionCaseField \nIsUnionCaseField \n Indicates if the field is declared in a union case","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpfield.html#LiteralValue","title":"FSharpField.LiteralValue","content":"FSharpField.LiteralValue \nLiteralValue \n Get the default initialization info, for static literals","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpfield.html#IsStatic","title":"FSharpField.IsStatic","content":"FSharpField.IsStatic \nIsStatic \n Indicates a static field","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpfield.html#DeclaringUnionCase","title":"FSharpField.DeclaringUnionCase","content":"FSharpField.DeclaringUnionCase \nDeclaringUnionCase \n Returns the declaring union case symbol","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpfield.html#FieldAttributes","title":"FSharpField.FieldAttributes","content":"FSharpField.FieldAttributes \nFieldAttributes \n Get the attributes attached to generated field","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpfield.html#XmlDocSig","title":"FSharpField.XmlDocSig","content":"FSharpField.XmlDocSig \nXmlDocSig \n Get the XML documentation signature for .xml file lookup for the field, used for .xml file lookup for compiled code","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpfield.html#AnonRecordFieldDetails","title":"FSharpField.AnonRecordFieldDetails","content":"FSharpField.AnonRecordFieldDetails \nAnonRecordFieldDetails \n If the field is from an anonymous record type then get the details of the field including the index in the sorted array of fields","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpfield.html#IsNameGenerated","title":"FSharpField.IsNameGenerated","content":"FSharpField.IsNameGenerated \nIsNameGenerated \n Indicates if the field name was generated by compiler (e.g. ItemN names in union cases and DataN in exceptions).\n This API returns true for source defined symbols only.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpfield.html#XmlDoc","title":"FSharpField.XmlDoc","content":"FSharpField.XmlDoc \nXmlDoc \n Get the XML documentation for the entity","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpfield.html#IsAnonRecordField","title":"FSharpField.IsAnonRecordField","content":"FSharpField.IsAnonRecordField \nIsAnonRecordField \n Is this a field from an anonymous record type?","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpfield.html#IsMutable","title":"FSharpField.IsMutable","content":"FSharpField.IsMutable \nIsMutable \n Indicates if the field is declared \u0027static\u0027","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpfield.html#DeclaringEntity","title":"FSharpField.DeclaringEntity","content":"FSharpField.DeclaringEntity \nDeclaringEntity \n Get the declaring entity of this field, if any. Fields from anonymous types do not have a declaring entity","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpfield.html#IsDefaultValue","title":"FSharpField.IsDefaultValue","content":"FSharpField.IsDefaultValue \nIsDefaultValue \n Indicates if the field declared is declared \u0027DefaultValue\u0027","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpfield.html#PropertyAttributes","title":"FSharpField.PropertyAttributes","content":"FSharpField.PropertyAttributes \nPropertyAttributes \n Get the attributes attached to generated property","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpfield.html#FieldType","title":"FSharpField.FieldType","content":"FSharpField.FieldType \nFieldType \n Get the type of the field, w.r.t. the generic parameters of the enclosing type constructor","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpfield.html#DeclarationLocation","title":"FSharpField.DeclarationLocation","content":"FSharpField.DeclarationLocation \nDeclarationLocation \n Get the declaration location of the field","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpfield.html#IsVolatile","title":"FSharpField.IsVolatile","content":"FSharpField.IsVolatile \nIsVolatile \n Indicates if the field is declared volatile","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparameter.html","title":"FSharpGenericParameter","content":"FSharpGenericParameter \n A subtype of FSharpSymbol that represents a generic parameter for an FSharpSymbol \nFSharpGenericParameter.IsCompilerGenerated \nIsCompilerGenerated \nFSharpGenericParameter.Name \nName \nFSharpGenericParameter.IsMeasure \nIsMeasure \nFSharpGenericParameter.XmlDoc \nXmlDoc \nFSharpGenericParameter.Constraints \nConstraints \nFSharpGenericParameter.IsSolveAtCompileTime \nIsSolveAtCompileTime \nFSharpGenericParameter.DeclarationLocation \nDeclarationLocation","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparameter.html#IsCompilerGenerated","title":"FSharpGenericParameter.IsCompilerGenerated","content":"FSharpGenericParameter.IsCompilerGenerated \nIsCompilerGenerated \n Indicates if this is a compiler generated type parameter","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparameter.html#Name","title":"FSharpGenericParameter.Name","content":"FSharpGenericParameter.Name \nName \n Get the name of the generic parameter","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparameter.html#IsMeasure","title":"FSharpGenericParameter.IsMeasure","content":"FSharpGenericParameter.IsMeasure \nIsMeasure \n Indicates if this is a measure variable","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparameter.html#XmlDoc","title":"FSharpGenericParameter.XmlDoc","content":"FSharpGenericParameter.XmlDoc \nXmlDoc \n Get the XML documentation for the entity","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparameter.html#Constraints","title":"FSharpGenericParameter.Constraints","content":"FSharpGenericParameter.Constraints \nConstraints \n Get the declared or inferred constraints for the type parameter","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparameter.html#IsSolveAtCompileTime","title":"FSharpGenericParameter.IsSolveAtCompileTime","content":"FSharpGenericParameter.IsSolveAtCompileTime \nIsSolveAtCompileTime \n Indicates if this is a statically resolved type variable","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparameter.html#DeclarationLocation","title":"FSharpGenericParameter.DeclarationLocation","content":"FSharpGenericParameter.DeclarationLocation \nDeclarationLocation \n Get the range of the generic parameter","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparameterconstraint.html","title":"FSharpGenericParameterConstraint","content":"FSharpGenericParameterConstraint \n Represents a constraint on a generic type parameter \nFSharpGenericParameterConstraint.IsDelegateConstraint \nIsDelegateConstraint \nFSharpGenericParameterConstraint.IsEqualityConstraint \nIsEqualityConstraint \nFSharpGenericParameterConstraint.IsCoercesToConstraint \nIsCoercesToConstraint \nFSharpGenericParameterConstraint.DefaultsToConstraintData \nDefaultsToConstraintData \nFSharpGenericParameterConstraint.DelegateConstraintData \nDelegateConstraintData \nFSharpGenericParameterConstraint.IsMemberConstraint \nIsMemberConstraint \nFSharpGenericParameterConstraint.IsSupportsNullConstraint \nIsSupportsNullConstraint \nFSharpGenericParameterConstraint.IsRequiresDefaultConstructorConstraint \nIsRequiresDefaultConstructorConstraint \nFSharpGenericParameterConstraint.IsAllowsRefStructConstraint \nIsAllowsRefStructConstraint \nFSharpGenericParameterConstraint.IsEnumConstraint \nIsEnumConstraint \nFSharpGenericParameterConstraint.IsNonNullableValueTypeConstraint \nIsNonNullableValueTypeConstraint \nFSharpGenericParameterConstraint.IsUnmanagedConstraint \nIsUnmanagedConstraint \nFSharpGenericParameterConstraint.IsReferenceTypeConstraint \nIsReferenceTypeConstraint \nFSharpGenericParameterConstraint.IsSimpleChoiceConstraint \nIsSimpleChoiceConstraint \nFSharpGenericParameterConstraint.SimpleChoices \nSimpleChoices \nFSharpGenericParameterConstraint.EnumConstraintTarget \nEnumConstraintTarget \nFSharpGenericParameterConstraint.IsComparisonConstraint \nIsComparisonConstraint \nFSharpGenericParameterConstraint.IsDefaultsToConstraint \nIsDefaultsToConstraint \nFSharpGenericParameterConstraint.CoercesToTarget \nCoercesToTarget \nFSharpGenericParameterConstraint.IsNotSupportsNullConstraint \nIsNotSupportsNullConstraint \nFSharpGenericParameterConstraint.MemberConstraintData \nMemberConstraintData","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparameterconstraint.html#IsDelegateConstraint","title":"FSharpGenericParameterConstraint.IsDelegateConstraint","content":"FSharpGenericParameterConstraint.IsDelegateConstraint \nIsDelegateConstraint \n Indicates a constraint that a type is a delegate from the given tuple of args to the given return type","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparameterconstraint.html#IsEqualityConstraint","title":"FSharpGenericParameterConstraint.IsEqualityConstraint","content":"FSharpGenericParameterConstraint.IsEqualityConstraint \nIsEqualityConstraint \n Indicates a constraint that a type supports F# generic equality","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparameterconstraint.html#IsCoercesToConstraint","title":"FSharpGenericParameterConstraint.IsCoercesToConstraint","content":"FSharpGenericParameterConstraint.IsCoercesToConstraint \nIsCoercesToConstraint \n Indicates a constraint that a type is a subtype of the given type","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparameterconstraint.html#DefaultsToConstraintData","title":"FSharpGenericParameterConstraint.DefaultsToConstraintData","content":"FSharpGenericParameterConstraint.DefaultsToConstraintData \nDefaultsToConstraintData \n Gets further information about a defaults-to constraint","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparameterconstraint.html#DelegateConstraintData","title":"FSharpGenericParameterConstraint.DelegateConstraintData","content":"FSharpGenericParameterConstraint.DelegateConstraintData \nDelegateConstraintData \n Gets further information about a delegate constraint","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparameterconstraint.html#IsMemberConstraint","title":"FSharpGenericParameterConstraint.IsMemberConstraint","content":"FSharpGenericParameterConstraint.IsMemberConstraint \nIsMemberConstraint \n Indicates a constraint that a type has a member with the given signature","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparameterconstraint.html#IsSupportsNullConstraint","title":"FSharpGenericParameterConstraint.IsSupportsNullConstraint","content":"FSharpGenericParameterConstraint.IsSupportsNullConstraint \nIsSupportsNullConstraint \n Indicates a constraint that a type has a \u0027null\u0027 value","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparameterconstraint.html#IsRequiresDefaultConstructorConstraint","title":"FSharpGenericParameterConstraint.IsRequiresDefaultConstructorConstraint","content":"FSharpGenericParameterConstraint.IsRequiresDefaultConstructorConstraint \nIsRequiresDefaultConstructorConstraint \n Indicates a constraint that a type has a parameterless constructor","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparameterconstraint.html#IsAllowsRefStructConstraint","title":"FSharpGenericParameterConstraint.IsAllowsRefStructConstraint","content":"FSharpGenericParameterConstraint.IsAllowsRefStructConstraint \nIsAllowsRefStructConstraint \n An anti-constraint indicating that ref structs (e.g. Span\u003C\u003E) are allowed here","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparameterconstraint.html#IsEnumConstraint","title":"FSharpGenericParameterConstraint.IsEnumConstraint","content":"FSharpGenericParameterConstraint.IsEnumConstraint \nIsEnumConstraint \n Indicates a constraint that a type is an enum with the given underlying","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparameterconstraint.html#IsNonNullableValueTypeConstraint","title":"FSharpGenericParameterConstraint.IsNonNullableValueTypeConstraint","content":"FSharpGenericParameterConstraint.IsNonNullableValueTypeConstraint \nIsNonNullableValueTypeConstraint \n Indicates a constraint that a type is a non-Nullable value type","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparameterconstraint.html#IsUnmanagedConstraint","title":"FSharpGenericParameterConstraint.IsUnmanagedConstraint","content":"FSharpGenericParameterConstraint.IsUnmanagedConstraint \nIsUnmanagedConstraint \n Indicates a constraint that a type is an unmanaged type","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparameterconstraint.html#IsReferenceTypeConstraint","title":"FSharpGenericParameterConstraint.IsReferenceTypeConstraint","content":"FSharpGenericParameterConstraint.IsReferenceTypeConstraint \nIsReferenceTypeConstraint \n Indicates a constraint that a type is a reference type","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparameterconstraint.html#IsSimpleChoiceConstraint","title":"FSharpGenericParameterConstraint.IsSimpleChoiceConstraint","content":"FSharpGenericParameterConstraint.IsSimpleChoiceConstraint \nIsSimpleChoiceConstraint \n Indicates a constraint that is a type is a simple choice between one of the given ground types. Used by printf format strings.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparameterconstraint.html#SimpleChoices","title":"FSharpGenericParameterConstraint.SimpleChoices","content":"FSharpGenericParameterConstraint.SimpleChoices \nSimpleChoices \n Gets further information about a choice constraint","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparameterconstraint.html#EnumConstraintTarget","title":"FSharpGenericParameterConstraint.EnumConstraintTarget","content":"FSharpGenericParameterConstraint.EnumConstraintTarget \nEnumConstraintTarget \n Gets further information about an enumeration constraint","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparameterconstraint.html#IsComparisonConstraint","title":"FSharpGenericParameterConstraint.IsComparisonConstraint","content":"FSharpGenericParameterConstraint.IsComparisonConstraint \nIsComparisonConstraint \n Indicates a constraint that a type supports F# generic comparison","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparameterconstraint.html#IsDefaultsToConstraint","title":"FSharpGenericParameterConstraint.IsDefaultsToConstraint","content":"FSharpGenericParameterConstraint.IsDefaultsToConstraint \nIsDefaultsToConstraint \n Indicates a default value for an inference type variable should it be neither generalized nor solved","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparameterconstraint.html#CoercesToTarget","title":"FSharpGenericParameterConstraint.CoercesToTarget","content":"FSharpGenericParameterConstraint.CoercesToTarget \nCoercesToTarget \n Gets further information about a coerces-to constraint","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparameterconstraint.html#IsNotSupportsNullConstraint","title":"FSharpGenericParameterConstraint.IsNotSupportsNullConstraint","content":"FSharpGenericParameterConstraint.IsNotSupportsNullConstraint \nIsNotSupportsNullConstraint \n Indicates a constraint that a type doesn\u0027t support nullness","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparameterconstraint.html#MemberConstraintData","title":"FSharpGenericParameterConstraint.MemberConstraintData","content":"FSharpGenericParameterConstraint.MemberConstraintData \nMemberConstraintData \n Gets further information about a member constraint","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparameterdefaultstoconstraint.html","title":"FSharpGenericParameterDefaultsToConstraint","content":"FSharpGenericParameterDefaultsToConstraint \n Represents further information about a \u0027defaults to\u0027 constraint on a generic type parameter \nFSharpGenericParameterDefaultsToConstraint.DefaultsToTarget \nDefaultsToTarget \nFSharpGenericParameterDefaultsToConstraint.DefaultsToPriority \nDefaultsToPriority","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparameterdefaultstoconstraint.html#DefaultsToTarget","title":"FSharpGenericParameterDefaultsToConstraint.DefaultsToTarget","content":"FSharpGenericParameterDefaultsToConstraint.DefaultsToTarget \nDefaultsToTarget \n Get the default type associated with the \u0027defaults to\u0027 constraint","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparameterdefaultstoconstraint.html#DefaultsToPriority","title":"FSharpGenericParameterDefaultsToConstraint.DefaultsToPriority","content":"FSharpGenericParameterDefaultsToConstraint.DefaultsToPriority \nDefaultsToPriority \n Get the priority off the \u0027defaults to\u0027 constraint","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparameterdelegateconstraint.html","title":"FSharpGenericParameterDelegateConstraint","content":"FSharpGenericParameterDelegateConstraint \n Represents further information about a delegate constraint on a generic type parameter \nFSharpGenericParameterDelegateConstraint.DelegateTupledArgumentType \nDelegateTupledArgumentType \nFSharpGenericParameterDelegateConstraint.DelegateReturnType \nDelegateReturnType","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparameterdelegateconstraint.html#DelegateTupledArgumentType","title":"FSharpGenericParameterDelegateConstraint.DelegateTupledArgumentType","content":"FSharpGenericParameterDelegateConstraint.DelegateTupledArgumentType \nDelegateTupledArgumentType \n Get the tupled argument type required by the constraint","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparameterdelegateconstraint.html#DelegateReturnType","title":"FSharpGenericParameterDelegateConstraint.DelegateReturnType","content":"FSharpGenericParameterDelegateConstraint.DelegateReturnType \nDelegateReturnType \n Get the return type required by the constraint","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparametermemberconstraint.html","title":"FSharpGenericParameterMemberConstraint","content":"FSharpGenericParameterMemberConstraint \n Represents further information about a member constraint on a generic type parameter \nFSharpGenericParameterMemberConstraint.MemberReturnType \nMemberReturnType \nFSharpGenericParameterMemberConstraint.MemberName \nMemberName \nFSharpGenericParameterMemberConstraint.MemberSources \nMemberSources \nFSharpGenericParameterMemberConstraint.MemberArgumentTypes \nMemberArgumentTypes \nFSharpGenericParameterMemberConstraint.MemberIsStatic \nMemberIsStatic","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparametermemberconstraint.html#MemberReturnType","title":"FSharpGenericParameterMemberConstraint.MemberReturnType","content":"FSharpGenericParameterMemberConstraint.MemberReturnType \nMemberReturnType \n Get the return type of the method required by the constraint","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparametermemberconstraint.html#MemberName","title":"FSharpGenericParameterMemberConstraint.MemberName","content":"FSharpGenericParameterMemberConstraint.MemberName \nMemberName \n Get the name of the method required by the constraint","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparametermemberconstraint.html#MemberSources","title":"FSharpGenericParameterMemberConstraint.MemberSources","content":"FSharpGenericParameterMemberConstraint.MemberSources \nMemberSources \n Get the types that may be used to satisfy the constraint","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparametermemberconstraint.html#MemberArgumentTypes","title":"FSharpGenericParameterMemberConstraint.MemberArgumentTypes","content":"FSharpGenericParameterMemberConstraint.MemberArgumentTypes \nMemberArgumentTypes \n Get the argument types of the method required by the constraint","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparametermemberconstraint.html#MemberIsStatic","title":"FSharpGenericParameterMemberConstraint.MemberIsStatic","content":"FSharpGenericParameterMemberConstraint.MemberIsStatic \nMemberIsStatic \n Indicates if the method required by the constraint must be static","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpimplementationfilecontents.html","title":"FSharpImplementationFileContents","content":"FSharpImplementationFileContents \n Represents the definitional contents of a single file or fragment in an assembly, as seen by the F# language \nFSharpImplementationFileContents.IsScript \nIsScript \nFSharpImplementationFileContents.HasExplicitEntryPoint \nHasExplicitEntryPoint \nFSharpImplementationFileContents.QualifiedName \nQualifiedName \nFSharpImplementationFileContents.FileName \nFileName \nFSharpImplementationFileContents.Declarations \nDeclarations","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpimplementationfilecontents.html#IsScript","title":"FSharpImplementationFileContents.IsScript","content":"FSharpImplementationFileContents.IsScript \nIsScript \n Indicates if the implementation file is a script","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpimplementationfilecontents.html#HasExplicitEntryPoint","title":"FSharpImplementationFileContents.HasExplicitEntryPoint","content":"FSharpImplementationFileContents.HasExplicitEntryPoint \nHasExplicitEntryPoint \n Indicates if the implementation file has an explicit entry point","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpimplementationfilecontents.html#QualifiedName","title":"FSharpImplementationFileContents.QualifiedName","content":"FSharpImplementationFileContents.QualifiedName \nQualifiedName \n The qualified name acts to fully-qualify module specifications and implementations","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpimplementationfilecontents.html#FileName","title":"FSharpImplementationFileContents.FileName","content":"FSharpImplementationFileContents.FileName \nFileName \n Get the system path of the implementation file","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpimplementationfilecontents.html#Declarations","title":"FSharpImplementationFileContents.Declarations","content":"FSharpImplementationFileContents.Declarations \nDeclarations \n Get the declarations that make up this implementation file","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpimplementationfiledeclaration.html","title":"FSharpImplementationFileDeclaration","content":"FSharpImplementationFileDeclaration \n Represents a declaration in an implementation file, as seen by the F# language \nFSharpImplementationFileDeclaration.IsMemberOrFunctionOrValue \nIsMemberOrFunctionOrValue \nFSharpImplementationFileDeclaration.IsInitAction \nIsInitAction \nFSharpImplementationFileDeclaration.IsEntity \nIsEntity \nFSharpImplementationFileDeclaration.Entity \nEntity \nFSharpImplementationFileDeclaration.MemberOrFunctionOrValue \nMemberOrFunctionOrValue \nFSharpImplementationFileDeclaration.InitAction \nInitAction","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpimplementationfiledeclaration.html#IsMemberOrFunctionOrValue","title":"FSharpImplementationFileDeclaration.IsMemberOrFunctionOrValue","content":"FSharpImplementationFileDeclaration.IsMemberOrFunctionOrValue \nIsMemberOrFunctionOrValue \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpimplementationfiledeclaration.html#IsInitAction","title":"FSharpImplementationFileDeclaration.IsInitAction","content":"FSharpImplementationFileDeclaration.IsInitAction \nIsInitAction \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpimplementationfiledeclaration.html#IsEntity","title":"FSharpImplementationFileDeclaration.IsEntity","content":"FSharpImplementationFileDeclaration.IsEntity \nIsEntity \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpimplementationfiledeclaration.html#Entity","title":"FSharpImplementationFileDeclaration.Entity","content":"FSharpImplementationFileDeclaration.Entity \nEntity \n Represents the declaration of a type","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpimplementationfiledeclaration.html#MemberOrFunctionOrValue","title":"FSharpImplementationFileDeclaration.MemberOrFunctionOrValue","content":"FSharpImplementationFileDeclaration.MemberOrFunctionOrValue \nMemberOrFunctionOrValue \n Represents the declaration of a member, function or value, including the parameters and body of the member","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpimplementationfiledeclaration.html#InitAction","title":"FSharpImplementationFileDeclaration.InitAction","content":"FSharpImplementationFileDeclaration.InitAction \nInitAction \n Represents the declaration of a static initialization action","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpinlineannotation.html","title":"FSharpInlineAnnotation","content":"FSharpInlineAnnotation \n \nFSharpInlineAnnotation.IsNeverInline \nIsNeverInline \nFSharpInlineAnnotation.IsOptionalInline \nIsOptionalInline \nFSharpInlineAnnotation.IsAggressiveInline \nIsAggressiveInline \nFSharpInlineAnnotation.IsAlwaysInline \nIsAlwaysInline \nFSharpInlineAnnotation.AlwaysInline \nAlwaysInline \nFSharpInlineAnnotation.OptionalInline \nOptionalInline \nFSharpInlineAnnotation.NeverInline \nNeverInline \nFSharpInlineAnnotation.AggressiveInline \nAggressiveInline","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpinlineannotation.html#IsNeverInline","title":"FSharpInlineAnnotation.IsNeverInline","content":"FSharpInlineAnnotation.IsNeverInline \nIsNeverInline \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpinlineannotation.html#IsOptionalInline","title":"FSharpInlineAnnotation.IsOptionalInline","content":"FSharpInlineAnnotation.IsOptionalInline \nIsOptionalInline \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpinlineannotation.html#IsAggressiveInline","title":"FSharpInlineAnnotation.IsAggressiveInline","content":"FSharpInlineAnnotation.IsAggressiveInline \nIsAggressiveInline \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpinlineannotation.html#IsAlwaysInline","title":"FSharpInlineAnnotation.IsAlwaysInline","content":"FSharpInlineAnnotation.IsAlwaysInline \nIsAlwaysInline \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpinlineannotation.html#AlwaysInline","title":"FSharpInlineAnnotation.AlwaysInline","content":"FSharpInlineAnnotation.AlwaysInline \nAlwaysInline \n Indicates the value is always inlined in statically compiled code","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpinlineannotation.html#OptionalInline","title":"FSharpInlineAnnotation.OptionalInline","content":"FSharpInlineAnnotation.OptionalInline \nOptionalInline \n Indicates the value is optionally inlined","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpinlineannotation.html#NeverInline","title":"FSharpInlineAnnotation.NeverInline","content":"FSharpInlineAnnotation.NeverInline \nNeverInline \n Indicates the value is never inlined","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpinlineannotation.html#AggressiveInline","title":"FSharpInlineAnnotation.AggressiveInline","content":"FSharpInlineAnnotation.AggressiveInline \nAggressiveInline \n Indicates the value is aggressively inlined by the .NET runtime","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html","title":"FSharpMemberOrFunctionOrValue","content":"FSharpMemberOrFunctionOrValue \n A subtype of F# symbol that represents an F# method, property, event, function or value, including extension members. \nFSharpMemberOrFunctionOrValue.FormatLayout \nFormatLayout \nFSharpMemberOrFunctionOrValue.GetOverloads \nGetOverloads \nFSharpMemberOrFunctionOrValue.GetReturnTypeLayout \nGetReturnTypeLayout \nFSharpMemberOrFunctionOrValue.GetValSignatureText \nGetValSignatureText \nFSharpMemberOrFunctionOrValue.GetWitnessPassingInfo \nGetWitnessPassingInfo \nFSharpMemberOrFunctionOrValue.TryGetFullCompiledOperatorNameIdents \nTryGetFullCompiledOperatorNameIdents \nFSharpMemberOrFunctionOrValue.TryGetFullDisplayName \nTryGetFullDisplayName \nFSharpMemberOrFunctionOrValue.IsFunction \nIsFunction \nFSharpMemberOrFunctionOrValue.EventForFSharpProperty \nEventForFSharpProperty \nFSharpMemberOrFunctionOrValue.ReturnParameter \nReturnParameter \nFSharpMemberOrFunctionOrValue.HasSetterMethod \nHasSetterMethod \nFSharpMemberOrFunctionOrValue.IsMember \nIsMember \nFSharpMemberOrFunctionOrValue.SetterMethod \nSetterMethod \nFSharpMemberOrFunctionOrValue.IsMemberThisValue \nIsMemberThisValue \nFSharpMemberOrFunctionOrValue.XmlDoc \nXmlDoc \nFSharpMemberOrFunctionOrValue.IsRefCell \nIsRefCell \nFSharpMemberOrFunctionOrValue.IsDispatchSlot \nIsDispatchSlot \nFSharpMemberOrFunctionOrValue.ApparentEnclosingType \nApparentEnclosingType \nFSharpMemberOrFunctionOrValue.HasGetterMethod \nHasGetterMethod \nFSharpMemberOrFunctionOrValue.IsUnionCaseTester \nIsUnionCaseTester \nFSharpMemberOrFunctionOrValue.IsEventRemoveMethod \nIsEventRemoveMethod \nFSharpMemberOrFunctionOrValue.IsTypeFunction \nIsTypeFunction \nFSharpMemberOrFunctionOrValue.IsReferencedValue \nIsReferencedValue \nFSharpMemberOrFunctionOrValue.InlineAnnotation \nInlineAnnotation \nFSharpMemberOrFunctionOrValue.LogicalName \nLogicalName \nFSharpMemberOrFunctionOrValue.FullType \nFullType \nFSharpMemberOrFunctionOrValue.IsImplicitConstructor \nIsImplicitConstructor \nFSharpMemberOrFunctionOrValue.XmlDocSig \nXmlDocSig \nFSharpMemberOrFunctionOrValue.IsConstructor \nIsConstructor \nFSharpMemberOrFunctionOrValue.EventDelegateType \nEventDelegateType \nFSharpMemberOrFunctionOrValue.DeclarationLocation \nDeclarationLocation \nFSharpMemberOrFunctionOrValue.IsEventAddMethod \nIsEventAddMethod \nFSharpMemberOrFunctionOrValue.IsExtensionMember \nIsExtensionMember \nFSharpMemberOrFunctionOrValue.HasSignatureFile \nHasSignatureFile \nFSharpMemberOrFunctionOrValue.IsPropertySetterMethod \nIsPropertySetterMethod \nFSharpMemberOrFunctionOrValue.IsEvent \nIsEvent \nFSharpMemberOrFunctionOrValue.IsMethod \nIsMethod \nFSharpMemberOrFunctionOrValue.IsProperty \nIsProperty \nFSharpMemberOrFunctionOrValue.IsModuleValueOrMember \nIsModuleValueOrMember \nFSharpMemberOrFunctionOrValue.CompiledName \nCompiledName \nFSharpMemberOrFunctionOrValue.IsInstanceMemberInCompiledCode \nIsInstanceMemberInCompiledCode \nFSharpMemberOrFunctionOrValue.IsValCompiledAsMethod \nIsValCompiledAsMethod \nFSharpMemberOrFunctionOrValue.EventRemoveMethod \nEventRemoveMethod \nFSharpMemberOrFunctionOrValue.IsUnresolved \nIsUnresolved \nFSharpMemberOrFunctionOrValue.IsCompilerGenerated \nIsCompilerGenerated \nFSharpMemberOrFunctionOrValue.DeclaringEntity \nDeclaringEntity \nFSharpMemberOrFunctionOrValue.GenericParameters \nGenericParameters \nFSharpMemberOrFunctionOrValue.IsExplicitInterfaceImplementation \nIsExplicitInterfaceImplementation \nFSharpMemberOrFunctionOrValue.IsInstanceMember \nIsInstanceMember \nFSharpMemberOrFunctionOrValue.ApparentEnclosingEntity \nApparentEnclosingEntity \nFSharpMemberOrFunctionOrValue.EventIsStandard \nEventIsStandard \nFSharpMemberOrFunctionOrValue.DisplayName \nDisplayName \nFSharpMemberOrFunctionOrValue.IsOverrideOrExplicitInterfaceImplementation \nIsOverrideOrExplicitInterfaceImplementation \nFSharpMemberOrFunctionOrValue.CurriedParameterGroups \nCurriedParameterGroups \nFSharpMemberOrFunctionOrValue.IsMutable \nIsMutable \nFSharpMemberOrFunctionOrValue.IsConstructorThisValue \nIsConstructorThisValue \nFSharpMemberOrFunctionOrValue.ImplementedAbstractSignatures \nImplementedAbstractSignatures \nFSharpMemberOrFunctionOrValue.IsActivePattern \nIsActivePattern \nFSharpMemberOrFunctionOrValue.FullTypeSafe \nFullTypeSafe \nFSharpMemberOrFunctionOrValue.IsBaseValue \nIsBaseValue \nFSharpMemberOrFunctionOrValue.EventAddMethod \nEventAddMethod \nFSharpMemberOrFunctionOrValue.GetterMethod \nGetterMethod \nFSharpMemberOrFunctionOrValue.IsPropertyGetterMethod \nIsPropertyGetterMethod \nFSharpMemberOrFunctionOrValue.LiteralValue \nLiteralValue \nFSharpMemberOrFunctionOrValue.IsValue \nIsValue","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#FormatLayout","title":"FSharpMemberOrFunctionOrValue.FormatLayout","content":"FSharpMemberOrFunctionOrValue.FormatLayout \nFormatLayout \n Format the type using the rules of the given display context","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#GetOverloads","title":"FSharpMemberOrFunctionOrValue.GetOverloads","content":"FSharpMemberOrFunctionOrValue.GetOverloads \nGetOverloads \nGets the overloads for the current method.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#GetReturnTypeLayout","title":"FSharpMemberOrFunctionOrValue.GetReturnTypeLayout","content":"FSharpMemberOrFunctionOrValue.GetReturnTypeLayout \nGetReturnTypeLayout \n Format the type using the rules of the given display context","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#GetValSignatureText","title":"FSharpMemberOrFunctionOrValue.GetValSignatureText","content":"FSharpMemberOrFunctionOrValue.GetValSignatureText \nGetValSignatureText \n Get the signature text to include this Symbol into an existing signature file.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#GetWitnessPassingInfo","title":"FSharpMemberOrFunctionOrValue.GetWitnessPassingInfo","content":"FSharpMemberOrFunctionOrValue.GetWitnessPassingInfo \nGetWitnessPassingInfo \n Check if this method has an entrypoint that accepts witness arguments and if so return\n the name of that entrypoint and information about the additional witness arguments","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#TryGetFullCompiledOperatorNameIdents","title":"FSharpMemberOrFunctionOrValue.TryGetFullCompiledOperatorNameIdents","content":"FSharpMemberOrFunctionOrValue.TryGetFullCompiledOperatorNameIdents \nTryGetFullCompiledOperatorNameIdents \n Full operator compiled name.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#TryGetFullDisplayName","title":"FSharpMemberOrFunctionOrValue.TryGetFullDisplayName","content":"FSharpMemberOrFunctionOrValue.TryGetFullDisplayName \nTryGetFullDisplayName \n Full name with last part replaced with display name.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#IsFunction","title":"FSharpMemberOrFunctionOrValue.IsFunction","content":"FSharpMemberOrFunctionOrValue.IsFunction \nIsFunction \n Indicated if this is a function","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#EventForFSharpProperty","title":"FSharpMemberOrFunctionOrValue.EventForFSharpProperty","content":"FSharpMemberOrFunctionOrValue.EventForFSharpProperty \nEventForFSharpProperty \n Gets the event symbol implied by the use of a property,\n for the case where the property is actually an F#-declared CLIEvent.\n\n Uses of F#-declared events are considered to be properties as far as the language specification\n and this API are concerned.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#ReturnParameter","title":"FSharpMemberOrFunctionOrValue.ReturnParameter","content":"FSharpMemberOrFunctionOrValue.ReturnParameter \nReturnParameter \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#HasSetterMethod","title":"FSharpMemberOrFunctionOrValue.HasSetterMethod","content":"FSharpMemberOrFunctionOrValue.HasSetterMethod \nHasSetterMethod \n Indicates if this is a property and there exists an associated setter method","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#IsMember","title":"FSharpMemberOrFunctionOrValue.IsMember","content":"FSharpMemberOrFunctionOrValue.IsMember \nIsMember \n Indicates if this is a member, including extension members?","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#SetterMethod","title":"FSharpMemberOrFunctionOrValue.SetterMethod","content":"FSharpMemberOrFunctionOrValue.SetterMethod \nSetterMethod \n Get an associated setter method of the property","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#IsMemberThisValue","title":"FSharpMemberOrFunctionOrValue.IsMemberThisValue","content":"FSharpMemberOrFunctionOrValue.IsMemberThisValue \nIsMemberThisValue \n Indicates if this is the \u0022x\u0022 in \u0022member x.M = ...\u0022","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#XmlDoc","title":"FSharpMemberOrFunctionOrValue.XmlDoc","content":"FSharpMemberOrFunctionOrValue.XmlDoc \nXmlDoc \n Get the XML documentation for the entity","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#IsRefCell","title":"FSharpMemberOrFunctionOrValue.IsRefCell","content":"FSharpMemberOrFunctionOrValue.IsRefCell \nIsRefCell \n Indicates if this is a ref cell","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#IsDispatchSlot","title":"FSharpMemberOrFunctionOrValue.IsDispatchSlot","content":"FSharpMemberOrFunctionOrValue.IsDispatchSlot \nIsDispatchSlot \n Indicates if this is an abstract member?","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#ApparentEnclosingType","title":"FSharpMemberOrFunctionOrValue.ApparentEnclosingType","content":"FSharpMemberOrFunctionOrValue.ApparentEnclosingType \nApparentEnclosingType \n Get the logical enclosing type, which for an extension member is type being extended","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#HasGetterMethod","title":"FSharpMemberOrFunctionOrValue.HasGetterMethod","content":"FSharpMemberOrFunctionOrValue.HasGetterMethod \nHasGetterMethod \n Indicates if this is a property and there exists an associated getter method","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#IsUnionCaseTester","title":"FSharpMemberOrFunctionOrValue.IsUnionCaseTester","content":"FSharpMemberOrFunctionOrValue.IsUnionCaseTester \nIsUnionCaseTester \n Indicates if the property or getter method is part of a IsABC union case tester implied by a union case definition","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#IsEventRemoveMethod","title":"FSharpMemberOrFunctionOrValue.IsEventRemoveMethod","content":"FSharpMemberOrFunctionOrValue.IsEventRemoveMethod \nIsEventRemoveMethod \n Indicates if this is a remove method for an event","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#IsTypeFunction","title":"FSharpMemberOrFunctionOrValue.IsTypeFunction","content":"FSharpMemberOrFunctionOrValue.IsTypeFunction \nIsTypeFunction \n Indicates if this is an F# type function","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#IsReferencedValue","title":"FSharpMemberOrFunctionOrValue.IsReferencedValue","content":"FSharpMemberOrFunctionOrValue.IsReferencedValue \nIsReferencedValue \n Indicates if this is a value that has been referenced","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#InlineAnnotation","title":"FSharpMemberOrFunctionOrValue.InlineAnnotation","content":"FSharpMemberOrFunctionOrValue.InlineAnnotation \nInlineAnnotation \n Get a result indicating if this is a must-inline value","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#LogicalName","title":"FSharpMemberOrFunctionOrValue.LogicalName","content":"FSharpMemberOrFunctionOrValue.LogicalName \nLogicalName \n Get the logical name of the member","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#FullType","title":"FSharpMemberOrFunctionOrValue.FullType","content":"FSharpMemberOrFunctionOrValue.FullType \nFullType \n Get the full type of the member, function or value when used as a first class value","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#IsImplicitConstructor","title":"FSharpMemberOrFunctionOrValue.IsImplicitConstructor","content":"FSharpMemberOrFunctionOrValue.IsImplicitConstructor \nIsImplicitConstructor \n Indicates if this is an implicit constructor?","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#XmlDocSig","title":"FSharpMemberOrFunctionOrValue.XmlDocSig","content":"FSharpMemberOrFunctionOrValue.XmlDocSig \nXmlDocSig \n XML documentation signature for the value, used for .xml file lookup for compiled code","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#IsConstructor","title":"FSharpMemberOrFunctionOrValue.IsConstructor","content":"FSharpMemberOrFunctionOrValue.IsConstructor \nIsConstructor \n Indicates if this is a constructor.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#EventDelegateType","title":"FSharpMemberOrFunctionOrValue.EventDelegateType","content":"FSharpMemberOrFunctionOrValue.EventDelegateType \nEventDelegateType \n Get an associated delegate type of an event","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#DeclarationLocation","title":"FSharpMemberOrFunctionOrValue.DeclarationLocation","content":"FSharpMemberOrFunctionOrValue.DeclarationLocation \nDeclarationLocation \n Get the declaration location of the member, function or value","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#IsEventAddMethod","title":"FSharpMemberOrFunctionOrValue.IsEventAddMethod","content":"FSharpMemberOrFunctionOrValue.IsEventAddMethod \nIsEventAddMethod \n Indicates if this is an add method for an event","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#IsExtensionMember","title":"FSharpMemberOrFunctionOrValue.IsExtensionMember","content":"FSharpMemberOrFunctionOrValue.IsExtensionMember \nIsExtensionMember \n Indicates if this is an extension member?","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#HasSignatureFile","title":"FSharpMemberOrFunctionOrValue.HasSignatureFile","content":"FSharpMemberOrFunctionOrValue.HasSignatureFile \nHasSignatureFile \n Indicates if the value has a signature file counterpart","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#IsPropertySetterMethod","title":"FSharpMemberOrFunctionOrValue.IsPropertySetterMethod","content":"FSharpMemberOrFunctionOrValue.IsPropertySetterMethod \nIsPropertySetterMethod \n Indicates if this is a setter method for a property, or a use of a property in setter mode","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#IsEvent","title":"FSharpMemberOrFunctionOrValue.IsEvent","content":"FSharpMemberOrFunctionOrValue.IsEvent \nIsEvent \n Indicates if this is an event member","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#IsMethod","title":"FSharpMemberOrFunctionOrValue.IsMethod","content":"FSharpMemberOrFunctionOrValue.IsMethod \nIsMethod \n Indicates if this is a method member","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#IsProperty","title":"FSharpMemberOrFunctionOrValue.IsProperty","content":"FSharpMemberOrFunctionOrValue.IsProperty \nIsProperty \n Indicates if this is a property member","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#IsModuleValueOrMember","title":"FSharpMemberOrFunctionOrValue.IsModuleValueOrMember","content":"FSharpMemberOrFunctionOrValue.IsModuleValueOrMember \nIsModuleValueOrMember \n Indicates if this is a module or member value","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#CompiledName","title":"FSharpMemberOrFunctionOrValue.CompiledName","content":"FSharpMemberOrFunctionOrValue.CompiledName \nCompiledName \n Get the member name in compiled code","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#IsInstanceMemberInCompiledCode","title":"FSharpMemberOrFunctionOrValue.IsInstanceMemberInCompiledCode","content":"FSharpMemberOrFunctionOrValue.IsInstanceMemberInCompiledCode \nIsInstanceMemberInCompiledCode \n Indicates if this is an instance member in compiled code.\n\n Explanatory note: some members such as IsNone and IsSome on types with UseNullAsTrueValue appear\n as instance members in F# code but are compiled as static members.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#IsValCompiledAsMethod","title":"FSharpMemberOrFunctionOrValue.IsValCompiledAsMethod","content":"FSharpMemberOrFunctionOrValue.IsValCompiledAsMethod \nIsValCompiledAsMethod \n Indicated if this is a value compiled to a method","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#EventRemoveMethod","title":"FSharpMemberOrFunctionOrValue.EventRemoveMethod","content":"FSharpMemberOrFunctionOrValue.EventRemoveMethod \nEventRemoveMethod \n Get an associated remove method of an event","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#IsUnresolved","title":"FSharpMemberOrFunctionOrValue.IsUnresolved","content":"FSharpMemberOrFunctionOrValue.IsUnresolved \nIsUnresolved \n Indicates if the member, function or value is in an unresolved assembly","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#IsCompilerGenerated","title":"FSharpMemberOrFunctionOrValue.IsCompilerGenerated","content":"FSharpMemberOrFunctionOrValue.IsCompilerGenerated \nIsCompilerGenerated \n Indicates if this is a compiler generated value","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#DeclaringEntity","title":"FSharpMemberOrFunctionOrValue.DeclaringEntity","content":"FSharpMemberOrFunctionOrValue.DeclaringEntity \nDeclaringEntity \n Get the enclosing entity for the definition","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#GenericParameters","title":"FSharpMemberOrFunctionOrValue.GenericParameters","content":"FSharpMemberOrFunctionOrValue.GenericParameters \nGenericParameters \n Get the typars of the member, function or value","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#IsExplicitInterfaceImplementation","title":"FSharpMemberOrFunctionOrValue.IsExplicitInterfaceImplementation","content":"FSharpMemberOrFunctionOrValue.IsExplicitInterfaceImplementation \nIsExplicitInterfaceImplementation \n Indicates if this is an explicit implementation of an interface member","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#IsInstanceMember","title":"FSharpMemberOrFunctionOrValue.IsInstanceMember","content":"FSharpMemberOrFunctionOrValue.IsInstanceMember \nIsInstanceMember \n Indicates if this is an instance member, when seen from F#?","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#ApparentEnclosingEntity","title":"FSharpMemberOrFunctionOrValue.ApparentEnclosingEntity","content":"FSharpMemberOrFunctionOrValue.ApparentEnclosingEntity \nApparentEnclosingEntity \n Get the logical enclosing entity, which for an extension member is type being extended","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#EventIsStandard","title":"FSharpMemberOrFunctionOrValue.EventIsStandard","content":"FSharpMemberOrFunctionOrValue.EventIsStandard \nEventIsStandard \n Indicate if an event can be considered to be a property for the F# type system of type IEvent or IDelegateEvent.\n In this case ReturnParameter will have a type corresponding to the property type.  For\n non-standard events, ReturnParameter will have a type corresponding to the delegate type.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#DisplayName","title":"FSharpMemberOrFunctionOrValue.DisplayName","content":"FSharpMemberOrFunctionOrValue.DisplayName \nDisplayName \n Get the name as presented in F# error messages and documentation","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#IsOverrideOrExplicitInterfaceImplementation","title":"FSharpMemberOrFunctionOrValue.IsOverrideOrExplicitInterfaceImplementation","content":"FSharpMemberOrFunctionOrValue.IsOverrideOrExplicitInterfaceImplementation \nIsOverrideOrExplicitInterfaceImplementation \n Indicates if this is an \u0027override\u0027, \u0027default\u0027 or an explicit implementation of an interface member","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#CurriedParameterGroups","title":"FSharpMemberOrFunctionOrValue.CurriedParameterGroups","content":"FSharpMemberOrFunctionOrValue.CurriedParameterGroups \nCurriedParameterGroups \nList of list of parameters, where each nested item represents a defined parameter \n\n Typically, there is only one nested list.\n However, code such as \u0027f (a, b) (c, d)\u0027 contains two groups, each with two parameters.\n In that example, there is a list made up of two lists, each with a parameter.\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#IsMutable","title":"FSharpMemberOrFunctionOrValue.IsMutable","content":"FSharpMemberOrFunctionOrValue.IsMutable \nIsMutable \n Indicates if this is a mutable value","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#IsConstructorThisValue","title":"FSharpMemberOrFunctionOrValue.IsConstructorThisValue","content":"FSharpMemberOrFunctionOrValue.IsConstructorThisValue \nIsConstructorThisValue \n Indicates if this is the \u0022x\u0022 in \u0022type C() as x = ...\u0022","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#ImplementedAbstractSignatures","title":"FSharpMemberOrFunctionOrValue.ImplementedAbstractSignatures","content":"FSharpMemberOrFunctionOrValue.ImplementedAbstractSignatures \nImplementedAbstractSignatures \n Gets the list of the abstract slot signatures implemented by the member","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#IsActivePattern","title":"FSharpMemberOrFunctionOrValue.IsActivePattern","content":"FSharpMemberOrFunctionOrValue.IsActivePattern \nIsActivePattern \n Indicates if this value or member is an F# active pattern","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#FullTypeSafe","title":"FSharpMemberOrFunctionOrValue.FullTypeSafe","content":"FSharpMemberOrFunctionOrValue.FullTypeSafe \nFullTypeSafe \n Safe version of \u0060FullType\u0060.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#IsBaseValue","title":"FSharpMemberOrFunctionOrValue.IsBaseValue","content":"FSharpMemberOrFunctionOrValue.IsBaseValue \nIsBaseValue \n Indicates if this is \u0022base\u0022 in \u0022base.M(...)\u0022","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#EventAddMethod","title":"FSharpMemberOrFunctionOrValue.EventAddMethod","content":"FSharpMemberOrFunctionOrValue.EventAddMethod \nEventAddMethod \n Get an associated add method of an event","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#GetterMethod","title":"FSharpMemberOrFunctionOrValue.GetterMethod","content":"FSharpMemberOrFunctionOrValue.GetterMethod \nGetterMethod \n Get an associated getter method of the property","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#IsPropertyGetterMethod","title":"FSharpMemberOrFunctionOrValue.IsPropertyGetterMethod","content":"FSharpMemberOrFunctionOrValue.IsPropertyGetterMethod \nIsPropertyGetterMethod \n Indicates if this is a getter method for a property, or a use of a property in getter mode","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#LiteralValue","title":"FSharpMemberOrFunctionOrValue.LiteralValue","content":"FSharpMemberOrFunctionOrValue.LiteralValue \nLiteralValue \n Indicates if this is a [\u003CLiteral\u003E] value, and if so what value? (may be null)","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#IsValue","title":"FSharpMemberOrFunctionOrValue.IsValue","content":"FSharpMemberOrFunctionOrValue.IsValue \nIsValue \n Indicated if this is a value","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpobjectexproverride.html","title":"FSharpObjectExprOverride","content":"FSharpObjectExprOverride \n Represents a checked method in an object expression, as seen by the F# language. \nFSharpObjectExprOverride.GenericParameters \nGenericParameters \nFSharpObjectExprOverride.Signature \nSignature \nFSharpObjectExprOverride.CurriedParameterGroups \nCurriedParameterGroups \nFSharpObjectExprOverride.Body \nBody","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpobjectexproverride.html#GenericParameters","title":"FSharpObjectExprOverride.GenericParameters","content":"FSharpObjectExprOverride.GenericParameters \nGenericParameters \n The generic parameters of the method","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpobjectexproverride.html#Signature","title":"FSharpObjectExprOverride.Signature","content":"FSharpObjectExprOverride.Signature \nSignature \n The signature of the implemented abstract slot","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpobjectexproverride.html#CurriedParameterGroups","title":"FSharpObjectExprOverride.CurriedParameterGroups","content":"FSharpObjectExprOverride.CurriedParameterGroups \nCurriedParameterGroups \n The parameters of the method","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpobjectexproverride.html#Body","title":"FSharpObjectExprOverride.Body","content":"FSharpObjectExprOverride.Body \nBody \n The expression that forms the body of the method","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpopendeclaration.html","title":"FSharpOpenDeclaration","content":"FSharpOpenDeclaration \n Represents open declaration in F# code. \nFSharpOpenDeclaration.Modules \nModules \nFSharpOpenDeclaration.AppliedScope \nAppliedScope \nFSharpOpenDeclaration.Range \nRange \nFSharpOpenDeclaration.Target \nTarget \nFSharpOpenDeclaration.Types \nTypes \nFSharpOpenDeclaration.LongId \nLongId \nFSharpOpenDeclaration.IsOwnNamespace \nIsOwnNamespace","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpopendeclaration.html#Modules","title":"FSharpOpenDeclaration.Modules","content":"FSharpOpenDeclaration.Modules \nModules \n Modules or namespaces which is opened with this declaration.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpopendeclaration.html#AppliedScope","title":"FSharpOpenDeclaration.AppliedScope","content":"FSharpOpenDeclaration.AppliedScope \nAppliedScope \n Scope in which open declaration is visible.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpopendeclaration.html#Range","title":"FSharpOpenDeclaration.Range","content":"FSharpOpenDeclaration.Range \nRange \n Range of the open declaration.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpopendeclaration.html#Target","title":"FSharpOpenDeclaration.Target","content":"FSharpOpenDeclaration.Target \nTarget \n The syntactic target of the declaration","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpopendeclaration.html#Types","title":"FSharpOpenDeclaration.Types","content":"FSharpOpenDeclaration.Types \nTypes \n Types whose static members and nested types is opened with this declaration.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpopendeclaration.html#LongId","title":"FSharpOpenDeclaration.LongId","content":"FSharpOpenDeclaration.LongId \nLongId \n The syntactic target of the declaration","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpopendeclaration.html#IsOwnNamespace","title":"FSharpOpenDeclaration.IsOwnNamespace","content":"FSharpOpenDeclaration.IsOwnNamespace \nIsOwnNamespace \n If it\u0027s \u0060namespace Xxx.Yyy\u0060 declaration.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpparameter.html","title":"FSharpParameter","content":"FSharpParameter \n A subtype of FSharpSymbol that represents a parameter \nFSharpParameter.IsOutArg \nIsOutArg \nFSharpParameter.Name \nName \nFSharpParameter.IsOptionalArg \nIsOptionalArg \nFSharpParameter.Type \nType \nFSharpParameter.IsParamArrayArg \nIsParamArrayArg \nFSharpParameter.DeclarationLocation \nDeclarationLocation \nFSharpParameter.IsInArg \nIsInArg","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpparameter.html#IsOutArg","title":"FSharpParameter.IsOutArg","content":"FSharpParameter.IsOutArg \nIsOutArg \n Indicate this is an out argument","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpparameter.html#Name","title":"FSharpParameter.Name","content":"FSharpParameter.Name \nName \n The optional name of the parameter","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpparameter.html#IsOptionalArg","title":"FSharpParameter.IsOptionalArg","content":"FSharpParameter.IsOptionalArg \nIsOptionalArg \n Indicate this is an optional argument","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpparameter.html#Type","title":"FSharpParameter.Type","content":"FSharpParameter.Type \nType \n The declared or inferred type of the parameter","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpparameter.html#IsParamArrayArg","title":"FSharpParameter.IsParamArrayArg","content":"FSharpParameter.IsParamArrayArg \nIsParamArrayArg \n Indicate this is a param array argument","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpparameter.html#DeclarationLocation","title":"FSharpParameter.DeclarationLocation","content":"FSharpParameter.DeclarationLocation \nDeclarationLocation \n The declaration location of the parameter","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpparameter.html#IsInArg","title":"FSharpParameter.IsInArg","content":"FSharpParameter.IsInArg \nIsInArg \n Indicate this is an in argument","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpstaticparameter.html","title":"FSharpStaticParameter","content":"FSharpStaticParameter \n A subtype of FSharpSymbol that represents a static parameter to an F# type provider \nFSharpStaticParameter.Name \nName \nFSharpStaticParameter.HasDefaultValue \nHasDefaultValue \nFSharpStaticParameter.IsOptional \nIsOptional \nFSharpStaticParameter.DefaultValue \nDefaultValue \nFSharpStaticParameter.Range \nRange \nFSharpStaticParameter.Kind \nKind \nFSharpStaticParameter.DeclarationLocation \nDeclarationLocation","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpstaticparameter.html#Name","title":"FSharpStaticParameter.Name","content":"FSharpStaticParameter.Name \nName \n Get the name of the static parameter","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpstaticparameter.html#HasDefaultValue","title":"FSharpStaticParameter.HasDefaultValue","content":"FSharpStaticParameter.HasDefaultValue \nHasDefaultValue \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpstaticparameter.html#IsOptional","title":"FSharpStaticParameter.IsOptional","content":"FSharpStaticParameter.IsOptional \nIsOptional \n Indicates if the static parameter is optional","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpstaticparameter.html#DefaultValue","title":"FSharpStaticParameter.DefaultValue","content":"FSharpStaticParameter.DefaultValue \nDefaultValue \n Get the default value for the static parameter","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpstaticparameter.html#Range","title":"FSharpStaticParameter.Range","content":"FSharpStaticParameter.Range \nRange \n Get the range of the construct","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpstaticparameter.html#Kind","title":"FSharpStaticParameter.Kind","content":"FSharpStaticParameter.Kind \nKind \n Get the kind of the static parameter","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpstaticparameter.html#DeclarationLocation","title":"FSharpStaticParameter.DeclarationLocation","content":"FSharpStaticParameter.DeclarationLocation \nDeclarationLocation \n Get the declaration location of the static parameter","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbol.html","title":"FSharpSymbol","content":"FSharpSymbol \n Represents a symbol in checked F# source code or a compiled .NET component.\n\n The subtype of the symbol may reveal further information and can be one of FSharpEntity, FSharpUnionCase\n FSharpField, FSharpGenericParameter, FSharpStaticParameter, FSharpMemberOrFunctionOrValue, FSharpParameter,\n or FSharpActivePatternCase. \nFSharpSymbol.GetEffectivelySameAsHash \nGetEffectivelySameAsHash \nFSharpSymbol.HasAttribute \nHasAttribute \nFSharpSymbol.IsAccessible \nIsAccessible \nFSharpSymbol.IsEffectivelySameAs \nIsEffectivelySameAs \nFSharpSymbol.TryGetAttribute \nTryGetAttribute \nFSharpSymbol.FullName \nFullName \nFSharpSymbol.ImplementationLocation \nImplementationLocation \nFSharpSymbol.Accessibility \nAccessibility \nFSharpSymbol.Assembly \nAssembly \nFSharpSymbol.DisplayNameCore \nDisplayNameCore \nFSharpSymbol.Attributes \nAttributes \nFSharpSymbol.IsExplicitlySuppressed \nIsExplicitlySuppressed \nFSharpSymbol.DeclarationLocation \nDeclarationLocation \nFSharpSymbol.DisplayName \nDisplayName \nFSharpSymbol.SignatureLocation \nSignatureLocation","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbol.html#GetEffectivelySameAsHash","title":"FSharpSymbol.GetEffectivelySameAsHash","content":"FSharpSymbol.GetEffectivelySameAsHash \nGetEffectivelySameAsHash \n A hash compatible with the IsEffectivelySameAs relation","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbol.html#HasAttribute","title":"FSharpSymbol.HasAttribute","content":"FSharpSymbol.HasAttribute \nHasAttribute \n Indicates if this symbol has an attribute matching the full name of the given type parameter","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbol.html#IsAccessible","title":"FSharpSymbol.IsAccessible","content":"FSharpSymbol.IsAccessible \nIsAccessible \n Computes if the symbol is accessible for the given accessibility rights","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbol.html#IsEffectivelySameAs","title":"FSharpSymbol.IsEffectivelySameAs","content":"FSharpSymbol.IsEffectivelySameAs \nIsEffectivelySameAs \n Return true if two symbols are effectively the same when referred to in F# source code text.\n This sees through signatures (a symbol in a signature will be considered effectively the same as\n the matching symbol in an implementation).  In addition, other equivalences are applied\n when the same F# source text implies the same declaration name - for example, constructors\n are considered to be effectively the same symbol as the corresponding type definition.\n\n This is the relation used by GetUsesOfSymbol and GetUsesOfSymbolInFile.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbol.html#TryGetAttribute","title":"FSharpSymbol.TryGetAttribute","content":"FSharpSymbol.TryGetAttribute \nTryGetAttribute \n Try to get an attribute matching the full name of the given type parameter","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbol.html#FullName","title":"FSharpSymbol.FullName","content":"FSharpSymbol.FullName \nFullName \n Get a textual representation of the full name of the symbol. The text returned for some symbols\n may not be a valid identifier path in F# code, but rather a human-readable representation of the symbol.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbol.html#ImplementationLocation","title":"FSharpSymbol.ImplementationLocation","content":"FSharpSymbol.ImplementationLocation \nImplementationLocation \n Get the implementation location for the symbol if it was declared in a signature that has an implementation","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbol.html#Accessibility","title":"FSharpSymbol.Accessibility","content":"FSharpSymbol.Accessibility \nAccessibility \n Get the declared accessibility of the symbol, if any","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbol.html#Assembly","title":"FSharpSymbol.Assembly","content":"FSharpSymbol.Assembly \nAssembly \n Get the assembly declaring this symbol","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbol.html#DisplayNameCore","title":"FSharpSymbol.DisplayNameCore","content":"FSharpSymbol.DisplayNameCore \nDisplayNameCore \n Gets the display name for the symbol where double backticks are not added for non-identifiers","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbol.html#Attributes","title":"FSharpSymbol.Attributes","content":"FSharpSymbol.Attributes \nAttributes \n Get the attributes for the symbol, if any","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbol.html#IsExplicitlySuppressed","title":"FSharpSymbol.IsExplicitlySuppressed","content":"FSharpSymbol.IsExplicitlySuppressed \nIsExplicitlySuppressed \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbol.html#DeclarationLocation","title":"FSharpSymbol.DeclarationLocation","content":"FSharpSymbol.DeclarationLocation \nDeclarationLocation \n Get the declaration location for the symbol","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbol.html#DisplayName","title":"FSharpSymbol.DisplayName","content":"FSharpSymbol.DisplayName \nDisplayName \n Gets the display name for the symbol. Double backticks are added if the name is not a valid identifier.\n\n For FSharpParameter symbols without a name for the parameter, this returns \u0022\u0060\u0060\u0060\u0060\u0022","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbol.html#SignatureLocation","title":"FSharpSymbol.SignatureLocation","content":"FSharpSymbol.SignatureLocation \nSignatureLocation \n Get the signature location for the symbol if it was declared in an implementation","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharptype.html","title":"FSharpType","content":"FSharpType \n \nFSharpType.Format \nFormat \nFSharpType.FormatLayout \nFormatLayout \nFSharpType.FormatLayoutWithConstraints \nFormatLayoutWithConstraints \nFSharpType.FormatWithConstraints \nFormatWithConstraints \nFSharpType.Instantiate \nInstantiate \nFSharpType.StripAbbreviations \nStripAbbreviations \nFSharpType.HasNullAnnotation \nHasNullAnnotation \nFSharpType.IsFunctionType \nIsFunctionType \nFSharpType.IsTupleType \nIsTupleType \nFSharpType.IsUnresolved \nIsUnresolved \nFSharpType.IsAbbreviation \nIsAbbreviation \nFSharpType.GenericParameter \nGenericParameter \nFSharpType.ErasedType \nErasedType \nFSharpType.IsAnonRecordType \nIsAnonRecordType \nFSharpType.AbbreviatedType \nAbbreviatedType \nFSharpType.BaseType \nBaseType \nFSharpType.IsStructTupleType \nIsStructTupleType \nFSharpType.AnonRecordTypeDetails \nAnonRecordTypeDetails \nFSharpType.TypeDefinition \nTypeDefinition \nFSharpType.IsNullAmbivalent \nIsNullAmbivalent \nFSharpType.HasTypeDefinition \nHasTypeDefinition \nFSharpType.IsMeasureType \nIsMeasureType \nFSharpType.GenericArguments \nGenericArguments \nFSharpType.IsGenericParameter \nIsGenericParameter \nFSharpType.AllInterfaces \nAllInterfaces \nFSharpType.BasicQualifiedName \nBasicQualifiedName \nFSharpType.Prettify \nPrettify \nFSharpType.Prettify \nPrettify \nFSharpType.Prettify \nPrettify \nFSharpType.Prettify \nPrettify \nFSharpType.Prettify \nPrettify \nFSharpType.Prettify \nPrettify","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharptype.html#Format","title":"FSharpType.Format","content":"FSharpType.Format \nFormat \n Format the type using the rules of the given display context, skipping type constraints","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharptype.html#FormatLayout","title":"FSharpType.FormatLayout","content":"FSharpType.FormatLayout \nFormatLayout \n Format the type using the rules of the given display context","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharptype.html#FormatLayoutWithConstraints","title":"FSharpType.FormatLayoutWithConstraints","content":"FSharpType.FormatLayoutWithConstraints \nFormatLayoutWithConstraints \n Format the type - with constraints - using the rules of the given display context","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharptype.html#FormatWithConstraints","title":"FSharpType.FormatWithConstraints","content":"FSharpType.FormatWithConstraints \nFormatWithConstraints \n Format the type using the rules of the given display context","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharptype.html#Instantiate","title":"FSharpType.Instantiate","content":"FSharpType.Instantiate \nInstantiate \n Instantiate generic type parameters in a type","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharptype.html#StripAbbreviations","title":"FSharpType.StripAbbreviations","content":"FSharpType.StripAbbreviations \nStripAbbreviations \n Strip any outer abbreviations from the type","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharptype.html#HasNullAnnotation","title":"FSharpType.HasNullAnnotation","content":"FSharpType.HasNullAnnotation \nHasNullAnnotation \n Indicates this type is known to have a null annotation","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharptype.html#IsFunctionType","title":"FSharpType.IsFunctionType","content":"FSharpType.IsFunctionType \nIsFunctionType \n Indicates if the type is a function type. The GenericArguments property returns the domain and range of the function type.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharptype.html#IsTupleType","title":"FSharpType.IsTupleType","content":"FSharpType.IsTupleType \nIsTupleType \n Indicates if the type is a tuple type (reference or struct). The GenericArguments property returns the elements of the tuple type.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharptype.html#IsUnresolved","title":"FSharpType.IsUnresolved","content":"FSharpType.IsUnresolved \nIsUnresolved \n Indicates this is a named type in an unresolved assembly","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharptype.html#IsAbbreviation","title":"FSharpType.IsAbbreviation","content":"FSharpType.IsAbbreviation \nIsAbbreviation \n Indicates this is an abbreviation for another type","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharptype.html#GenericParameter","title":"FSharpType.GenericParameter","content":"FSharpType.GenericParameter \nGenericParameter \n Get the generic parameter data for a generic parameter type","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharptype.html#ErasedType","title":"FSharpType.ErasedType","content":"FSharpType.ErasedType \nErasedType \n Canonical form of the type with abbreviations, measures, and F# tuples and functions erased.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharptype.html#IsAnonRecordType","title":"FSharpType.IsAnonRecordType","content":"FSharpType.IsAnonRecordType \nIsAnonRecordType \n Indicates if the type is an anonymous record type. The GenericArguments property returns the type instantiation of the anonymous record type","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharptype.html#AbbreviatedType","title":"FSharpType.AbbreviatedType","content":"FSharpType.AbbreviatedType \nAbbreviatedType \n Get the type for which this is an abbreviation","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharptype.html#BaseType","title":"FSharpType.BaseType","content":"FSharpType.BaseType \nBaseType \n Get the base type, if any, taking into account the instantiation of this type\n if it is an instantiation of a generic type.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharptype.html#IsStructTupleType","title":"FSharpType.IsStructTupleType","content":"FSharpType.IsStructTupleType \nIsStructTupleType \n Indicates if the type is a struct tuple type. The GenericArguments property returns the elements of the tuple type.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharptype.html#AnonRecordTypeDetails","title":"FSharpType.AnonRecordTypeDetails","content":"FSharpType.AnonRecordTypeDetails \nAnonRecordTypeDetails \n Get the details of the anonymous record type.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharptype.html#TypeDefinition","title":"FSharpType.TypeDefinition","content":"FSharpType.TypeDefinition \nTypeDefinition \n Get the type definition for a type","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharptype.html#IsNullAmbivalent","title":"FSharpType.IsNullAmbivalent","content":"FSharpType.IsNullAmbivalent \nIsNullAmbivalent \n Indicates this type is assumed to support the null value","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharptype.html#HasTypeDefinition","title":"FSharpType.HasTypeDefinition","content":"FSharpType.HasTypeDefinition \nHasTypeDefinition \n Indicates if the type is constructed using a named entity, including array and byref types","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharptype.html#IsMeasureType","title":"FSharpType.IsMeasureType","content":"FSharpType.IsMeasureType \nIsMeasureType \n Indicates if the type is a measure type.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharptype.html#GenericArguments","title":"FSharpType.GenericArguments","content":"FSharpType.GenericArguments \nGenericArguments \n Get the generic arguments for a tuple type, a function type or a type constructed using a named entity","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharptype.html#IsGenericParameter","title":"FSharpType.IsGenericParameter","content":"FSharpType.IsGenericParameter \nIsGenericParameter \n Indicates if the type is a variable type, whether declared, generalized or an inference type parameter","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharptype.html#AllInterfaces","title":"FSharpType.AllInterfaces","content":"FSharpType.AllInterfaces \nAllInterfaces \n Get all the interface implementations, by walking the type hierarchy, taking into account the instantiation of this type\n if it is an instantiation of a generic type.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharptype.html#BasicQualifiedName","title":"FSharpType.BasicQualifiedName","content":"FSharpType.BasicQualifiedName \nBasicQualifiedName \n The fully qualified name of the type or module without strong assembly name.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharptype.html#Prettify","title":"FSharpType.Prettify","content":"FSharpType.Prettify \nPrettify \n Adjust the types in a group of curried parameters and return type by removing any occurrences of type inference variables, replacing them\n systematically with lower-case type inference variables such as \u003Cc\u003E\u0027a\u003C/c\u003E.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharptype.html#Prettify","title":"FSharpType.Prettify","content":"FSharpType.Prettify \nPrettify \n Adjust the types in a group of curried parameters by removing any occurrences of type inference variables, replacing them\n systematically with lower-case type inference variables such as \u003Cc\u003E\u0027a\u003C/c\u003E.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharptype.html#Prettify","title":"FSharpType.Prettify","content":"FSharpType.Prettify \nPrettify \n Adjust the types in a group of parameters by removing any occurrences of type inference variables, replacing them\n systematically with lower-case type inference variables such as \u003Cc\u003E\u0027a\u003C/c\u003E.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharptype.html#Prettify","title":"FSharpType.Prettify","content":"FSharpType.Prettify \nPrettify \n Adjust the type in a single parameter by removing any occurrences of type inference variables, replacing them\n systematically with lower-case type inference variables such as \u003Cc\u003E\u0027a\u003C/c\u003E.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharptype.html#Prettify","title":"FSharpType.Prettify","content":"FSharpType.Prettify \nPrettify \n Adjust a group of types by removing any occurrences of type inference variables, replacing them\n systematically with lower-case type inference variables such as \u003Cc\u003E\u0027a\u003C/c\u003E.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharptype.html#Prettify","title":"FSharpType.Prettify","content":"FSharpType.Prettify \nPrettify \n Adjust the type by removing any occurrences of type inference variables, replacing them\n systematically with lower-case type inference variables such as \u003Cc\u003E\u0027a\u003C/c\u003E.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpunioncase.html","title":"FSharpUnionCase","content":"FSharpUnionCase \n A subtype of FSharpSymbol that represents a union case as seen by the F# language \nFSharpUnionCase.IsUnresolved \nIsUnresolved \nFSharpUnionCase.ReturnType \nReturnType \nFSharpUnionCase.CompiledName \nCompiledName \nFSharpUnionCase.Name \nName \nFSharpUnionCase.Fields \nFields \nFSharpUnionCase.XmlDocSig \nXmlDocSig \nFSharpUnionCase.XmlDoc \nXmlDoc \nFSharpUnionCase.DeclaringEntity \nDeclaringEntity \nFSharpUnionCase.HasFields \nHasFields \nFSharpUnionCase.DeclarationLocation \nDeclarationLocation","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpunioncase.html#IsUnresolved","title":"FSharpUnionCase.IsUnresolved","content":"FSharpUnionCase.IsUnresolved \nIsUnresolved \n Indicates if the union case is for a type in an unresolved assembly","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpunioncase.html#ReturnType","title":"FSharpUnionCase.ReturnType","content":"FSharpUnionCase.ReturnType \nReturnType \n Get the type constructed by the case. Normally exactly the type of the enclosing type, sometimes an abbreviation of it","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpunioncase.html#CompiledName","title":"FSharpUnionCase.CompiledName","content":"FSharpUnionCase.CompiledName \nCompiledName \n Get the name of the case in generated IL code","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpunioncase.html#Name","title":"FSharpUnionCase.Name","content":"FSharpUnionCase.Name \nName \n Get the name of the union case","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpunioncase.html#Fields","title":"FSharpUnionCase.Fields","content":"FSharpUnionCase.Fields \nFields \n Get the data carried by the case.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpunioncase.html#XmlDocSig","title":"FSharpUnionCase.XmlDocSig","content":"FSharpUnionCase.XmlDocSig \nXmlDocSig \n Get the XML documentation signature for .xml file lookup for the union case, used for .xml file lookup for compiled code","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpunioncase.html#XmlDoc","title":"FSharpUnionCase.XmlDoc","content":"FSharpUnionCase.XmlDoc \nXmlDoc \n Get the XML documentation for the entity","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpunioncase.html#DeclaringEntity","title":"FSharpUnionCase.DeclaringEntity","content":"FSharpUnionCase.DeclaringEntity \nDeclaringEntity \n Get the declaring entity of the case","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpunioncase.html#HasFields","title":"FSharpUnionCase.HasFields","content":"FSharpUnionCase.HasFields \nHasFields \n Indicates if the union case has field definitions","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpunioncase.html#DeclarationLocation","title":"FSharpUnionCase.DeclarationLocation","content":"FSharpUnionCase.DeclarationLocation \nDeclarationLocation \n Get the range of the name of the case","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpxmldoc.html","title":"FSharpXmlDoc","content":"FSharpXmlDoc \n Describe a comment as either a block of text or a file\u002Bsignature reference into an intellidoc file. \nFSharpXmlDoc.IsNone \nIsNone \nFSharpXmlDoc.IsFromXmlFile \nIsFromXmlFile \nFSharpXmlDoc.IsFromXmlText \nIsFromXmlText \nFSharpXmlDoc.None \nNone \nFSharpXmlDoc.FromXmlText \nFromXmlText \nFSharpXmlDoc.FromXmlFile \nFromXmlFile","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpxmldoc.html#IsNone","title":"FSharpXmlDoc.IsNone","content":"FSharpXmlDoc.IsNone \nIsNone \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpxmldoc.html#IsFromXmlFile","title":"FSharpXmlDoc.IsFromXmlFile","content":"FSharpXmlDoc.IsFromXmlFile \nIsFromXmlFile \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpxmldoc.html#IsFromXmlText","title":"FSharpXmlDoc.IsFromXmlText","content":"FSharpXmlDoc.IsFromXmlText \nIsFromXmlText \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpxmldoc.html#None","title":"FSharpXmlDoc.None","content":"FSharpXmlDoc.None \nNone \n No documentation is available","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpxmldoc.html#FromXmlText","title":"FSharpXmlDoc.FromXmlText","content":"FSharpXmlDoc.FromXmlText \nFromXmlText \n The text for documentation for in-memory references.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpxmldoc.html#FromXmlFile","title":"FSharpXmlDoc.FromXmlFile","content":"FSharpXmlDoc.FromXmlFile \nFromXmlFile \n Indicates that the XML for the documentation can be found in a .xml documentation file for the given DLL, using the given signature key","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedinputmodule.html","title":"ParsedInput","content":"ParsedInput \n\n Holds operations for working with the\n untyped abstract syntax tree (\u003Ca href=\u0022https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedinput.html\u0022\u003EParsedInput\u003C/a\u003E).\n  \nParsedInput.exists \nexists \nParsedInput.fold \nfold \nParsedInput.foldWhile \nfoldWhile \nParsedInput.tryNode \ntryNode \nParsedInput.tryPick \ntryPick \nParsedInput.tryPickLast \ntryPickLast","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedinputmodule.html#exists","title":"ParsedInput.exists","content":"ParsedInput.exists \nexists \n\n Applies the given predicate to each node of the AST and its context (path)\n down to a given position, returning true if a matching node is found, otherwise false.\n Traversal is short-circuited if no matching node is found through the given position.\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedinputmodule.html#fold","title":"ParsedInput.fold","content":"ParsedInput.fold \nfold \n\n Applies a function to each node of the AST and its context (path),\n threading an accumulator through the computation.\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedinputmodule.html#foldWhile","title":"ParsedInput.foldWhile","content":"ParsedInput.foldWhile \nfoldWhile \n\n Applies a function to each node of the AST and its context (path)\n until the folder returns \u003Ccode\u003ENone\u003C/code\u003E, threading an accumulator through the computation.\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedinputmodule.html#tryNode","title":"ParsedInput.tryNode","content":"ParsedInput.tryNode \ntryNode \n\n Dives to the deepest node that contains the given position,\n returning the node and its path if found, or \u003Ccode\u003ENone\u003C/code\u003E if no\n node contains the position.\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedinputmodule.html#tryPick","title":"ParsedInput.tryPick","content":"ParsedInput.tryPick \ntryPick \n\n Applies the given function to each node of the AST and its context (path)\n down to a given position, returning \u003Ccode\u003ESome x\u003C/code\u003E for the first node\n for which the function returns \u003Ccode\u003ESome x\u003C/code\u003E for some value \u003Ccode\u003Ex\u003C/code\u003E, otherwise \u003Ccode\u003ENone\u003C/code\u003E.\n Traversal is short-circuited if no matching node is found through the given position.\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedinputmodule.html#tryPickLast","title":"ParsedInput.tryPickLast","content":"ParsedInput.tryPickLast \ntryPickLast \n\n Applies the given function to each node of the AST and its context (path)\n down to a given position, returning \u003Ccode\u003ESome x\u003C/code\u003E for the last (deepest) node\n for which the function returns \u003Ccode\u003ESome x\u003C/code\u003E for some value \u003Ccode\u003Ex\u003C/code\u003E, otherwise \u003Ccode\u003ENone\u003C/code\u003E.\n Traversal is short-circuited if no matching node is found through the given position.\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-prettynaming.html","title":"PrettyNaming","content":"PrettyNaming \n Some general F# utilities for mangling / unmangling / manipulating names.\n Anything to do with special names of identifiers and other lexical rules \nPrettyNaming.IsOperatorDisplayName \nIsOperatorDisplayName \nPrettyNaming.IsIdentifierName \nIsIdentifierName \nPrettyNaming.IsActivePatternName \nIsActivePatternName \nPrettyNaming.DoesIdentifierNeedBackticks \nDoesIdentifierNeedBackticks \nPrettyNaming.NormalizeIdentifierBackticks \nNormalizeIdentifierBackticks \nPrettyNaming.IsLogicalOpName \nIsLogicalOpName \nPrettyNaming.CompileOpName \nCompileOpName \nPrettyNaming.ConvertValLogicalNameToDisplayNameCore \nConvertValLogicalNameToDisplayNameCore \nPrettyNaming.IsIdentifierFirstCharacter \nIsIdentifierFirstCharacter \nPrettyNaming.IsIdentifierPartCharacter \nIsIdentifierPartCharacter \nPrettyNaming.IsLongIdentifierPartCharacter \nIsLongIdentifierPartCharacter \nPrettyNaming.IsLogicalPrefixOperator \nIsLogicalPrefixOperator \nPrettyNaming.IsLogicalInfixOpName \nIsLogicalInfixOpName \nPrettyNaming.IsLogicalTernaryOperator \nIsLogicalTernaryOperator \nPrettyNaming.IsPunctuation \nIsPunctuation \nPrettyNaming.IsCompilerGeneratedName \nIsCompilerGeneratedName \nPrettyNaming.TryChopPropertyName \nTryChopPropertyName \nPrettyNaming.FsiDynamicModulePrefix \nFsiDynamicModulePrefix \nPrettyNaming.GetLongNameFromString \nGetLongNameFromString \nPrettyNaming.FormatAndOtherOverloadsString \nFormatAndOtherOverloadsString \nPrettyNaming.FSharpSignatureDataResourceName2 \nFSharpSignatureDataResourceName2","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-prettynaming.html#IsOperatorDisplayName","title":"PrettyNaming.IsOperatorDisplayName","content":"PrettyNaming.IsOperatorDisplayName \nIsOperatorDisplayName \n\u003Cpre\u003E Returns \u0060true\u0060 if given string is an operator display name, e.g.\n    ( |\u003E\u003E )\n    |\u003E\u003E\n    ..\u003C/pre\u003E","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-prettynaming.html#IsIdentifierName","title":"PrettyNaming.IsIdentifierName","content":"PrettyNaming.IsIdentifierName \nIsIdentifierName \n\u003Cpre\u003E Is the name a valid F# identifier, primarily used internally in PrettyNaming.fs for determining if an\n identifier needs backticks.\n\n In general do not use this routine. It is only used in one quick fix, for determining if it is valid\n to add \u0022_\u0022 in front of an identifier.\n\n     A            --\u003E true\n     A\u0027           --\u003E true\n     _A           --\u003E true\n     A0           --\u003E true\n     |A|B|        --\u003E false\n     op_Addition  --\u003E true\n     \u002B            --\u003E false\n     let          --\u003E false\n     base         --\u003E false\n\n TBD: needs unit testing\u003C/pre\u003E","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-prettynaming.html#IsActivePatternName","title":"PrettyNaming.IsActivePatternName","content":"PrettyNaming.IsActivePatternName \nIsActivePatternName \n\u003Cpre\u003E Determines if the specified name is a valid name for an active pattern.\n     |A|_|        --\u003E true\n     |A|B|        --\u003E true\n     |A|          --\u003E true\n     |            --\u003E false\n     ||           --\u003E false\n     op_Addition  --\u003E false\n\n TBD: needs unit testing\u003C/pre\u003E","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-prettynaming.html#DoesIdentifierNeedBackticks","title":"PrettyNaming.DoesIdentifierNeedBackticks","content":"PrettyNaming.DoesIdentifierNeedBackticks \nDoesIdentifierNeedBackticks \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-prettynaming.html#NormalizeIdentifierBackticks","title":"PrettyNaming.NormalizeIdentifierBackticks","content":"PrettyNaming.NormalizeIdentifierBackticks \nNormalizeIdentifierBackticks \n\u003Cpre\u003E Adds double backticks if necessary to make a valid identifier, e.g.\n     op_Addition  --\u003E  op_Addition\n     \u002B            --\u003E  \u0060\u0060\u002B\u0060\u0060    (this is not op_Addition)\n     |\u003E\u003E          --\u003E  \u0060\u0060|\u003E\u003E\u0060\u0060  (this is not an op_)\n     A-B          --\u003E  \u0060\u0060A-B\u0060\u0060\n     AB           --\u003E  AB\n     |A|_|        --\u003E  |A|_|    this is an active pattern name, needs parens not backticks\n Removes double backticks if not necessary to make a valid identifier, e.g.\n     \u0060\u0060A\u0060\u0060        --\u003E A\n     \u0060\u0060A-B\u0060\u0060      --\u003E \u0060\u0060A-B\u0060\u0060\u003C/pre\u003E","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-prettynaming.html#IsLogicalOpName","title":"PrettyNaming.IsLogicalOpName","content":"PrettyNaming.IsLogicalOpName \nIsLogicalOpName \n\u003Cpre\u003E Is the name a logical operator name, including unary, binary and ternary operators\n    op_UnaryPlus         - yes\n    op_Addition          - yes\n    op_Range             - yes (?)\n    op_RangeStep         - yes (?)\n    op_DynamicAssignment - yes\n    op_Quack             - no\n    \u002B                    - no\n    ABC                  - no\n    ABC DEF              - no\n    base                 - no\n    |A|_|                - no\u003C/pre\u003E","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-prettynaming.html#CompileOpName","title":"PrettyNaming.CompileOpName","content":"PrettyNaming.CompileOpName \nCompileOpName \n\u003Cpre\u003E Converts the core of an operator name into a logical name. For example,\n    \u002B  --\u003E op_Addition\n    !%  --\u003E op_DereferencePercent\n Only used on actual operator names\u003C/pre\u003E","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-prettynaming.html#ConvertValLogicalNameToDisplayNameCore","title":"PrettyNaming.ConvertValLogicalNameToDisplayNameCore","content":"PrettyNaming.ConvertValLogicalNameToDisplayNameCore \nConvertValLogicalNameToDisplayNameCore \n\u003Cpre\u003E Converts the logical name for and operator back into the core of a display name. For example:\n     Foo                   --\u003E Foo\n     \u002B                     --\u003E \u002B\n     op_Addition           --\u003E \u002B\n     op_DereferencePercent --\u003E !%\n     A-B                   --\u003E A-B\n     |A|_|                 --\u003E |A|_|\n     base                  --\u003E base        regardless of IsBaseVal\n Used on names of all kinds\n\n TODO: We should assess uses of this function.\n\n In any cases it is used it probably indicates that text is being\n generated which:\n    1. does not contain double-backticks for non-identifiers\n    2. does not put parentheses around operators or active pattern names\n\n If the text is immediately in quotes, this is generally ok, e.g.\n\n         error FS0038: \u0027\u002B\u0027 is bound twice in this pattern\n         error FS0038: \u0027|A|_|\u0027 is bound twice in this pattern\n         error FS0038: \u0027a a\u0027 is bound twice in this pattern\n\n If not, the it is likely this should be replaced by ConvertValLogicalNameToDisplayName.\u003C/pre\u003E","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-prettynaming.html#IsIdentifierFirstCharacter","title":"PrettyNaming.IsIdentifierFirstCharacter","content":"PrettyNaming.IsIdentifierFirstCharacter \nIsIdentifierFirstCharacter \n The characters that are allowed to be the first character of an identifier.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-prettynaming.html#IsIdentifierPartCharacter","title":"PrettyNaming.IsIdentifierPartCharacter","content":"PrettyNaming.IsIdentifierPartCharacter \nIsIdentifierPartCharacter \n The characters that are allowed to be in an identifier.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-prettynaming.html#IsLongIdentifierPartCharacter","title":"PrettyNaming.IsLongIdentifierPartCharacter","content":"PrettyNaming.IsLongIdentifierPartCharacter \nIsLongIdentifierPartCharacter \n Is this character a part of a long identifier?","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-prettynaming.html#IsLogicalPrefixOperator","title":"PrettyNaming.IsLogicalPrefixOperator","content":"PrettyNaming.IsLogicalPrefixOperator \nIsLogicalPrefixOperator \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-prettynaming.html#IsLogicalInfixOpName","title":"PrettyNaming.IsLogicalInfixOpName","content":"PrettyNaming.IsLogicalInfixOpName \nIsLogicalInfixOpName \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-prettynaming.html#IsLogicalTernaryOperator","title":"PrettyNaming.IsLogicalTernaryOperator","content":"PrettyNaming.IsLogicalTernaryOperator \nIsLogicalTernaryOperator \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-prettynaming.html#IsPunctuation","title":"PrettyNaming.IsPunctuation","content":"PrettyNaming.IsPunctuation \nIsPunctuation \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-prettynaming.html#IsCompilerGeneratedName","title":"PrettyNaming.IsCompilerGeneratedName","content":"PrettyNaming.IsCompilerGeneratedName \nIsCompilerGeneratedName \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-prettynaming.html#TryChopPropertyName","title":"PrettyNaming.TryChopPropertyName","content":"PrettyNaming.TryChopPropertyName \nTryChopPropertyName \n Try to chop \u0022get_\u0022 or \u0022set_\u0022 from a string","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-prettynaming.html#FsiDynamicModulePrefix","title":"PrettyNaming.FsiDynamicModulePrefix","content":"PrettyNaming.FsiDynamicModulePrefix \nFsiDynamicModulePrefix \n The prefix of the names used for the fake namespace path added to all dynamic code entries in FSI.EXE","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-prettynaming.html#GetLongNameFromString","title":"PrettyNaming.GetLongNameFromString","content":"PrettyNaming.GetLongNameFromString \nGetLongNameFromString \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-prettynaming.html#FormatAndOtherOverloadsString","title":"PrettyNaming.FormatAndOtherOverloadsString","content":"PrettyNaming.FormatAndOtherOverloadsString \nFormatAndOtherOverloadsString \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-prettynaming.html#FSharpSignatureDataResourceName2","title":"PrettyNaming.FSharpSignatureDataResourceName2","content":"PrettyNaming.FSharpSignatureDataResourceName2 \nFSharpSignatureDataResourceName2 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexprmodule.html","title":"SynExpr","content":"SynExpr \n \nSynExpr.shouldBeParenthesizedInContext \nshouldBeParenthesizedInContext","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexprmodule.html#shouldBeParenthesizedInContext","title":"SynExpr.shouldBeParenthesizedInContext","content":"SynExpr.shouldBeParenthesizedInContext \nshouldBeParenthesizedInContext \n\n Returns true if the given expression should be parenthesized in the given context, otherwise false.\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synlongidenthelpers.html","title":"SynLongIdentHelpers","content":"SynLongIdentHelpers \n \nSynLongIdentHelpers.LongIdentWithDots \nLongIdentWithDots \nSynLongIdentHelpers.(|LongIdentWithDots|) \n(|LongIdentWithDots|)","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synlongidenthelpers.html#LongIdentWithDots","title":"SynLongIdentHelpers.LongIdentWithDots","content":"SynLongIdentHelpers.LongIdentWithDots \nLongIdentWithDots \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synlongidenthelpers.html#(|LongIdentWithDots|)","title":"SynLongIdentHelpers.(|LongIdentWithDots|)","content":"SynLongIdentHelpers.(|LongIdentWithDots|) \n(|LongIdentWithDots|) \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synpatmodule.html","title":"SynPat","content":"SynPat \n \nSynPat.shouldBeParenthesizedInContext \nshouldBeParenthesizedInContext","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synpatmodule.html#shouldBeParenthesizedInContext","title":"SynPat.shouldBeParenthesizedInContext","content":"SynPat.shouldBeParenthesizedInContext \nshouldBeParenthesizedInContext \n\n Returns true if the given pattern should be parenthesized in the given context, otherwise false.\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxnodemodule.html","title":"SyntaxNode","content":"SyntaxNode \n\n Holds operations for working with \u003Ca href=\u0022https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxnode.html\u0022\u003ESyntaxNode\u003C/a\u003Es\n in the untyped abstract syntax tree (AST).\n  \nSyntaxNode.(|Attributes|) \n(|Attributes|)","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxnodemodule.html#(|Attributes|)","title":"SyntaxNode.(|Attributes|)","content":"SyntaxNode.(|Attributes|) \n(|Attributes|) \n\n Extracts the \u003Ca href=\u0022https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synattributes.html\u0022\u003ESynAttributes\u003C/a\u003E, if any,\n from the given \u003Ca href=\u0022https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxnode.html\u0022\u003ESyntaxNode\u003C/a\u003E.\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxtraversal.html","title":"SyntaxTraversal","content":"SyntaxTraversal \n \nSyntaxTraversal.Traverse \nTraverse","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxtraversal.html#Traverse","title":"SyntaxTraversal.Traverse","content":"SyntaxTraversal.Traverse \nTraverse \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatbinding.html","title":"DebugPointAtBinding","content":"DebugPointAtBinding \n Represents whether a debug point should be present for a \u0027let\u0027 binding,\n that is whether the construct corresponds to a debug point in the original source. \nDebugPointAtBinding.Combine \nCombine \nDebugPointAtBinding.IsNoneAtSticky \nIsNoneAtSticky \nDebugPointAtBinding.IsNoneAtInvisible \nIsNoneAtInvisible \nDebugPointAtBinding.IsYes \nIsYes \nDebugPointAtBinding.IsNoneAtLet \nIsNoneAtLet \nDebugPointAtBinding.IsNoneAtDo \nIsNoneAtDo \nDebugPointAtBinding.Yes \nYes \nDebugPointAtBinding.NoneAtDo \nNoneAtDo \nDebugPointAtBinding.NoneAtLet \nNoneAtLet \nDebugPointAtBinding.NoneAtSticky \nNoneAtSticky \nDebugPointAtBinding.NoneAtInvisible \nNoneAtInvisible","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatbinding.html#Combine","title":"DebugPointAtBinding.Combine","content":"DebugPointAtBinding.Combine \nCombine \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatbinding.html#IsNoneAtSticky","title":"DebugPointAtBinding.IsNoneAtSticky","content":"DebugPointAtBinding.IsNoneAtSticky \nIsNoneAtSticky \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatbinding.html#IsNoneAtInvisible","title":"DebugPointAtBinding.IsNoneAtInvisible","content":"DebugPointAtBinding.IsNoneAtInvisible \nIsNoneAtInvisible \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatbinding.html#IsYes","title":"DebugPointAtBinding.IsYes","content":"DebugPointAtBinding.IsYes \nIsYes \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatbinding.html#IsNoneAtLet","title":"DebugPointAtBinding.IsNoneAtLet","content":"DebugPointAtBinding.IsNoneAtLet \nIsNoneAtLet \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatbinding.html#IsNoneAtDo","title":"DebugPointAtBinding.IsNoneAtDo","content":"DebugPointAtBinding.IsNoneAtDo \nIsNoneAtDo \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatbinding.html#Yes","title":"DebugPointAtBinding.Yes","content":"DebugPointAtBinding.Yes \nYes \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatbinding.html#NoneAtDo","title":"DebugPointAtBinding.NoneAtDo","content":"DebugPointAtBinding.NoneAtDo \nNoneAtDo \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatbinding.html#NoneAtLet","title":"DebugPointAtBinding.NoneAtLet","content":"DebugPointAtBinding.NoneAtLet \nNoneAtLet \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatbinding.html#NoneAtSticky","title":"DebugPointAtBinding.NoneAtSticky","content":"DebugPointAtBinding.NoneAtSticky \nNoneAtSticky \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatbinding.html#NoneAtInvisible","title":"DebugPointAtBinding.NoneAtInvisible","content":"DebugPointAtBinding.NoneAtInvisible \nNoneAtInvisible \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatfinally.html","title":"DebugPointAtFinally","content":"DebugPointAtFinally \n Represents whether a debug point should be present for the \u0027finally\u0027 in a \u0027try .. finally\u0027,\n that is whether the construct corresponds to a debug point in the original source. \nDebugPointAtFinally.IsNo \nIsNo \nDebugPointAtFinally.IsYes \nIsYes \nDebugPointAtFinally.Yes \nYes \nDebugPointAtFinally.No \nNo","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatfinally.html#IsNo","title":"DebugPointAtFinally.IsNo","content":"DebugPointAtFinally.IsNo \nIsNo \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatfinally.html#IsYes","title":"DebugPointAtFinally.IsYes","content":"DebugPointAtFinally.IsYes \nIsYes \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatfinally.html#Yes","title":"DebugPointAtFinally.Yes","content":"DebugPointAtFinally.Yes \nYes \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatfinally.html#No","title":"DebugPointAtFinally.No","content":"DebugPointAtFinally.No \nNo \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatfor.html","title":"DebugPointAtFor","content":"DebugPointAtFor \n Represents whether a debug point should be present for the \u0027for\u0027 in a \u0027for...\u0027 loop,\n that is whether the construct corresponds to a debug point in the original source. \nDebugPointAtFor.IsNo \nIsNo \nDebugPointAtFor.IsYes \nIsYes \nDebugPointAtFor.Yes \nYes \nDebugPointAtFor.No \nNo","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatfor.html#IsNo","title":"DebugPointAtFor.IsNo","content":"DebugPointAtFor.IsNo \nIsNo \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatfor.html#IsYes","title":"DebugPointAtFor.IsYes","content":"DebugPointAtFor.IsYes \nIsYes \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatfor.html#Yes","title":"DebugPointAtFor.Yes","content":"DebugPointAtFor.Yes \nYes \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatfor.html#No","title":"DebugPointAtFor.No","content":"DebugPointAtFor.No \nNo \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatinorto.html","title":"DebugPointAtInOrTo","content":"DebugPointAtInOrTo \n Represents whether a debug point should be present for the \u0027in\u0027 or \u0027to\u0027 of a \u0027for...\u0027 loop,\n that is whether the construct corresponds to a debug point in the original source. \nDebugPointAtInOrTo.IsNo \nIsNo \nDebugPointAtInOrTo.IsYes \nIsYes \nDebugPointAtInOrTo.Yes \nYes \nDebugPointAtInOrTo.No \nNo","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatinorto.html#IsNo","title":"DebugPointAtInOrTo.IsNo","content":"DebugPointAtInOrTo.IsNo \nIsNo \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatinorto.html#IsYes","title":"DebugPointAtInOrTo.IsYes","content":"DebugPointAtInOrTo.IsYes \nIsYes \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatinorto.html#Yes","title":"DebugPointAtInOrTo.Yes","content":"DebugPointAtInOrTo.Yes \nYes \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatinorto.html#No","title":"DebugPointAtInOrTo.No","content":"DebugPointAtInOrTo.No \nNo \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatleafexpr.html","title":"DebugPointAtLeafExpr","content":"DebugPointAtLeafExpr \n Represents a debug point at a leaf expression (e.g. an application or constant). \nDebugPointAtLeafExpr.Yes \nYes","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatleafexpr.html#Yes","title":"DebugPointAtLeafExpr.Yes","content":"DebugPointAtLeafExpr.Yes \nYes \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatsequential.html","title":"DebugPointAtSequential","content":"DebugPointAtSequential \n Represents whether a debug point should be suppressed for either the\n first or second part of a sequential execution, that is whether the\n construct corresponds to a debug point in the original source. \nDebugPointAtSequential.IsSuppressExpr \nIsSuppressExpr \nDebugPointAtSequential.IsSuppressStmt \nIsSuppressStmt \nDebugPointAtSequential.IsSuppressBoth \nIsSuppressBoth \nDebugPointAtSequential.IsSuppressNeither \nIsSuppressNeither \nDebugPointAtSequential.SuppressNeither \nSuppressNeither \nDebugPointAtSequential.SuppressStmt \nSuppressStmt \nDebugPointAtSequential.SuppressBoth \nSuppressBoth \nDebugPointAtSequential.SuppressExpr \nSuppressExpr","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatsequential.html#IsSuppressExpr","title":"DebugPointAtSequential.IsSuppressExpr","content":"DebugPointAtSequential.IsSuppressExpr \nIsSuppressExpr \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatsequential.html#IsSuppressStmt","title":"DebugPointAtSequential.IsSuppressStmt","content":"DebugPointAtSequential.IsSuppressStmt \nIsSuppressStmt \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatsequential.html#IsSuppressBoth","title":"DebugPointAtSequential.IsSuppressBoth","content":"DebugPointAtSequential.IsSuppressBoth \nIsSuppressBoth \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatsequential.html#IsSuppressNeither","title":"DebugPointAtSequential.IsSuppressNeither","content":"DebugPointAtSequential.IsSuppressNeither \nIsSuppressNeither \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatsequential.html#SuppressNeither","title":"DebugPointAtSequential.SuppressNeither","content":"DebugPointAtSequential.SuppressNeither \nSuppressNeither \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatsequential.html#SuppressStmt","title":"DebugPointAtSequential.SuppressStmt","content":"DebugPointAtSequential.SuppressStmt \nSuppressStmt \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatsequential.html#SuppressBoth","title":"DebugPointAtSequential.SuppressBoth","content":"DebugPointAtSequential.SuppressBoth \nSuppressBoth \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatsequential.html#SuppressExpr","title":"DebugPointAtSequential.SuppressExpr","content":"DebugPointAtSequential.SuppressExpr \nSuppressExpr \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointattarget.html","title":"DebugPointAtTarget","content":"DebugPointAtTarget \n Represents whether a debug point should be present for the target\n of a decision tree, that is whether the construct corresponds to a debug\n point in the original source. \nDebugPointAtTarget.IsNo \nIsNo \nDebugPointAtTarget.IsYes \nIsYes \nDebugPointAtTarget.Yes \nYes \nDebugPointAtTarget.No \nNo","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointattarget.html#IsNo","title":"DebugPointAtTarget.IsNo","content":"DebugPointAtTarget.IsNo \nIsNo \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointattarget.html#IsYes","title":"DebugPointAtTarget.IsYes","content":"DebugPointAtTarget.IsYes \nIsYes \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointattarget.html#Yes","title":"DebugPointAtTarget.Yes","content":"DebugPointAtTarget.Yes \nYes \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointattarget.html#No","title":"DebugPointAtTarget.No","content":"DebugPointAtTarget.No \nNo \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointattry.html","title":"DebugPointAtTry","content":"DebugPointAtTry \n Represents whether a debug point should be present for a \u0027try\u0027, that is whether\n the construct corresponds to a debug point in the original source. \nDebugPointAtTry.IsNo \nIsNo \nDebugPointAtTry.IsYes \nIsYes \nDebugPointAtTry.Yes \nYes \nDebugPointAtTry.No \nNo","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointattry.html#IsNo","title":"DebugPointAtTry.IsNo","content":"DebugPointAtTry.IsNo \nIsNo \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointattry.html#IsYes","title":"DebugPointAtTry.IsYes","content":"DebugPointAtTry.IsYes \nIsYes \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointattry.html#Yes","title":"DebugPointAtTry.Yes","content":"DebugPointAtTry.Yes \nYes \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointattry.html#No","title":"DebugPointAtTry.No","content":"DebugPointAtTry.No \nNo \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatwhile.html","title":"DebugPointAtWhile","content":"DebugPointAtWhile \n Represents whether a debug point should be present for the \u0027while\u0027 in a \u0027while...\u0027 loop,\n that is whether the construct corresponds to a debug point in the original source. \nDebugPointAtWhile.IsNo \nIsNo \nDebugPointAtWhile.IsYes \nIsYes \nDebugPointAtWhile.Yes \nYes \nDebugPointAtWhile.No \nNo","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatwhile.html#IsNo","title":"DebugPointAtWhile.IsNo","content":"DebugPointAtWhile.IsNo \nIsNo \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatwhile.html#IsYes","title":"DebugPointAtWhile.IsYes","content":"DebugPointAtWhile.IsYes \nIsYes \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatwhile.html#Yes","title":"DebugPointAtWhile.Yes","content":"DebugPointAtWhile.Yes \nYes \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatwhile.html#No","title":"DebugPointAtWhile.No","content":"DebugPointAtWhile.No \nNo \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatwith.html","title":"DebugPointAtWith","content":"DebugPointAtWith \n Represents whether a debug point should be present for the \u0027with\u0027 in a \u0027try .. with\u0027,\n that is whether the construct corresponds to a debug point in the original source. \nDebugPointAtWith.IsNo \nIsNo \nDebugPointAtWith.IsYes \nIsYes \nDebugPointAtWith.Yes \nYes \nDebugPointAtWith.No \nNo","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatwith.html#IsNo","title":"DebugPointAtWith.IsNo","content":"DebugPointAtWith.IsNo \nIsNo \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatwith.html#IsYes","title":"DebugPointAtWith.IsYes","content":"DebugPointAtWith.IsYes \nIsYes \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatwith.html#Yes","title":"DebugPointAtWith.Yes","content":"DebugPointAtWith.Yes \nYes \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatwith.html#No","title":"DebugPointAtWith.No","content":"DebugPointAtWith.No \nNo \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-expratomicflag.html","title":"ExprAtomicFlag","content":"ExprAtomicFlag \n Indicates if an expression is an atomic expression.\n\n An atomic expression has no whitespace unless enclosed in parentheses, e.g.\n 1, \u00223\u0022, ident, ident.[expr] and (expr). If an atomic expression has type T,\n then the largest expression ending at the same range as the atomic expression\n also has type T. \nExprAtomicFlag.Atomic \nAtomic \nExprAtomicFlag.NonAtomic \nNonAtomic","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-expratomicflag.html#Atomic","title":"ExprAtomicFlag.Atomic","content":"ExprAtomicFlag.Atomic \nAtomic \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-expratomicflag.html#NonAtomic","title":"ExprAtomicFlag.NonAtomic","content":"ExprAtomicFlag.NonAtomic \nNonAtomic \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-ident.html","title":"Ident","content":"Ident \n Represents an identifier in F# code \nIdent.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nIdent.idRange \nidRange \nIdent.idText \nidText","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-ident.html#\u0060\u0060.ctor\u0060\u0060","title":"Ident.\u0060\u0060.ctor\u0060\u0060","content":"Ident.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-ident.html#idRange","title":"Ident.idRange","content":"Ident.idRange \nidRange \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-ident.html#idText","title":"Ident.idText","content":"Ident.idText \nidText \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-namepatpairfield.html","title":"NamePatPairField","content":"NamePatPairField \n Represents a single named argument pattern a pair of the form \u0060name = pattern\u0060. \nNamePatPairField.Range \nRange \nNamePatPairField.FieldName \nFieldName \nNamePatPairField.Pattern \nPattern \nNamePatPairField.NamePatPairField \nNamePatPairField","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-namepatpairfield.html#Range","title":"NamePatPairField.Range","content":"NamePatPairField.Range \nRange \n Gets the overall range of this name\u2013pattern pair, if available.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-namepatpairfield.html#FieldName","title":"NamePatPairField.FieldName","content":"NamePatPairField.FieldName \nFieldName \n Gets the identifier of the named field/parameter.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-namepatpairfield.html#Pattern","title":"NamePatPairField.Pattern","content":"NamePatPairField.Pattern \nPattern \n Gets the pattern associated with the named field.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-namepatpairfield.html#NamePatPairField","title":"NamePatPairField.NamePatPairField","content":"NamePatPairField.NamePatPairField \nNamePatPairField \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedhashdirective.html","title":"ParsedHashDirective","content":"ParsedHashDirective \n Represents a parsed hash directive \nParsedHashDirective.ParsedHashDirective \nParsedHashDirective","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedhashdirective.html#ParsedHashDirective","title":"ParsedHashDirective.ParsedHashDirective","content":"ParsedHashDirective.ParsedHashDirective \nParsedHashDirective \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedhashdirectiveargument.html","title":"ParsedHashDirectiveArgument","content":"ParsedHashDirectiveArgument \n Represents a parsed hash directive argument \nParsedHashDirectiveArgument.IsIdent \nIsIdent \nParsedHashDirectiveArgument.IsSourceIdentifier \nIsSourceIdentifier \nParsedHashDirectiveArgument.IsLongIdent \nIsLongIdent \nParsedHashDirectiveArgument.Range \nRange \nParsedHashDirectiveArgument.IsString \nIsString \nParsedHashDirectiveArgument.IsInt32 \nIsInt32 \nParsedHashDirectiveArgument.Ident \nIdent \nParsedHashDirectiveArgument.Int32 \nInt32 \nParsedHashDirectiveArgument.LongIdent \nLongIdent \nParsedHashDirectiveArgument.String \nString \nParsedHashDirectiveArgument.SourceIdentifier \nSourceIdentifier","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedhashdirectiveargument.html#IsIdent","title":"ParsedHashDirectiveArgument.IsIdent","content":"ParsedHashDirectiveArgument.IsIdent \nIsIdent \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedhashdirectiveargument.html#IsSourceIdentifier","title":"ParsedHashDirectiveArgument.IsSourceIdentifier","content":"ParsedHashDirectiveArgument.IsSourceIdentifier \nIsSourceIdentifier \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedhashdirectiveargument.html#IsLongIdent","title":"ParsedHashDirectiveArgument.IsLongIdent","content":"ParsedHashDirectiveArgument.IsLongIdent \nIsLongIdent \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedhashdirectiveargument.html#Range","title":"ParsedHashDirectiveArgument.Range","content":"ParsedHashDirectiveArgument.Range \nRange \n Gets the syntax range of this construct","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedhashdirectiveargument.html#IsString","title":"ParsedHashDirectiveArgument.IsString","content":"ParsedHashDirectiveArgument.IsString \nIsString \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedhashdirectiveargument.html#IsInt32","title":"ParsedHashDirectiveArgument.IsInt32","content":"ParsedHashDirectiveArgument.IsInt32 \nIsInt32 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedhashdirectiveargument.html#Ident","title":"ParsedHashDirectiveArgument.Ident","content":"ParsedHashDirectiveArgument.Ident \nIdent \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedhashdirectiveargument.html#Int32","title":"ParsedHashDirectiveArgument.Int32","content":"ParsedHashDirectiveArgument.Int32 \nInt32 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedhashdirectiveargument.html#LongIdent","title":"ParsedHashDirectiveArgument.LongIdent","content":"ParsedHashDirectiveArgument.LongIdent \nLongIdent \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedhashdirectiveargument.html#String","title":"ParsedHashDirectiveArgument.String","content":"ParsedHashDirectiveArgument.String \nString \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedhashdirectiveargument.html#SourceIdentifier","title":"ParsedHashDirectiveArgument.SourceIdentifier","content":"ParsedHashDirectiveArgument.SourceIdentifier \nSourceIdentifier \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedimplfile.html","title":"ParsedImplFile","content":"ParsedImplFile \n Represents a parsed implementation file made up of fragments \nParsedImplFile.ParsedImplFile \nParsedImplFile","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedimplfile.html#ParsedImplFile","title":"ParsedImplFile.ParsedImplFile","content":"ParsedImplFile.ParsedImplFile \nParsedImplFile \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedimplfilefragment.html","title":"ParsedImplFileFragment","content":"ParsedImplFileFragment \n Represents the syntax tree for the contents of a parsed implementation file \nParsedImplFileFragment.IsNamedModule \nIsNamedModule \nParsedImplFileFragment.IsAnonModule \nIsAnonModule \nParsedImplFileFragment.IsNamespaceFragment \nIsNamespaceFragment \nParsedImplFileFragment.AnonModule \nAnonModule \nParsedImplFileFragment.NamedModule \nNamedModule \nParsedImplFileFragment.NamespaceFragment \nNamespaceFragment","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedimplfilefragment.html#IsNamedModule","title":"ParsedImplFileFragment.IsNamedModule","content":"ParsedImplFileFragment.IsNamedModule \nIsNamedModule \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedimplfilefragment.html#IsAnonModule","title":"ParsedImplFileFragment.IsAnonModule","content":"ParsedImplFileFragment.IsAnonModule \nIsAnonModule \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedimplfilefragment.html#IsNamespaceFragment","title":"ParsedImplFileFragment.IsNamespaceFragment","content":"ParsedImplFileFragment.IsNamespaceFragment \nIsNamespaceFragment \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedimplfilefragment.html#AnonModule","title":"ParsedImplFileFragment.AnonModule","content":"ParsedImplFileFragment.AnonModule \nAnonModule \n An implementation file which is an anonymous module definition, e.g. a script","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedimplfilefragment.html#NamedModule","title":"ParsedImplFileFragment.NamedModule","content":"ParsedImplFileFragment.NamedModule \nNamedModule \n An implementation file is a named module definition, \u0027module N\u0027","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedimplfilefragment.html#NamespaceFragment","title":"ParsedImplFileFragment.NamespaceFragment","content":"ParsedImplFileFragment.NamespaceFragment \nNamespaceFragment \n An implementation file fragment which declares a namespace fragment","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedimplfileinput.html","title":"ParsedImplFileInput","content":"ParsedImplFileInput \n Represents the full syntax tree, file name and other parsing information for an implementation file \nParsedImplFileInput.IsLastCompiland \nIsLastCompiland \nParsedImplFileInput.Trivia \nTrivia \nParsedImplFileInput.IsScript \nIsScript \nParsedImplFileInput.HashDirectives \nHashDirectives \nParsedImplFileInput.Contents \nContents \nParsedImplFileInput.IsExe \nIsExe \nParsedImplFileInput.QualifiedName \nQualifiedName \nParsedImplFileInput.FileName \nFileName \nParsedImplFileInput.ParsedImplFileInput \nParsedImplFileInput","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedimplfileinput.html#IsLastCompiland","title":"ParsedImplFileInput.IsLastCompiland","content":"ParsedImplFileInput.IsLastCompiland \nIsLastCompiland \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedimplfileinput.html#Trivia","title":"ParsedImplFileInput.Trivia","content":"ParsedImplFileInput.Trivia \nTrivia \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedimplfileinput.html#IsScript","title":"ParsedImplFileInput.IsScript","content":"ParsedImplFileInput.IsScript \nIsScript \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedimplfileinput.html#HashDirectives","title":"ParsedImplFileInput.HashDirectives","content":"ParsedImplFileInput.HashDirectives \nHashDirectives \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedimplfileinput.html#Contents","title":"ParsedImplFileInput.Contents","content":"ParsedImplFileInput.Contents \nContents \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedimplfileinput.html#IsExe","title":"ParsedImplFileInput.IsExe","content":"ParsedImplFileInput.IsExe \nIsExe \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedimplfileinput.html#QualifiedName","title":"ParsedImplFileInput.QualifiedName","content":"ParsedImplFileInput.QualifiedName \nQualifiedName \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedimplfileinput.html#FileName","title":"ParsedImplFileInput.FileName","content":"ParsedImplFileInput.FileName \nFileName \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedimplfileinput.html#ParsedImplFileInput","title":"ParsedImplFileInput.ParsedImplFileInput","content":"ParsedImplFileInput.ParsedImplFileInput \nParsedImplFileInput \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedinput.html","title":"ParsedInput","content":"ParsedInput \n Represents the syntax tree for a parsed implementation or signature file \nParsedInput.IsImplFile \nIsImplFile \nParsedInput.Identifiers \nIdentifiers \nParsedInput.Range \nRange \nParsedInput.IsSigFile \nIsSigFile \nParsedInput.QualifiedName \nQualifiedName \nParsedInput.FileName \nFileName \nParsedInput.ImplFile \nImplFile \nParsedInput.SigFile \nSigFile","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedinput.html#IsImplFile","title":"ParsedInput.IsImplFile","content":"ParsedInput.IsImplFile \nIsImplFile \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedinput.html#Identifiers","title":"ParsedInput.Identifiers","content":"ParsedInput.Identifiers \nIdentifiers \n Gets a set of all identifiers used in this parsed input. Only populated if captureIdentifiersWhenParsing option was used.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedinput.html#Range","title":"ParsedInput.Range","content":"ParsedInput.Range \nRange \n Gets the syntax range of this construct","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedinput.html#IsSigFile","title":"ParsedInput.IsSigFile","content":"ParsedInput.IsSigFile \nIsSigFile \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedinput.html#QualifiedName","title":"ParsedInput.QualifiedName","content":"ParsedInput.QualifiedName \nQualifiedName \n Gets the qualified name used to help match signature and implementation files","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedinput.html#FileName","title":"ParsedInput.FileName","content":"ParsedInput.FileName \nFileName \n Gets the file name for the parsed input","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedinput.html#ImplFile","title":"ParsedInput.ImplFile","content":"ParsedInput.ImplFile \nImplFile \n A parsed implementation file","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedinput.html#SigFile","title":"ParsedInput.SigFile","content":"ParsedInput.SigFile \nSigFile \n A parsed signature file","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedscriptinteraction.html","title":"ParsedScriptInteraction","content":"ParsedScriptInteraction \n Represents a parsed syntax tree for an F# Interactive interaction \nParsedScriptInteraction.Definitions \nDefinitions","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedscriptinteraction.html#Definitions","title":"ParsedScriptInteraction.Definitions","content":"ParsedScriptInteraction.Definitions \nDefinitions \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedsigfile.html","title":"ParsedSigFile","content":"ParsedSigFile \n Represents a parsed signature file made up of fragments \nParsedSigFile.ParsedSigFile \nParsedSigFile","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedsigfile.html#ParsedSigFile","title":"ParsedSigFile.ParsedSigFile","content":"ParsedSigFile.ParsedSigFile \nParsedSigFile \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedsigfilefragment.html","title":"ParsedSigFileFragment","content":"ParsedSigFileFragment \n Represents the syntax tree for the contents of a parsed signature file \nParsedSigFileFragment.IsNamedModule \nIsNamedModule \nParsedSigFileFragment.IsAnonModule \nIsAnonModule \nParsedSigFileFragment.IsNamespaceFragment \nIsNamespaceFragment \nParsedSigFileFragment.AnonModule \nAnonModule \nParsedSigFileFragment.NamedModule \nNamedModule \nParsedSigFileFragment.NamespaceFragment \nNamespaceFragment","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedsigfilefragment.html#IsNamedModule","title":"ParsedSigFileFragment.IsNamedModule","content":"ParsedSigFileFragment.IsNamedModule \nIsNamedModule \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedsigfilefragment.html#IsAnonModule","title":"ParsedSigFileFragment.IsAnonModule","content":"ParsedSigFileFragment.IsAnonModule \nIsAnonModule \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedsigfilefragment.html#IsNamespaceFragment","title":"ParsedSigFileFragment.IsNamespaceFragment","content":"ParsedSigFileFragment.IsNamespaceFragment \nIsNamespaceFragment \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedsigfilefragment.html#AnonModule","title":"ParsedSigFileFragment.AnonModule","content":"ParsedSigFileFragment.AnonModule \nAnonModule \n A signature file which is an anonymous module, e.g. the signature file for the final file in an application","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedsigfilefragment.html#NamedModule","title":"ParsedSigFileFragment.NamedModule","content":"ParsedSigFileFragment.NamedModule \nNamedModule \n A signature file which is a module, \u0027module N\u0027","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedsigfilefragment.html#NamespaceFragment","title":"ParsedSigFileFragment.NamespaceFragment","content":"ParsedSigFileFragment.NamespaceFragment \nNamespaceFragment \n A signature file namespace fragment","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedsigfileinput.html","title":"ParsedSigFileInput","content":"ParsedSigFileInput \n Represents the full syntax tree, file name and other parsing information for a signature file \nParsedSigFileInput.Trivia \nTrivia \nParsedSigFileInput.HashDirectives \nHashDirectives \nParsedSigFileInput.Contents \nContents \nParsedSigFileInput.QualifiedName \nQualifiedName \nParsedSigFileInput.FileName \nFileName \nParsedSigFileInput.ParsedSigFileInput \nParsedSigFileInput","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedsigfileinput.html#Trivia","title":"ParsedSigFileInput.Trivia","content":"ParsedSigFileInput.Trivia \nTrivia \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedsigfileinput.html#HashDirectives","title":"ParsedSigFileInput.HashDirectives","content":"ParsedSigFileInput.HashDirectives \nHashDirectives \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedsigfileinput.html#Contents","title":"ParsedSigFileInput.Contents","content":"ParsedSigFileInput.Contents \nContents \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedsigfileinput.html#QualifiedName","title":"ParsedSigFileInput.QualifiedName","content":"ParsedSigFileInput.QualifiedName \nQualifiedName \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedsigfileinput.html#FileName","title":"ParsedSigFileInput.FileName","content":"ParsedSigFileInput.FileName \nFileName \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedsigfileinput.html#ParsedSigFileInput","title":"ParsedSigFileInput.ParsedSigFileInput","content":"ParsedSigFileInput.ParsedSigFileInput \nParsedSigFileInput \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parserdetail.html","title":"ParserDetail","content":"ParserDetail \n Indicates if the construct arises from error recovery \nParserDetail.IsOk \nIsOk \nParserDetail.IsErrorRecovery \nIsErrorRecovery \nParserDetail.Ok \nOk \nParserDetail.ErrorRecovery \nErrorRecovery","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parserdetail.html#IsOk","title":"ParserDetail.IsOk","content":"ParserDetail.IsOk \nIsOk \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parserdetail.html#IsErrorRecovery","title":"ParserDetail.IsErrorRecovery","content":"ParserDetail.IsErrorRecovery \nIsErrorRecovery \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parserdetail.html#Ok","title":"ParserDetail.Ok","content":"ParserDetail.Ok \nOk \n The construct arises normally","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parserdetail.html#ErrorRecovery","title":"ParserDetail.ErrorRecovery","content":"ParserDetail.ErrorRecovery \nErrorRecovery \n The construct arises from error recovery","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-qualifiednameoffile.html","title":"QualifiedNameOfFile","content":"QualifiedNameOfFile \n Represents a qualifying name for anonymous module specifications and implementations, \nQualifiedNameOfFile.Text \nText \nQualifiedNameOfFile.Id \nId \nQualifiedNameOfFile.Range \nRange \nQualifiedNameOfFile.QualifiedNameOfFile \nQualifiedNameOfFile","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-qualifiednameoffile.html#Text","title":"QualifiedNameOfFile.Text","content":"QualifiedNameOfFile.Text \nText \n The name of the file","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-qualifiednameoffile.html#Id","title":"QualifiedNameOfFile.Id","content":"QualifiedNameOfFile.Id \nId \n The identifier for the name of the file","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-qualifiednameoffile.html#Range","title":"QualifiedNameOfFile.Range","content":"QualifiedNameOfFile.Range \nRange \n Gets the syntax range of this construct","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-qualifiednameoffile.html#QualifiedNameOfFile","title":"QualifiedNameOfFile.QualifiedNameOfFile","content":"QualifiedNameOfFile.QualifiedNameOfFile \nQualifiedNameOfFile \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-seqexpronly.html","title":"SeqExprOnly","content":"SeqExprOnly \n Indicates if a for loop is \u0027for x in e1 -\u003E e2\u0027, only valid in sequence expressions \nSeqExprOnly.SeqExprOnly \nSeqExprOnly","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-seqexpronly.html#SeqExprOnly","title":"SeqExprOnly.SeqExprOnly","content":"SeqExprOnly.SeqExprOnly \nSeqExprOnly \n Indicates if a for loop is \u0027for x in e1 -\u003E e2\u0027, only valid in sequence expressions","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synaccess.html","title":"SynAccess","content":"SynAccess \n Represents an accessibility modifier in F# syntax \nSynAccess.IsPublic \nIsPublic \nSynAccess.IsPrivate \nIsPrivate \nSynAccess.Range \nRange \nSynAccess.IsInternal \nIsInternal \nSynAccess.Public \nPublic \nSynAccess.Internal \nInternal \nSynAccess.Private \nPrivate","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synaccess.html#IsPublic","title":"SynAccess.IsPublic","content":"SynAccess.IsPublic \nIsPublic \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synaccess.html#IsPrivate","title":"SynAccess.IsPrivate","content":"SynAccess.IsPrivate \nIsPrivate \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synaccess.html#Range","title":"SynAccess.Range","content":"SynAccess.Range \nRange \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synaccess.html#IsInternal","title":"SynAccess.IsInternal","content":"SynAccess.IsInternal \nIsInternal \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synaccess.html#Public","title":"SynAccess.Public","content":"SynAccess.Public \nPublic \n A construct marked or assumed \u0027public\u0027","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synaccess.html#Internal","title":"SynAccess.Internal","content":"SynAccess.Internal \nInternal \n A construct marked or assumed \u0027internal\u0027","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synaccess.html#Private","title":"SynAccess.Private","content":"SynAccess.Private \nPrivate \n A construct marked or assumed \u0027private\u0027","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synarginfo.html","title":"SynArgInfo","content":"SynArgInfo \n Represents the argument names and other metadata for a parameter for a member or function \nSynArgInfo.Ident \nIdent \nSynArgInfo.Attributes \nAttributes \nSynArgInfo.SynArgInfo \nSynArgInfo","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synarginfo.html#Ident","title":"SynArgInfo.Ident","content":"SynArgInfo.Ident \nIdent \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synarginfo.html#Attributes","title":"SynArgInfo.Attributes","content":"SynArgInfo.Attributes \nAttributes \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synarginfo.html#SynArgInfo","title":"SynArgInfo.SynArgInfo","content":"SynArgInfo.SynArgInfo \nSynArgInfo \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synargpats.html","title":"SynArgPats","content":"SynArgPats \n Represents a syntax tree for arguments patterns \nSynArgPats.IsNamePatPairs \nIsNamePatPairs \nSynArgPats.Patterns \nPatterns \nSynArgPats.IsPats \nIsPats \nSynArgPats.Pats \nPats \nSynArgPats.NamePatPairs \nNamePatPairs","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synargpats.html#IsNamePatPairs","title":"SynArgPats.IsNamePatPairs","content":"SynArgPats.IsNamePatPairs \nIsNamePatPairs \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synargpats.html#Patterns","title":"SynArgPats.Patterns","content":"SynArgPats.Patterns \nPatterns \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synargpats.html#IsPats","title":"SynArgPats.IsPats","content":"SynArgPats.IsPats \nIsPats \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synargpats.html#Pats","title":"SynArgPats.Pats","content":"SynArgPats.Pats \nPats \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synargpats.html#NamePatPairs","title":"SynArgPats.NamePatPairs","content":"SynArgPats.NamePatPairs \nNamePatPairs \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synattribute.html","title":"SynAttribute","content":"SynAttribute \n Represents an attribute \nSynAttribute.TypeName \nTypeName \nSynAttribute.ArgExpr \nArgExpr \nSynAttribute.Target \nTarget \nSynAttribute.AppliesToGetterAndSetter \nAppliesToGetterAndSetter \nSynAttribute.Range \nRange","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synattribute.html#TypeName","title":"SynAttribute.TypeName","content":"SynAttribute.TypeName \nTypeName \n The name of the type for the attribute","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synattribute.html#ArgExpr","title":"SynAttribute.ArgExpr","content":"SynAttribute.ArgExpr \nArgExpr \n The argument of the attribute, perhaps a tuple","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synattribute.html#Target","title":"SynAttribute.Target","content":"SynAttribute.Target \nTarget \n Target specifier, e.g. \u0022assembly\u0022, \u0022module\u0022, etc.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synattribute.html#AppliesToGetterAndSetter","title":"SynAttribute.AppliesToGetterAndSetter","content":"SynAttribute.AppliesToGetterAndSetter \nAppliesToGetterAndSetter \n Is this attribute being applied to a property getter or setter?","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synattribute.html#Range","title":"SynAttribute.Range","content":"SynAttribute.Range \nRange \n The syntax range of the attribute","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synattributelist.html","title":"SynAttributeList","content":"SynAttributeList \n List of attributes enclosed in [\u003C ... \u003E]. \nSynAttributeList.Attributes \nAttributes \nSynAttributeList.Range \nRange","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synattributelist.html#Attributes","title":"SynAttributeList.Attributes","content":"SynAttributeList.Attributes \nAttributes \n The list of attributes","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synattributelist.html#Range","title":"SynAttributeList.Range","content":"SynAttributeList.Range \nRange \n The syntax range of the list of attributes","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synbinding.html","title":"SynBinding","content":"SynBinding \n Represents a binding for a \u0027let\u0027 or \u0027member\u0027 declaration \nSynBinding.RangeOfHeadPattern \nRangeOfHeadPattern \nSynBinding.Trivia \nTrivia \nSynBinding.RangeOfBindingWithoutRhs \nRangeOfBindingWithoutRhs \nSynBinding.RangeOfBindingWithRhs \nRangeOfBindingWithRhs \nSynBinding.SynBinding \nSynBinding","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synbinding.html#RangeOfHeadPattern","title":"SynBinding.RangeOfHeadPattern","content":"SynBinding.RangeOfHeadPattern \nRangeOfHeadPattern \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synbinding.html#Trivia","title":"SynBinding.Trivia","content":"SynBinding.Trivia \nTrivia \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synbinding.html#RangeOfBindingWithoutRhs","title":"SynBinding.RangeOfBindingWithoutRhs","content":"SynBinding.RangeOfBindingWithoutRhs \nRangeOfBindingWithoutRhs \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synbinding.html#RangeOfBindingWithRhs","title":"SynBinding.RangeOfBindingWithRhs","content":"SynBinding.RangeOfBindingWithRhs \nRangeOfBindingWithRhs \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synbinding.html#SynBinding","title":"SynBinding.SynBinding","content":"SynBinding.SynBinding \nSynBinding \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synbindingkind.html","title":"SynBindingKind","content":"SynBindingKind \n The kind associated with a binding - \u0022let\u0022, \u0022do\u0022 or a standalone expression \nSynBindingKind.IsNormal \nIsNormal \nSynBindingKind.IsStandaloneExpression \nIsStandaloneExpression \nSynBindingKind.IsDo \nIsDo \nSynBindingKind.StandaloneExpression \nStandaloneExpression \nSynBindingKind.Normal \nNormal \nSynBindingKind.Do \nDo","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synbindingkind.html#IsNormal","title":"SynBindingKind.IsNormal","content":"SynBindingKind.IsNormal \nIsNormal \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synbindingkind.html#IsStandaloneExpression","title":"SynBindingKind.IsStandaloneExpression","content":"SynBindingKind.IsStandaloneExpression \nIsStandaloneExpression \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synbindingkind.html#IsDo","title":"SynBindingKind.IsDo","content":"SynBindingKind.IsDo \nIsDo \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synbindingkind.html#StandaloneExpression","title":"SynBindingKind.StandaloneExpression","content":"SynBindingKind.StandaloneExpression \nStandaloneExpression \n A standalone expression in a module","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synbindingkind.html#Normal","title":"SynBindingKind.Normal","content":"SynBindingKind.Normal \nNormal \n A normal \u0027let\u0027 binding in a module","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synbindingkind.html#Do","title":"SynBindingKind.Do","content":"SynBindingKind.Do \nDo \n A \u0027do\u0027 binding in a module. Must have type \u0027unit\u0027","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synbindingreturninfo.html","title":"SynBindingReturnInfo","content":"SynBindingReturnInfo \n Represents the return information in a binding for a \u0027let\u0027 or \u0027member\u0027 declaration \nSynBindingReturnInfo.SynBindingReturnInfo \nSynBindingReturnInfo","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synbindingreturninfo.html#SynBindingReturnInfo","title":"SynBindingReturnInfo.SynBindingReturnInfo","content":"SynBindingReturnInfo.SynBindingReturnInfo \nSynBindingReturnInfo \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synbytestringkind.html","title":"SynByteStringKind","content":"SynByteStringKind \n Indicate if the byte string had a special format \nSynByteStringKind.IsVerbatim \nIsVerbatim \nSynByteStringKind.IsRegular \nIsRegular \nSynByteStringKind.Regular \nRegular \nSynByteStringKind.Verbatim \nVerbatim","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synbytestringkind.html#IsVerbatim","title":"SynByteStringKind.IsVerbatim","content":"SynByteStringKind.IsVerbatim \nIsVerbatim \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synbytestringkind.html#IsRegular","title":"SynByteStringKind.IsRegular","content":"SynByteStringKind.IsRegular \nIsRegular \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synbytestringkind.html#Regular","title":"SynByteStringKind.Regular","content":"SynByteStringKind.Regular \nRegular \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synbytestringkind.html#Verbatim","title":"SynByteStringKind.Verbatim","content":"SynByteStringKind.Verbatim \nVerbatim \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syncomponentinfo.html","title":"SynComponentInfo","content":"SynComponentInfo \n Represents the syntax tree associated with the name of a type definition or module\n in signature or implementation.\n\n This includes the name, attributes, type parameters, constraints, documentation and accessibility\n for a type definition or module. For modules, entries such as the type parameters are\n always empty. \nSynComponentInfo.Range \nRange \nSynComponentInfo.SynComponentInfo \nSynComponentInfo","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syncomponentinfo.html#Range","title":"SynComponentInfo.Range","content":"SynComponentInfo.Range \nRange \n Gets the syntax range of this construct","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syncomponentinfo.html#SynComponentInfo","title":"SynComponentInfo.SynComponentInfo","content":"SynComponentInfo.SynComponentInfo \nSynComponentInfo \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synconst.html","title":"SynConst","content":"SynConst \n The unchecked abstract syntax tree of constants in F# types and expressions. \nSynConst.Range \nRange \nSynConst.IsSingle \nIsSingle \nSynConst.IsDecimal \nIsDecimal \nSynConst.IsBytes \nIsBytes \nSynConst.IsSourceIdentifier \nIsSourceIdentifier \nSynConst.IsUInt64 \nIsUInt64 \nSynConst.IsIntPtr \nIsIntPtr \nSynConst.IsUInt32 \nIsUInt32 \nSynConst.IsUserNum \nIsUserNum \nSynConst.IsMeasure \nIsMeasure \nSynConst.IsByte \nIsByte \nSynConst.IsUInt16s \nIsUInt16s \nSynConst.IsDouble \nIsDouble \nSynConst.IsSByte \nIsSByte \nSynConst.IsString \nIsString \nSynConst.IsInt32 \nIsInt32 \nSynConst.IsUInt16 \nIsUInt16 \nSynConst.IsInt64 \nIsInt64 \nSynConst.IsInt16 \nIsInt16 \nSynConst.IsChar \nIsChar \nSynConst.IsUIntPtr \nIsUIntPtr \nSynConst.IsUnit \nIsUnit \nSynConst.IsBool \nIsBool \nSynConst.Unit \nUnit \nSynConst.Bool \nBool \nSynConst.SByte \nSByte \nSynConst.Byte \nByte \nSynConst.Int16 \nInt16 \nSynConst.UInt16 \nUInt16 \nSynConst.Int32 \nInt32 \nSynConst.UInt32 \nUInt32 \nSynConst.Int64 \nInt64 \nSynConst.UInt64 \nUInt64 \nSynConst.IntPtr \nIntPtr \nSynConst.UIntPtr \nUIntPtr \nSynConst.Single \nSingle \nSynConst.Double \nDouble \nSynConst.Char \nChar \nSynConst.Decimal \nDecimal \nSynConst.UserNum \nUserNum \nSynConst.String \nString \nSynConst.Bytes \nBytes \nSynConst.UInt16s \nUInt16s \nSynConst.Measure \nMeasure \nSynConst.SourceIdentifier \nSourceIdentifier","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synconst.html#Range","title":"SynConst.Range","content":"SynConst.Range \nRange \n Gets the syntax range of this construct","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synconst.html#IsSingle","title":"SynConst.IsSingle","content":"SynConst.IsSingle \nIsSingle \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synconst.html#IsDecimal","title":"SynConst.IsDecimal","content":"SynConst.IsDecimal \nIsDecimal \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synconst.html#IsBytes","title":"SynConst.IsBytes","content":"SynConst.IsBytes \nIsBytes \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synconst.html#IsSourceIdentifier","title":"SynConst.IsSourceIdentifier","content":"SynConst.IsSourceIdentifier \nIsSourceIdentifier \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synconst.html#IsUInt64","title":"SynConst.IsUInt64","content":"SynConst.IsUInt64 \nIsUInt64 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synconst.html#IsIntPtr","title":"SynConst.IsIntPtr","content":"SynConst.IsIntPtr \nIsIntPtr \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synconst.html#IsUInt32","title":"SynConst.IsUInt32","content":"SynConst.IsUInt32 \nIsUInt32 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synconst.html#IsUserNum","title":"SynConst.IsUserNum","content":"SynConst.IsUserNum \nIsUserNum \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synconst.html#IsMeasure","title":"SynConst.IsMeasure","content":"SynConst.IsMeasure \nIsMeasure \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synconst.html#IsByte","title":"SynConst.IsByte","content":"SynConst.IsByte \nIsByte \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synconst.html#IsUInt16s","title":"SynConst.IsUInt16s","content":"SynConst.IsUInt16s \nIsUInt16s \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synconst.html#IsDouble","title":"SynConst.IsDouble","content":"SynConst.IsDouble \nIsDouble \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synconst.html#IsSByte","title":"SynConst.IsSByte","content":"SynConst.IsSByte \nIsSByte \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synconst.html#IsString","title":"SynConst.IsString","content":"SynConst.IsString \nIsString \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synconst.html#IsInt32","title":"SynConst.IsInt32","content":"SynConst.IsInt32 \nIsInt32 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synconst.html#IsUInt16","title":"SynConst.IsUInt16","content":"SynConst.IsUInt16 \nIsUInt16 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synconst.html#IsInt64","title":"SynConst.IsInt64","content":"SynConst.IsInt64 \nIsInt64 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synconst.html#IsInt16","title":"SynConst.IsInt16","content":"SynConst.IsInt16 \nIsInt16 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synconst.html#IsChar","title":"SynConst.IsChar","content":"SynConst.IsChar \nIsChar \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synconst.html#IsUIntPtr","title":"SynConst.IsUIntPtr","content":"SynConst.IsUIntPtr \nIsUIntPtr \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synconst.html#IsUnit","title":"SynConst.IsUnit","content":"SynConst.IsUnit \nIsUnit \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synconst.html#IsBool","title":"SynConst.IsBool","content":"SynConst.IsBool \nIsBool \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synconst.html#Unit","title":"SynConst.Unit","content":"SynConst.Unit \nUnit \n F# syntax: ()","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synconst.html#Bool","title":"SynConst.Bool","content":"SynConst.Bool \nBool \n F# syntax: true, false","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synconst.html#SByte","title":"SynConst.SByte","content":"SynConst.SByte \nSByte \n F# syntax: 13y, 0xFFy, 0o077y, 0b0111101y","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synconst.html#Byte","title":"SynConst.Byte","content":"SynConst.Byte \nByte \n F# syntax: 13uy, 0x40uy, 0oFFuy, 0b0111101uy","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synconst.html#Int16","title":"SynConst.Int16","content":"SynConst.Int16 \nInt16 \n F# syntax: 13s, 0x4000s, 0o0777s, 0b0111101s","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synconst.html#UInt16","title":"SynConst.UInt16","content":"SynConst.UInt16 \nUInt16 \n F# syntax: 13us, 0x4000us, 0o0777us, 0b0111101us","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synconst.html#Int32","title":"SynConst.Int32","content":"SynConst.Int32 \nInt32 \n F# syntax: 13, 0x4000, 0o0777","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synconst.html#UInt32","title":"SynConst.UInt32","content":"SynConst.UInt32 \nUInt32 \n F# syntax: 13u, 0x4000u, 0o0777u","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synconst.html#Int64","title":"SynConst.Int64","content":"SynConst.Int64 \nInt64 \n F# syntax: 13L","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synconst.html#UInt64","title":"SynConst.UInt64","content":"SynConst.UInt64 \nUInt64 \n F# syntax: 13UL","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synconst.html#IntPtr","title":"SynConst.IntPtr","content":"SynConst.IntPtr \nIntPtr \n F# syntax: 13n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synconst.html#UIntPtr","title":"SynConst.UIntPtr","content":"SynConst.UIntPtr \nUIntPtr \n F# syntax: 13un","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synconst.html#Single","title":"SynConst.Single","content":"SynConst.Single \nSingle \n F# syntax: 1.30f, 1.40e10f etc.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synconst.html#Double","title":"SynConst.Double","content":"SynConst.Double \nDouble \n F# syntax: 1.30, 1.40e10 etc.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synconst.html#Char","title":"SynConst.Char","content":"SynConst.Char \nChar \n F# syntax: \u0027a\u0027","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synconst.html#Decimal","title":"SynConst.Decimal","content":"SynConst.Decimal \nDecimal \n F# syntax: 23.4M","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synconst.html#UserNum","title":"SynConst.UserNum","content":"SynConst.UserNum \nUserNum \n UserNum(value, suffix)\n\n F# syntax: 1Q, 1Z, 1R, 1N, 1G","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synconst.html#String","title":"SynConst.String","content":"SynConst.String \nString \n F# syntax: verbatim or regular string, e.g. \u0022abc\u0022","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synconst.html#Bytes","title":"SynConst.Bytes","content":"SynConst.Bytes \nBytes \n F# syntax: verbatim or regular byte string, e.g. \u0022abc\u0022B.\n\n Also used internally in the typechecker once an array of unit16 constants\n is detected, to allow more efficient processing of large arrays of uint16 constants.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synconst.html#UInt16s","title":"SynConst.UInt16s","content":"SynConst.UInt16s \nUInt16s \n Used internally in the typechecker once an array of unit16 constants\n is detected, to allow more efficient processing of large arrays of uint16 constants.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synconst.html#Measure","title":"SynConst.Measure","content":"SynConst.Measure \nMeasure \n Old comment: \u0022we never iterate, so the const here is not another SynConst.Measure\u0022","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synconst.html#SourceIdentifier","title":"SynConst.SourceIdentifier","content":"SynConst.SourceIdentifier \nSourceIdentifier \n Source Line, File, and Path Identifiers\n Containing both the original value as the evaluated value.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synenumcase.html","title":"SynEnumCase","content":"SynEnumCase \n Represents the syntax tree for one case in an enum definition. \nSynEnumCase.Range \nRange \nSynEnumCase.SynEnumCase \nSynEnumCase","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synenumcase.html#Range","title":"SynEnumCase.Range","content":"SynEnumCase.Range \nRange \n Gets the syntax range of this construct","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synenumcase.html#SynEnumCase","title":"SynEnumCase.SynEnumCase","content":"SynEnumCase.SynEnumCase \nSynEnumCase \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexceptiondefn.html","title":"SynExceptionDefn","content":"SynExceptionDefn \n Represents the right hand side of an exception declaration \u0027exception E = ... \u0027 plus\n any member definitions for the exception \nSynExceptionDefn.Range \nRange \nSynExceptionDefn.SynExceptionDefn \nSynExceptionDefn","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexceptiondefn.html#Range","title":"SynExceptionDefn.Range","content":"SynExceptionDefn.Range \nRange \n Gets the syntax range of this construct","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexceptiondefn.html#SynExceptionDefn","title":"SynExceptionDefn.SynExceptionDefn","content":"SynExceptionDefn.SynExceptionDefn \nSynExceptionDefn \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexceptiondefnrepr.html","title":"SynExceptionDefnRepr","content":"SynExceptionDefnRepr \n Represents the right hand side of an exception declaration \u0027exception E = ... \u0027 \nSynExceptionDefnRepr.Range \nRange \nSynExceptionDefnRepr.SynExceptionDefnRepr \nSynExceptionDefnRepr","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexceptiondefnrepr.html#Range","title":"SynExceptionDefnRepr.Range","content":"SynExceptionDefnRepr.Range \nRange \n Gets the syntax range of this construct","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexceptiondefnrepr.html#SynExceptionDefnRepr","title":"SynExceptionDefnRepr.SynExceptionDefnRepr","content":"SynExceptionDefnRepr.SynExceptionDefnRepr \nSynExceptionDefnRepr \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexceptionsig.html","title":"SynExceptionSig","content":"SynExceptionSig \n Represents the right hand side of an exception definition in a signature file \nSynExceptionSig.SynExceptionSig \nSynExceptionSig","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexceptionsig.html#SynExceptionSig","title":"SynExceptionSig.SynExceptionSig","content":"SynExceptionSig.SynExceptionSig \nSynExceptionSig \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html","title":"SynExpr","content":"SynExpr \n Represents a syntax tree for F# expressions \nSynExpr.IsDo \nIsDo \nSynExpr.IsLambda \nIsLambda \nSynExpr.IsTypeApp \nIsTypeApp \nSynExpr.IsLetOrUse \nIsLetOrUse \nSynExpr.IsIfThenElse \nIsIfThenElse \nSynExpr.IsDotIndexedSet \nIsDotIndexedSet \nSynExpr.IsTyped \nIsTyped \nSynExpr.IsApp \nIsApp \nSynExpr.IsRecord \nIsRecord \nSynExpr.IsQuote \nIsQuote \nSynExpr.IsWhile \nIsWhile \nSynExpr.IsDotLambda \nIsDotLambda \nSynExpr.IsFromParseError \nIsFromParseError \nSynExpr.IsInferredUpcast \nIsInferredUpcast \nSynExpr.IsDiscardAfterMissingQualificationAfterDot \nIsDiscardAfterMissingQualificationAfterDot \nSynExpr.IsAnonRecd \nIsAnonRecd \nSynExpr.IsFor \nIsFor \nSynExpr.IsSequentialOrImplicitYield \nIsSequentialOrImplicitYield \nSynExpr.IsLibraryOnlyStaticOptimization \nIsLibraryOnlyStaticOptimization \nSynExpr.IsIndexRange \nIsIndexRange \nSynExpr.IsDotNamedIndexedPropertySet \nIsDotNamedIndexedPropertySet \nSynExpr.IsParen \nIsParen \nSynExpr.IsAssert \nIsAssert \nSynExpr.IsJoinIn \nIsJoinIn \nSynExpr.IsNull \nIsNull \nSynExpr.IsSequential \nIsSequential \nSynExpr.IsTraitCall \nIsTraitCall \nSynExpr.IsDoBang \nIsDoBang \nSynExpr.IsConst \nIsConst \nSynExpr.IsImplicitZero \nIsImplicitZero \nSynExpr.IsLongIdentSet \nIsLongIdentSet \nSynExpr.IsDotSet \nIsDotSet \nSynExpr.IsDynamic \nIsDynamic \nSynExpr.IsUpcast \nIsUpcast \nSynExpr.IsMatchLambda \nIsMatchLambda \nSynExpr.RangeOfFirstPortion \nRangeOfFirstPortion \nSynExpr.IsTryFinally \nIsTryFinally \nSynExpr.IsDotGet \nIsDotGet \nSynExpr.IsObjExpr \nIsObjExpr \nSynExpr.IsLazy \nIsLazy \nSynExpr.IsInferredDowncast \nIsInferredDowncast \nSynExpr.RangeWithoutAnyExtraDot \nRangeWithoutAnyExtraDot \nSynExpr.IsLibraryOnlyUnionCaseFieldSet \nIsLibraryOnlyUnionCaseFieldSet \nSynExpr.IsLibraryOnlyILAssembly \nIsLibraryOnlyILAssembly \nSynExpr.IsInterpolatedString \nIsInterpolatedString \nSynExpr.IsForEach \nIsForEach \nSynExpr.IsMatchBang \nIsMatchBang \nSynExpr.IsTypar \nIsTypar \nSynExpr.IsLongIdent \nIsLongIdent \nSynExpr.IsFixed \nIsFixed \nSynExpr.IsDowncast \nIsDowncast \nSynExpr.IsComputationExpr \nIsComputationExpr \nSynExpr.IsLibraryOnlyUnionCaseFieldGet \nIsLibraryOnlyUnionCaseFieldGet \nSynExpr.IsAddressOf \nIsAddressOf \nSynExpr.IsIndexFromEnd \nIsIndexFromEnd \nSynExpr.IsYieldOrReturn \nIsYieldOrReturn \nSynExpr.IsArrayOrListComputed \nIsArrayOrListComputed \nSynExpr.IsSet \nIsSet \nSynExpr.IsTryWith \nIsTryWith \nSynExpr.IsArbExprAndThusAlreadyReportedError \nIsArbExprAndThusAlreadyReportedError \nSynExpr.IsArrayOrList \nIsArrayOrList \nSynExpr.IsDebugPoint \nIsDebugPoint \nSynExpr.IsNew \nIsNew \nSynExpr.IsTuple \nIsTuple \nSynExpr.IsIdent \nIsIdent \nSynExpr.IsArbitraryAfterError \nIsArbitraryAfterError \nSynExpr.IsNamedIndexedPropertySet \nIsNamedIndexedPropertySet \nSynExpr.IsYieldOrReturnFrom \nIsYieldOrReturnFrom \nSynExpr.IsTypeTest \nIsTypeTest \nSynExpr.IsWhileBang \nIsWhileBang \nSynExpr.Range \nRange \nSynExpr.IsMatch \nIsMatch \nSynExpr.IsDotIndexedGet \nIsDotIndexedGet \nSynExpr.Paren \nParen \nSynExpr.Quote \nQuote \nSynExpr.Const \nConst \nSynExpr.Typed \nTyped \nSynExpr.Tuple \nTuple \nSynExpr.AnonRecd \nAnonRecd \nSynExpr.ArrayOrList \nArrayOrList \nSynExpr.Record \nRecord \nSynExpr.New \nNew \nSynExpr.ObjExpr \nObjExpr \nSynExpr.While \nWhile \nSynExpr.For \nFor \nSynExpr.ForEach \nForEach \nSynExpr.ArrayOrListComputed \nArrayOrListComputed \nSynExpr.IndexRange \nIndexRange \nSynExpr.IndexFromEnd \nIndexFromEnd \nSynExpr.ComputationExpr \nComputationExpr \nSynExpr.Lambda \nLambda \nSynExpr.MatchLambda \nMatchLambda \nSynExpr.Match \nMatch \nSynExpr.Do \nDo \nSynExpr.Assert \nAssert \nSynExpr.App \nApp \nSynExpr.TypeApp \nTypeApp \nSynExpr.TryWith \nTryWith \nSynExpr.TryFinally \nTryFinally \nSynExpr.Lazy \nLazy \nSynExpr.Sequential \nSequential \nSynExpr.IfThenElse \nIfThenElse \nSynExpr.Typar \nTypar \nSynExpr.Ident \nIdent \nSynExpr.LongIdent \nLongIdent \nSynExpr.LongIdentSet \nLongIdentSet \nSynExpr.DotGet \nDotGet \nSynExpr.DotLambda \nDotLambda \nSynExpr.DotSet \nDotSet \nSynExpr.Set \nSet \nSynExpr.DotIndexedGet \nDotIndexedGet \nSynExpr.DotIndexedSet \nDotIndexedSet \nSynExpr.NamedIndexedPropertySet \nNamedIndexedPropertySet \nSynExpr.DotNamedIndexedPropertySet \nDotNamedIndexedPropertySet \nSynExpr.TypeTest \nTypeTest \nSynExpr.Upcast \nUpcast \nSynExpr.Downcast \nDowncast \nSynExpr.InferredUpcast \nInferredUpcast \nSynExpr.InferredDowncast \nInferredDowncast \nSynExpr.Null \nNull \nSynExpr.AddressOf \nAddressOf \nSynExpr.TraitCall \nTraitCall \nSynExpr.JoinIn \nJoinIn \nSynExpr.ImplicitZero \nImplicitZero \nSynExpr.SequentialOrImplicitYield \nSequentialOrImplicitYield \nSynExpr.YieldOrReturn \nYieldOrReturn \nSynExpr.YieldOrReturnFrom \nYieldOrReturnFrom \nSynExpr.LetOrUse \nLetOrUse \nSynExpr.MatchBang \nMatchBang \nSynExpr.DoBang \nDoBang \nSynExpr.WhileBang \nWhileBang \nSynExpr.LibraryOnlyILAssembly \nLibraryOnlyILAssembly \nSynExpr.LibraryOnlyStaticOptimization \nLibraryOnlyStaticOptimization \nSynExpr.LibraryOnlyUnionCaseFieldGet \nLibraryOnlyUnionCaseFieldGet \nSynExpr.LibraryOnlyUnionCaseFieldSet \nLibraryOnlyUnionCaseFieldSet \nSynExpr.ArbitraryAfterError \nArbitraryAfterError \nSynExpr.FromParseError \nFromParseError \nSynExpr.DiscardAfterMissingQualificationAfterDot \nDiscardAfterMissingQualificationAfterDot \nSynExpr.Fixed \nFixed \nSynExpr.InterpolatedString \nInterpolatedString \nSynExpr.DebugPoint \nDebugPoint \nSynExpr.Dynamic \nDynamic","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IsDo","title":"SynExpr.IsDo","content":"SynExpr.IsDo \nIsDo \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IsLambda","title":"SynExpr.IsLambda","content":"SynExpr.IsLambda \nIsLambda \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IsTypeApp","title":"SynExpr.IsTypeApp","content":"SynExpr.IsTypeApp \nIsTypeApp \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IsLetOrUse","title":"SynExpr.IsLetOrUse","content":"SynExpr.IsLetOrUse \nIsLetOrUse \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IsIfThenElse","title":"SynExpr.IsIfThenElse","content":"SynExpr.IsIfThenElse \nIsIfThenElse \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IsDotIndexedSet","title":"SynExpr.IsDotIndexedSet","content":"SynExpr.IsDotIndexedSet \nIsDotIndexedSet \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IsTyped","title":"SynExpr.IsTyped","content":"SynExpr.IsTyped \nIsTyped \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IsApp","title":"SynExpr.IsApp","content":"SynExpr.IsApp \nIsApp \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IsRecord","title":"SynExpr.IsRecord","content":"SynExpr.IsRecord \nIsRecord \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IsQuote","title":"SynExpr.IsQuote","content":"SynExpr.IsQuote \nIsQuote \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IsWhile","title":"SynExpr.IsWhile","content":"SynExpr.IsWhile \nIsWhile \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IsDotLambda","title":"SynExpr.IsDotLambda","content":"SynExpr.IsDotLambda \nIsDotLambda \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IsFromParseError","title":"SynExpr.IsFromParseError","content":"SynExpr.IsFromParseError \nIsFromParseError \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IsInferredUpcast","title":"SynExpr.IsInferredUpcast","content":"SynExpr.IsInferredUpcast \nIsInferredUpcast \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IsDiscardAfterMissingQualificationAfterDot","title":"SynExpr.IsDiscardAfterMissingQualificationAfterDot","content":"SynExpr.IsDiscardAfterMissingQualificationAfterDot \nIsDiscardAfterMissingQualificationAfterDot \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IsAnonRecd","title":"SynExpr.IsAnonRecd","content":"SynExpr.IsAnonRecd \nIsAnonRecd \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IsFor","title":"SynExpr.IsFor","content":"SynExpr.IsFor \nIsFor \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IsSequentialOrImplicitYield","title":"SynExpr.IsSequentialOrImplicitYield","content":"SynExpr.IsSequentialOrImplicitYield \nIsSequentialOrImplicitYield \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IsLibraryOnlyStaticOptimization","title":"SynExpr.IsLibraryOnlyStaticOptimization","content":"SynExpr.IsLibraryOnlyStaticOptimization \nIsLibraryOnlyStaticOptimization \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IsIndexRange","title":"SynExpr.IsIndexRange","content":"SynExpr.IsIndexRange \nIsIndexRange \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IsDotNamedIndexedPropertySet","title":"SynExpr.IsDotNamedIndexedPropertySet","content":"SynExpr.IsDotNamedIndexedPropertySet \nIsDotNamedIndexedPropertySet \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IsParen","title":"SynExpr.IsParen","content":"SynExpr.IsParen \nIsParen \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IsAssert","title":"SynExpr.IsAssert","content":"SynExpr.IsAssert \nIsAssert \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IsJoinIn","title":"SynExpr.IsJoinIn","content":"SynExpr.IsJoinIn \nIsJoinIn \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IsNull","title":"SynExpr.IsNull","content":"SynExpr.IsNull \nIsNull \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IsSequential","title":"SynExpr.IsSequential","content":"SynExpr.IsSequential \nIsSequential \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IsTraitCall","title":"SynExpr.IsTraitCall","content":"SynExpr.IsTraitCall \nIsTraitCall \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IsDoBang","title":"SynExpr.IsDoBang","content":"SynExpr.IsDoBang \nIsDoBang \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IsConst","title":"SynExpr.IsConst","content":"SynExpr.IsConst \nIsConst \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IsImplicitZero","title":"SynExpr.IsImplicitZero","content":"SynExpr.IsImplicitZero \nIsImplicitZero \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IsLongIdentSet","title":"SynExpr.IsLongIdentSet","content":"SynExpr.IsLongIdentSet \nIsLongIdentSet \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IsDotSet","title":"SynExpr.IsDotSet","content":"SynExpr.IsDotSet \nIsDotSet \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IsDynamic","title":"SynExpr.IsDynamic","content":"SynExpr.IsDynamic \nIsDynamic \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IsUpcast","title":"SynExpr.IsUpcast","content":"SynExpr.IsUpcast \nIsUpcast \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IsMatchLambda","title":"SynExpr.IsMatchLambda","content":"SynExpr.IsMatchLambda \nIsMatchLambda \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#RangeOfFirstPortion","title":"SynExpr.RangeOfFirstPortion","content":"SynExpr.RangeOfFirstPortion \nRangeOfFirstPortion \n Attempt to get the range of the first token or initial portion only - this\n is ad-hoc, just a cheap way to improve a certain \u0027query custom operation\u0027 error range","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IsTryFinally","title":"SynExpr.IsTryFinally","content":"SynExpr.IsTryFinally \nIsTryFinally \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IsDotGet","title":"SynExpr.IsDotGet","content":"SynExpr.IsDotGet \nIsDotGet \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IsObjExpr","title":"SynExpr.IsObjExpr","content":"SynExpr.IsObjExpr \nIsObjExpr \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IsLazy","title":"SynExpr.IsLazy","content":"SynExpr.IsLazy \nIsLazy \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IsInferredDowncast","title":"SynExpr.IsInferredDowncast","content":"SynExpr.IsInferredDowncast \nIsInferredDowncast \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#RangeWithoutAnyExtraDot","title":"SynExpr.RangeWithoutAnyExtraDot","content":"SynExpr.RangeWithoutAnyExtraDot \nRangeWithoutAnyExtraDot \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IsLibraryOnlyUnionCaseFieldSet","title":"SynExpr.IsLibraryOnlyUnionCaseFieldSet","content":"SynExpr.IsLibraryOnlyUnionCaseFieldSet \nIsLibraryOnlyUnionCaseFieldSet \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IsLibraryOnlyILAssembly","title":"SynExpr.IsLibraryOnlyILAssembly","content":"SynExpr.IsLibraryOnlyILAssembly \nIsLibraryOnlyILAssembly \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IsInterpolatedString","title":"SynExpr.IsInterpolatedString","content":"SynExpr.IsInterpolatedString \nIsInterpolatedString \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IsForEach","title":"SynExpr.IsForEach","content":"SynExpr.IsForEach \nIsForEach \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IsMatchBang","title":"SynExpr.IsMatchBang","content":"SynExpr.IsMatchBang \nIsMatchBang \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IsTypar","title":"SynExpr.IsTypar","content":"SynExpr.IsTypar \nIsTypar \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IsLongIdent","title":"SynExpr.IsLongIdent","content":"SynExpr.IsLongIdent \nIsLongIdent \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IsFixed","title":"SynExpr.IsFixed","content":"SynExpr.IsFixed \nIsFixed \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IsDowncast","title":"SynExpr.IsDowncast","content":"SynExpr.IsDowncast \nIsDowncast \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IsComputationExpr","title":"SynExpr.IsComputationExpr","content":"SynExpr.IsComputationExpr \nIsComputationExpr \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IsLibraryOnlyUnionCaseFieldGet","title":"SynExpr.IsLibraryOnlyUnionCaseFieldGet","content":"SynExpr.IsLibraryOnlyUnionCaseFieldGet \nIsLibraryOnlyUnionCaseFieldGet \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IsAddressOf","title":"SynExpr.IsAddressOf","content":"SynExpr.IsAddressOf \nIsAddressOf \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IsIndexFromEnd","title":"SynExpr.IsIndexFromEnd","content":"SynExpr.IsIndexFromEnd \nIsIndexFromEnd \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IsYieldOrReturn","title":"SynExpr.IsYieldOrReturn","content":"SynExpr.IsYieldOrReturn \nIsYieldOrReturn \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IsArrayOrListComputed","title":"SynExpr.IsArrayOrListComputed","content":"SynExpr.IsArrayOrListComputed \nIsArrayOrListComputed \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IsSet","title":"SynExpr.IsSet","content":"SynExpr.IsSet \nIsSet \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IsTryWith","title":"SynExpr.IsTryWith","content":"SynExpr.IsTryWith \nIsTryWith \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IsArbExprAndThusAlreadyReportedError","title":"SynExpr.IsArbExprAndThusAlreadyReportedError","content":"SynExpr.IsArbExprAndThusAlreadyReportedError \nIsArbExprAndThusAlreadyReportedError \n Indicates if this expression arises from error recovery","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IsArrayOrList","title":"SynExpr.IsArrayOrList","content":"SynExpr.IsArrayOrList \nIsArrayOrList \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IsDebugPoint","title":"SynExpr.IsDebugPoint","content":"SynExpr.IsDebugPoint \nIsDebugPoint \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IsNew","title":"SynExpr.IsNew","content":"SynExpr.IsNew \nIsNew \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IsTuple","title":"SynExpr.IsTuple","content":"SynExpr.IsTuple \nIsTuple \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IsIdent","title":"SynExpr.IsIdent","content":"SynExpr.IsIdent \nIsIdent \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IsArbitraryAfterError","title":"SynExpr.IsArbitraryAfterError","content":"SynExpr.IsArbitraryAfterError \nIsArbitraryAfterError \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IsNamedIndexedPropertySet","title":"SynExpr.IsNamedIndexedPropertySet","content":"SynExpr.IsNamedIndexedPropertySet \nIsNamedIndexedPropertySet \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IsYieldOrReturnFrom","title":"SynExpr.IsYieldOrReturnFrom","content":"SynExpr.IsYieldOrReturnFrom \nIsYieldOrReturnFrom \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IsTypeTest","title":"SynExpr.IsTypeTest","content":"SynExpr.IsTypeTest \nIsTypeTest \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IsWhileBang","title":"SynExpr.IsWhileBang","content":"SynExpr.IsWhileBang \nIsWhileBang \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#Range","title":"SynExpr.Range","content":"SynExpr.Range \nRange \n Gets the syntax range of this construct","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IsMatch","title":"SynExpr.IsMatch","content":"SynExpr.IsMatch \nIsMatch \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IsDotIndexedGet","title":"SynExpr.IsDotIndexedGet","content":"SynExpr.IsDotIndexedGet \nIsDotIndexedGet \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#Paren","title":"SynExpr.Paren","content":"SynExpr.Paren \nParen \n F# syntax: (expr)\n\n Parenthesized expressions. Kept in AST to distinguish A.M((x, y))\n from A.M(x, y), among other things.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#Quote","title":"SynExpr.Quote","content":"SynExpr.Quote \nQuote \n F# syntax: \u003C@ expr @\u003E, \u003C@@ expr @@\u003E\n\n Quote(operator, isRaw, quotedSynExpr, isFromQueryExpression, m)","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#Const","title":"SynExpr.Const","content":"SynExpr.Const \nConst \n F# syntax: 1, 1.3, () etc.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#Typed","title":"SynExpr.Typed","content":"SynExpr.Typed \nTyped \n F# syntax: expr: type","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#Tuple","title":"SynExpr.Tuple","content":"SynExpr.Tuple \nTuple \n F# syntax: e1, ..., eN","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#AnonRecd","title":"SynExpr.AnonRecd","content":"SynExpr.AnonRecd \nAnonRecd \n F# syntax: {| id1=e1; ...; idN=eN |}\n F# syntax: struct {| id1=e1; ...; idN=eN |}","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#ArrayOrList","title":"SynExpr.ArrayOrList","content":"SynExpr.ArrayOrList \nArrayOrList \n F# syntax: [ e1; ...; en ], [| e1; ...; en |]","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#Record","title":"SynExpr.Record","content":"SynExpr.Record \nRecord \n F# syntax: { f1=e1; ...; fn=en }\n inherit includes location of separator (for tooling)\n copyOpt contains range of the following WITH part (for tooling)\n every field includes range of separator after the field (for tooling)","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#New","title":"SynExpr.New","content":"SynExpr.New \nNew \n F# syntax: new C(...)\n The flag is true if known to be \u0027family\u0027 (\u0027protected\u0027) scope","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#ObjExpr","title":"SynExpr.ObjExpr","content":"SynExpr.ObjExpr \nObjExpr \n F# syntax: { new ... with ... }","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#While","title":"SynExpr.While","content":"SynExpr.While \nWhile \n F# syntax: \u0027while ... do ...\u0027","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#For","title":"SynExpr.For","content":"SynExpr.For \nFor \n F# syntax: \u0027for i = ... to ... do ...\u0027","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#ForEach","title":"SynExpr.ForEach","content":"SynExpr.ForEach \nForEach \n F# syntax: \u0027for ... in ... do ...\u0027","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#ArrayOrListComputed","title":"SynExpr.ArrayOrListComputed","content":"SynExpr.ArrayOrListComputed \nArrayOrListComputed \n F# syntax: [ expr ], [| expr |]","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IndexRange","title":"SynExpr.IndexRange","content":"SynExpr.IndexRange \nIndexRange \n F# syntax: expr..\n F# syntax: ..expr\n F# syntax: expr..expr\n F# syntax: *\n A two-element range indexer argument a..b, a.., ..b. Also used to represent\n a range in a list, array or sequence expression.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IndexFromEnd","title":"SynExpr.IndexFromEnd","content":"SynExpr.IndexFromEnd \nIndexFromEnd \n F# syntax: ^expr, used for from-end-of-collection indexing and ^T.Operation","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#ComputationExpr","title":"SynExpr.ComputationExpr","content":"SynExpr.ComputationExpr \nComputationExpr \n F# syntax: { expr }","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#Lambda","title":"SynExpr.Lambda","content":"SynExpr.Lambda \nLambda \n First bool indicates if lambda originates from a method. Patterns here are always \u0022simple\u0022\n Second bool indicates if this is a \u0022later\u0022 part of an iterated sequence of lambdas\n parsedData keeps original parsed patterns and expression,\n prior to transforming to \u0022simple\u0022 patterns and iterated lambdas\n\n F# syntax: fun pat -\u003E expr","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#MatchLambda","title":"SynExpr.MatchLambda","content":"SynExpr.MatchLambda \nMatchLambda \n F# syntax: function pat1 -\u003E expr | ... | patN -\u003E exprN","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#Match","title":"SynExpr.Match","content":"SynExpr.Match \nMatch \n F# syntax: match expr with pat1 -\u003E expr | ... | patN -\u003E exprN","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#Do","title":"SynExpr.Do","content":"SynExpr.Do \nDo \n F# syntax: do expr","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#Assert","title":"SynExpr.Assert","content":"SynExpr.Assert \nAssert \n F# syntax: assert expr","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#App","title":"SynExpr.App","content":"SynExpr.App \nApp \n F# syntax: f x\n\n flag: indicates if the application is syntactically atomic, e.g. f.[1] is atomic, but \u0027f x\u0027 is not\n isInfix is true for the first app of an infix operator, e.g. 1\u002B2\n becomes App(App(\u002B, 1), 2), where the inner node is marked isInfix","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#TypeApp","title":"SynExpr.TypeApp","content":"SynExpr.TypeApp \nTypeApp \n F# syntax: expr\u003Ctype1, ..., typeN\u003E","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#TryWith","title":"SynExpr.TryWith","content":"SynExpr.TryWith \nTryWith \n F# syntax: try expr with pat -\u003E expr","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#TryFinally","title":"SynExpr.TryFinally","content":"SynExpr.TryFinally \nTryFinally \n F# syntax: try expr finally expr","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#Lazy","title":"SynExpr.Lazy","content":"SynExpr.Lazy \nLazy \n F# syntax: lazy expr","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#Sequential","title":"SynExpr.Sequential","content":"SynExpr.Sequential \nSequential \n\u003Cpre\u003E F# syntax: expr; expr\n\n  isTrueSeq: false indicates \u0022let v = a in b; v\u0022\u003C/pre\u003E","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IfThenElse","title":"SynExpr.IfThenElse","content":"SynExpr.IfThenElse \nIfThenElse \n F# syntax: if expr then expr\n F# syntax: if expr then expr else expr","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#Typar","title":"SynExpr.Typar","content":"SynExpr.Typar \nTypar \n F# syntax: \u0027T (for \u0027T.ident).","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#Ident","title":"SynExpr.Ident","content":"SynExpr.Ident \nIdent \n F# syntax: ident\n Optimized representation for SynExpr.LongIdent (false, [id], id.idRange)","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#LongIdent","title":"SynExpr.LongIdent","content":"SynExpr.LongIdent \nLongIdent \n F# syntax: ident.ident...ident\n\n isOptional: true if preceded by a \u0027?\u0027 for an optional named parameter\n altNameRefCell: Normally \u0027None\u0027 except for some compiler-generated\n variables in desugaring pattern matching. See SynSimplePat.Id","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#LongIdentSet","title":"SynExpr.LongIdentSet","content":"SynExpr.LongIdentSet \nLongIdentSet \n F# syntax: ident.ident...ident \u003C- expr","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#DotGet","title":"SynExpr.DotGet","content":"SynExpr.DotGet \nDotGet \n F# syntax: expr.ident.ident","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#DotLambda","title":"SynExpr.DotLambda","content":"SynExpr.DotLambda \nDotLambda \n F# syntax: _.ident.ident","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#DotSet","title":"SynExpr.DotSet","content":"SynExpr.DotSet \nDotSet \n F# syntax: expr.ident...ident \u003C- expr","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#Set","title":"SynExpr.Set","content":"SynExpr.Set \nSet \n F# syntax: expr \u003C- expr","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#DotIndexedGet","title":"SynExpr.DotIndexedGet","content":"SynExpr.DotIndexedGet \nDotIndexedGet \n F# syntax: expr.[expr, ..., expr]","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#DotIndexedSet","title":"SynExpr.DotIndexedSet","content":"SynExpr.DotIndexedSet \nDotIndexedSet \n F# syntax: expr.[expr, ..., expr] \u003C- expr","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#NamedIndexedPropertySet","title":"SynExpr.NamedIndexedPropertySet","content":"SynExpr.NamedIndexedPropertySet \nNamedIndexedPropertySet \n F# syntax: Type.Items(e1) \u003C- e2, rarely used named-property-setter notation, e.g. Foo.Bar.Chars(3) \u003C- \u0027a\u0027","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#DotNamedIndexedPropertySet","title":"SynExpr.DotNamedIndexedPropertySet","content":"SynExpr.DotNamedIndexedPropertySet \nDotNamedIndexedPropertySet \n F# syntax: expr.Items (e1) \u003C- e2, rarely used named-property-setter notation, e.g. (stringExpr).Chars(3) \u003C- \u0027a\u0027","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#TypeTest","title":"SynExpr.TypeTest","content":"SynExpr.TypeTest \nTypeTest \n F# syntax: expr :? type","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#Upcast","title":"SynExpr.Upcast","content":"SynExpr.Upcast \nUpcast \n F# syntax: expr :\u003E type","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#Downcast","title":"SynExpr.Downcast","content":"SynExpr.Downcast \nDowncast \n F# syntax: expr :?\u003E type","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#InferredUpcast","title":"SynExpr.InferredUpcast","content":"SynExpr.InferredUpcast \nInferredUpcast \n F# syntax: upcast expr","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#InferredDowncast","title":"SynExpr.InferredDowncast","content":"SynExpr.InferredDowncast \nInferredDowncast \n F# syntax: downcast expr","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#Null","title":"SynExpr.Null","content":"SynExpr.Null \nNull \n F# syntax: null","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#AddressOf","title":"SynExpr.AddressOf","content":"SynExpr.AddressOf \nAddressOf \n F# syntax: \u0026expr, \u0026\u0026expr","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#TraitCall","title":"SynExpr.TraitCall","content":"SynExpr.TraitCall \nTraitCall \n F# syntax: ((type1 or ... or typeN): (member-dig) expr)","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#JoinIn","title":"SynExpr.JoinIn","content":"SynExpr.JoinIn \nJoinIn \n F# syntax: ... in ...\n Computation expressions only, based on JOIN_IN token from lex filter","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#ImplicitZero","title":"SynExpr.ImplicitZero","content":"SynExpr.ImplicitZero \nImplicitZero \n Used in parser error recovery and internally during type checking for translating computation expressions.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#SequentialOrImplicitYield","title":"SynExpr.SequentialOrImplicitYield","content":"SynExpr.SequentialOrImplicitYield \nSequentialOrImplicitYield \n Used internally during type checking for translating computation expressions.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#YieldOrReturn","title":"SynExpr.YieldOrReturn","content":"SynExpr.YieldOrReturn \nYieldOrReturn \n F# syntax: yield expr\n F# syntax: return expr\n Computation expressions only","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#YieldOrReturnFrom","title":"SynExpr.YieldOrReturnFrom","content":"SynExpr.YieldOrReturnFrom \nYieldOrReturnFrom \n F# syntax: yield! expr\n F# syntax: return! expr\n Computation expressions only","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#LetOrUse","title":"SynExpr.LetOrUse","content":"SynExpr.LetOrUse \nLetOrUse \n F# syntax: let pat = expr in expr\n F# syntax: let f pat1 .. patN = expr in expr\n F# syntax: let rec f pat1 .. patN = expr in expr\n F# syntax: use pat = expr in expr\n F# syntax: let! pat = expr in expr\n F# syntax: use! pat = expr in expr\n F# syntax: let! pat = expr and! ... and! ... and! pat = expr in expr","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#MatchBang","title":"SynExpr.MatchBang","content":"SynExpr.MatchBang \nMatchBang \n F# syntax: match! expr with pat1 -\u003E expr | ... | patN -\u003E exprN","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#DoBang","title":"SynExpr.DoBang","content":"SynExpr.DoBang \nDoBang \n F# syntax: do! expr\n Computation expressions only","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#WhileBang","title":"SynExpr.WhileBang","content":"SynExpr.WhileBang \nWhileBang \n F# syntax: \u0027while! ... do ...\u0027","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#LibraryOnlyILAssembly","title":"SynExpr.LibraryOnlyILAssembly","content":"SynExpr.LibraryOnlyILAssembly \nLibraryOnlyILAssembly \n Only used in FSharp.Core","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#LibraryOnlyStaticOptimization","title":"SynExpr.LibraryOnlyStaticOptimization","content":"SynExpr.LibraryOnlyStaticOptimization \nLibraryOnlyStaticOptimization \n Only used in FSharp.Core","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#LibraryOnlyUnionCaseFieldGet","title":"SynExpr.LibraryOnlyUnionCaseFieldGet","content":"SynExpr.LibraryOnlyUnionCaseFieldGet \nLibraryOnlyUnionCaseFieldGet \n Only used in FSharp.Core","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#LibraryOnlyUnionCaseFieldSet","title":"SynExpr.LibraryOnlyUnionCaseFieldSet","content":"SynExpr.LibraryOnlyUnionCaseFieldSet \nLibraryOnlyUnionCaseFieldSet \n Only used in FSharp.Core","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#ArbitraryAfterError","title":"SynExpr.ArbitraryAfterError","content":"SynExpr.ArbitraryAfterError \nArbitraryAfterError \n Inserted for error recovery","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#FromParseError","title":"SynExpr.FromParseError","content":"SynExpr.FromParseError \nFromParseError \n Inserted for error recovery","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#DiscardAfterMissingQualificationAfterDot","title":"SynExpr.DiscardAfterMissingQualificationAfterDot","content":"SynExpr.DiscardAfterMissingQualificationAfterDot \nDiscardAfterMissingQualificationAfterDot \n Inserted for error recovery when there is \u0022expr.\u0022 and missing tokens or error recovery after the dot","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#Fixed","title":"SynExpr.Fixed","content":"SynExpr.Fixed \nFixed \n \u0027use x = fixed expr\u0027","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#InterpolatedString","title":"SynExpr.InterpolatedString","content":"SynExpr.InterpolatedString \nInterpolatedString \n F# syntax: interpolated string, e.g. \u0022abc{x}\u0022 or \u0022abc{x,3}\u0022 or \u0022abc{x:N4}\u0022\n Note the string ranges include the quotes, verbatim markers, dollar sign and braces","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#DebugPoint","title":"SynExpr.DebugPoint","content":"SynExpr.DebugPoint \nDebugPoint \n Debug points arising from computation expressions","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#Dynamic","title":"SynExpr.Dynamic","content":"SynExpr.Dynamic \nDynamic \n F# syntax: f?x","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexprrecordfield.html","title":"SynExprRecordField","content":"SynExprRecordField \n \nSynExprRecordField.SynExprRecordField \nSynExprRecordField","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexprrecordfield.html#SynExprRecordField","title":"SynExprRecordField.SynExprRecordField","content":"SynExprRecordField.SynExprRecordField \nSynExprRecordField \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synfield.html","title":"SynField","content":"SynField \n Represents the syntax tree for a field declaration in a record or class \nSynField.Range \nRange \nSynField.SynField \nSynField","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synfield.html#Range","title":"SynField.Range","content":"SynField.Range \nRange \n Gets the syntax range of this construct","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synfield.html#SynField","title":"SynField.SynField","content":"SynField.SynField \nSynField \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synident.html","title":"SynIdent","content":"SynIdent \n Represents an identifier with potentially additional trivia information. \nSynIdent.Range \nRange \nSynIdent.SynIdent \nSynIdent","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synident.html#Range","title":"SynIdent.Range","content":"SynIdent.Range \nRange \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synident.html#SynIdent","title":"SynIdent.SynIdent","content":"SynIdent.SynIdent \nSynIdent \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syninterfaceimpl.html","title":"SynInterfaceImpl","content":"SynInterfaceImpl \n Represents a set of bindings that implement an interface \nSynInterfaceImpl.SynInterfaceImpl \nSynInterfaceImpl","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syninterfaceimpl.html#SynInterfaceImpl","title":"SynInterfaceImpl.SynInterfaceImpl","content":"SynInterfaceImpl.SynInterfaceImpl \nSynInterfaceImpl \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syninterpolatedstringpart.html","title":"SynInterpolatedStringPart","content":"SynInterpolatedStringPart \n \nSynInterpolatedStringPart.IsString \nIsString \nSynInterpolatedStringPart.IsFillExpr \nIsFillExpr \nSynInterpolatedStringPart.String \nString \nSynInterpolatedStringPart.FillExpr \nFillExpr","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syninterpolatedstringpart.html#IsString","title":"SynInterpolatedStringPart.IsString","content":"SynInterpolatedStringPart.IsString \nIsString \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syninterpolatedstringpart.html#IsFillExpr","title":"SynInterpolatedStringPart.IsFillExpr","content":"SynInterpolatedStringPart.IsFillExpr \nIsFillExpr \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syninterpolatedstringpart.html#String","title":"SynInterpolatedStringPart.String","content":"SynInterpolatedStringPart.String \nString \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syninterpolatedstringpart.html#FillExpr","title":"SynInterpolatedStringPart.FillExpr","content":"SynInterpolatedStringPart.FillExpr \nFillExpr \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synlongident.html","title":"SynLongIdent","content":"SynLongIdent \n Represents a long identifier with possible \u0027.\u0027 at end.\n\n Typically dotRanges.Length = lid.Length-1, but they may be same if (incomplete) code ends in a dot, e.g. \u0022Foo.Bar.\u0022\n The dots mostly matter for parsing, and are typically ignored by the typechecker, but\n if dotRanges.Length = lid.Length, then the parser must have reported an error, so the typechecker is allowed\n more freedom about typechecking these expressions.\n LongIdent can be empty list - it is used to denote that name of some AST element is absent (i.e. empty type name in inherit) \nSynLongIdent.IdentsWithTrivia \nIdentsWithTrivia \nSynLongIdent.ThereIsAnExtraDotAtTheEnd \nThereIsAnExtraDotAtTheEnd \nSynLongIdent.Dots \nDots \nSynLongIdent.Trivia \nTrivia \nSynLongIdent.Range \nRange \nSynLongIdent.LongIdent \nLongIdent \nSynLongIdent.RangeWithoutAnyExtraDot \nRangeWithoutAnyExtraDot \nSynLongIdent.SynLongIdent \nSynLongIdent","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synlongident.html#IdentsWithTrivia","title":"SynLongIdent.IdentsWithTrivia","content":"SynLongIdent.IdentsWithTrivia \nIdentsWithTrivia \n Get the idents with potential trivia attached","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synlongident.html#ThereIsAnExtraDotAtTheEnd","title":"SynLongIdent.ThereIsAnExtraDotAtTheEnd","content":"SynLongIdent.ThereIsAnExtraDotAtTheEnd \nThereIsAnExtraDotAtTheEnd \n Indicates if the construct ends in \u0027.\u0027 due to error recovery","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synlongident.html#Dots","title":"SynLongIdent.Dots","content":"SynLongIdent.Dots \nDots \n Get the dot ranges","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synlongident.html#Trivia","title":"SynLongIdent.Trivia","content":"SynLongIdent.Trivia \nTrivia \n Get the trivia of the idents","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synlongident.html#Range","title":"SynLongIdent.Range","content":"SynLongIdent.Range \nRange \n Gets the syntax range of this construct","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synlongident.html#LongIdent","title":"SynLongIdent.LongIdent","content":"SynLongIdent.LongIdent \nLongIdent \n Get the long ident for this construct","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synlongident.html#RangeWithoutAnyExtraDot","title":"SynLongIdent.RangeWithoutAnyExtraDot","content":"SynLongIdent.RangeWithoutAnyExtraDot \nRangeWithoutAnyExtraDot \n Gets the syntax range for part of this construct","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synlongident.html#SynLongIdent","title":"SynLongIdent.SynLongIdent","content":"SynLongIdent.SynLongIdent \nSynLongIdent \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmatchclause.html","title":"SynMatchClause","content":"SynMatchClause \n Represents a clause in a \u0027match\u0027 expression \nSynMatchClause.IsTrueMatchClause \nIsTrueMatchClause \nSynMatchClause.Range \nRange \nSynMatchClause.RangeOfGuardAndRhs \nRangeOfGuardAndRhs \nSynMatchClause.SynMatchClause \nSynMatchClause","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmatchclause.html#IsTrueMatchClause","title":"SynMatchClause.IsTrueMatchClause","content":"SynMatchClause.IsTrueMatchClause \nIsTrueMatchClause \n Is a pattern used in a true match clause e.g. | pat -\u003E expr","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmatchclause.html#Range","title":"SynMatchClause.Range","content":"SynMatchClause.Range \nRange \n Gets the syntax range of this construct","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmatchclause.html#RangeOfGuardAndRhs","title":"SynMatchClause.RangeOfGuardAndRhs","content":"SynMatchClause.RangeOfGuardAndRhs \nRangeOfGuardAndRhs \n Gets the syntax range of part of this construct","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmatchclause.html#SynMatchClause","title":"SynMatchClause.SynMatchClause","content":"SynMatchClause.SynMatchClause \nSynMatchClause \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmeasure.html","title":"SynMeasure","content":"SynMeasure \n Represents an unchecked syntax tree of F# unit of measure annotations. \nSynMeasure.IsProduct \nIsProduct \nSynMeasure.IsOne \nIsOne \nSynMeasure.IsVar \nIsVar \nSynMeasure.IsDivide \nIsDivide \nSynMeasure.Range \nRange \nSynMeasure.IsPower \nIsPower \nSynMeasure.IsParen \nIsParen \nSynMeasure.IsAnon \nIsAnon \nSynMeasure.IsNamed \nIsNamed \nSynMeasure.IsSeq \nIsSeq \nSynMeasure.Named \nNamed \nSynMeasure.Product \nProduct \nSynMeasure.Seq \nSeq \nSynMeasure.Divide \nDivide \nSynMeasure.Power \nPower \nSynMeasure.One \nOne \nSynMeasure.Anon \nAnon \nSynMeasure.Var \nVar \nSynMeasure.Paren \nParen","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmeasure.html#IsProduct","title":"SynMeasure.IsProduct","content":"SynMeasure.IsProduct \nIsProduct \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmeasure.html#IsOne","title":"SynMeasure.IsOne","content":"SynMeasure.IsOne \nIsOne \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmeasure.html#IsVar","title":"SynMeasure.IsVar","content":"SynMeasure.IsVar \nIsVar \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmeasure.html#IsDivide","title":"SynMeasure.IsDivide","content":"SynMeasure.IsDivide \nIsDivide \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmeasure.html#Range","title":"SynMeasure.Range","content":"SynMeasure.Range \nRange \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmeasure.html#IsPower","title":"SynMeasure.IsPower","content":"SynMeasure.IsPower \nIsPower \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmeasure.html#IsParen","title":"SynMeasure.IsParen","content":"SynMeasure.IsParen \nIsParen \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmeasure.html#IsAnon","title":"SynMeasure.IsAnon","content":"SynMeasure.IsAnon \nIsAnon \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmeasure.html#IsNamed","title":"SynMeasure.IsNamed","content":"SynMeasure.IsNamed \nIsNamed \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmeasure.html#IsSeq","title":"SynMeasure.IsSeq","content":"SynMeasure.IsSeq \nIsSeq \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmeasure.html#Named","title":"SynMeasure.Named","content":"SynMeasure.Named \nNamed \n A named unit of measure","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmeasure.html#Product","title":"SynMeasure.Product","content":"SynMeasure.Product \nProduct \n A product of two units of measure, e.g. \u0027kg * m\u0027","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmeasure.html#Seq","title":"SynMeasure.Seq","content":"SynMeasure.Seq \nSeq \n A sequence of several units of measure, e.g. \u0027kg m m\u0027","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmeasure.html#Divide","title":"SynMeasure.Divide","content":"SynMeasure.Divide \nDivide \n A division of two units of measure, e.g. \u0027kg / m\u0027","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmeasure.html#Power","title":"SynMeasure.Power","content":"SynMeasure.Power \nPower \n A power of a unit of measure, e.g. \u0027kg ^ 2\u0027","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmeasure.html#One","title":"SynMeasure.One","content":"SynMeasure.One \nOne \n The \u00271\u0027 unit of measure","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmeasure.html#Anon","title":"SynMeasure.Anon","content":"SynMeasure.Anon \nAnon \n An anonymous (inferred) unit of measure","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmeasure.html#Var","title":"SynMeasure.Var","content":"SynMeasure.Var \nVar \n A variable unit of measure","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmeasure.html#Paren","title":"SynMeasure.Paren","content":"SynMeasure.Paren \nParen \n A parenthesized measure","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmemberdefn.html","title":"SynMemberDefn","content":"SynMemberDefn \n Represents a definition element within a type definition, e.g. \u0027member ... \u0027 \nSynMemberDefn.IsAutoProperty \nIsAutoProperty \nSynMemberDefn.IsAbstractSlot \nIsAbstractSlot \nSynMemberDefn.IsGetSetMember \nIsGetSetMember \nSynMemberDefn.IsOpen \nIsOpen \nSynMemberDefn.IsLetBindings \nIsLetBindings \nSynMemberDefn.IsNestedType \nIsNestedType \nSynMemberDefn.IsInherit \nIsInherit \nSynMemberDefn.IsValField \nIsValField \nSynMemberDefn.Range \nRange \nSynMemberDefn.IsInterface \nIsInterface \nSynMemberDefn.IsImplicitCtor \nIsImplicitCtor \nSynMemberDefn.IsImplicitInherit \nIsImplicitInherit \nSynMemberDefn.IsMember \nIsMember \nSynMemberDefn.Open \nOpen \nSynMemberDefn.Member \nMember \nSynMemberDefn.GetSetMember \nGetSetMember \nSynMemberDefn.ImplicitCtor \nImplicitCtor \nSynMemberDefn.ImplicitInherit \nImplicitInherit \nSynMemberDefn.LetBindings \nLetBindings \nSynMemberDefn.AbstractSlot \nAbstractSlot \nSynMemberDefn.Interface \nInterface \nSynMemberDefn.Inherit \nInherit \nSynMemberDefn.ValField \nValField \nSynMemberDefn.NestedType \nNestedType \nSynMemberDefn.AutoProperty \nAutoProperty","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmemberdefn.html#IsAutoProperty","title":"SynMemberDefn.IsAutoProperty","content":"SynMemberDefn.IsAutoProperty \nIsAutoProperty \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmemberdefn.html#IsAbstractSlot","title":"SynMemberDefn.IsAbstractSlot","content":"SynMemberDefn.IsAbstractSlot \nIsAbstractSlot \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmemberdefn.html#IsGetSetMember","title":"SynMemberDefn.IsGetSetMember","content":"SynMemberDefn.IsGetSetMember \nIsGetSetMember \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmemberdefn.html#IsOpen","title":"SynMemberDefn.IsOpen","content":"SynMemberDefn.IsOpen \nIsOpen \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmemberdefn.html#IsLetBindings","title":"SynMemberDefn.IsLetBindings","content":"SynMemberDefn.IsLetBindings \nIsLetBindings \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmemberdefn.html#IsNestedType","title":"SynMemberDefn.IsNestedType","content":"SynMemberDefn.IsNestedType \nIsNestedType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmemberdefn.html#IsInherit","title":"SynMemberDefn.IsInherit","content":"SynMemberDefn.IsInherit \nIsInherit \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmemberdefn.html#IsValField","title":"SynMemberDefn.IsValField","content":"SynMemberDefn.IsValField \nIsValField \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmemberdefn.html#Range","title":"SynMemberDefn.Range","content":"SynMemberDefn.Range \nRange \n Gets the syntax range of this construct","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmemberdefn.html#IsInterface","title":"SynMemberDefn.IsInterface","content":"SynMemberDefn.IsInterface \nIsInterface \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmemberdefn.html#IsImplicitCtor","title":"SynMemberDefn.IsImplicitCtor","content":"SynMemberDefn.IsImplicitCtor \nIsImplicitCtor \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmemberdefn.html#IsImplicitInherit","title":"SynMemberDefn.IsImplicitInherit","content":"SynMemberDefn.IsImplicitInherit \nIsImplicitInherit \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmemberdefn.html#IsMember","title":"SynMemberDefn.IsMember","content":"SynMemberDefn.IsMember \nIsMember \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmemberdefn.html#Open","title":"SynMemberDefn.Open","content":"SynMemberDefn.Open \nOpen \n An \u0027open\u0027 definition within a type","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmemberdefn.html#Member","title":"SynMemberDefn.Member","content":"SynMemberDefn.Member \nMember \n A \u0027member\u0027 definition within a type","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmemberdefn.html#GetSetMember","title":"SynMemberDefn.GetSetMember","content":"SynMemberDefn.GetSetMember \nGetSetMember \n A \u0027member\u0027 definition with get/set accessors within a type","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmemberdefn.html#ImplicitCtor","title":"SynMemberDefn.ImplicitCtor","content":"SynMemberDefn.ImplicitCtor \nImplicitCtor \n An implicit constructor definition","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmemberdefn.html#ImplicitInherit","title":"SynMemberDefn.ImplicitInherit","content":"SynMemberDefn.ImplicitInherit \nImplicitInherit \n An implicit inherit definition, \u0027inherit \u003Ctyp\u003E(args...) as base\u0027","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmemberdefn.html#LetBindings","title":"SynMemberDefn.LetBindings","content":"SynMemberDefn.LetBindings \nLetBindings \n A \u0027let\u0027 definition within a class","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmemberdefn.html#AbstractSlot","title":"SynMemberDefn.AbstractSlot","content":"SynMemberDefn.AbstractSlot \nAbstractSlot \n An abstract slot definition within a class or interface","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmemberdefn.html#Interface","title":"SynMemberDefn.Interface","content":"SynMemberDefn.Interface \nInterface \n An interface implementation definition within a class","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmemberdefn.html#Inherit","title":"SynMemberDefn.Inherit","content":"SynMemberDefn.Inherit \nInherit \n An \u0027inherit\u0027 definition within a class","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmemberdefn.html#ValField","title":"SynMemberDefn.ValField","content":"SynMemberDefn.ValField \nValField \n A \u0027val\u0027 definition within a class","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmemberdefn.html#NestedType","title":"SynMemberDefn.NestedType","content":"SynMemberDefn.NestedType \nNestedType \n A nested type definition, a feature that is not implemented","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmemberdefn.html#AutoProperty","title":"SynMemberDefn.AutoProperty","content":"SynMemberDefn.AutoProperty \nAutoProperty \n An auto-property definition, F# syntax: \u0027member val X = expr\u0027","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmemberflags.html","title":"SynMemberFlags","content":"SynMemberFlags \n Represents the flags for a \u0027member\u0027 declaration \nSynMemberFlags.IsInstance \nIsInstance \nSynMemberFlags.IsDispatchSlot \nIsDispatchSlot \nSynMemberFlags.IsOverrideOrExplicitImpl \nIsOverrideOrExplicitImpl \nSynMemberFlags.IsFinal \nIsFinal \nSynMemberFlags.GetterOrSetterIsCompilerGenerated \nGetterOrSetterIsCompilerGenerated \nSynMemberFlags.MemberKind \nMemberKind","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmemberflags.html#IsInstance","title":"SynMemberFlags.IsInstance","content":"SynMemberFlags.IsInstance \nIsInstance \n The member is an instance member (non-static)","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmemberflags.html#IsDispatchSlot","title":"SynMemberFlags.IsDispatchSlot","content":"SynMemberFlags.IsDispatchSlot \nIsDispatchSlot \n The member is a dispatch slot","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmemberflags.html#IsOverrideOrExplicitImpl","title":"SynMemberFlags.IsOverrideOrExplicitImpl","content":"SynMemberFlags.IsOverrideOrExplicitImpl \nIsOverrideOrExplicitImpl \n The member is an \u0027override\u0027 or explicit interface implementation","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmemberflags.html#IsFinal","title":"SynMemberFlags.IsFinal","content":"SynMemberFlags.IsFinal \nIsFinal \n The member is \u0027final\u0027","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmemberflags.html#GetterOrSetterIsCompilerGenerated","title":"SynMemberFlags.GetterOrSetterIsCompilerGenerated","content":"SynMemberFlags.GetterOrSetterIsCompilerGenerated \nGetterOrSetterIsCompilerGenerated \n The member was generated by the compiler","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmemberflags.html#MemberKind","title":"SynMemberFlags.MemberKind","content":"SynMemberFlags.MemberKind \nMemberKind \n The kind of the member","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmemberkind.html","title":"SynMemberKind","content":"SynMemberKind \n Note the member kind is actually computed partially by a syntax tree transformation in tc.fs \nSynMemberKind.IsPropertyGet \nIsPropertyGet \nSynMemberKind.IsPropertyGetSet \nIsPropertyGetSet \nSynMemberKind.IsPropertySet \nIsPropertySet \nSynMemberKind.IsClassConstructor \nIsClassConstructor \nSynMemberKind.IsConstructor \nIsConstructor \nSynMemberKind.IsMember \nIsMember \nSynMemberKind.ClassConstructor \nClassConstructor \nSynMemberKind.Constructor \nConstructor \nSynMemberKind.Member \nMember \nSynMemberKind.PropertyGet \nPropertyGet \nSynMemberKind.PropertySet \nPropertySet \nSynMemberKind.PropertyGetSet \nPropertyGetSet","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmemberkind.html#IsPropertyGet","title":"SynMemberKind.IsPropertyGet","content":"SynMemberKind.IsPropertyGet \nIsPropertyGet \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmemberkind.html#IsPropertyGetSet","title":"SynMemberKind.IsPropertyGetSet","content":"SynMemberKind.IsPropertyGetSet \nIsPropertyGetSet \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmemberkind.html#IsPropertySet","title":"SynMemberKind.IsPropertySet","content":"SynMemberKind.IsPropertySet \nIsPropertySet \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmemberkind.html#IsClassConstructor","title":"SynMemberKind.IsClassConstructor","content":"SynMemberKind.IsClassConstructor \nIsClassConstructor \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmemberkind.html#IsConstructor","title":"SynMemberKind.IsConstructor","content":"SynMemberKind.IsConstructor \nIsConstructor \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmemberkind.html#IsMember","title":"SynMemberKind.IsMember","content":"SynMemberKind.IsMember \nIsMember \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmemberkind.html#ClassConstructor","title":"SynMemberKind.ClassConstructor","content":"SynMemberKind.ClassConstructor \nClassConstructor \n The member is a class initializer","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmemberkind.html#Constructor","title":"SynMemberKind.Constructor","content":"SynMemberKind.Constructor \nConstructor \n The member is a object model constructor","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmemberkind.html#Member","title":"SynMemberKind.Member","content":"SynMemberKind.Member \nMember \n The member kind is not yet determined","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmemberkind.html#PropertyGet","title":"SynMemberKind.PropertyGet","content":"SynMemberKind.PropertyGet \nPropertyGet \n The member kind is property getter","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmemberkind.html#PropertySet","title":"SynMemberKind.PropertySet","content":"SynMemberKind.PropertySet \nPropertySet \n The member kind is property setter","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmemberkind.html#PropertyGetSet","title":"SynMemberKind.PropertyGetSet","content":"SynMemberKind.PropertyGetSet \nPropertyGetSet \n An artificial member kind used prior to the point where a\n get/set property is split into two distinct members.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmembersig.html","title":"SynMemberSig","content":"SynMemberSig \n Represents the syntax tree for a member signature (used in signature files, abstract member declarations\n and member constraints) \nSynMemberSig.IsNestedType \nIsNestedType \nSynMemberSig.IsInherit \nIsInherit \nSynMemberSig.IsValField \nIsValField \nSynMemberSig.Range \nRange \nSynMemberSig.IsInterface \nIsInterface \nSynMemberSig.IsMember \nIsMember \nSynMemberSig.Member \nMember \nSynMemberSig.Interface \nInterface \nSynMemberSig.Inherit \nInherit \nSynMemberSig.ValField \nValField \nSynMemberSig.NestedType \nNestedType","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmembersig.html#IsNestedType","title":"SynMemberSig.IsNestedType","content":"SynMemberSig.IsNestedType \nIsNestedType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmembersig.html#IsInherit","title":"SynMemberSig.IsInherit","content":"SynMemberSig.IsInherit \nIsInherit \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmembersig.html#IsValField","title":"SynMemberSig.IsValField","content":"SynMemberSig.IsValField \nIsValField \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmembersig.html#Range","title":"SynMemberSig.Range","content":"SynMemberSig.Range \nRange \n Gets the syntax range of this construct","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmembersig.html#IsInterface","title":"SynMemberSig.IsInterface","content":"SynMemberSig.IsInterface \nIsInterface \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmembersig.html#IsMember","title":"SynMemberSig.IsMember","content":"SynMemberSig.IsMember \nIsMember \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmembersig.html#Member","title":"SynMemberSig.Member","content":"SynMemberSig.Member \nMember \n A member definition in a type in a signature file","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmembersig.html#Interface","title":"SynMemberSig.Interface","content":"SynMemberSig.Interface \nInterface \n An interface definition in a type in a signature file","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmembersig.html#Inherit","title":"SynMemberSig.Inherit","content":"SynMemberSig.Inherit \nInherit \n An \u0027inherit\u0027 definition in a type in a signature file","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmembersig.html#ValField","title":"SynMemberSig.ValField","content":"SynMemberSig.ValField \nValField \n A \u0027val\u0027 definition in a type in a signature file","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmembersig.html#NestedType","title":"SynMemberSig.NestedType","content":"SynMemberSig.NestedType \nNestedType \n A nested type definition in a signature file (an unimplemented feature)","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmoduledecl.html","title":"SynModuleDecl","content":"SynModuleDecl \n Represents a definition within a module \nSynModuleDecl.IsNestedModule \nIsNestedModule \nSynModuleDecl.IsAttributes \nIsAttributes \nSynModuleDecl.IsException \nIsException \nSynModuleDecl.IsLet \nIsLet \nSynModuleDecl.IsOpen \nIsOpen \nSynModuleDecl.Range \nRange \nSynModuleDecl.IsExpr \nIsExpr \nSynModuleDecl.IsNamespaceFragment \nIsNamespaceFragment \nSynModuleDecl.IsTypes \nIsTypes \nSynModuleDecl.IsHashDirective \nIsHashDirective \nSynModuleDecl.IsModuleAbbrev \nIsModuleAbbrev \nSynModuleDecl.ModuleAbbrev \nModuleAbbrev \nSynModuleDecl.NestedModule \nNestedModule \nSynModuleDecl.Let \nLet \nSynModuleDecl.Expr \nExpr \nSynModuleDecl.Types \nTypes \nSynModuleDecl.Exception \nException \nSynModuleDecl.Open \nOpen \nSynModuleDecl.Attributes \nAttributes \nSynModuleDecl.HashDirective \nHashDirective \nSynModuleDecl.NamespaceFragment \nNamespaceFragment","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmoduledecl.html#IsNestedModule","title":"SynModuleDecl.IsNestedModule","content":"SynModuleDecl.IsNestedModule \nIsNestedModule \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmoduledecl.html#IsAttributes","title":"SynModuleDecl.IsAttributes","content":"SynModuleDecl.IsAttributes \nIsAttributes \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmoduledecl.html#IsException","title":"SynModuleDecl.IsException","content":"SynModuleDecl.IsException \nIsException \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmoduledecl.html#IsLet","title":"SynModuleDecl.IsLet","content":"SynModuleDecl.IsLet \nIsLet \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmoduledecl.html#IsOpen","title":"SynModuleDecl.IsOpen","content":"SynModuleDecl.IsOpen \nIsOpen \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmoduledecl.html#Range","title":"SynModuleDecl.Range","content":"SynModuleDecl.Range \nRange \n Gets the syntax range of this construct","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmoduledecl.html#IsExpr","title":"SynModuleDecl.IsExpr","content":"SynModuleDecl.IsExpr \nIsExpr \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmoduledecl.html#IsNamespaceFragment","title":"SynModuleDecl.IsNamespaceFragment","content":"SynModuleDecl.IsNamespaceFragment \nIsNamespaceFragment \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmoduledecl.html#IsTypes","title":"SynModuleDecl.IsTypes","content":"SynModuleDecl.IsTypes \nIsTypes \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmoduledecl.html#IsHashDirective","title":"SynModuleDecl.IsHashDirective","content":"SynModuleDecl.IsHashDirective \nIsHashDirective \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmoduledecl.html#IsModuleAbbrev","title":"SynModuleDecl.IsModuleAbbrev","content":"SynModuleDecl.IsModuleAbbrev \nIsModuleAbbrev \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmoduledecl.html#ModuleAbbrev","title":"SynModuleDecl.ModuleAbbrev","content":"SynModuleDecl.ModuleAbbrev \nModuleAbbrev \n A module abbreviation definition \u0027module X = A.B.C\u0027","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmoduledecl.html#NestedModule","title":"SynModuleDecl.NestedModule","content":"SynModuleDecl.NestedModule \nNestedModule \n A nested module definition \u0027module X = ...\u0027","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmoduledecl.html#Let","title":"SynModuleDecl.Let","content":"SynModuleDecl.Let \nLet \n A \u0027let\u0027 definition within a module","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmoduledecl.html#Expr","title":"SynModuleDecl.Expr","content":"SynModuleDecl.Expr \nExpr \n An \u0027expr\u0027 within a module.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmoduledecl.html#Types","title":"SynModuleDecl.Types","content":"SynModuleDecl.Types \nTypes \n\n A type definition group (\u0027\u003Ccode\u003Etype T1 ... and T2 ...\u003C/code\u003E\u0027) or a single \u0027\u003Ccode\u003Etype\u003C/code\u003E\u0027 definition within a module.\n  \n\n Consecutive \u0027\u003Ccode\u003Etype\u003C/code\u003E\u0027 keywords (e.g. \u003Ccode\u003Etype T1 ... type T2 ...\u003C/code\u003E) are represented individually, with\n separate \u003Ccode\u003ETypes\u003C/code\u003E syntax tree nodes for each.\n Only the \u0027\u003Ccode\u003Eand\u003C/code\u003E\u0027 keyword causes multiple types to be aggregated into a single \u003Ccode\u003ETypes\u003C/code\u003E node.\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmoduledecl.html#Exception","title":"SynModuleDecl.Exception","content":"SynModuleDecl.Exception \nException \n An \u0027exception\u0027 definition within a module","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmoduledecl.html#Open","title":"SynModuleDecl.Open","content":"SynModuleDecl.Open \nOpen \n An \u0027open\u0027 definition within a module","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmoduledecl.html#Attributes","title":"SynModuleDecl.Attributes","content":"SynModuleDecl.Attributes \nAttributes \n An attribute definition within a module, for assembly and .NET module attributes","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmoduledecl.html#HashDirective","title":"SynModuleDecl.HashDirective","content":"SynModuleDecl.HashDirective \nHashDirective \n A hash directive within a module","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmoduledecl.html#NamespaceFragment","title":"SynModuleDecl.NamespaceFragment","content":"SynModuleDecl.NamespaceFragment \nNamespaceFragment \n A namespace fragment within a module","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmoduleornamespace.html","title":"SynModuleOrNamespace","content":"SynModuleOrNamespace \n Represents the definition of a module or namespace \nSynModuleOrNamespace.Range \nRange \nSynModuleOrNamespace.SynModuleOrNamespace \nSynModuleOrNamespace","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmoduleornamespace.html#Range","title":"SynModuleOrNamespace.Range","content":"SynModuleOrNamespace.Range \nRange \n Gets the syntax range of this construct","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmoduleornamespace.html#SynModuleOrNamespace","title":"SynModuleOrNamespace.SynModuleOrNamespace","content":"SynModuleOrNamespace.SynModuleOrNamespace \nSynModuleOrNamespace \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmoduleornamespacekind.html","title":"SynModuleOrNamespaceKind","content":"SynModuleOrNamespaceKind \n Represents the kind of a module or namespace definition \nSynModuleOrNamespaceKind.IsGlobalNamespace \nIsGlobalNamespace \nSynModuleOrNamespaceKind.IsNamedModule \nIsNamedModule \nSynModuleOrNamespaceKind.IsAnonModule \nIsAnonModule \nSynModuleOrNamespaceKind.IsModule \nIsModule \nSynModuleOrNamespaceKind.IsDeclaredNamespace \nIsDeclaredNamespace \nSynModuleOrNamespaceKind.NamedModule \nNamedModule \nSynModuleOrNamespaceKind.AnonModule \nAnonModule \nSynModuleOrNamespaceKind.DeclaredNamespace \nDeclaredNamespace \nSynModuleOrNamespaceKind.GlobalNamespace \nGlobalNamespace","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmoduleornamespacekind.html#IsGlobalNamespace","title":"SynModuleOrNamespaceKind.IsGlobalNamespace","content":"SynModuleOrNamespaceKind.IsGlobalNamespace \nIsGlobalNamespace \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmoduleornamespacekind.html#IsNamedModule","title":"SynModuleOrNamespaceKind.IsNamedModule","content":"SynModuleOrNamespaceKind.IsNamedModule \nIsNamedModule \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmoduleornamespacekind.html#IsAnonModule","title":"SynModuleOrNamespaceKind.IsAnonModule","content":"SynModuleOrNamespaceKind.IsAnonModule \nIsAnonModule \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmoduleornamespacekind.html#IsModule","title":"SynModuleOrNamespaceKind.IsModule","content":"SynModuleOrNamespaceKind.IsModule \nIsModule \n Indicates if this is a module definition","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmoduleornamespacekind.html#IsDeclaredNamespace","title":"SynModuleOrNamespaceKind.IsDeclaredNamespace","content":"SynModuleOrNamespaceKind.IsDeclaredNamespace \nIsDeclaredNamespace \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmoduleornamespacekind.html#NamedModule","title":"SynModuleOrNamespaceKind.NamedModule","content":"SynModuleOrNamespaceKind.NamedModule \nNamedModule \n A module is explicitly named \u0027module N\u0027","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmoduleornamespacekind.html#AnonModule","title":"SynModuleOrNamespaceKind.AnonModule","content":"SynModuleOrNamespaceKind.AnonModule \nAnonModule \n A module is anonymously named, e.g. a script","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmoduleornamespacekind.html#DeclaredNamespace","title":"SynModuleOrNamespaceKind.DeclaredNamespace","content":"SynModuleOrNamespaceKind.DeclaredNamespace \nDeclaredNamespace \n A namespace is explicitly declared","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmoduleornamespacekind.html#GlobalNamespace","title":"SynModuleOrNamespaceKind.GlobalNamespace","content":"SynModuleOrNamespaceKind.GlobalNamespace \nGlobalNamespace \n A namespace is declared \u0027global\u0027","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmoduleornamespacesig.html","title":"SynModuleOrNamespaceSig","content":"SynModuleOrNamespaceSig \n Represents the definition of a module or namespace in a signature file \nSynModuleOrNamespaceSig.Range \nRange \nSynModuleOrNamespaceSig.SynModuleOrNamespaceSig \nSynModuleOrNamespaceSig","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmoduleornamespacesig.html#Range","title":"SynModuleOrNamespaceSig.Range","content":"SynModuleOrNamespaceSig.Range \nRange \n Gets the syntax range of this construct","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmoduleornamespacesig.html#SynModuleOrNamespaceSig","title":"SynModuleOrNamespaceSig.SynModuleOrNamespaceSig","content":"SynModuleOrNamespaceSig.SynModuleOrNamespaceSig \nSynModuleOrNamespaceSig \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmodulesigdecl.html","title":"SynModuleSigDecl","content":"SynModuleSigDecl \n Represents a definition within a module or namespace in a signature file \nSynModuleSigDecl.IsNestedModule \nIsNestedModule \nSynModuleSigDecl.IsException \nIsException \nSynModuleSigDecl.IsOpen \nIsOpen \nSynModuleSigDecl.IsVal \nIsVal \nSynModuleSigDecl.Range \nRange \nSynModuleSigDecl.IsNamespaceFragment \nIsNamespaceFragment \nSynModuleSigDecl.IsTypes \nIsTypes \nSynModuleSigDecl.IsHashDirective \nIsHashDirective \nSynModuleSigDecl.IsModuleAbbrev \nIsModuleAbbrev \nSynModuleSigDecl.ModuleAbbrev \nModuleAbbrev \nSynModuleSigDecl.NestedModule \nNestedModule \nSynModuleSigDecl.Val \nVal \nSynModuleSigDecl.Types \nTypes \nSynModuleSigDecl.Exception \nException \nSynModuleSigDecl.Open \nOpen \nSynModuleSigDecl.HashDirective \nHashDirective \nSynModuleSigDecl.NamespaceFragment \nNamespaceFragment","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmodulesigdecl.html#IsNestedModule","title":"SynModuleSigDecl.IsNestedModule","content":"SynModuleSigDecl.IsNestedModule \nIsNestedModule \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmodulesigdecl.html#IsException","title":"SynModuleSigDecl.IsException","content":"SynModuleSigDecl.IsException \nIsException \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmodulesigdecl.html#IsOpen","title":"SynModuleSigDecl.IsOpen","content":"SynModuleSigDecl.IsOpen \nIsOpen \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmodulesigdecl.html#IsVal","title":"SynModuleSigDecl.IsVal","content":"SynModuleSigDecl.IsVal \nIsVal \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmodulesigdecl.html#Range","title":"SynModuleSigDecl.Range","content":"SynModuleSigDecl.Range \nRange \n Gets the syntax range of this construct","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmodulesigdecl.html#IsNamespaceFragment","title":"SynModuleSigDecl.IsNamespaceFragment","content":"SynModuleSigDecl.IsNamespaceFragment \nIsNamespaceFragment \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmodulesigdecl.html#IsTypes","title":"SynModuleSigDecl.IsTypes","content":"SynModuleSigDecl.IsTypes \nIsTypes \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmodulesigdecl.html#IsHashDirective","title":"SynModuleSigDecl.IsHashDirective","content":"SynModuleSigDecl.IsHashDirective \nIsHashDirective \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmodulesigdecl.html#IsModuleAbbrev","title":"SynModuleSigDecl.IsModuleAbbrev","content":"SynModuleSigDecl.IsModuleAbbrev \nIsModuleAbbrev \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmodulesigdecl.html#ModuleAbbrev","title":"SynModuleSigDecl.ModuleAbbrev","content":"SynModuleSigDecl.ModuleAbbrev \nModuleAbbrev \n A module abbreviation definition within a module or namespace in a signature file","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmodulesigdecl.html#NestedModule","title":"SynModuleSigDecl.NestedModule","content":"SynModuleSigDecl.NestedModule \nNestedModule \n A nested module definition within a module or namespace in a signature file","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmodulesigdecl.html#Val","title":"SynModuleSigDecl.Val","content":"SynModuleSigDecl.Val \nVal \n A \u0027val\u0027 definition within a module or namespace in a signature file, corresponding\n to a \u0027let\u0027 definition in the implementation","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmodulesigdecl.html#Types","title":"SynModuleSigDecl.Types","content":"SynModuleSigDecl.Types \nTypes \n A set of one or more type definitions within a module or namespace in a signature file","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmodulesigdecl.html#Exception","title":"SynModuleSigDecl.Exception","content":"SynModuleSigDecl.Exception \nException \n An exception definition within a module or namespace in a signature file","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmodulesigdecl.html#Open","title":"SynModuleSigDecl.Open","content":"SynModuleSigDecl.Open \nOpen \n An \u0027open\u0027 definition within a module or namespace in a signature file","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmodulesigdecl.html#HashDirective","title":"SynModuleSigDecl.HashDirective","content":"SynModuleSigDecl.HashDirective \nHashDirective \n A hash directive within a module or namespace in a signature file","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmodulesigdecl.html#NamespaceFragment","title":"SynModuleSigDecl.NamespaceFragment","content":"SynModuleSigDecl.NamespaceFragment \nNamespaceFragment \n A namespace fragment within a namespace in a signature file","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synopendecltarget.html","title":"SynOpenDeclTarget","content":"SynOpenDeclTarget \n Represents the target of the open declaration \nSynOpenDeclTarget.IsType \nIsType \nSynOpenDeclTarget.IsModuleOrNamespace \nIsModuleOrNamespace \nSynOpenDeclTarget.Range \nRange \nSynOpenDeclTarget.ModuleOrNamespace \nModuleOrNamespace \nSynOpenDeclTarget.Type \nType","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synopendecltarget.html#IsType","title":"SynOpenDeclTarget.IsType","content":"SynOpenDeclTarget.IsType \nIsType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synopendecltarget.html#IsModuleOrNamespace","title":"SynOpenDeclTarget.IsModuleOrNamespace","content":"SynOpenDeclTarget.IsModuleOrNamespace \nIsModuleOrNamespace \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synopendecltarget.html#Range","title":"SynOpenDeclTarget.Range","content":"SynOpenDeclTarget.Range \nRange \n Gets the syntax range of this construct","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synopendecltarget.html#ModuleOrNamespace","title":"SynOpenDeclTarget.ModuleOrNamespace","content":"SynOpenDeclTarget.ModuleOrNamespace \nModuleOrNamespace \n A \u0027open\u0027 declaration","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synopendecltarget.html#Type","title":"SynOpenDeclTarget.Type","content":"SynOpenDeclTarget.Type \nType \n A \u0027open type\u0027 declaration","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synpat.html","title":"SynPat","content":"SynPat \n Represents a syntax tree for an F# pattern \nSynPat.IsAttrib \nIsAttrib \nSynPat.IsTyped \nIsTyped \nSynPat.IsConst \nIsConst \nSynPat.IsWild \nIsWild \nSynPat.IsAnds \nIsAnds \nSynPat.IsNull \nIsNull \nSynPat.IsArrayOrList \nIsArrayOrList \nSynPat.IsLongIdent \nIsLongIdent \nSynPat.IsListCons \nIsListCons \nSynPat.IsIsInst \nIsIsInst \nSynPat.IsInstanceMember \nIsInstanceMember \nSynPat.Range \nRange \nSynPat.IsRecord \nIsRecord \nSynPat.IsQuoteExpr \nIsQuoteExpr \nSynPat.IsParen \nIsParen \nSynPat.IsFromParseError \nIsFromParseError \nSynPat.IsAs \nIsAs \nSynPat.IsTuple \nIsTuple \nSynPat.IsNamed \nIsNamed \nSynPat.IsOr \nIsOr \nSynPat.IsOptionalVal \nIsOptionalVal \nSynPat.Const \nConst \nSynPat.Wild \nWild \nSynPat.Named \nNamed \nSynPat.Typed \nTyped \nSynPat.Attrib \nAttrib \nSynPat.Or \nOr \nSynPat.ListCons \nListCons \nSynPat.Ands \nAnds \nSynPat.As \nAs \nSynPat.LongIdent \nLongIdent \nSynPat.Tuple \nTuple \nSynPat.Paren \nParen \nSynPat.ArrayOrList \nArrayOrList \nSynPat.Record \nRecord \nSynPat.Null \nNull \nSynPat.OptionalVal \nOptionalVal \nSynPat.IsInst \nIsInst \nSynPat.QuoteExpr \nQuoteExpr \nSynPat.InstanceMember \nInstanceMember \nSynPat.FromParseError \nFromParseError","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synpat.html#IsAttrib","title":"SynPat.IsAttrib","content":"SynPat.IsAttrib \nIsAttrib \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synpat.html#IsTyped","title":"SynPat.IsTyped","content":"SynPat.IsTyped \nIsTyped \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synpat.html#IsConst","title":"SynPat.IsConst","content":"SynPat.IsConst \nIsConst \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synpat.html#IsWild","title":"SynPat.IsWild","content":"SynPat.IsWild \nIsWild \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synpat.html#IsAnds","title":"SynPat.IsAnds","content":"SynPat.IsAnds \nIsAnds \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synpat.html#IsNull","title":"SynPat.IsNull","content":"SynPat.IsNull \nIsNull \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synpat.html#IsArrayOrList","title":"SynPat.IsArrayOrList","content":"SynPat.IsArrayOrList \nIsArrayOrList \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synpat.html#IsLongIdent","title":"SynPat.IsLongIdent","content":"SynPat.IsLongIdent \nIsLongIdent \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synpat.html#IsListCons","title":"SynPat.IsListCons","content":"SynPat.IsListCons \nIsListCons \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synpat.html#IsIsInst","title":"SynPat.IsIsInst","content":"SynPat.IsIsInst \nIsIsInst \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synpat.html#IsInstanceMember","title":"SynPat.IsInstanceMember","content":"SynPat.IsInstanceMember \nIsInstanceMember \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synpat.html#Range","title":"SynPat.Range","content":"SynPat.Range \nRange \n Gets the syntax range of this construct","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synpat.html#IsRecord","title":"SynPat.IsRecord","content":"SynPat.IsRecord \nIsRecord \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synpat.html#IsQuoteExpr","title":"SynPat.IsQuoteExpr","content":"SynPat.IsQuoteExpr \nIsQuoteExpr \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synpat.html#IsParen","title":"SynPat.IsParen","content":"SynPat.IsParen \nIsParen \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synpat.html#IsFromParseError","title":"SynPat.IsFromParseError","content":"SynPat.IsFromParseError \nIsFromParseError \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synpat.html#IsAs","title":"SynPat.IsAs","content":"SynPat.IsAs \nIsAs \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synpat.html#IsTuple","title":"SynPat.IsTuple","content":"SynPat.IsTuple \nIsTuple \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synpat.html#IsNamed","title":"SynPat.IsNamed","content":"SynPat.IsNamed \nIsNamed \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synpat.html#IsOr","title":"SynPat.IsOr","content":"SynPat.IsOr \nIsOr \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synpat.html#IsOptionalVal","title":"SynPat.IsOptionalVal","content":"SynPat.IsOptionalVal \nIsOptionalVal \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synpat.html#Const","title":"SynPat.Const","content":"SynPat.Const \nConst \n A constant in a pattern","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synpat.html#Wild","title":"SynPat.Wild","content":"SynPat.Wild \nWild \n A wildcard \u0027_\u0027 in a pattern","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synpat.html#Named","title":"SynPat.Named","content":"SynPat.Named \nNamed \n A name pattern \u0027ident\u0027","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synpat.html#Typed","title":"SynPat.Typed","content":"SynPat.Typed \nTyped \n A typed pattern \u0027pat : type\u0027","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synpat.html#Attrib","title":"SynPat.Attrib","content":"SynPat.Attrib \nAttrib \n An attributed pattern, used in argument or declaration position","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synpat.html#Or","title":"SynPat.Or","content":"SynPat.Or \nOr \n A disjunctive pattern \u0027pat1 | pat2\u0027","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synpat.html#ListCons","title":"SynPat.ListCons","content":"SynPat.ListCons \nListCons \n A conjunctive pattern \u0027pat1 :: pat2\u0027","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synpat.html#Ands","title":"SynPat.Ands","content":"SynPat.Ands \nAnds \n A conjunctive pattern \u0027pat1 \u0026 pat2\u0027","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synpat.html#As","title":"SynPat.As","content":"SynPat.As \nAs \n A conjunctive pattern \u0027pat1 as pat2\u0027","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synpat.html#LongIdent","title":"SynPat.LongIdent","content":"SynPat.LongIdent \nLongIdent \n A long identifier pattern possibly with argument patterns","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synpat.html#Tuple","title":"SynPat.Tuple","content":"SynPat.Tuple \nTuple \n A tuple pattern","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synpat.html#Paren","title":"SynPat.Paren","content":"SynPat.Paren \nParen \n A parenthesized pattern","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synpat.html#ArrayOrList","title":"SynPat.ArrayOrList","content":"SynPat.ArrayOrList \nArrayOrList \n An array or a list as a pattern","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synpat.html#Record","title":"SynPat.Record","content":"SynPat.Record \nRecord \n A record pattern","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synpat.html#Null","title":"SynPat.Null","content":"SynPat.Null \nNull \n The \u0027null\u0027 pattern","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synpat.html#OptionalVal","title":"SynPat.OptionalVal","content":"SynPat.OptionalVal \nOptionalVal \n \u0027?id\u0027 -- for optional argument names","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synpat.html#IsInst","title":"SynPat.IsInst","content":"SynPat.IsInst \nIsInst \n A type test pattern \u0027:? type \u0027","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synpat.html#QuoteExpr","title":"SynPat.QuoteExpr","content":"SynPat.QuoteExpr \nQuoteExpr \n \u0026lt;@ expr @\u0026gt;, used for active pattern arguments","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synpat.html#InstanceMember","title":"SynPat.InstanceMember","content":"SynPat.InstanceMember \nInstanceMember \n Used internally in the type checker","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synpat.html#FromParseError","title":"SynPat.FromParseError","content":"SynPat.FromParseError \nFromParseError \n A pattern arising from a parse error","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synrationalconst.html","title":"SynRationalConst","content":"SynRationalConst \n Represents an unchecked syntax tree of F# unit of measure exponents. \nSynRationalConst.IsRational \nIsRational \nSynRationalConst.IsInteger \nIsInteger \nSynRationalConst.IsParen \nIsParen \nSynRationalConst.IsNegate \nIsNegate \nSynRationalConst.Integer \nInteger \nSynRationalConst.Rational \nRational \nSynRationalConst.Negate \nNegate \nSynRationalConst.Paren \nParen","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synrationalconst.html#IsRational","title":"SynRationalConst.IsRational","content":"SynRationalConst.IsRational \nIsRational \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synrationalconst.html#IsInteger","title":"SynRationalConst.IsInteger","content":"SynRationalConst.IsInteger \nIsInteger \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synrationalconst.html#IsParen","title":"SynRationalConst.IsParen","content":"SynRationalConst.IsParen \nIsParen \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synrationalconst.html#IsNegate","title":"SynRationalConst.IsNegate","content":"SynRationalConst.IsNegate \nIsNegate \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synrationalconst.html#Integer","title":"SynRationalConst.Integer","content":"SynRationalConst.Integer \nInteger \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synrationalconst.html#Rational","title":"SynRationalConst.Rational","content":"SynRationalConst.Rational \nRational \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synrationalconst.html#Negate","title":"SynRationalConst.Negate","content":"SynRationalConst.Negate \nNegate \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synrationalconst.html#Paren","title":"SynRationalConst.Paren","content":"SynRationalConst.Paren \nParen \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synreturninfo.html","title":"SynReturnInfo","content":"SynReturnInfo \n Represents the syntactic elements associated with the \u0022return\u0022 of a function or method. \nSynReturnInfo.Range \nRange \nSynReturnInfo.SynReturnInfo \nSynReturnInfo","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synreturninfo.html#Range","title":"SynReturnInfo.Range","content":"SynReturnInfo.Range \nRange \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synreturninfo.html#SynReturnInfo","title":"SynReturnInfo.SynReturnInfo","content":"SynReturnInfo.SynReturnInfo \nSynReturnInfo \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synsimplepat.html","title":"SynSimplePat","content":"SynSimplePat \n Represents a syntax tree for simple F# patterns \nSynSimplePat.IsAttrib \nIsAttrib \nSynSimplePat.IsId \nIsId \nSynSimplePat.IsTyped \nIsTyped \nSynSimplePat.Range \nRange \nSynSimplePat.Id \nId \nSynSimplePat.Typed \nTyped \nSynSimplePat.Attrib \nAttrib","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synsimplepat.html#IsAttrib","title":"SynSimplePat.IsAttrib","content":"SynSimplePat.IsAttrib \nIsAttrib \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synsimplepat.html#IsId","title":"SynSimplePat.IsId","content":"SynSimplePat.IsId \nIsId \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synsimplepat.html#IsTyped","title":"SynSimplePat.IsTyped","content":"SynSimplePat.IsTyped \nIsTyped \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synsimplepat.html#Range","title":"SynSimplePat.Range","content":"SynSimplePat.Range \nRange \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synsimplepat.html#Id","title":"SynSimplePat.Id","content":"SynSimplePat.Id \nId \n\u003Cpre\u003E Indicates a simple pattern variable.\n\n altNameRefCell:\n   Normally \u0027None\u0027 except for some compiler-generated variables in desugaring pattern matching.\n   Pattern processing sets this reference for hidden variable introduced\n   by desugaring pattern matching in arguments. The info indicates an\n   alternative (compiler generated) identifier to be used because the\n   name of the identifier is already bound.\n\n isCompilerGenerated: true if a compiler generated name\n isThisVal: true if \u0027this\u0027 variable in member\n isOptional: true if a \u0027?\u0027 is in front of the name\u003C/pre\u003E","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synsimplepat.html#Typed","title":"SynSimplePat.Typed","content":"SynSimplePat.Typed \nTyped \n A type annotated simple pattern","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synsimplepat.html#Attrib","title":"SynSimplePat.Attrib","content":"SynSimplePat.Attrib \nAttrib \n An attributed simple pattern","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synsimplepatalternativeidinfo.html","title":"SynSimplePatAlternativeIdInfo","content":"SynSimplePatAlternativeIdInfo \n Represents the alternative identifier for a simple pattern \nSynSimplePatAlternativeIdInfo.IsUndecided \nIsUndecided \nSynSimplePatAlternativeIdInfo.IsDecided \nIsDecided \nSynSimplePatAlternativeIdInfo.Undecided \nUndecided \nSynSimplePatAlternativeIdInfo.Decided \nDecided","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synsimplepatalternativeidinfo.html#IsUndecided","title":"SynSimplePatAlternativeIdInfo.IsUndecided","content":"SynSimplePatAlternativeIdInfo.IsUndecided \nIsUndecided \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synsimplepatalternativeidinfo.html#IsDecided","title":"SynSimplePatAlternativeIdInfo.IsDecided","content":"SynSimplePatAlternativeIdInfo.IsDecided \nIsDecided \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synsimplepatalternativeidinfo.html#Undecided","title":"SynSimplePatAlternativeIdInfo.Undecided","content":"SynSimplePatAlternativeIdInfo.Undecided \nUndecided \n We have not decided to use an alternative name in the pattern and related expression","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synsimplepatalternativeidinfo.html#Decided","title":"SynSimplePatAlternativeIdInfo.Decided","content":"SynSimplePatAlternativeIdInfo.Decided \nDecided \n We have decided to use an alternative name in the pattern and related expression","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synsimplepats.html","title":"SynSimplePats","content":"SynSimplePats \n Represents a simple set of variable bindings a, (a, b) or (a: Type, b: Type) at a lambda,\n function definition or other binding point, after the elimination of pattern matching\n from the construct, e.g. after changing a \u0022function pat1 -\u003E rule1 | ...\u0022 to a\n \u0022fun v -\u003E match v with ...\u0022 \nSynSimplePats.Range \nRange \nSynSimplePats.SimplePats \nSimplePats","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synsimplepats.html#Range","title":"SynSimplePats.Range","content":"SynSimplePats.Range \nRange \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synsimplepats.html#SimplePats","title":"SynSimplePats.SimplePats","content":"SynSimplePats.SimplePats \nSimplePats \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synstaticoptimizationconstraint.html","title":"SynStaticOptimizationConstraint","content":"SynStaticOptimizationConstraint \n Represents a syntax tree for a static optimization constraint in the F# core library \nSynStaticOptimizationConstraint.IsWhenTyparIsStruct \nIsWhenTyparIsStruct \nSynStaticOptimizationConstraint.IsWhenTyparTyconEqualsTycon \nIsWhenTyparTyconEqualsTycon \nSynStaticOptimizationConstraint.WhenTyparTyconEqualsTycon \nWhenTyparTyconEqualsTycon \nSynStaticOptimizationConstraint.WhenTyparIsStruct \nWhenTyparIsStruct","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synstaticoptimizationconstraint.html#IsWhenTyparIsStruct","title":"SynStaticOptimizationConstraint.IsWhenTyparIsStruct","content":"SynStaticOptimizationConstraint.IsWhenTyparIsStruct \nIsWhenTyparIsStruct \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synstaticoptimizationconstraint.html#IsWhenTyparTyconEqualsTycon","title":"SynStaticOptimizationConstraint.IsWhenTyparTyconEqualsTycon","content":"SynStaticOptimizationConstraint.IsWhenTyparTyconEqualsTycon \nIsWhenTyparTyconEqualsTycon \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synstaticoptimizationconstraint.html#WhenTyparTyconEqualsTycon","title":"SynStaticOptimizationConstraint.WhenTyparTyconEqualsTycon","content":"SynStaticOptimizationConstraint.WhenTyparTyconEqualsTycon \nWhenTyparTyconEqualsTycon \n A static optimization conditional that activates for a particular type instantiation","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synstaticoptimizationconstraint.html#WhenTyparIsStruct","title":"SynStaticOptimizationConstraint.WhenTyparIsStruct","content":"SynStaticOptimizationConstraint.WhenTyparIsStruct \nWhenTyparIsStruct \n A static optimization conditional that activates for a struct","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synstringkind.html","title":"SynStringKind","content":"SynStringKind \n Indicate if the string had a special format \nSynStringKind.IsVerbatim \nIsVerbatim \nSynStringKind.IsTripleQuote \nIsTripleQuote \nSynStringKind.IsRegular \nIsRegular \nSynStringKind.Regular \nRegular \nSynStringKind.Verbatim \nVerbatim \nSynStringKind.TripleQuote \nTripleQuote","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synstringkind.html#IsVerbatim","title":"SynStringKind.IsVerbatim","content":"SynStringKind.IsVerbatim \nIsVerbatim \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synstringkind.html#IsTripleQuote","title":"SynStringKind.IsTripleQuote","content":"SynStringKind.IsTripleQuote \nIsTripleQuote \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synstringkind.html#IsRegular","title":"SynStringKind.IsRegular","content":"SynStringKind.IsRegular \nIsRegular \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synstringkind.html#Regular","title":"SynStringKind.Regular","content":"SynStringKind.Regular \nRegular \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synstringkind.html#Verbatim","title":"SynStringKind.Verbatim","content":"SynStringKind.Verbatim \nVerbatim \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synstringkind.html#TripleQuote","title":"SynStringKind.TripleQuote","content":"SynStringKind.TripleQuote \nTripleQuote \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntupletypesegment.html","title":"SynTupleTypeSegment","content":"SynTupleTypeSegment \n \nSynTupleTypeSegment.IsType \nIsType \nSynTupleTypeSegment.IsStar \nIsStar \nSynTupleTypeSegment.Range \nRange \nSynTupleTypeSegment.IsSlash \nIsSlash \nSynTupleTypeSegment.Type \nType \nSynTupleTypeSegment.Star \nStar \nSynTupleTypeSegment.Slash \nSlash","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntupletypesegment.html#IsType","title":"SynTupleTypeSegment.IsType","content":"SynTupleTypeSegment.IsType \nIsType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntupletypesegment.html#IsStar","title":"SynTupleTypeSegment.IsStar","content":"SynTupleTypeSegment.IsStar \nIsStar \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntupletypesegment.html#Range","title":"SynTupleTypeSegment.Range","content":"SynTupleTypeSegment.Range \nRange \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntupletypesegment.html#IsSlash","title":"SynTupleTypeSegment.IsSlash","content":"SynTupleTypeSegment.IsSlash \nIsSlash \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntupletypesegment.html#Type","title":"SynTupleTypeSegment.Type","content":"SynTupleTypeSegment.Type \nType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntupletypesegment.html#Star","title":"SynTupleTypeSegment.Star","content":"SynTupleTypeSegment.Star \nStar \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntupletypesegment.html#Slash","title":"SynTupleTypeSegment.Slash","content":"SynTupleTypeSegment.Slash \nSlash \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypar.html","title":"SynTypar","content":"SynTypar \n Represents a syntactic type parameter \nSynTypar.Range \nRange \nSynTypar.SynTypar \nSynTypar","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypar.html#Range","title":"SynTypar.Range","content":"SynTypar.Range \nRange \n Gets the syntax range of this construct","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypar.html#SynTypar","title":"SynTypar.SynTypar","content":"SynTypar.SynTypar \nSynTypar \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypardecl.html","title":"SynTyparDecl","content":"SynTyparDecl \n Represents the explicit declaration of a type parameter \nSynTyparDecl.SynTyparDecl \nSynTyparDecl","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypardecl.html#SynTyparDecl","title":"SynTyparDecl.SynTyparDecl","content":"SynTyparDecl.SynTyparDecl \nSynTyparDecl \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypardecls.html","title":"SynTyparDecls","content":"SynTyparDecls \n List of type parameter declarations with optional type constraints,\n enclosed in \u0060\u003C ... \u003E\u0060 (postfix) or \u0060( ... )\u0060 (prefix), or a single prefix parameter. \nSynTyparDecls.IsPrefixList \nIsPrefixList \nSynTyparDecls.IsSinglePrefix \nIsSinglePrefix \nSynTyparDecls.Range \nRange \nSynTyparDecls.IsPostfixList \nIsPostfixList \nSynTyparDecls.Constraints \nConstraints \nSynTyparDecls.TyparDecls \nTyparDecls \nSynTyparDecls.PostfixList \nPostfixList \nSynTyparDecls.PrefixList \nPrefixList \nSynTyparDecls.SinglePrefix \nSinglePrefix","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypardecls.html#IsPrefixList","title":"SynTyparDecls.IsPrefixList","content":"SynTyparDecls.IsPrefixList \nIsPrefixList \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypardecls.html#IsSinglePrefix","title":"SynTyparDecls.IsSinglePrefix","content":"SynTyparDecls.IsSinglePrefix \nIsSinglePrefix \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypardecls.html#Range","title":"SynTyparDecls.Range","content":"SynTyparDecls.Range \nRange \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypardecls.html#IsPostfixList","title":"SynTyparDecls.IsPostfixList","content":"SynTyparDecls.IsPostfixList \nIsPostfixList \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypardecls.html#Constraints","title":"SynTyparDecls.Constraints","content":"SynTyparDecls.Constraints \nConstraints \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypardecls.html#TyparDecls","title":"SynTyparDecls.TyparDecls","content":"SynTyparDecls.TyparDecls \nTyparDecls \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypardecls.html#PostfixList","title":"SynTyparDecls.PostfixList","content":"SynTyparDecls.PostfixList \nPostfixList \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypardecls.html#PrefixList","title":"SynTyparDecls.PrefixList","content":"SynTyparDecls.PrefixList \nPrefixList \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypardecls.html#SinglePrefix","title":"SynTyparDecls.SinglePrefix","content":"SynTyparDecls.SinglePrefix \nSinglePrefix \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntype.html","title":"SynType","content":"SynType \n Represents a syntax tree for F# types \nSynType.IsWithGlobalConstraints \nIsWithGlobalConstraints \nSynType.IsApp \nIsApp \nSynType.IsHashConstraint \nIsHashConstraint \nSynType.IsLongIdentApp \nIsLongIdentApp \nSynType.IsStaticConstantExpr \nIsStaticConstantExpr \nSynType.IsSignatureParameter \nIsSignatureParameter \nSynType.IsLongIdent \nIsLongIdent \nSynType.IsVar \nIsVar \nSynType.IsStaticConstantNamed \nIsStaticConstantNamed \nSynType.Range \nRange \nSynType.IsAnonRecd \nIsAnonRecd \nSynType.IsWithNull \nIsWithNull \nSynType.IsIntersection \nIsIntersection \nSynType.IsParen \nIsParen \nSynType.IsStaticConstantNull \nIsStaticConstantNull \nSynType.IsFromParseError \nIsFromParseError \nSynType.IsStaticConstant \nIsStaticConstant \nSynType.IsAnon \nIsAnon \nSynType.IsTuple \nIsTuple \nSynType.IsArray \nIsArray \nSynType.IsFun \nIsFun \nSynType.IsOr \nIsOr \nSynType.IsMeasurePower \nIsMeasurePower \nSynType.LongIdent \nLongIdent \nSynType.App \nApp \nSynType.LongIdentApp \nLongIdentApp \nSynType.Tuple \nTuple \nSynType.AnonRecd \nAnonRecd \nSynType.Array \nArray \nSynType.Fun \nFun \nSynType.Var \nVar \nSynType.Anon \nAnon \nSynType.WithGlobalConstraints \nWithGlobalConstraints \nSynType.HashConstraint \nHashConstraint \nSynType.MeasurePower \nMeasurePower \nSynType.StaticConstant \nStaticConstant \nSynType.StaticConstantNull \nStaticConstantNull \nSynType.StaticConstantExpr \nStaticConstantExpr \nSynType.StaticConstantNamed \nStaticConstantNamed \nSynType.WithNull \nWithNull \nSynType.Paren \nParen \nSynType.SignatureParameter \nSignatureParameter \nSynType.Or \nOr \nSynType.FromParseError \nFromParseError \nSynType.Intersection \nIntersection","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntype.html#IsWithGlobalConstraints","title":"SynType.IsWithGlobalConstraints","content":"SynType.IsWithGlobalConstraints \nIsWithGlobalConstraints \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntype.html#IsApp","title":"SynType.IsApp","content":"SynType.IsApp \nIsApp \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntype.html#IsHashConstraint","title":"SynType.IsHashConstraint","content":"SynType.IsHashConstraint \nIsHashConstraint \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntype.html#IsLongIdentApp","title":"SynType.IsLongIdentApp","content":"SynType.IsLongIdentApp \nIsLongIdentApp \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntype.html#IsStaticConstantExpr","title":"SynType.IsStaticConstantExpr","content":"SynType.IsStaticConstantExpr \nIsStaticConstantExpr \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntype.html#IsSignatureParameter","title":"SynType.IsSignatureParameter","content":"SynType.IsSignatureParameter \nIsSignatureParameter \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntype.html#IsLongIdent","title":"SynType.IsLongIdent","content":"SynType.IsLongIdent \nIsLongIdent \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntype.html#IsVar","title":"SynType.IsVar","content":"SynType.IsVar \nIsVar \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntype.html#IsStaticConstantNamed","title":"SynType.IsStaticConstantNamed","content":"SynType.IsStaticConstantNamed \nIsStaticConstantNamed \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntype.html#Range","title":"SynType.Range","content":"SynType.Range \nRange \n Gets the syntax range of this construct","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntype.html#IsAnonRecd","title":"SynType.IsAnonRecd","content":"SynType.IsAnonRecd \nIsAnonRecd \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntype.html#IsWithNull","title":"SynType.IsWithNull","content":"SynType.IsWithNull \nIsWithNull \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntype.html#IsIntersection","title":"SynType.IsIntersection","content":"SynType.IsIntersection \nIsIntersection \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntype.html#IsParen","title":"SynType.IsParen","content":"SynType.IsParen \nIsParen \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntype.html#IsStaticConstantNull","title":"SynType.IsStaticConstantNull","content":"SynType.IsStaticConstantNull \nIsStaticConstantNull \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntype.html#IsFromParseError","title":"SynType.IsFromParseError","content":"SynType.IsFromParseError \nIsFromParseError \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntype.html#IsStaticConstant","title":"SynType.IsStaticConstant","content":"SynType.IsStaticConstant \nIsStaticConstant \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntype.html#IsAnon","title":"SynType.IsAnon","content":"SynType.IsAnon \nIsAnon \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntype.html#IsTuple","title":"SynType.IsTuple","content":"SynType.IsTuple \nIsTuple \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntype.html#IsArray","title":"SynType.IsArray","content":"SynType.IsArray \nIsArray \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntype.html#IsFun","title":"SynType.IsFun","content":"SynType.IsFun \nIsFun \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntype.html#IsOr","title":"SynType.IsOr","content":"SynType.IsOr \nIsOr \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntype.html#IsMeasurePower","title":"SynType.IsMeasurePower","content":"SynType.IsMeasurePower \nIsMeasurePower \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntype.html#LongIdent","title":"SynType.LongIdent","content":"SynType.LongIdent \nLongIdent \n F# syntax: A.B.C","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntype.html#App","title":"SynType.App","content":"SynType.App \nApp \n\u003Cpre\u003E F# syntax: type\u003Ctype, ..., type\u003E or type type or (type, ..., type) type\n   isPostfix: indicates a postfix type application e.g. \u0022int list\u0022 or \u0022(int, string) dict\u0022\u003C/pre\u003E","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntype.html#LongIdentApp","title":"SynType.LongIdentApp","content":"SynType.LongIdentApp \nLongIdentApp \n F# syntax: type.A.B.C\u003Ctype, ..., type\u003E","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntype.html#Tuple","title":"SynType.Tuple","content":"SynType.Tuple \nTuple \n F# syntax: type * ... * type\n F# syntax: struct (type * ... * type)","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntype.html#AnonRecd","title":"SynType.AnonRecd","content":"SynType.AnonRecd \nAnonRecd \n F# syntax: {| id: type; ...; id: type |}\n F# syntax: struct {| id: type; ...; id: type |}","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntype.html#Array","title":"SynType.Array","content":"SynType.Array \nArray \n F# syntax: type[]","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntype.html#Fun","title":"SynType.Fun","content":"SynType.Fun \nFun \n F# syntax: type -\u003E type","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntype.html#Var","title":"SynType.Var","content":"SynType.Var \nVar \n F# syntax: \u0027Var","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntype.html#Anon","title":"SynType.Anon","content":"SynType.Anon \nAnon \n F# syntax: _","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntype.html#WithGlobalConstraints","title":"SynType.WithGlobalConstraints","content":"SynType.WithGlobalConstraints \nWithGlobalConstraints \n F# syntax: typ with constraints","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntype.html#HashConstraint","title":"SynType.HashConstraint","content":"SynType.HashConstraint \nHashConstraint \n F# syntax: #type","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntype.html#MeasurePower","title":"SynType.MeasurePower","content":"SynType.MeasurePower \nMeasurePower \n F# syntax: for units of measure e.g. m^3, kg^1/2","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntype.html#StaticConstant","title":"SynType.StaticConstant","content":"SynType.StaticConstant \nStaticConstant \n F# syntax: 1, \u0022abc\u0022 etc, used in parameters to type providers\n For the dimensionless units i.e. 1, and static parameters to provided types","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntype.html#StaticConstantNull","title":"SynType.StaticConstantNull","content":"SynType.StaticConstantNull \nStaticConstantNull \n F# syntax: null, used in parameters to type providers","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntype.html#StaticConstantExpr","title":"SynType.StaticConstantExpr","content":"SynType.StaticConstantExpr \nStaticConstantExpr \n F# syntax: const expr, used in static parameters to type providers","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntype.html#StaticConstantNamed","title":"SynType.StaticConstantNamed","content":"SynType.StaticConstantNamed \nStaticConstantNamed \n F# syntax: ident=1 etc., used in static parameters to type providers","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntype.html#WithNull","title":"SynType.WithNull","content":"SynType.WithNull \nWithNull \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntype.html#Paren","title":"SynType.Paren","content":"SynType.Paren \nParen \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntype.html#SignatureParameter","title":"SynType.SignatureParameter","content":"SynType.SignatureParameter \nSignatureParameter \n F# syntax: a: b, used in signatures and type annotations","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntype.html#Or","title":"SynType.Or","content":"SynType.Or \nOr \n F# syntax: ^a or ^b, used in trait calls","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntype.html#FromParseError","title":"SynType.FromParseError","content":"SynType.FromParseError \nFromParseError \n A type arising from a parse error","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntype.html#Intersection","title":"SynType.Intersection","content":"SynType.Intersection \nIntersection \n F# syntax: x: #I1 \u0026 #I2\n F# syntax: x: \u0027t \u0026 #I1 \u0026 #I2\n Shorthand for x: \u0027t when \u0027t :\u003E I1 and \u0027t :\u003E I2","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypeconstraint.html","title":"SynTypeConstraint","content":"SynTypeConstraint \n The unchecked abstract syntax tree of F# type constraints \nSynTypeConstraint.IsWhereTyparIsEnum \nIsWhereTyparIsEnum \nSynTypeConstraint.IsWhereTyparIsValueType \nIsWhereTyparIsValueType \nSynTypeConstraint.IsWhereTyparNotSupportsNull \nIsWhereTyparNotSupportsNull \nSynTypeConstraint.IsWhereTyparIsUnmanaged \nIsWhereTyparIsUnmanaged \nSynTypeConstraint.IsWhereTyparSupportsNull \nIsWhereTyparSupportsNull \nSynTypeConstraint.IsWhereSelfConstrained \nIsWhereSelfConstrained \nSynTypeConstraint.IsWhereTyparIsDelegate \nIsWhereTyparIsDelegate \nSynTypeConstraint.IsWhereTyparDefaultsToType \nIsWhereTyparDefaultsToType \nSynTypeConstraint.IsWhereTyparIsEquatable \nIsWhereTyparIsEquatable \nSynTypeConstraint.Range \nRange \nSynTypeConstraint.IsWhereTyparIsComparable \nIsWhereTyparIsComparable \nSynTypeConstraint.IsWhereTyparSubtypeOfType \nIsWhereTyparSubtypeOfType \nSynTypeConstraint.IsWhereTyparIsReferenceType \nIsWhereTyparIsReferenceType \nSynTypeConstraint.IsWhereTyparSupportsMember \nIsWhereTyparSupportsMember \nSynTypeConstraint.WhereTyparIsValueType \nWhereTyparIsValueType \nSynTypeConstraint.WhereTyparIsReferenceType \nWhereTyparIsReferenceType \nSynTypeConstraint.WhereTyparIsUnmanaged \nWhereTyparIsUnmanaged \nSynTypeConstraint.WhereTyparSupportsNull \nWhereTyparSupportsNull \nSynTypeConstraint.WhereTyparNotSupportsNull \nWhereTyparNotSupportsNull \nSynTypeConstraint.WhereTyparIsComparable \nWhereTyparIsComparable \nSynTypeConstraint.WhereTyparIsEquatable \nWhereTyparIsEquatable \nSynTypeConstraint.WhereTyparDefaultsToType \nWhereTyparDefaultsToType \nSynTypeConstraint.WhereTyparSubtypeOfType \nWhereTyparSubtypeOfType \nSynTypeConstraint.WhereTyparSupportsMember \nWhereTyparSupportsMember \nSynTypeConstraint.WhereTyparIsEnum \nWhereTyparIsEnum \nSynTypeConstraint.WhereTyparIsDelegate \nWhereTyparIsDelegate \nSynTypeConstraint.WhereSelfConstrained \nWhereSelfConstrained","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypeconstraint.html#IsWhereTyparIsEnum","title":"SynTypeConstraint.IsWhereTyparIsEnum","content":"SynTypeConstraint.IsWhereTyparIsEnum \nIsWhereTyparIsEnum \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypeconstraint.html#IsWhereTyparIsValueType","title":"SynTypeConstraint.IsWhereTyparIsValueType","content":"SynTypeConstraint.IsWhereTyparIsValueType \nIsWhereTyparIsValueType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypeconstraint.html#IsWhereTyparNotSupportsNull","title":"SynTypeConstraint.IsWhereTyparNotSupportsNull","content":"SynTypeConstraint.IsWhereTyparNotSupportsNull \nIsWhereTyparNotSupportsNull \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypeconstraint.html#IsWhereTyparIsUnmanaged","title":"SynTypeConstraint.IsWhereTyparIsUnmanaged","content":"SynTypeConstraint.IsWhereTyparIsUnmanaged \nIsWhereTyparIsUnmanaged \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypeconstraint.html#IsWhereTyparSupportsNull","title":"SynTypeConstraint.IsWhereTyparSupportsNull","content":"SynTypeConstraint.IsWhereTyparSupportsNull \nIsWhereTyparSupportsNull \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypeconstraint.html#IsWhereSelfConstrained","title":"SynTypeConstraint.IsWhereSelfConstrained","content":"SynTypeConstraint.IsWhereSelfConstrained \nIsWhereSelfConstrained \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypeconstraint.html#IsWhereTyparIsDelegate","title":"SynTypeConstraint.IsWhereTyparIsDelegate","content":"SynTypeConstraint.IsWhereTyparIsDelegate \nIsWhereTyparIsDelegate \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypeconstraint.html#IsWhereTyparDefaultsToType","title":"SynTypeConstraint.IsWhereTyparDefaultsToType","content":"SynTypeConstraint.IsWhereTyparDefaultsToType \nIsWhereTyparDefaultsToType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypeconstraint.html#IsWhereTyparIsEquatable","title":"SynTypeConstraint.IsWhereTyparIsEquatable","content":"SynTypeConstraint.IsWhereTyparIsEquatable \nIsWhereTyparIsEquatable \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypeconstraint.html#Range","title":"SynTypeConstraint.Range","content":"SynTypeConstraint.Range \nRange \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypeconstraint.html#IsWhereTyparIsComparable","title":"SynTypeConstraint.IsWhereTyparIsComparable","content":"SynTypeConstraint.IsWhereTyparIsComparable \nIsWhereTyparIsComparable \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypeconstraint.html#IsWhereTyparSubtypeOfType","title":"SynTypeConstraint.IsWhereTyparSubtypeOfType","content":"SynTypeConstraint.IsWhereTyparSubtypeOfType \nIsWhereTyparSubtypeOfType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypeconstraint.html#IsWhereTyparIsReferenceType","title":"SynTypeConstraint.IsWhereTyparIsReferenceType","content":"SynTypeConstraint.IsWhereTyparIsReferenceType \nIsWhereTyparIsReferenceType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypeconstraint.html#IsWhereTyparSupportsMember","title":"SynTypeConstraint.IsWhereTyparSupportsMember","content":"SynTypeConstraint.IsWhereTyparSupportsMember \nIsWhereTyparSupportsMember \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypeconstraint.html#WhereTyparIsValueType","title":"SynTypeConstraint.WhereTyparIsValueType","content":"SynTypeConstraint.WhereTyparIsValueType \nWhereTyparIsValueType \n F# syntax: is \u0027typar: struct","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypeconstraint.html#WhereTyparIsReferenceType","title":"SynTypeConstraint.WhereTyparIsReferenceType","content":"SynTypeConstraint.WhereTyparIsReferenceType \nWhereTyparIsReferenceType \n F# syntax: is \u0027typar: not struct","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypeconstraint.html#WhereTyparIsUnmanaged","title":"SynTypeConstraint.WhereTyparIsUnmanaged","content":"SynTypeConstraint.WhereTyparIsUnmanaged \nWhereTyparIsUnmanaged \n F# syntax is \u0027typar: unmanaged","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypeconstraint.html#WhereTyparSupportsNull","title":"SynTypeConstraint.WhereTyparSupportsNull","content":"SynTypeConstraint.WhereTyparSupportsNull \nWhereTyparSupportsNull \n F# syntax is \u0027typar: null","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypeconstraint.html#WhereTyparNotSupportsNull","title":"SynTypeConstraint.WhereTyparNotSupportsNull","content":"SynTypeConstraint.WhereTyparNotSupportsNull \nWhereTyparNotSupportsNull \n F# syntax is \u0027typar : null","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypeconstraint.html#WhereTyparIsComparable","title":"SynTypeConstraint.WhereTyparIsComparable","content":"SynTypeConstraint.WhereTyparIsComparable \nWhereTyparIsComparable \n F# syntax is \u0027typar: comparison","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypeconstraint.html#WhereTyparIsEquatable","title":"SynTypeConstraint.WhereTyparIsEquatable","content":"SynTypeConstraint.WhereTyparIsEquatable \nWhereTyparIsEquatable \n F# syntax is \u0027typar: equality","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypeconstraint.html#WhereTyparDefaultsToType","title":"SynTypeConstraint.WhereTyparDefaultsToType","content":"SynTypeConstraint.WhereTyparDefaultsToType \nWhereTyparDefaultsToType \n F# syntax is default ^T: type","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypeconstraint.html#WhereTyparSubtypeOfType","title":"SynTypeConstraint.WhereTyparSubtypeOfType","content":"SynTypeConstraint.WhereTyparSubtypeOfType \nWhereTyparSubtypeOfType \n F# syntax is \u0027typar :\u003E type","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypeconstraint.html#WhereTyparSupportsMember","title":"SynTypeConstraint.WhereTyparSupportsMember","content":"SynTypeConstraint.WhereTyparSupportsMember \nWhereTyparSupportsMember \n F# syntax is ^T: (static member MemberName: ^T * int -\u003E ^T)","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypeconstraint.html#WhereTyparIsEnum","title":"SynTypeConstraint.WhereTyparIsEnum","content":"SynTypeConstraint.WhereTyparIsEnum \nWhereTyparIsEnum \n F# syntax is \u0027typar: enum\u003C\u0027UnderlyingType\u003E","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypeconstraint.html#WhereTyparIsDelegate","title":"SynTypeConstraint.WhereTyparIsDelegate","content":"SynTypeConstraint.WhereTyparIsDelegate \nWhereTyparIsDelegate \n F# syntax is \u0027typar: delegate\u003C\u0027Args, unit\u003E","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypeconstraint.html#WhereSelfConstrained","title":"SynTypeConstraint.WhereSelfConstrained","content":"SynTypeConstraint.WhereSelfConstrained \nWhereSelfConstrained \n F# syntax is SomeThing\u003C\u0027T\u003E","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefn.html","title":"SynTypeDefn","content":"SynTypeDefn \n Represents a type or exception declaration \u0027type C = ... \u0027 plus\n any additional member definitions for the type \nSynTypeDefn.Range \nRange \nSynTypeDefn.SynTypeDefn \nSynTypeDefn","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefn.html#Range","title":"SynTypeDefn.Range","content":"SynTypeDefn.Range \nRange \n Gets the syntax range of this construct","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefn.html#SynTypeDefn","title":"SynTypeDefn.SynTypeDefn","content":"SynTypeDefn.SynTypeDefn \nSynTypeDefn \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnkind.html","title":"SynTypeDefnKind","content":"SynTypeDefnKind \n Represents the kind of a type definition whether explicit or inferred \nSynTypeDefnKind.IsClass \nIsClass \nSynTypeDefnKind.IsAbbrev \nIsAbbrev \nSynTypeDefnKind.IsOpaque \nIsOpaque \nSynTypeDefnKind.IsUnspecified \nIsUnspecified \nSynTypeDefnKind.IsIL \nIsIL \nSynTypeDefnKind.IsInterface \nIsInterface \nSynTypeDefnKind.IsRecord \nIsRecord \nSynTypeDefnKind.IsDelegate \nIsDelegate \nSynTypeDefnKind.IsStruct \nIsStruct \nSynTypeDefnKind.IsAugmentation \nIsAugmentation \nSynTypeDefnKind.IsUnion \nIsUnion \nSynTypeDefnKind.Unspecified \nUnspecified \nSynTypeDefnKind.Class \nClass \nSynTypeDefnKind.Interface \nInterface \nSynTypeDefnKind.Struct \nStruct \nSynTypeDefnKind.Record \nRecord \nSynTypeDefnKind.Union \nUnion \nSynTypeDefnKind.Abbrev \nAbbrev \nSynTypeDefnKind.Opaque \nOpaque \nSynTypeDefnKind.Augmentation \nAugmentation \nSynTypeDefnKind.IL \nIL \nSynTypeDefnKind.Delegate \nDelegate","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnkind.html#IsClass","title":"SynTypeDefnKind.IsClass","content":"SynTypeDefnKind.IsClass \nIsClass \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnkind.html#IsAbbrev","title":"SynTypeDefnKind.IsAbbrev","content":"SynTypeDefnKind.IsAbbrev \nIsAbbrev \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnkind.html#IsOpaque","title":"SynTypeDefnKind.IsOpaque","content":"SynTypeDefnKind.IsOpaque \nIsOpaque \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnkind.html#IsUnspecified","title":"SynTypeDefnKind.IsUnspecified","content":"SynTypeDefnKind.IsUnspecified \nIsUnspecified \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnkind.html#IsIL","title":"SynTypeDefnKind.IsIL","content":"SynTypeDefnKind.IsIL \nIsIL \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnkind.html#IsInterface","title":"SynTypeDefnKind.IsInterface","content":"SynTypeDefnKind.IsInterface \nIsInterface \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnkind.html#IsRecord","title":"SynTypeDefnKind.IsRecord","content":"SynTypeDefnKind.IsRecord \nIsRecord \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnkind.html#IsDelegate","title":"SynTypeDefnKind.IsDelegate","content":"SynTypeDefnKind.IsDelegate \nIsDelegate \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnkind.html#IsStruct","title":"SynTypeDefnKind.IsStruct","content":"SynTypeDefnKind.IsStruct \nIsStruct \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnkind.html#IsAugmentation","title":"SynTypeDefnKind.IsAugmentation","content":"SynTypeDefnKind.IsAugmentation \nIsAugmentation \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnkind.html#IsUnion","title":"SynTypeDefnKind.IsUnion","content":"SynTypeDefnKind.IsUnion \nIsUnion \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnkind.html#Unspecified","title":"SynTypeDefnKind.Unspecified","content":"SynTypeDefnKind.Unspecified \nUnspecified \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnkind.html#Class","title":"SynTypeDefnKind.Class","content":"SynTypeDefnKind.Class \nClass \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnkind.html#Interface","title":"SynTypeDefnKind.Interface","content":"SynTypeDefnKind.Interface \nInterface \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnkind.html#Struct","title":"SynTypeDefnKind.Struct","content":"SynTypeDefnKind.Struct \nStruct \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnkind.html#Record","title":"SynTypeDefnKind.Record","content":"SynTypeDefnKind.Record \nRecord \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnkind.html#Union","title":"SynTypeDefnKind.Union","content":"SynTypeDefnKind.Union \nUnion \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnkind.html#Abbrev","title":"SynTypeDefnKind.Abbrev","content":"SynTypeDefnKind.Abbrev \nAbbrev \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnkind.html#Opaque","title":"SynTypeDefnKind.Opaque","content":"SynTypeDefnKind.Opaque \nOpaque \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnkind.html#Augmentation","title":"SynTypeDefnKind.Augmentation","content":"SynTypeDefnKind.Augmentation \nAugmentation \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnkind.html#IL","title":"SynTypeDefnKind.IL","content":"SynTypeDefnKind.IL \nIL \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnkind.html#Delegate","title":"SynTypeDefnKind.Delegate","content":"SynTypeDefnKind.Delegate \nDelegate \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnrepr.html","title":"SynTypeDefnRepr","content":"SynTypeDefnRepr \n Represents the right hand side of a type or exception declaration \u0027type C = ... \u0027 plus\n any additional member definitions for the type \nSynTypeDefnRepr.IsException \nIsException \nSynTypeDefnRepr.Range \nRange \nSynTypeDefnRepr.IsObjectModel \nIsObjectModel \nSynTypeDefnRepr.IsSimple \nIsSimple \nSynTypeDefnRepr.ObjectModel \nObjectModel \nSynTypeDefnRepr.Simple \nSimple \nSynTypeDefnRepr.Exception \nException","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnrepr.html#IsException","title":"SynTypeDefnRepr.IsException","content":"SynTypeDefnRepr.IsException \nIsException \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnrepr.html#Range","title":"SynTypeDefnRepr.Range","content":"SynTypeDefnRepr.Range \nRange \n Gets the syntax range of this construct","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnrepr.html#IsObjectModel","title":"SynTypeDefnRepr.IsObjectModel","content":"SynTypeDefnRepr.IsObjectModel \nIsObjectModel \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnrepr.html#IsSimple","title":"SynTypeDefnRepr.IsSimple","content":"SynTypeDefnRepr.IsSimple \nIsSimple \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnrepr.html#ObjectModel","title":"SynTypeDefnRepr.ObjectModel","content":"SynTypeDefnRepr.ObjectModel \nObjectModel \n An object model type definition (class or interface)","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnrepr.html#Simple","title":"SynTypeDefnRepr.Simple","content":"SynTypeDefnRepr.Simple \nSimple \n A simple type definition (record, union, abbreviation)","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnrepr.html#Exception","title":"SynTypeDefnRepr.Exception","content":"SynTypeDefnRepr.Exception \nException \n An exception definition","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnsig.html","title":"SynTypeDefnSig","content":"SynTypeDefnSig \n Represents the syntax tree for a type definition in a signature \nSynTypeDefnSig.Range \nRange \nSynTypeDefnSig.SynTypeDefnSig \nSynTypeDefnSig","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnsig.html#Range","title":"SynTypeDefnSig.Range","content":"SynTypeDefnSig.Range \nRange \n Gets the syntax range of this construct","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnsig.html#SynTypeDefnSig","title":"SynTypeDefnSig.SynTypeDefnSig","content":"SynTypeDefnSig.SynTypeDefnSig \nSynTypeDefnSig \n The information for a type definition in a signature","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnsigrepr.html","title":"SynTypeDefnSigRepr","content":"SynTypeDefnSigRepr \n Represents the syntax tree for the right-hand-side of a type definition in a signature.\n Note: in practice, using a discriminated union to make a distinction between\n \u0022simple\u0022 types and \u0022object oriented\u0022 types is not particularly useful. \nSynTypeDefnSigRepr.IsException \nIsException \nSynTypeDefnSigRepr.Range \nRange \nSynTypeDefnSigRepr.IsObjectModel \nIsObjectModel \nSynTypeDefnSigRepr.IsSimple \nIsSimple \nSynTypeDefnSigRepr.ObjectModel \nObjectModel \nSynTypeDefnSigRepr.Simple \nSimple \nSynTypeDefnSigRepr.Exception \nException","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnsigrepr.html#IsException","title":"SynTypeDefnSigRepr.IsException","content":"SynTypeDefnSigRepr.IsException \nIsException \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnsigrepr.html#Range","title":"SynTypeDefnSigRepr.Range","content":"SynTypeDefnSigRepr.Range \nRange \n Gets the syntax range of this construct","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnsigrepr.html#IsObjectModel","title":"SynTypeDefnSigRepr.IsObjectModel","content":"SynTypeDefnSigRepr.IsObjectModel \nIsObjectModel \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnsigrepr.html#IsSimple","title":"SynTypeDefnSigRepr.IsSimple","content":"SynTypeDefnSigRepr.IsSimple \nIsSimple \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnsigrepr.html#ObjectModel","title":"SynTypeDefnSigRepr.ObjectModel","content":"SynTypeDefnSigRepr.ObjectModel \nObjectModel \n Indicates the right right-hand-side is a class, struct, interface or other object-model type","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnsigrepr.html#Simple","title":"SynTypeDefnSigRepr.Simple","content":"SynTypeDefnSigRepr.Simple \nSimple \n Indicates the right right-hand-side is a record, union or other simple type.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnsigrepr.html#Exception","title":"SynTypeDefnSigRepr.Exception","content":"SynTypeDefnSigRepr.Exception \nException \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnsimplerepr.html","title":"SynTypeDefnSimpleRepr","content":"SynTypeDefnSimpleRepr \n Represents the syntax tree for the core of a simple type definition, in either signature\n or implementation. \nSynTypeDefnSimpleRepr.IsNone \nIsNone \nSynTypeDefnSimpleRepr.IsException \nIsException \nSynTypeDefnSimpleRepr.IsEnum \nIsEnum \nSynTypeDefnSimpleRepr.IsTypeAbbrev \nIsTypeAbbrev \nSynTypeDefnSimpleRepr.Range \nRange \nSynTypeDefnSimpleRepr.IsGeneral \nIsGeneral \nSynTypeDefnSimpleRepr.IsRecord \nIsRecord \nSynTypeDefnSimpleRepr.IsLibraryOnlyILAssembly \nIsLibraryOnlyILAssembly \nSynTypeDefnSimpleRepr.IsUnion \nIsUnion \nSynTypeDefnSimpleRepr.Union \nUnion \nSynTypeDefnSimpleRepr.Enum \nEnum \nSynTypeDefnSimpleRepr.Record \nRecord \nSynTypeDefnSimpleRepr.General \nGeneral \nSynTypeDefnSimpleRepr.LibraryOnlyILAssembly \nLibraryOnlyILAssembly \nSynTypeDefnSimpleRepr.TypeAbbrev \nTypeAbbrev \nSynTypeDefnSimpleRepr.None \nNone \nSynTypeDefnSimpleRepr.Exception \nException","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnsimplerepr.html#IsNone","title":"SynTypeDefnSimpleRepr.IsNone","content":"SynTypeDefnSimpleRepr.IsNone \nIsNone \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnsimplerepr.html#IsException","title":"SynTypeDefnSimpleRepr.IsException","content":"SynTypeDefnSimpleRepr.IsException \nIsException \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnsimplerepr.html#IsEnum","title":"SynTypeDefnSimpleRepr.IsEnum","content":"SynTypeDefnSimpleRepr.IsEnum \nIsEnum \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnsimplerepr.html#IsTypeAbbrev","title":"SynTypeDefnSimpleRepr.IsTypeAbbrev","content":"SynTypeDefnSimpleRepr.IsTypeAbbrev \nIsTypeAbbrev \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnsimplerepr.html#Range","title":"SynTypeDefnSimpleRepr.Range","content":"SynTypeDefnSimpleRepr.Range \nRange \n Gets the syntax range of this construct","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnsimplerepr.html#IsGeneral","title":"SynTypeDefnSimpleRepr.IsGeneral","content":"SynTypeDefnSimpleRepr.IsGeneral \nIsGeneral \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnsimplerepr.html#IsRecord","title":"SynTypeDefnSimpleRepr.IsRecord","content":"SynTypeDefnSimpleRepr.IsRecord \nIsRecord \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnsimplerepr.html#IsLibraryOnlyILAssembly","title":"SynTypeDefnSimpleRepr.IsLibraryOnlyILAssembly","content":"SynTypeDefnSimpleRepr.IsLibraryOnlyILAssembly \nIsLibraryOnlyILAssembly \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnsimplerepr.html#IsUnion","title":"SynTypeDefnSimpleRepr.IsUnion","content":"SynTypeDefnSimpleRepr.IsUnion \nIsUnion \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnsimplerepr.html#Union","title":"SynTypeDefnSimpleRepr.Union","content":"SynTypeDefnSimpleRepr.Union \nUnion \n A union type definition, type X = A | B","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnsimplerepr.html#Enum","title":"SynTypeDefnSimpleRepr.Enum","content":"SynTypeDefnSimpleRepr.Enum \nEnum \n An enum type definition, type X = A = 1 | B = 2","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnsimplerepr.html#Record","title":"SynTypeDefnSimpleRepr.Record","content":"SynTypeDefnSimpleRepr.Record \nRecord \n A record type definition, type X = { A: int; B: int }","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnsimplerepr.html#General","title":"SynTypeDefnSimpleRepr.General","content":"SynTypeDefnSimpleRepr.General \nGeneral \n An object oriented type definition. This is not a parse-tree form, but represents the core\n type representation which the type checker splits out from the \u0022ObjectModel\u0022 cases of type definitions.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnsimplerepr.html#LibraryOnlyILAssembly","title":"SynTypeDefnSimpleRepr.LibraryOnlyILAssembly","content":"SynTypeDefnSimpleRepr.LibraryOnlyILAssembly \nLibraryOnlyILAssembly \n A type defined by using an IL assembly representation. Only used in FSharp.Core.\n\n F# syntax: \u0022type X = (# \u0022...\u0022#)","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnsimplerepr.html#TypeAbbrev","title":"SynTypeDefnSimpleRepr.TypeAbbrev","content":"SynTypeDefnSimpleRepr.TypeAbbrev \nTypeAbbrev \n A type abbreviation, \u0022type X = A.B.C\u0022","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnsimplerepr.html#None","title":"SynTypeDefnSimpleRepr.None","content":"SynTypeDefnSimpleRepr.None \nNone \n An abstract definition, \u0022type X\u0022","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnsimplerepr.html#Exception","title":"SynTypeDefnSimpleRepr.Exception","content":"SynTypeDefnSimpleRepr.Exception \nException \n An exception definition, \u0022exception E = ...\u0022","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synunioncase.html","title":"SynUnionCase","content":"SynUnionCase \n Represents the syntax tree for one case in a union definition. \nSynUnionCase.Range \nRange \nSynUnionCase.SynUnionCase \nSynUnionCase","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synunioncase.html#Range","title":"SynUnionCase.Range","content":"SynUnionCase.Range \nRange \n Gets the syntax range of this construct","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synunioncase.html#SynUnionCase","title":"SynUnionCase.SynUnionCase","content":"SynUnionCase.SynUnionCase \nSynUnionCase \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synunioncasekind.html","title":"SynUnionCaseKind","content":"SynUnionCaseKind \n Represents the syntax tree for the right-hand-side of union definition, excluding members,\n in either a signature or implementation. \nSynUnionCaseKind.IsFields \nIsFields \nSynUnionCaseKind.IsFullType \nIsFullType \nSynUnionCaseKind.Fields \nFields \nSynUnionCaseKind.FullType \nFullType","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synunioncasekind.html#IsFields","title":"SynUnionCaseKind.IsFields","content":"SynUnionCaseKind.IsFields \nIsFields \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synunioncasekind.html#IsFullType","title":"SynUnionCaseKind.IsFullType","content":"SynUnionCaseKind.IsFullType \nIsFullType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synunioncasekind.html#Fields","title":"SynUnionCaseKind.Fields","content":"SynUnionCaseKind.Fields \nFields \n Normal style declaration","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synunioncasekind.html#FullType","title":"SynUnionCaseKind.FullType","content":"SynUnionCaseKind.FullType \nFullType \n Full type spec given by \u0027UnionCase: ty1 * tyN -\u003E rty\u0027. Only used in FSharp.Core, otherwise a warning.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synvaldata.html","title":"SynValData","content":"SynValData \n Represents extra information about the declaration of a value \nSynValData.SynValInfo \nSynValInfo \nSynValData.SynValData \nSynValData","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synvaldata.html#SynValInfo","title":"SynValData.SynValInfo","content":"SynValData.SynValInfo \nSynValInfo \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synvaldata.html#SynValData","title":"SynValData.SynValData","content":"SynValData.SynValData \nSynValData \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synvalinfo.html","title":"SynValInfo","content":"SynValInfo \n The argument names and other metadata for a member or function \nSynValInfo.ArgNames \nArgNames \nSynValInfo.CurriedArgInfos \nCurriedArgInfos \nSynValInfo.SynValInfo \nSynValInfo","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synvalinfo.html#ArgNames","title":"SynValInfo.ArgNames","content":"SynValInfo.ArgNames \nArgNames \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synvalinfo.html#CurriedArgInfos","title":"SynValInfo.CurriedArgInfos","content":"SynValInfo.CurriedArgInfos \nCurriedArgInfos \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synvalinfo.html#SynValInfo","title":"SynValInfo.SynValInfo","content":"SynValInfo.SynValInfo \nSynValInfo \n SynValInfo(curriedArgInfos, returnInfo)","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synvalsig.html","title":"SynValSig","content":"SynValSig \n Represents the syntax tree for a \u0027val\u0027 definition in an abstract slot or a signature file \nSynValSig.SynInfo \nSynInfo \nSynValSig.RangeOfId \nRangeOfId \nSynValSig.SynType \nSynType \nSynValSig.SynValSig \nSynValSig","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synvalsig.html#SynInfo","title":"SynValSig.SynInfo","content":"SynValSig.SynInfo \nSynInfo \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synvalsig.html#RangeOfId","title":"SynValSig.RangeOfId","content":"SynValSig.RangeOfId \nRangeOfId \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synvalsig.html#SynType","title":"SynValSig.SynType","content":"SynValSig.SynType \nSynType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synvalsig.html#SynValSig","title":"SynValSig.SynValSig","content":"SynValSig.SynValSig \nSynValSig \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synvalsigaccess.html","title":"SynValSigAccess","content":"SynValSigAccess \n Represents one or two access modifier(s) in a property signature \nSynValSigAccess.GetSetAccessNoCheck \nGetSetAccessNoCheck \nSynValSigAccess.SingleAccess \nSingleAccess \nSynValSigAccess.IsSingle \nIsSingle \nSynValSigAccess.IsGetSet \nIsGetSet \nSynValSigAccess.Single \nSingle \nSynValSigAccess.GetSet \nGetSet","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synvalsigaccess.html#GetSetAccessNoCheck","title":"SynValSigAccess.GetSetAccessNoCheck","content":"SynValSigAccess.GetSetAccessNoCheck \nGetSetAccessNoCheck \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synvalsigaccess.html#SingleAccess","title":"SynValSigAccess.SingleAccess","content":"SynValSigAccess.SingleAccess \nSingleAccess \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synvalsigaccess.html#IsSingle","title":"SynValSigAccess.IsSingle","content":"SynValSigAccess.IsSingle \nIsSingle \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synvalsigaccess.html#IsGetSet","title":"SynValSigAccess.IsGetSet","content":"SynValSigAccess.IsGetSet \nIsGetSet \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synvalsigaccess.html#Single","title":"SynValSigAccess.Single","content":"SynValSigAccess.Single \nSingle \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synvalsigaccess.html#GetSet","title":"SynValSigAccess.GetSet","content":"SynValSigAccess.GetSet \nGetSet \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synvaltypardecls.html","title":"SynValTyparDecls","content":"SynValTyparDecls \n Represents the names and other metadata for the type parameters for a member or function \nSynValTyparDecls.SynValTyparDecls \nSynValTyparDecls","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synvaltypardecls.html#SynValTyparDecls","title":"SynValTyparDecls.SynValTyparDecls","content":"SynValTyparDecls.SynValTyparDecls \nSynValTyparDecls \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxnode.html","title":"SyntaxNode","content":"SyntaxNode \n Represents a major syntax node in the untyped abstract syntax tree. \nSyntaxNode.IsSynPat \nIsSynPat \nSyntaxNode.IsSynModuleOrNamespaceSig \nIsSynModuleOrNamespaceSig \nSyntaxNode.IsSynMemberSig \nIsSynMemberSig \nSyntaxNode.IsSynModule \nIsSynModule \nSyntaxNode.IsSynValSig \nIsSynValSig \nSyntaxNode.IsSynType \nIsSynType \nSyntaxNode.IsSynModuleOrNamespace \nIsSynModuleOrNamespace \nSyntaxNode.IsSynModuleSigDecl \nIsSynModuleSigDecl \nSyntaxNode.IsSynTypeDefn \nIsSynTypeDefn \nSyntaxNode.IsSynMatchClause \nIsSynMatchClause \nSyntaxNode.Range \nRange \nSyntaxNode.IsSynMemberDefn \nIsSynMemberDefn \nSyntaxNode.IsSynBinding \nIsSynBinding \nSyntaxNode.IsSynExpr \nIsSynExpr \nSyntaxNode.IsSynTypeDefnSig \nIsSynTypeDefnSig \nSyntaxNode.SynPat \nSynPat \nSyntaxNode.SynType \nSynType \nSyntaxNode.SynExpr \nSynExpr \nSyntaxNode.SynModule \nSynModule \nSyntaxNode.SynModuleOrNamespace \nSynModuleOrNamespace \nSyntaxNode.SynTypeDefn \nSynTypeDefn \nSyntaxNode.SynMemberDefn \nSynMemberDefn \nSyntaxNode.SynMatchClause \nSynMatchClause \nSyntaxNode.SynBinding \nSynBinding \nSyntaxNode.SynModuleOrNamespaceSig \nSynModuleOrNamespaceSig \nSyntaxNode.SynModuleSigDecl \nSynModuleSigDecl \nSyntaxNode.SynValSig \nSynValSig \nSyntaxNode.SynTypeDefnSig \nSynTypeDefnSig \nSyntaxNode.SynMemberSig \nSynMemberSig","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxnode.html#IsSynPat","title":"SyntaxNode.IsSynPat","content":"SyntaxNode.IsSynPat \nIsSynPat \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxnode.html#IsSynModuleOrNamespaceSig","title":"SyntaxNode.IsSynModuleOrNamespaceSig","content":"SyntaxNode.IsSynModuleOrNamespaceSig \nIsSynModuleOrNamespaceSig \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxnode.html#IsSynMemberSig","title":"SyntaxNode.IsSynMemberSig","content":"SyntaxNode.IsSynMemberSig \nIsSynMemberSig \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxnode.html#IsSynModule","title":"SyntaxNode.IsSynModule","content":"SyntaxNode.IsSynModule \nIsSynModule \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxnode.html#IsSynValSig","title":"SyntaxNode.IsSynValSig","content":"SyntaxNode.IsSynValSig \nIsSynValSig \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxnode.html#IsSynType","title":"SyntaxNode.IsSynType","content":"SyntaxNode.IsSynType \nIsSynType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxnode.html#IsSynModuleOrNamespace","title":"SyntaxNode.IsSynModuleOrNamespace","content":"SyntaxNode.IsSynModuleOrNamespace \nIsSynModuleOrNamespace \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxnode.html#IsSynModuleSigDecl","title":"SyntaxNode.IsSynModuleSigDecl","content":"SyntaxNode.IsSynModuleSigDecl \nIsSynModuleSigDecl \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxnode.html#IsSynTypeDefn","title":"SyntaxNode.IsSynTypeDefn","content":"SyntaxNode.IsSynTypeDefn \nIsSynTypeDefn \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxnode.html#IsSynMatchClause","title":"SyntaxNode.IsSynMatchClause","content":"SyntaxNode.IsSynMatchClause \nIsSynMatchClause \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxnode.html#Range","title":"SyntaxNode.Range","content":"SyntaxNode.Range \nRange \n The range of the syntax node, inclusive of its contents.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxnode.html#IsSynMemberDefn","title":"SyntaxNode.IsSynMemberDefn","content":"SyntaxNode.IsSynMemberDefn \nIsSynMemberDefn \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxnode.html#IsSynBinding","title":"SyntaxNode.IsSynBinding","content":"SyntaxNode.IsSynBinding \nIsSynBinding \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxnode.html#IsSynExpr","title":"SyntaxNode.IsSynExpr","content":"SyntaxNode.IsSynExpr \nIsSynExpr \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxnode.html#IsSynTypeDefnSig","title":"SyntaxNode.IsSynTypeDefnSig","content":"SyntaxNode.IsSynTypeDefnSig \nIsSynTypeDefnSig \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxnode.html#SynPat","title":"SyntaxNode.SynPat","content":"SyntaxNode.SynPat \nSynPat \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxnode.html#SynType","title":"SyntaxNode.SynType","content":"SyntaxNode.SynType \nSynType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxnode.html#SynExpr","title":"SyntaxNode.SynExpr","content":"SyntaxNode.SynExpr \nSynExpr \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxnode.html#SynModule","title":"SyntaxNode.SynModule","content":"SyntaxNode.SynModule \nSynModule \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxnode.html#SynModuleOrNamespace","title":"SyntaxNode.SynModuleOrNamespace","content":"SyntaxNode.SynModuleOrNamespace \nSynModuleOrNamespace \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxnode.html#SynTypeDefn","title":"SyntaxNode.SynTypeDefn","content":"SyntaxNode.SynTypeDefn \nSynTypeDefn \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxnode.html#SynMemberDefn","title":"SyntaxNode.SynMemberDefn","content":"SyntaxNode.SynMemberDefn \nSynMemberDefn \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxnode.html#SynMatchClause","title":"SyntaxNode.SynMatchClause","content":"SyntaxNode.SynMatchClause \nSynMatchClause \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxnode.html#SynBinding","title":"SyntaxNode.SynBinding","content":"SyntaxNode.SynBinding \nSynBinding \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxnode.html#SynModuleOrNamespaceSig","title":"SyntaxNode.SynModuleOrNamespaceSig","content":"SyntaxNode.SynModuleOrNamespaceSig \nSynModuleOrNamespaceSig \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxnode.html#SynModuleSigDecl","title":"SyntaxNode.SynModuleSigDecl","content":"SyntaxNode.SynModuleSigDecl \nSynModuleSigDecl \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxnode.html#SynValSig","title":"SyntaxNode.SynValSig","content":"SyntaxNode.SynValSig \nSynValSig \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxnode.html#SynTypeDefnSig","title":"SyntaxNode.SynTypeDefnSig","content":"SyntaxNode.SynTypeDefnSig \nSynTypeDefnSig \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxnode.html#SynMemberSig","title":"SyntaxNode.SynMemberSig","content":"SyntaxNode.SynMemberSig \nSynMemberSig \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxvisitorbase-1.html","title":"SyntaxVisitorBase\u003C\u0027T\u003E","content":"SyntaxVisitorBase\u003C\u0027T\u003E \n \nSyntaxVisitorBase\u003C\u0027T\u003E.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nSyntaxVisitorBase\u003C\u0027T\u003E.VisitAttributeApplication \nVisitAttributeApplication \nSyntaxVisitorBase\u003C\u0027T\u003E.VisitBinding \nVisitBinding \nSyntaxVisitorBase\u003C\u0027T\u003E.VisitComponentInfo \nVisitComponentInfo \nSyntaxVisitorBase\u003C\u0027T\u003E.VisitEnumDefn \nVisitEnumDefn \nSyntaxVisitorBase\u003C\u0027T\u003E.VisitExpr \nVisitExpr \nSyntaxVisitorBase\u003C\u0027T\u003E.VisitHashDirective \nVisitHashDirective \nSyntaxVisitorBase\u003C\u0027T\u003E.VisitImplicitInherit \nVisitImplicitInherit \nSyntaxVisitorBase\u003C\u0027T\u003E.VisitInheritSynMemberDefn \nVisitInheritSynMemberDefn \nSyntaxVisitorBase\u003C\u0027T\u003E.VisitInterfaceSynMemberDefnType \nVisitInterfaceSynMemberDefnType \nSyntaxVisitorBase\u003C\u0027T\u003E.VisitLetOrUse \nVisitLetOrUse \nSyntaxVisitorBase\u003C\u0027T\u003E.VisitMatchClause \nVisitMatchClause \nSyntaxVisitorBase\u003C\u0027T\u003E.VisitModuleDecl \nVisitModuleDecl \nSyntaxVisitorBase\u003C\u0027T\u003E.VisitModuleOrNamespace \nVisitModuleOrNamespace \nSyntaxVisitorBase\u003C\u0027T\u003E.VisitModuleOrNamespaceSig \nVisitModuleOrNamespaceSig \nSyntaxVisitorBase\u003C\u0027T\u003E.VisitModuleSigDecl \nVisitModuleSigDecl \nSyntaxVisitorBase\u003C\u0027T\u003E.VisitPat \nVisitPat \nSyntaxVisitorBase\u003C\u0027T\u003E.VisitRecordDefn \nVisitRecordDefn \nSyntaxVisitorBase\u003C\u0027T\u003E.VisitRecordField \nVisitRecordField \nSyntaxVisitorBase\u003C\u0027T\u003E.VisitSimplePats \nVisitSimplePats \nSyntaxVisitorBase\u003C\u0027T\u003E.VisitType \nVisitType \nSyntaxVisitorBase\u003C\u0027T\u003E.VisitTypeAbbrev \nVisitTypeAbbrev \nSyntaxVisitorBase\u003C\u0027T\u003E.VisitUnionDefn \nVisitUnionDefn \nSyntaxVisitorBase\u003C\u0027T\u003E.VisitValSig \nVisitValSig","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxvisitorbase-1.html#\u0060\u0060.ctor\u0060\u0060","title":"SyntaxVisitorBase\u003C\u0027T\u003E.\u0060\u0060.ctor\u0060\u0060","content":"SyntaxVisitorBase\u003C\u0027T\u003E.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxvisitorbase-1.html#VisitAttributeApplication","title":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitAttributeApplication","content":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitAttributeApplication \nVisitAttributeApplication \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxvisitorbase-1.html#VisitBinding","title":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitBinding","content":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitBinding \nVisitBinding \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxvisitorbase-1.html#VisitComponentInfo","title":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitComponentInfo","content":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitComponentInfo \nVisitComponentInfo \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxvisitorbase-1.html#VisitEnumDefn","title":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitEnumDefn","content":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitEnumDefn \nVisitEnumDefn \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxvisitorbase-1.html#VisitExpr","title":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitExpr","content":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitExpr \nVisitExpr \n\u003Cpre\u003E Controls the behavior when a SynExpr is reached; it can just do\n          defaultTraverse(expr)      if you have no special logic for this node, and want the default processing to pick which sub-node to dive deeper into\n or can inject non-default behavior, which might incorporate:\n          traverseSynExpr(subExpr)   to recurse deeper on some particular sub-expression based on your own logic\n path helps to track AST nodes that were passed during traversal\u003C/pre\u003E","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxvisitorbase-1.html#VisitHashDirective","title":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitHashDirective","content":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitHashDirective \nVisitHashDirective \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxvisitorbase-1.html#VisitImplicitInherit","title":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitImplicitInherit","content":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitImplicitInherit \nVisitImplicitInherit \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxvisitorbase-1.html#VisitInheritSynMemberDefn","title":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitInheritSynMemberDefn","content":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitInheritSynMemberDefn \nVisitInheritSynMemberDefn \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxvisitorbase-1.html#VisitInterfaceSynMemberDefnType","title":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitInterfaceSynMemberDefnType","content":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitInterfaceSynMemberDefnType \nVisitInterfaceSynMemberDefnType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxvisitorbase-1.html#VisitLetOrUse","title":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitLetOrUse","content":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitLetOrUse \nVisitLetOrUse \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxvisitorbase-1.html#VisitMatchClause","title":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitMatchClause","content":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitMatchClause \nVisitMatchClause \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxvisitorbase-1.html#VisitModuleDecl","title":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitModuleDecl","content":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitModuleDecl \nVisitModuleDecl \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxvisitorbase-1.html#VisitModuleOrNamespace","title":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitModuleOrNamespace","content":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitModuleOrNamespace \nVisitModuleOrNamespace \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxvisitorbase-1.html#VisitModuleOrNamespaceSig","title":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitModuleOrNamespaceSig","content":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitModuleOrNamespaceSig \nVisitModuleOrNamespaceSig \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxvisitorbase-1.html#VisitModuleSigDecl","title":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitModuleSigDecl","content":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitModuleSigDecl \nVisitModuleSigDecl \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxvisitorbase-1.html#VisitPat","title":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitPat","content":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitPat \nVisitPat \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxvisitorbase-1.html#VisitRecordDefn","title":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitRecordDefn","content":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitRecordDefn \nVisitRecordDefn \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxvisitorbase-1.html#VisitRecordField","title":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitRecordField","content":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitRecordField \nVisitRecordField \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxvisitorbase-1.html#VisitSimplePats","title":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitSimplePats","content":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitSimplePats \nVisitSimplePats \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxvisitorbase-1.html#VisitType","title":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitType","content":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitType \nVisitType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxvisitorbase-1.html#VisitTypeAbbrev","title":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitTypeAbbrev","content":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitTypeAbbrev \nVisitTypeAbbrev \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxvisitorbase-1.html#VisitUnionDefn","title":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitUnionDefn","content":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitUnionDefn \nVisitUnionDefn \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxvisitorbase-1.html#VisitValSig","title":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitValSig","content":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitValSig \nVisitValSig \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-typarstaticreq.html","title":"TyparStaticReq","content":"TyparStaticReq \n Represents whether a type parameter has a static requirement or not (^T or \u0027T) \nTyparStaticReq.IsHeadType \nIsHeadType \nTyparStaticReq.IsNone \nIsNone \nTyparStaticReq.None \nNone \nTyparStaticReq.HeadType \nHeadType","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-typarstaticreq.html#IsHeadType","title":"TyparStaticReq.IsHeadType","content":"TyparStaticReq.IsHeadType \nIsHeadType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-typarstaticreq.html#IsNone","title":"TyparStaticReq.IsNone","content":"TyparStaticReq.IsNone \nIsNone \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-typarstaticreq.html#None","title":"TyparStaticReq.None","content":"TyparStaticReq.None \nNone \n The construct is a normal type inference variable","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-typarstaticreq.html#HeadType","title":"TyparStaticReq.HeadType","content":"TyparStaticReq.HeadType \nHeadType \n The construct is a statically inferred type inference variable \u0027^T\u0027","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-commenttrivia.html","title":"CommentTrivia","content":"CommentTrivia \n \nCommentTrivia.IsBlockComment \nIsBlockComment \nCommentTrivia.IsLineComment \nIsLineComment \nCommentTrivia.LineComment \nLineComment \nCommentTrivia.BlockComment \nBlockComment","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-commenttrivia.html#IsBlockComment","title":"CommentTrivia.IsBlockComment","content":"CommentTrivia.IsBlockComment \nIsBlockComment \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-commenttrivia.html#IsLineComment","title":"CommentTrivia.IsLineComment","content":"CommentTrivia.IsLineComment \nIsLineComment \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-commenttrivia.html#LineComment","title":"CommentTrivia.LineComment","content":"CommentTrivia.LineComment \nLineComment \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-commenttrivia.html#BlockComment","title":"CommentTrivia.BlockComment","content":"CommentTrivia.BlockComment \nBlockComment \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-conditionaldirectivetrivia.html","title":"ConditionalDirectiveTrivia","content":"ConditionalDirectiveTrivia \n \nConditionalDirectiveTrivia.IsEndIf \nIsEndIf \nConditionalDirectiveTrivia.IsElse \nIsElse \nConditionalDirectiveTrivia.IsIf \nIsIf \nConditionalDirectiveTrivia.If \nIf \nConditionalDirectiveTrivia.Else \nElse \nConditionalDirectiveTrivia.EndIf \nEndIf","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-conditionaldirectivetrivia.html#IsEndIf","title":"ConditionalDirectiveTrivia.IsEndIf","content":"ConditionalDirectiveTrivia.IsEndIf \nIsEndIf \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-conditionaldirectivetrivia.html#IsElse","title":"ConditionalDirectiveTrivia.IsElse","content":"ConditionalDirectiveTrivia.IsElse \nIsElse \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-conditionaldirectivetrivia.html#IsIf","title":"ConditionalDirectiveTrivia.IsIf","content":"ConditionalDirectiveTrivia.IsIf \nIsIf \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-conditionaldirectivetrivia.html#If","title":"ConditionalDirectiveTrivia.If","content":"ConditionalDirectiveTrivia.If \nIf \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-conditionaldirectivetrivia.html#Else","title":"ConditionalDirectiveTrivia.Else","content":"ConditionalDirectiveTrivia.Else \nElse \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-conditionaldirectivetrivia.html#EndIf","title":"ConditionalDirectiveTrivia.EndIf","content":"ConditionalDirectiveTrivia.EndIf \nEndIf \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-getsetkeywords.html","title":"GetSetKeywords","content":"GetSetKeywords \n Represents additional information for \u0060get, set\u0060 syntax \nGetSetKeywords.IsSet \nIsSet \nGetSetKeywords.IsGet \nIsGet \nGetSetKeywords.Range \nRange \nGetSetKeywords.IsGetSet \nIsGetSet \nGetSetKeywords.Get \nGet \nGetSetKeywords.Set \nSet \nGetSetKeywords.GetSet \nGetSet","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-getsetkeywords.html#IsSet","title":"GetSetKeywords.IsSet","content":"GetSetKeywords.IsSet \nIsSet \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-getsetkeywords.html#IsGet","title":"GetSetKeywords.IsGet","content":"GetSetKeywords.IsGet \nIsGet \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-getsetkeywords.html#Range","title":"GetSetKeywords.Range","content":"GetSetKeywords.Range \nRange \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-getsetkeywords.html#IsGetSet","title":"GetSetKeywords.IsGetSet","content":"GetSetKeywords.IsGetSet \nIsGetSet \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-getsetkeywords.html#Get","title":"GetSetKeywords.Get","content":"GetSetKeywords.Get \nGet \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-getsetkeywords.html#Set","title":"GetSetKeywords.Set","content":"GetSetKeywords.Set \nSet \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-getsetkeywords.html#GetSet","title":"GetSetKeywords.GetSet","content":"GetSetKeywords.GetSet \nGetSet \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-identtrivia.html","title":"IdentTrivia","content":"IdentTrivia \n \nIdentTrivia.IsOriginalNotation \nIsOriginalNotation \nIdentTrivia.IsHasParenthesis \nIsHasParenthesis \nIdentTrivia.IsOriginalNotationWithParen \nIsOriginalNotationWithParen \nIdentTrivia.OriginalNotation \nOriginalNotation \nIdentTrivia.OriginalNotationWithParen \nOriginalNotationWithParen \nIdentTrivia.HasParenthesis \nHasParenthesis","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-identtrivia.html#IsOriginalNotation","title":"IdentTrivia.IsOriginalNotation","content":"IdentTrivia.IsOriginalNotation \nIsOriginalNotation \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-identtrivia.html#IsHasParenthesis","title":"IdentTrivia.IsHasParenthesis","content":"IdentTrivia.IsHasParenthesis \nIsHasParenthesis \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-identtrivia.html#IsOriginalNotationWithParen","title":"IdentTrivia.IsOriginalNotationWithParen","content":"IdentTrivia.IsOriginalNotationWithParen \nIsOriginalNotationWithParen \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-identtrivia.html#OriginalNotation","title":"IdentTrivia.OriginalNotation","content":"IdentTrivia.OriginalNotation \nOriginalNotation \n The ident originally had a different notation.\n Example: a \u002B b\n The operator ident will be compiled into \u0022op_Addition\u0022, while the original notation was \u0022\u002B\u0022","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-identtrivia.html#OriginalNotationWithParen","title":"IdentTrivia.OriginalNotationWithParen","content":"IdentTrivia.OriginalNotationWithParen \nOriginalNotationWithParen \n The ident originally had a different notation and parenthesis\n Example: let (\u003E=\u003E) a b = ...\n The operator ident will be compiled into \u0022op_GreaterEqualsGreater\u0022, while the original notation was \u0022\u003E=\u003E\u0022 and had parenthesis","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-identtrivia.html#HasParenthesis","title":"IdentTrivia.HasParenthesis","content":"IdentTrivia.HasParenthesis \nHasParenthesis \n The ident had parenthesis\n Example: let (|Odd|Even|) = ...\n The active pattern ident will be \u0022|Odd|Even|\u0022, while originally there were parenthesis.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-ifdirectiveexpression.html","title":"IfDirectiveExpression","content":"IfDirectiveExpression \n \nIfDirectiveExpression.IsIdent \nIsIdent \nIfDirectiveExpression.IsNot \nIsNot \nIfDirectiveExpression.IsAnd \nIsAnd \nIfDirectiveExpression.IsOr \nIsOr \nIfDirectiveExpression.And \nAnd \nIfDirectiveExpression.Or \nOr \nIfDirectiveExpression.Not \nNot \nIfDirectiveExpression.Ident \nIdent","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-ifdirectiveexpression.html#IsIdent","title":"IfDirectiveExpression.IsIdent","content":"IfDirectiveExpression.IsIdent \nIsIdent \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-ifdirectiveexpression.html#IsNot","title":"IfDirectiveExpression.IsNot","content":"IfDirectiveExpression.IsNot \nIsNot \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-ifdirectiveexpression.html#IsAnd","title":"IfDirectiveExpression.IsAnd","content":"IfDirectiveExpression.IsAnd \nIsAnd \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-ifdirectiveexpression.html#IsOr","title":"IfDirectiveExpression.IsOr","content":"IfDirectiveExpression.IsOr \nIsOr \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-ifdirectiveexpression.html#And","title":"IfDirectiveExpression.And","content":"IfDirectiveExpression.And \nAnd \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-ifdirectiveexpression.html#Or","title":"IfDirectiveExpression.Or","content":"IfDirectiveExpression.Or \nOr \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-ifdirectiveexpression.html#Not","title":"IfDirectiveExpression.Not","content":"IfDirectiveExpression.Not \nNot \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-ifdirectiveexpression.html#Ident","title":"IfDirectiveExpression.Ident","content":"IfDirectiveExpression.Ident \nIdent \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-parsedinputtrivia.html","title":"ParsedInputTrivia","content":"ParsedInputTrivia \n Represents additional information for ParsedInput \nParsedInputTrivia.ConditionalDirectives \nConditionalDirectives \nParsedInputTrivia.WarnDirectives \nWarnDirectives \nParsedInputTrivia.CodeComments \nCodeComments","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-parsedinputtrivia.html#ConditionalDirectives","title":"ParsedInputTrivia.ConditionalDirectives","content":"ParsedInputTrivia.ConditionalDirectives \nConditionalDirectives \n Preprocessor directives of type #if, #else or #endif","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-parsedinputtrivia.html#WarnDirectives","title":"ParsedInputTrivia.WarnDirectives","content":"ParsedInputTrivia.WarnDirectives \nWarnDirectives \n Warn directives (#nowarn / #warnon)","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-parsedinputtrivia.html#CodeComments","title":"ParsedInputTrivia.CodeComments","content":"ParsedInputTrivia.CodeComments \nCodeComments \n Represent code comments found in the source file","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synargpatsnamepatpairstrivia.html","title":"SynArgPatsNamePatPairsTrivia","content":"SynArgPatsNamePatPairsTrivia \n Represents additional information for SynArgPats.NamePatPairs \nSynArgPatsNamePatPairsTrivia.ParenRange \nParenRange","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synargpatsnamepatpairstrivia.html#ParenRange","title":"SynArgPatsNamePatPairsTrivia.ParenRange","content":"SynArgPatsNamePatPairsTrivia.ParenRange \nParenRange \n The syntax range from the beginning of the \u0060(\u0060 token till the end of the \u0060)\u0060 token.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synbindingreturninfotrivia.html","title":"SynBindingReturnInfoTrivia","content":"SynBindingReturnInfoTrivia \n Represents additional information for SynBindingReturnInfo \nSynBindingReturnInfoTrivia.ColonRange \nColonRange","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synbindingreturninfotrivia.html#ColonRange","title":"SynBindingReturnInfoTrivia.ColonRange","content":"SynBindingReturnInfoTrivia.ColonRange \nColonRange \n The syntax range of the \u0060:\u0060 token","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synbindingtrivia.html","title":"SynBindingTrivia","content":"SynBindingTrivia \n Represents additional information for SynBinding \nSynBindingTrivia.Zero \nZero \nSynBindingTrivia.LeadingKeyword \nLeadingKeyword \nSynBindingTrivia.InlineKeyword \nInlineKeyword \nSynBindingTrivia.EqualsRange \nEqualsRange","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synbindingtrivia.html#Zero","title":"SynBindingTrivia.Zero","content":"SynBindingTrivia.Zero \nZero \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synbindingtrivia.html#LeadingKeyword","title":"SynBindingTrivia.LeadingKeyword","content":"SynBindingTrivia.LeadingKeyword \nLeadingKeyword \n Used leading keyword of SynBinding","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synbindingtrivia.html#InlineKeyword","title":"SynBindingTrivia.InlineKeyword","content":"SynBindingTrivia.InlineKeyword \nInlineKeyword \n The syntax range of the \u0060inline\u0060 keyword","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synbindingtrivia.html#EqualsRange","title":"SynBindingTrivia.EqualsRange","content":"SynBindingTrivia.EqualsRange \nEqualsRange \n The syntax range of the \u0060=\u0060 token.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synenumcasetrivia.html","title":"SynEnumCaseTrivia","content":"SynEnumCaseTrivia \n Represents additional information for \nSynEnumCaseTrivia.BarRange \nBarRange \nSynEnumCaseTrivia.EqualsRange \nEqualsRange","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synenumcasetrivia.html#BarRange","title":"SynEnumCaseTrivia.BarRange","content":"SynEnumCaseTrivia.BarRange \nBarRange \n The syntax range of the \u0060|\u0060 token.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synenumcasetrivia.html#EqualsRange","title":"SynEnumCaseTrivia.EqualsRange","content":"SynEnumCaseTrivia.EqualsRange \nEqualsRange \n The syntax range of the \u0060=\u0060 token.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synexpranonrecdtrivia.html","title":"SynExprAnonRecdTrivia","content":"SynExprAnonRecdTrivia \n Represents additional information for SynExpr.AnonRecd \nSynExprAnonRecdTrivia.OpeningBraceRange \nOpeningBraceRange","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synexpranonrecdtrivia.html#OpeningBraceRange","title":"SynExprAnonRecdTrivia.OpeningBraceRange","content":"SynExprAnonRecdTrivia.OpeningBraceRange \nOpeningBraceRange \n The syntax range of the \u0060{|\u0060 token.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synexprdobangtrivia.html","title":"SynExprDoBangTrivia","content":"SynExprDoBangTrivia \n Represents additional information for SynExpr.DoBang \nSynExprDoBangTrivia.DoBangKeyword \nDoBangKeyword","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synexprdobangtrivia.html#DoBangKeyword","title":"SynExprDoBangTrivia.DoBangKeyword","content":"SynExprDoBangTrivia.DoBangKeyword \nDoBangKeyword \n The syntax range of the \u0060do!\u0060 keyword","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synexprdotlambdatrivia.html","title":"SynExprDotLambdaTrivia","content":"SynExprDotLambdaTrivia \n Represents additional information for SynExpr.DotLambda \nSynExprDotLambdaTrivia.UnderscoreRange \nUnderscoreRange \nSynExprDotLambdaTrivia.DotRange \nDotRange","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synexprdotlambdatrivia.html#UnderscoreRange","title":"SynExprDotLambdaTrivia.UnderscoreRange","content":"SynExprDotLambdaTrivia.UnderscoreRange \nUnderscoreRange \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synexprdotlambdatrivia.html#DotRange","title":"SynExprDotLambdaTrivia.DotRange","content":"SynExprDotLambdaTrivia.DotRange \nDotRange \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synexprifthenelsetrivia.html","title":"SynExprIfThenElseTrivia","content":"SynExprIfThenElseTrivia \n Represents additional information for SynExpr.IfThenElse \nSynExprIfThenElseTrivia.IfKeyword \nIfKeyword \nSynExprIfThenElseTrivia.IsElif \nIsElif \nSynExprIfThenElseTrivia.ThenKeyword \nThenKeyword \nSynExprIfThenElseTrivia.ElseKeyword \nElseKeyword \nSynExprIfThenElseTrivia.IfToThenRange \nIfToThenRange","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synexprifthenelsetrivia.html#IfKeyword","title":"SynExprIfThenElseTrivia.IfKeyword","content":"SynExprIfThenElseTrivia.IfKeyword \nIfKeyword \n The syntax range of the \u0060if\u0060 keyword.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synexprifthenelsetrivia.html#IsElif","title":"SynExprIfThenElseTrivia.IsElif","content":"SynExprIfThenElseTrivia.IsElif \nIsElif \n Indicates if the \u0060elif\u0060 keyword was used","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synexprifthenelsetrivia.html#ThenKeyword","title":"SynExprIfThenElseTrivia.ThenKeyword","content":"SynExprIfThenElseTrivia.ThenKeyword \nThenKeyword \n The syntax range of the \u0060then\u0060 keyword.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synexprifthenelsetrivia.html#ElseKeyword","title":"SynExprIfThenElseTrivia.ElseKeyword","content":"SynExprIfThenElseTrivia.ElseKeyword \nElseKeyword \n The syntax range of the \u0060else\u0060 keyword.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synexprifthenelsetrivia.html#IfToThenRange","title":"SynExprIfThenElseTrivia.IfToThenRange","content":"SynExprIfThenElseTrivia.IfToThenRange \nIfToThenRange \n The syntax range from the beginning of the \u0060if\u0060 keyword till the end of the \u0060then\u0060 keyword.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synexprlambdatrivia.html","title":"SynExprLambdaTrivia","content":"SynExprLambdaTrivia \n Represents additional information for SynExpr.Lambda \nSynExprLambdaTrivia.Zero \nZero \nSynExprLambdaTrivia.ArrowRange \nArrowRange","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synexprlambdatrivia.html#Zero","title":"SynExprLambdaTrivia.Zero","content":"SynExprLambdaTrivia.Zero \nZero \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synexprlambdatrivia.html#ArrowRange","title":"SynExprLambdaTrivia.ArrowRange","content":"SynExprLambdaTrivia.ArrowRange \nArrowRange \n The syntax range of the \u0060-\u003E\u0060 token.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synexprletorusetrivia.html","title":"SynExprLetOrUseTrivia","content":"SynExprLetOrUseTrivia \n Represents additional information for SynExpr.LetOrUse \nSynExprLetOrUseTrivia.Zero \nZero \nSynExprLetOrUseTrivia.LetOrUseKeyword \nLetOrUseKeyword \nSynExprLetOrUseTrivia.InKeyword \nInKeyword \nSynExprLetOrUseTrivia.EqualsRange \nEqualsRange","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synexprletorusetrivia.html#Zero","title":"SynExprLetOrUseTrivia.Zero","content":"SynExprLetOrUseTrivia.Zero \nZero \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synexprletorusetrivia.html#LetOrUseKeyword","title":"SynExprLetOrUseTrivia.LetOrUseKeyword","content":"SynExprLetOrUseTrivia.LetOrUseKeyword \nLetOrUseKeyword \n The syntax range of the \u0060let\u0060 or \u0060use\u0060 keyword.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synexprletorusetrivia.html#InKeyword","title":"SynExprLetOrUseTrivia.InKeyword","content":"SynExprLetOrUseTrivia.InKeyword \nInKeyword \n The syntax range of the \u0060in\u0060 keyword.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synexprletorusetrivia.html#EqualsRange","title":"SynExprLetOrUseTrivia.EqualsRange","content":"SynExprLetOrUseTrivia.EqualsRange \nEqualsRange \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synexprmatchbangtrivia.html","title":"SynExprMatchBangTrivia","content":"SynExprMatchBangTrivia \n Represents additional information for SynExpr.MatchBang \nSynExprMatchBangTrivia.MatchBangKeyword \nMatchBangKeyword \nSynExprMatchBangTrivia.WithKeyword \nWithKeyword","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synexprmatchbangtrivia.html#MatchBangKeyword","title":"SynExprMatchBangTrivia.MatchBangKeyword","content":"SynExprMatchBangTrivia.MatchBangKeyword \nMatchBangKeyword \n The syntax range of the \u0060match!\u0060 keyword","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synexprmatchbangtrivia.html#WithKeyword","title":"SynExprMatchBangTrivia.WithKeyword","content":"SynExprMatchBangTrivia.WithKeyword \nWithKeyword \n The syntax range of the \u0060with\u0060 keyword","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synexprmatchtrivia.html","title":"SynExprMatchTrivia","content":"SynExprMatchTrivia \n Represents additional information for SynExpr.Match \nSynExprMatchTrivia.MatchKeyword \nMatchKeyword \nSynExprMatchTrivia.WithKeyword \nWithKeyword","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synexprmatchtrivia.html#MatchKeyword","title":"SynExprMatchTrivia.MatchKeyword","content":"SynExprMatchTrivia.MatchKeyword \nMatchKeyword \n The syntax range of the \u0060match\u0060 keyword","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synexprmatchtrivia.html#WithKeyword","title":"SynExprMatchTrivia.WithKeyword","content":"SynExprMatchTrivia.WithKeyword \nWithKeyword \n The syntax range of the \u0060with\u0060 keyword","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synexprsequentialtrivia.html","title":"SynExprSequentialTrivia","content":"SynExprSequentialTrivia \n Represents additional information for SynExpr.Sequential \nSynExprSequentialTrivia.Zero \nZero \nSynExprSequentialTrivia.SeparatorRange \nSeparatorRange","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synexprsequentialtrivia.html#Zero","title":"SynExprSequentialTrivia.Zero","content":"SynExprSequentialTrivia.Zero \nZero \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synexprsequentialtrivia.html#SeparatorRange","title":"SynExprSequentialTrivia.SeparatorRange","content":"SynExprSequentialTrivia.SeparatorRange \nSeparatorRange \n The syntax range of the \u0060;\u0060 token.\n Could also be the \u0060then\u0060 keyword.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synexprtryfinallytrivia.html","title":"SynExprTryFinallyTrivia","content":"SynExprTryFinallyTrivia \n Represents additional information for SynExpr.TryFinally \nSynExprTryFinallyTrivia.TryKeyword \nTryKeyword \nSynExprTryFinallyTrivia.FinallyKeyword \nFinallyKeyword","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synexprtryfinallytrivia.html#TryKeyword","title":"SynExprTryFinallyTrivia.TryKeyword","content":"SynExprTryFinallyTrivia.TryKeyword \nTryKeyword \n The syntax range of the \u0060try\u0060 keyword.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synexprtryfinallytrivia.html#FinallyKeyword","title":"SynExprTryFinallyTrivia.FinallyKeyword","content":"SynExprTryFinallyTrivia.FinallyKeyword \nFinallyKeyword \n The syntax range of the \u0060finally\u0060 keyword","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synexprtrywithtrivia.html","title":"SynExprTryWithTrivia","content":"SynExprTryWithTrivia \n Represents additional information for SynExpr.TryWith \nSynExprTryWithTrivia.TryKeyword \nTryKeyword \nSynExprTryWithTrivia.TryToWithRange \nTryToWithRange \nSynExprTryWithTrivia.WithKeyword \nWithKeyword \nSynExprTryWithTrivia.WithToEndRange \nWithToEndRange","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synexprtrywithtrivia.html#TryKeyword","title":"SynExprTryWithTrivia.TryKeyword","content":"SynExprTryWithTrivia.TryKeyword \nTryKeyword \n The syntax range of the \u0060try\u0060 keyword.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synexprtrywithtrivia.html#TryToWithRange","title":"SynExprTryWithTrivia.TryToWithRange","content":"SynExprTryWithTrivia.TryToWithRange \nTryToWithRange \n The syntax range from the beginning of the \u0060try\u0060 keyword till the end of the \u0060with\u0060 keyword.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synexprtrywithtrivia.html#WithKeyword","title":"SynExprTryWithTrivia.WithKeyword","content":"SynExprTryWithTrivia.WithKeyword \nWithKeyword \n The syntax range of the \u0060with\u0060 keyword","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synexprtrywithtrivia.html#WithToEndRange","title":"SynExprTryWithTrivia.WithToEndRange","content":"SynExprTryWithTrivia.WithToEndRange \nWithToEndRange \n The syntax range from the beginning of the \u0060with\u0060 keyword till the end of the TryWith expression.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synexpryieldorreturnfromtrivia.html","title":"SynExprYieldOrReturnFromTrivia","content":"SynExprYieldOrReturnFromTrivia \n Represents additional information for SynExpr.YieldOrReturnFrom \nSynExprYieldOrReturnFromTrivia.Zero \nZero \nSynExprYieldOrReturnFromTrivia.YieldOrReturnFromKeyword \nYieldOrReturnFromKeyword","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synexpryieldorreturnfromtrivia.html#Zero","title":"SynExprYieldOrReturnFromTrivia.Zero","content":"SynExprYieldOrReturnFromTrivia.Zero \nZero \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synexpryieldorreturnfromtrivia.html#YieldOrReturnFromKeyword","title":"SynExprYieldOrReturnFromTrivia.YieldOrReturnFromKeyword","content":"SynExprYieldOrReturnFromTrivia.YieldOrReturnFromKeyword \nYieldOrReturnFromKeyword \n The syntax range of the \u0060yield!\u0060 or \u0060return!\u0060 keyword.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synexpryieldorreturntrivia.html","title":"SynExprYieldOrReturnTrivia","content":"SynExprYieldOrReturnTrivia \n Represents additional information for SynExpr.YieldOrReturn \nSynExprYieldOrReturnTrivia.Zero \nZero \nSynExprYieldOrReturnTrivia.YieldOrReturnKeyword \nYieldOrReturnKeyword","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synexpryieldorreturntrivia.html#Zero","title":"SynExprYieldOrReturnTrivia.Zero","content":"SynExprYieldOrReturnTrivia.Zero \nZero \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synexpryieldorreturntrivia.html#YieldOrReturnKeyword","title":"SynExprYieldOrReturnTrivia.YieldOrReturnKeyword","content":"SynExprYieldOrReturnTrivia.YieldOrReturnKeyword \nYieldOrReturnKeyword \n The syntax range of the \u0060yield\u0060 or \u0060return\u0060 keyword.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synfieldtrivia.html","title":"SynFieldTrivia","content":"SynFieldTrivia \n Represents additional information for SynField \nSynFieldTrivia.Zero \nZero \nSynFieldTrivia.LeadingKeyword \nLeadingKeyword \nSynFieldTrivia.MutableKeyword \nMutableKeyword","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synfieldtrivia.html#Zero","title":"SynFieldTrivia.Zero","content":"SynFieldTrivia.Zero \nZero \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synfieldtrivia.html#LeadingKeyword","title":"SynFieldTrivia.LeadingKeyword","content":"SynFieldTrivia.LeadingKeyword \nLeadingKeyword \n Used leading keyword of SynField","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synfieldtrivia.html#MutableKeyword","title":"SynFieldTrivia.MutableKeyword","content":"SynFieldTrivia.MutableKeyword \nMutableKeyword \n The syntax range of the \u0060mutable\u0060 keyword","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synleadingkeyword.html","title":"SynLeadingKeyword","content":"SynLeadingKeyword \n Represents the leading keyword in a SynBinding or SynValSig \nSynLeadingKeyword.IsStaticAbstract \nIsStaticAbstract \nSynLeadingKeyword.IsStaticMember \nIsStaticMember \nSynLeadingKeyword.IsMember \nIsMember \nSynLeadingKeyword.IsDefault \nIsDefault \nSynLeadingKeyword.IsLet \nIsLet \nSynLeadingKeyword.IsExtern \nIsExtern \nSynLeadingKeyword.IsAnd \nIsAnd \nSynLeadingKeyword.IsStaticDo \nIsStaticDo \nSynLeadingKeyword.IsStaticLetRec \nIsStaticLetRec \nSynLeadingKeyword.IsAbstractMember \nIsAbstractMember \nSynLeadingKeyword.IsStaticLet \nIsStaticLet \nSynLeadingKeyword.IsStaticAbstractMember \nIsStaticAbstractMember \nSynLeadingKeyword.Range \nRange \nSynLeadingKeyword.IsUse \nIsUse \nSynLeadingKeyword.IsStaticMemberVal \nIsStaticMemberVal \nSynLeadingKeyword.IsMemberVal \nIsMemberVal \nSynLeadingKeyword.IsOverrideVal \nIsOverrideVal \nSynLeadingKeyword.IsDefaultVal \nIsDefaultVal \nSynLeadingKeyword.IsStatic \nIsStatic \nSynLeadingKeyword.IsVal \nIsVal \nSynLeadingKeyword.IsSynthetic \nIsSynthetic \nSynLeadingKeyword.IsAbstract \nIsAbstract \nSynLeadingKeyword.IsNew \nIsNew \nSynLeadingKeyword.IsStaticVal \nIsStaticVal \nSynLeadingKeyword.IsDo \nIsDo \nSynLeadingKeyword.IsUseRec \nIsUseRec \nSynLeadingKeyword.IsLetRec \nIsLetRec \nSynLeadingKeyword.IsOverride \nIsOverride \nSynLeadingKeyword.Let \nLet \nSynLeadingKeyword.LetRec \nLetRec \nSynLeadingKeyword.And \nAnd \nSynLeadingKeyword.Use \nUse \nSynLeadingKeyword.UseRec \nUseRec \nSynLeadingKeyword.Extern \nExtern \nSynLeadingKeyword.Member \nMember \nSynLeadingKeyword.MemberVal \nMemberVal \nSynLeadingKeyword.Override \nOverride \nSynLeadingKeyword.OverrideVal \nOverrideVal \nSynLeadingKeyword.Abstract \nAbstract \nSynLeadingKeyword.AbstractMember \nAbstractMember \nSynLeadingKeyword.Static \nStatic \nSynLeadingKeyword.StaticMember \nStaticMember \nSynLeadingKeyword.StaticMemberVal \nStaticMemberVal \nSynLeadingKeyword.StaticAbstract \nStaticAbstract \nSynLeadingKeyword.StaticAbstractMember \nStaticAbstractMember \nSynLeadingKeyword.StaticVal \nStaticVal \nSynLeadingKeyword.StaticLet \nStaticLet \nSynLeadingKeyword.StaticLetRec \nStaticLetRec \nSynLeadingKeyword.StaticDo \nStaticDo \nSynLeadingKeyword.Default \nDefault \nSynLeadingKeyword.DefaultVal \nDefaultVal \nSynLeadingKeyword.Val \nVal \nSynLeadingKeyword.New \nNew \nSynLeadingKeyword.Do \nDo \nSynLeadingKeyword.Synthetic \nSynthetic","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synleadingkeyword.html#IsStaticAbstract","title":"SynLeadingKeyword.IsStaticAbstract","content":"SynLeadingKeyword.IsStaticAbstract \nIsStaticAbstract \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synleadingkeyword.html#IsStaticMember","title":"SynLeadingKeyword.IsStaticMember","content":"SynLeadingKeyword.IsStaticMember \nIsStaticMember \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synleadingkeyword.html#IsMember","title":"SynLeadingKeyword.IsMember","content":"SynLeadingKeyword.IsMember \nIsMember \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synleadingkeyword.html#IsDefault","title":"SynLeadingKeyword.IsDefault","content":"SynLeadingKeyword.IsDefault \nIsDefault \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synleadingkeyword.html#IsLet","title":"SynLeadingKeyword.IsLet","content":"SynLeadingKeyword.IsLet \nIsLet \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synleadingkeyword.html#IsExtern","title":"SynLeadingKeyword.IsExtern","content":"SynLeadingKeyword.IsExtern \nIsExtern \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synleadingkeyword.html#IsAnd","title":"SynLeadingKeyword.IsAnd","content":"SynLeadingKeyword.IsAnd \nIsAnd \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synleadingkeyword.html#IsStaticDo","title":"SynLeadingKeyword.IsStaticDo","content":"SynLeadingKeyword.IsStaticDo \nIsStaticDo \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synleadingkeyword.html#IsStaticLetRec","title":"SynLeadingKeyword.IsStaticLetRec","content":"SynLeadingKeyword.IsStaticLetRec \nIsStaticLetRec \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synleadingkeyword.html#IsAbstractMember","title":"SynLeadingKeyword.IsAbstractMember","content":"SynLeadingKeyword.IsAbstractMember \nIsAbstractMember \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synleadingkeyword.html#IsStaticLet","title":"SynLeadingKeyword.IsStaticLet","content":"SynLeadingKeyword.IsStaticLet \nIsStaticLet \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synleadingkeyword.html#IsStaticAbstractMember","title":"SynLeadingKeyword.IsStaticAbstractMember","content":"SynLeadingKeyword.IsStaticAbstractMember \nIsStaticAbstractMember \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synleadingkeyword.html#Range","title":"SynLeadingKeyword.Range","content":"SynLeadingKeyword.Range \nRange \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synleadingkeyword.html#IsUse","title":"SynLeadingKeyword.IsUse","content":"SynLeadingKeyword.IsUse \nIsUse \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synleadingkeyword.html#IsStaticMemberVal","title":"SynLeadingKeyword.IsStaticMemberVal","content":"SynLeadingKeyword.IsStaticMemberVal \nIsStaticMemberVal \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synleadingkeyword.html#IsMemberVal","title":"SynLeadingKeyword.IsMemberVal","content":"SynLeadingKeyword.IsMemberVal \nIsMemberVal \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synleadingkeyword.html#IsOverrideVal","title":"SynLeadingKeyword.IsOverrideVal","content":"SynLeadingKeyword.IsOverrideVal \nIsOverrideVal \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synleadingkeyword.html#IsDefaultVal","title":"SynLeadingKeyword.IsDefaultVal","content":"SynLeadingKeyword.IsDefaultVal \nIsDefaultVal \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synleadingkeyword.html#IsStatic","title":"SynLeadingKeyword.IsStatic","content":"SynLeadingKeyword.IsStatic \nIsStatic \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synleadingkeyword.html#IsVal","title":"SynLeadingKeyword.IsVal","content":"SynLeadingKeyword.IsVal \nIsVal \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synleadingkeyword.html#IsSynthetic","title":"SynLeadingKeyword.IsSynthetic","content":"SynLeadingKeyword.IsSynthetic \nIsSynthetic \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synleadingkeyword.html#IsAbstract","title":"SynLeadingKeyword.IsAbstract","content":"SynLeadingKeyword.IsAbstract \nIsAbstract \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synleadingkeyword.html#IsNew","title":"SynLeadingKeyword.IsNew","content":"SynLeadingKeyword.IsNew \nIsNew \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synleadingkeyword.html#IsStaticVal","title":"SynLeadingKeyword.IsStaticVal","content":"SynLeadingKeyword.IsStaticVal \nIsStaticVal \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synleadingkeyword.html#IsDo","title":"SynLeadingKeyword.IsDo","content":"SynLeadingKeyword.IsDo \nIsDo \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synleadingkeyword.html#IsUseRec","title":"SynLeadingKeyword.IsUseRec","content":"SynLeadingKeyword.IsUseRec \nIsUseRec \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synleadingkeyword.html#IsLetRec","title":"SynLeadingKeyword.IsLetRec","content":"SynLeadingKeyword.IsLetRec \nIsLetRec \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synleadingkeyword.html#IsOverride","title":"SynLeadingKeyword.IsOverride","content":"SynLeadingKeyword.IsOverride \nIsOverride \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synleadingkeyword.html#Let","title":"SynLeadingKeyword.Let","content":"SynLeadingKeyword.Let \nLet \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synleadingkeyword.html#LetRec","title":"SynLeadingKeyword.LetRec","content":"SynLeadingKeyword.LetRec \nLetRec \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synleadingkeyword.html#And","title":"SynLeadingKeyword.And","content":"SynLeadingKeyword.And \nAnd \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synleadingkeyword.html#Use","title":"SynLeadingKeyword.Use","content":"SynLeadingKeyword.Use \nUse \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synleadingkeyword.html#UseRec","title":"SynLeadingKeyword.UseRec","content":"SynLeadingKeyword.UseRec \nUseRec \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synleadingkeyword.html#Extern","title":"SynLeadingKeyword.Extern","content":"SynLeadingKeyword.Extern \nExtern \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synleadingkeyword.html#Member","title":"SynLeadingKeyword.Member","content":"SynLeadingKeyword.Member \nMember \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synleadingkeyword.html#MemberVal","title":"SynLeadingKeyword.MemberVal","content":"SynLeadingKeyword.MemberVal \nMemberVal \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synleadingkeyword.html#Override","title":"SynLeadingKeyword.Override","content":"SynLeadingKeyword.Override \nOverride \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synleadingkeyword.html#OverrideVal","title":"SynLeadingKeyword.OverrideVal","content":"SynLeadingKeyword.OverrideVal \nOverrideVal \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synleadingkeyword.html#Abstract","title":"SynLeadingKeyword.Abstract","content":"SynLeadingKeyword.Abstract \nAbstract \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synleadingkeyword.html#AbstractMember","title":"SynLeadingKeyword.AbstractMember","content":"SynLeadingKeyword.AbstractMember \nAbstractMember \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synleadingkeyword.html#Static","title":"SynLeadingKeyword.Static","content":"SynLeadingKeyword.Static \nStatic \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synleadingkeyword.html#StaticMember","title":"SynLeadingKeyword.StaticMember","content":"SynLeadingKeyword.StaticMember \nStaticMember \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synleadingkeyword.html#StaticMemberVal","title":"SynLeadingKeyword.StaticMemberVal","content":"SynLeadingKeyword.StaticMemberVal \nStaticMemberVal \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synleadingkeyword.html#StaticAbstract","title":"SynLeadingKeyword.StaticAbstract","content":"SynLeadingKeyword.StaticAbstract \nStaticAbstract \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synleadingkeyword.html#StaticAbstractMember","title":"SynLeadingKeyword.StaticAbstractMember","content":"SynLeadingKeyword.StaticAbstractMember \nStaticAbstractMember \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synleadingkeyword.html#StaticVal","title":"SynLeadingKeyword.StaticVal","content":"SynLeadingKeyword.StaticVal \nStaticVal \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synleadingkeyword.html#StaticLet","title":"SynLeadingKeyword.StaticLet","content":"SynLeadingKeyword.StaticLet \nStaticLet \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synleadingkeyword.html#StaticLetRec","title":"SynLeadingKeyword.StaticLetRec","content":"SynLeadingKeyword.StaticLetRec \nStaticLetRec \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synleadingkeyword.html#StaticDo","title":"SynLeadingKeyword.StaticDo","content":"SynLeadingKeyword.StaticDo \nStaticDo \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synleadingkeyword.html#Default","title":"SynLeadingKeyword.Default","content":"SynLeadingKeyword.Default \nDefault \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synleadingkeyword.html#DefaultVal","title":"SynLeadingKeyword.DefaultVal","content":"SynLeadingKeyword.DefaultVal \nDefaultVal \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synleadingkeyword.html#Val","title":"SynLeadingKeyword.Val","content":"SynLeadingKeyword.Val \nVal \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synleadingkeyword.html#New","title":"SynLeadingKeyword.New","content":"SynLeadingKeyword.New \nNew \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synleadingkeyword.html#Do","title":"SynLeadingKeyword.Do","content":"SynLeadingKeyword.Do \nDo \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synleadingkeyword.html#Synthetic","title":"SynLeadingKeyword.Synthetic","content":"SynLeadingKeyword.Synthetic \nSynthetic \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synmatchclausetrivia.html","title":"SynMatchClauseTrivia","content":"SynMatchClauseTrivia \n Represents additional information for SynMatchClause \nSynMatchClauseTrivia.Zero \nZero \nSynMatchClauseTrivia.ArrowRange \nArrowRange \nSynMatchClauseTrivia.BarRange \nBarRange","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synmatchclausetrivia.html#Zero","title":"SynMatchClauseTrivia.Zero","content":"SynMatchClauseTrivia.Zero \nZero \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synmatchclausetrivia.html#ArrowRange","title":"SynMatchClauseTrivia.ArrowRange","content":"SynMatchClauseTrivia.ArrowRange \nArrowRange \n The syntax range of the \u0060-\u003E\u0060 token.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synmatchclausetrivia.html#BarRange","title":"SynMatchClauseTrivia.BarRange","content":"SynMatchClauseTrivia.BarRange \nBarRange \n The syntax range of the \u0060|\u0060 token.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synmeasureconstanttrivia.html","title":"SynMeasureConstantTrivia","content":"SynMeasureConstantTrivia \n Represents additional information for SynConst.Measure \nSynMeasureConstantTrivia.LessRange \nLessRange \nSynMeasureConstantTrivia.GreaterRange \nGreaterRange","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synmeasureconstanttrivia.html#LessRange","title":"SynMeasureConstantTrivia.LessRange","content":"SynMeasureConstantTrivia.LessRange \nLessRange \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synmeasureconstanttrivia.html#GreaterRange","title":"SynMeasureConstantTrivia.GreaterRange","content":"SynMeasureConstantTrivia.GreaterRange \nGreaterRange \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synmemberdefnabstractslottrivia.html","title":"SynMemberDefnAbstractSlotTrivia","content":"SynMemberDefnAbstractSlotTrivia \n  Represents additional information for SynMemberDefn.AbstractSlot \nSynMemberDefnAbstractSlotTrivia.Zero \nZero \nSynMemberDefnAbstractSlotTrivia.GetSetKeywords \nGetSetKeywords","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synmemberdefnabstractslottrivia.html#Zero","title":"SynMemberDefnAbstractSlotTrivia.Zero","content":"SynMemberDefnAbstractSlotTrivia.Zero \nZero \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synmemberdefnabstractslottrivia.html#GetSetKeywords","title":"SynMemberDefnAbstractSlotTrivia.GetSetKeywords","content":"SynMemberDefnAbstractSlotTrivia.GetSetKeywords \nGetSetKeywords \n The syntax range of \u0027get, set\u0027","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synmemberdefnautopropertytrivia.html","title":"SynMemberDefnAutoPropertyTrivia","content":"SynMemberDefnAutoPropertyTrivia \n Represents additional information for SynMemberDefn.AutoProperty \nSynMemberDefnAutoPropertyTrivia.LeadingKeyword \nLeadingKeyword \nSynMemberDefnAutoPropertyTrivia.WithKeyword \nWithKeyword \nSynMemberDefnAutoPropertyTrivia.EqualsRange \nEqualsRange \nSynMemberDefnAutoPropertyTrivia.GetSetKeywords \nGetSetKeywords","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synmemberdefnautopropertytrivia.html#LeadingKeyword","title":"SynMemberDefnAutoPropertyTrivia.LeadingKeyword","content":"SynMemberDefnAutoPropertyTrivia.LeadingKeyword \nLeadingKeyword \n Used leading keyword of AutoProperty","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synmemberdefnautopropertytrivia.html#WithKeyword","title":"SynMemberDefnAutoPropertyTrivia.WithKeyword","content":"SynMemberDefnAutoPropertyTrivia.WithKeyword \nWithKeyword \n The syntax range of the \u0060with\u0060 keyword","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synmemberdefnautopropertytrivia.html#EqualsRange","title":"SynMemberDefnAutoPropertyTrivia.EqualsRange","content":"SynMemberDefnAutoPropertyTrivia.EqualsRange \nEqualsRange \n The syntax range of the \u0060=\u0060 token","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synmemberdefnautopropertytrivia.html#GetSetKeywords","title":"SynMemberDefnAutoPropertyTrivia.GetSetKeywords","content":"SynMemberDefnAutoPropertyTrivia.GetSetKeywords \nGetSetKeywords \n The syntax range of \u0027get, set\u0027","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synmemberdefnimplicitctortrivia.html","title":"SynMemberDefnImplicitCtorTrivia","content":"SynMemberDefnImplicitCtorTrivia \n Represents additional information for SynMemberDefn.ImplicitCtor \nSynMemberDefnImplicitCtorTrivia.AsKeyword \nAsKeyword","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synmemberdefnimplicitctortrivia.html#AsKeyword","title":"SynMemberDefnImplicitCtorTrivia.AsKeyword","content":"SynMemberDefnImplicitCtorTrivia.AsKeyword \nAsKeyword \n The syntax range of the \u0060as\u0060 keyword","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synmemberdefninherittrivia.html","title":"SynMemberDefnInheritTrivia","content":"SynMemberDefnInheritTrivia \n Represents additional information for SynMemberDefn.Inherit \nSynMemberDefnInheritTrivia.InheritKeyword \nInheritKeyword","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synmemberdefninherittrivia.html#InheritKeyword","title":"SynMemberDefnInheritTrivia.InheritKeyword","content":"SynMemberDefnInheritTrivia.InheritKeyword \nInheritKeyword \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synmembergetsettrivia.html","title":"SynMemberGetSetTrivia","content":"SynMemberGetSetTrivia \n Represents additional information for SynMemberDefn.GetSetMember \nSynMemberGetSetTrivia.InlineKeyword \nInlineKeyword \nSynMemberGetSetTrivia.WithKeyword \nWithKeyword \nSynMemberGetSetTrivia.GetKeyword \nGetKeyword \nSynMemberGetSetTrivia.AndKeyword \nAndKeyword \nSynMemberGetSetTrivia.SetKeyword \nSetKeyword","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synmembergetsettrivia.html#InlineKeyword","title":"SynMemberGetSetTrivia.InlineKeyword","content":"SynMemberGetSetTrivia.InlineKeyword \nInlineKeyword \n The syntax range of the \u0060inline\u0060 keyword","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synmembergetsettrivia.html#WithKeyword","title":"SynMemberGetSetTrivia.WithKeyword","content":"SynMemberGetSetTrivia.WithKeyword \nWithKeyword \n The syntax range of the \u0060with\u0060 keyword","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synmembergetsettrivia.html#GetKeyword","title":"SynMemberGetSetTrivia.GetKeyword","content":"SynMemberGetSetTrivia.GetKeyword \nGetKeyword \n The syntax range of the \u0060get\u0060 keyword","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synmembergetsettrivia.html#AndKeyword","title":"SynMemberGetSetTrivia.AndKeyword","content":"SynMemberGetSetTrivia.AndKeyword \nAndKeyword \n The syntax range of the \u0060and\u0060 keyword","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synmembergetsettrivia.html#SetKeyword","title":"SynMemberGetSetTrivia.SetKeyword","content":"SynMemberGetSetTrivia.SetKeyword \nSetKeyword \n The syntax range of the \u0060set\u0060 keyword","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synmembersigmembertrivia.html","title":"SynMemberSigMemberTrivia","content":"SynMemberSigMemberTrivia \n Represents additional information for SynMemberSig.Member \nSynMemberSigMemberTrivia.Zero \nZero \nSynMemberSigMemberTrivia.GetSetKeywords \nGetSetKeywords","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synmembersigmembertrivia.html#Zero","title":"SynMemberSigMemberTrivia.Zero","content":"SynMemberSigMemberTrivia.Zero \nZero \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synmembersigmembertrivia.html#GetSetKeywords","title":"SynMemberSigMemberTrivia.GetSetKeywords","content":"SynMemberSigMemberTrivia.GetSetKeywords \nGetSetKeywords \n The syntax range of \u0027get, set\u0027","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synmoduledeclnestedmoduletrivia.html","title":"SynModuleDeclNestedModuleTrivia","content":"SynModuleDeclNestedModuleTrivia \n Represents additional information for SynModuleDecl.NestedModule \nSynModuleDeclNestedModuleTrivia.Zero \nZero \nSynModuleDeclNestedModuleTrivia.ModuleKeyword \nModuleKeyword \nSynModuleDeclNestedModuleTrivia.EqualsRange \nEqualsRange","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synmoduledeclnestedmoduletrivia.html#Zero","title":"SynModuleDeclNestedModuleTrivia.Zero","content":"SynModuleDeclNestedModuleTrivia.Zero \nZero \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synmoduledeclnestedmoduletrivia.html#ModuleKeyword","title":"SynModuleDeclNestedModuleTrivia.ModuleKeyword","content":"SynModuleDeclNestedModuleTrivia.ModuleKeyword \nModuleKeyword \n The syntax range of the \u0060module\u0060 keyword","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synmoduledeclnestedmoduletrivia.html#EqualsRange","title":"SynModuleDeclNestedModuleTrivia.EqualsRange","content":"SynModuleDeclNestedModuleTrivia.EqualsRange \nEqualsRange \n The syntax range of the \u0060=\u0060 token.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synmoduleornamespaceleadingkeyword.html","title":"SynModuleOrNamespaceLeadingKeyword","content":"SynModuleOrNamespaceLeadingKeyword \n Represents the leading keyword in a SynModuleOrNamespace or SynModuleOrNamespaceSig \nSynModuleOrNamespaceLeadingKeyword.IsNone \nIsNone \nSynModuleOrNamespaceLeadingKeyword.IsNamespace \nIsNamespace \nSynModuleOrNamespaceLeadingKeyword.IsModule \nIsModule \nSynModuleOrNamespaceLeadingKeyword.Module \nModule \nSynModuleOrNamespaceLeadingKeyword.Namespace \nNamespace \nSynModuleOrNamespaceLeadingKeyword.None \nNone","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synmoduleornamespaceleadingkeyword.html#IsNone","title":"SynModuleOrNamespaceLeadingKeyword.IsNone","content":"SynModuleOrNamespaceLeadingKeyword.IsNone \nIsNone \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synmoduleornamespaceleadingkeyword.html#IsNamespace","title":"SynModuleOrNamespaceLeadingKeyword.IsNamespace","content":"SynModuleOrNamespaceLeadingKeyword.IsNamespace \nIsNamespace \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synmoduleornamespaceleadingkeyword.html#IsModule","title":"SynModuleOrNamespaceLeadingKeyword.IsModule","content":"SynModuleOrNamespaceLeadingKeyword.IsModule \nIsModule \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synmoduleornamespaceleadingkeyword.html#Module","title":"SynModuleOrNamespaceLeadingKeyword.Module","content":"SynModuleOrNamespaceLeadingKeyword.Module \nModule \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synmoduleornamespaceleadingkeyword.html#Namespace","title":"SynModuleOrNamespaceLeadingKeyword.Namespace","content":"SynModuleOrNamespaceLeadingKeyword.Namespace \nNamespace \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synmoduleornamespaceleadingkeyword.html#None","title":"SynModuleOrNamespaceLeadingKeyword.None","content":"SynModuleOrNamespaceLeadingKeyword.None \nNone \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synmoduleornamespacesigtrivia.html","title":"SynModuleOrNamespaceSigTrivia","content":"SynModuleOrNamespaceSigTrivia \n Represents additional information for SynModuleOrNamespaceSig \nSynModuleOrNamespaceSigTrivia.LeadingKeyword \nLeadingKeyword","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synmoduleornamespacesigtrivia.html#LeadingKeyword","title":"SynModuleOrNamespaceSigTrivia.LeadingKeyword","content":"SynModuleOrNamespaceSigTrivia.LeadingKeyword \nLeadingKeyword \n The syntax range of the \u0060module\u0060 or \u0060namespace\u0060 keyword","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synmoduleornamespacetrivia.html","title":"SynModuleOrNamespaceTrivia","content":"SynModuleOrNamespaceTrivia \n Represents additional information for SynModuleOrNamespace \nSynModuleOrNamespaceTrivia.LeadingKeyword \nLeadingKeyword","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synmoduleornamespacetrivia.html#LeadingKeyword","title":"SynModuleOrNamespaceTrivia.LeadingKeyword","content":"SynModuleOrNamespaceTrivia.LeadingKeyword \nLeadingKeyword \n The syntax range of the \u0060module\u0060 or \u0060namespace\u0060 keyword","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synmodulesigdeclnestedmoduletrivia.html","title":"SynModuleSigDeclNestedModuleTrivia","content":"SynModuleSigDeclNestedModuleTrivia \n Represents additional information for SynModuleSigDecl.NestedModule \nSynModuleSigDeclNestedModuleTrivia.Zero \nZero \nSynModuleSigDeclNestedModuleTrivia.ModuleKeyword \nModuleKeyword \nSynModuleSigDeclNestedModuleTrivia.EqualsRange \nEqualsRange","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synmodulesigdeclnestedmoduletrivia.html#Zero","title":"SynModuleSigDeclNestedModuleTrivia.Zero","content":"SynModuleSigDeclNestedModuleTrivia.Zero \nZero \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synmodulesigdeclnestedmoduletrivia.html#ModuleKeyword","title":"SynModuleSigDeclNestedModuleTrivia.ModuleKeyword","content":"SynModuleSigDeclNestedModuleTrivia.ModuleKeyword \nModuleKeyword \n The syntax range of the \u0060module\u0060 keyword","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synmodulesigdeclnestedmoduletrivia.html#EqualsRange","title":"SynModuleSigDeclNestedModuleTrivia.EqualsRange","content":"SynModuleSigDeclNestedModuleTrivia.EqualsRange \nEqualsRange \n The syntax range of the \u0060=\u0060 token.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synpatlistconstrivia.html","title":"SynPatListConsTrivia","content":"SynPatListConsTrivia \n Represents additional information for SynPat.Cons \nSynPatListConsTrivia.ColonColonRange \nColonColonRange","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synpatlistconstrivia.html#ColonColonRange","title":"SynPatListConsTrivia.ColonColonRange","content":"SynPatListConsTrivia.ColonColonRange \nColonColonRange \n The syntax range of the \u0060::\u0060 token.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synpatortrivia.html","title":"SynPatOrTrivia","content":"SynPatOrTrivia \n Represents additional information for SynPat.Or \nSynPatOrTrivia.BarRange \nBarRange","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synpatortrivia.html#BarRange","title":"SynPatOrTrivia.BarRange","content":"SynPatOrTrivia.BarRange \nBarRange \n The syntax range of the \u0060|\u0060 token.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-syntypardecltrivia.html","title":"SynTyparDeclTrivia","content":"SynTyparDeclTrivia \n Represents additional information for SynTyparDecl \nSynTyparDeclTrivia.Zero \nZero \nSynTyparDeclTrivia.AmpersandRanges \nAmpersandRanges","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-syntypardecltrivia.html#Zero","title":"SynTyparDeclTrivia.Zero","content":"SynTyparDeclTrivia.Zero \nZero \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-syntypardecltrivia.html#AmpersandRanges","title":"SynTyparDeclTrivia.AmpersandRanges","content":"SynTyparDeclTrivia.AmpersandRanges \nAmpersandRanges \n The syntax ranges of the \u0060\u0026\u0060 tokens","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-syntypeconstraintwheretyparnotsupportsnulltrivia.html","title":"SynTypeConstraintWhereTyparNotSupportsNullTrivia","content":"SynTypeConstraintWhereTyparNotSupportsNullTrivia \n Represents additional information for SynTypeConstraint.WhereTyparNotSupportsNull \nSynTypeConstraintWhereTyparNotSupportsNullTrivia.ColonRange \nColonRange \nSynTypeConstraintWhereTyparNotSupportsNullTrivia.NotRange \nNotRange","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-syntypeconstraintwheretyparnotsupportsnulltrivia.html#ColonRange","title":"SynTypeConstraintWhereTyparNotSupportsNullTrivia.ColonRange","content":"SynTypeConstraintWhereTyparNotSupportsNullTrivia.ColonRange \nColonRange \n The syntax range of \u0060:\u0060","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-syntypeconstraintwheretyparnotsupportsnulltrivia.html#NotRange","title":"SynTypeConstraintWhereTyparNotSupportsNullTrivia.NotRange","content":"SynTypeConstraintWhereTyparNotSupportsNullTrivia.NotRange \nNotRange \n The syntax range of \u0060not\u0060","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-syntypedefnleadingkeyword.html","title":"SynTypeDefnLeadingKeyword","content":"SynTypeDefnLeadingKeyword \n Represents the leading keyword in a SynTypeDefn or SynTypeDefnSig \nSynTypeDefnLeadingKeyword.IsType \nIsType \nSynTypeDefnLeadingKeyword.Range \nRange \nSynTypeDefnLeadingKeyword.IsSynthetic \nIsSynthetic \nSynTypeDefnLeadingKeyword.IsAnd \nIsAnd \nSynTypeDefnLeadingKeyword.IsStaticType \nIsStaticType \nSynTypeDefnLeadingKeyword.Type \nType \nSynTypeDefnLeadingKeyword.And \nAnd \nSynTypeDefnLeadingKeyword.StaticType \nStaticType \nSynTypeDefnLeadingKeyword.Synthetic \nSynthetic","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-syntypedefnleadingkeyword.html#IsType","title":"SynTypeDefnLeadingKeyword.IsType","content":"SynTypeDefnLeadingKeyword.IsType \nIsType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-syntypedefnleadingkeyword.html#Range","title":"SynTypeDefnLeadingKeyword.Range","content":"SynTypeDefnLeadingKeyword.Range \nRange \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-syntypedefnleadingkeyword.html#IsSynthetic","title":"SynTypeDefnLeadingKeyword.IsSynthetic","content":"SynTypeDefnLeadingKeyword.IsSynthetic \nIsSynthetic \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-syntypedefnleadingkeyword.html#IsAnd","title":"SynTypeDefnLeadingKeyword.IsAnd","content":"SynTypeDefnLeadingKeyword.IsAnd \nIsAnd \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-syntypedefnleadingkeyword.html#IsStaticType","title":"SynTypeDefnLeadingKeyword.IsStaticType","content":"SynTypeDefnLeadingKeyword.IsStaticType \nIsStaticType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-syntypedefnleadingkeyword.html#Type","title":"SynTypeDefnLeadingKeyword.Type","content":"SynTypeDefnLeadingKeyword.Type \nType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-syntypedefnleadingkeyword.html#And","title":"SynTypeDefnLeadingKeyword.And","content":"SynTypeDefnLeadingKeyword.And \nAnd \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-syntypedefnleadingkeyword.html#StaticType","title":"SynTypeDefnLeadingKeyword.StaticType","content":"SynTypeDefnLeadingKeyword.StaticType \nStaticType \n Can happen in SynMemberDefn.NestedType or SynMemberSig.NestedType","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-syntypedefnleadingkeyword.html#Synthetic","title":"SynTypeDefnLeadingKeyword.Synthetic","content":"SynTypeDefnLeadingKeyword.Synthetic \nSynthetic \n Produced during type checking, should not be used in actual parsed trees.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-syntypedefnsigtrivia.html","title":"SynTypeDefnSigTrivia","content":"SynTypeDefnSigTrivia \n Represents additional information for SynTypeDefnSig \nSynTypeDefnSigTrivia.Zero \nZero \nSynTypeDefnSigTrivia.LeadingKeyword \nLeadingKeyword \nSynTypeDefnSigTrivia.EqualsRange \nEqualsRange \nSynTypeDefnSigTrivia.WithKeyword \nWithKeyword","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-syntypedefnsigtrivia.html#Zero","title":"SynTypeDefnSigTrivia.Zero","content":"SynTypeDefnSigTrivia.Zero \nZero \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-syntypedefnsigtrivia.html#LeadingKeyword","title":"SynTypeDefnSigTrivia.LeadingKeyword","content":"SynTypeDefnSigTrivia.LeadingKeyword \nLeadingKeyword \n The syntax range of the \u0060type\u0060 or \u0060and\u0060 keyword.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-syntypedefnsigtrivia.html#EqualsRange","title":"SynTypeDefnSigTrivia.EqualsRange","content":"SynTypeDefnSigTrivia.EqualsRange \nEqualsRange \n The syntax range of the \u0060=\u0060 token.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-syntypedefnsigtrivia.html#WithKeyword","title":"SynTypeDefnSigTrivia.WithKeyword","content":"SynTypeDefnSigTrivia.WithKeyword \nWithKeyword \n The syntax range of the \u0060with\u0060 keyword","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-syntypedefntrivia.html","title":"SynTypeDefnTrivia","content":"SynTypeDefnTrivia \n Represents additional information for SynTypeDefn \nSynTypeDefnTrivia.Zero \nZero \nSynTypeDefnTrivia.LeadingKeyword \nLeadingKeyword \nSynTypeDefnTrivia.EqualsRange \nEqualsRange \nSynTypeDefnTrivia.WithKeyword \nWithKeyword","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-syntypedefntrivia.html#Zero","title":"SynTypeDefnTrivia.Zero","content":"SynTypeDefnTrivia.Zero \nZero \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-syntypedefntrivia.html#LeadingKeyword","title":"SynTypeDefnTrivia.LeadingKeyword","content":"SynTypeDefnTrivia.LeadingKeyword \nLeadingKeyword \n The syntax range of the \u0060type\u0060 or \u0060and\u0060 keyword.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-syntypedefntrivia.html#EqualsRange","title":"SynTypeDefnTrivia.EqualsRange","content":"SynTypeDefnTrivia.EqualsRange \nEqualsRange \n The syntax range of the \u0060=\u0060 token.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-syntypedefntrivia.html#WithKeyword","title":"SynTypeDefnTrivia.WithKeyword","content":"SynTypeDefnTrivia.WithKeyword \nWithKeyword \n The syntax range of the \u0060with\u0060 keyword","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-syntypefuntrivia.html","title":"SynTypeFunTrivia","content":"SynTypeFunTrivia \n Represents additional information for SynType.Fun \nSynTypeFunTrivia.ArrowRange \nArrowRange","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-syntypefuntrivia.html#ArrowRange","title":"SynTypeFunTrivia.ArrowRange","content":"SynTypeFunTrivia.ArrowRange \nArrowRange \n The syntax range of the \u0060-\u003E\u0060 token.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-syntypeortrivia.html","title":"SynTypeOrTrivia","content":"SynTypeOrTrivia \n Represents additional information for SynType.Or \nSynTypeOrTrivia.OrKeyword \nOrKeyword","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-syntypeortrivia.html#OrKeyword","title":"SynTypeOrTrivia.OrKeyword","content":"SynTypeOrTrivia.OrKeyword \nOrKeyword \n The syntax range of the \u0060or\u0060 keyword","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-syntypewithnulltrivia.html","title":"SynTypeWithNullTrivia","content":"SynTypeWithNullTrivia \n Represents additional information for SynType.WithNull \nSynTypeWithNullTrivia.BarRange \nBarRange","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-syntypewithnulltrivia.html#BarRange","title":"SynTypeWithNullTrivia.BarRange","content":"SynTypeWithNullTrivia.BarRange \nBarRange \n The syntax range of the \u0060|\u0060 token","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synunioncasetrivia.html","title":"SynUnionCaseTrivia","content":"SynUnionCaseTrivia \n Represents additional information for SynUnionCase \nSynUnionCaseTrivia.BarRange \nBarRange","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synunioncasetrivia.html#BarRange","title":"SynUnionCaseTrivia.BarRange","content":"SynUnionCaseTrivia.BarRange \nBarRange \n The syntax range of the \u0060|\u0060 token.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synvalsigtrivia.html","title":"SynValSigTrivia","content":"SynValSigTrivia \n Represents additional information for SynValSig \nSynValSigTrivia.Zero \nZero \nSynValSigTrivia.LeadingKeyword \nLeadingKeyword \nSynValSigTrivia.InlineKeyword \nInlineKeyword \nSynValSigTrivia.WithKeyword \nWithKeyword \nSynValSigTrivia.EqualsRange \nEqualsRange","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synvalsigtrivia.html#Zero","title":"SynValSigTrivia.Zero","content":"SynValSigTrivia.Zero \nZero \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synvalsigtrivia.html#LeadingKeyword","title":"SynValSigTrivia.LeadingKeyword","content":"SynValSigTrivia.LeadingKeyword \nLeadingKeyword \n Used leading keyword of SynValSig\n In most cases this will be \u0060val\u0060,\n but in case of \u0060SynMemberDefn.AutoProperty\u0060 or \u0060SynMemberDefn.AbstractSlot\u0060 it could be something else.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synvalsigtrivia.html#InlineKeyword","title":"SynValSigTrivia.InlineKeyword","content":"SynValSigTrivia.InlineKeyword \nInlineKeyword \n The syntax range of the \u0060inline\u0060 keyword","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synvalsigtrivia.html#WithKeyword","title":"SynValSigTrivia.WithKeyword","content":"SynValSigTrivia.WithKeyword \nWithKeyword \n The syntax range of the \u0060with\u0060 keyword","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-synvalsigtrivia.html#EqualsRange","title":"SynValSigTrivia.EqualsRange","content":"SynValSigTrivia.EqualsRange \nEqualsRange \n The syntax range of the \u0060=\u0060 token.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-warndirectivetrivia.html","title":"WarnDirectiveTrivia","content":"WarnDirectiveTrivia \n \nWarnDirectiveTrivia.IsWarnon \nIsWarnon \nWarnDirectiveTrivia.IsNowarn \nIsNowarn \nWarnDirectiveTrivia.Nowarn \nNowarn \nWarnDirectiveTrivia.Warnon \nWarnon","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-warndirectivetrivia.html#IsWarnon","title":"WarnDirectiveTrivia.IsWarnon","content":"WarnDirectiveTrivia.IsWarnon \nIsWarnon \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-warndirectivetrivia.html#IsNowarn","title":"WarnDirectiveTrivia.IsNowarn","content":"WarnDirectiveTrivia.IsNowarn \nIsNowarn \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-warndirectivetrivia.html#Nowarn","title":"WarnDirectiveTrivia.Nowarn","content":"WarnDirectiveTrivia.Nowarn \nNowarn \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntaxtrivia-warndirectivetrivia.html#Warnon","title":"WarnDirectiveTrivia.Warnon","content":"WarnDirectiveTrivia.Warnon \nWarnon \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-line.html","title":"Line","content":"Line \n Functions related to converting between lines indexed at 0 and 1 \nLine.fromZ \nfromZ \nLine.toZ \ntoZ","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-line.html#fromZ","title":"Line.fromZ","content":"Line.fromZ \nfromZ \n Convert a line number from zero-based line counting (used by Visual Studio) to one-based line counting (used internally in the F# compiler and in F# error messages)","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-line.html#toZ","title":"Line.toZ","content":"Line.toZ \ntoZ \n Convert a line number from one-based line counting (used internally in the F# compiler and in F# error messages) to zero-based line counting (used by Visual Studio)","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-positionmodule.html","title":"Position","content":"Position \n \nPosition.mkPos \nmkPos \nPosition.posLt \nposLt \nPosition.posGt \nposGt \nPosition.posEq \nposEq \nPosition.posGeq \nposGeq \nPosition.fromZ \nfromZ \nPosition.toZ \ntoZ \nPosition.outputPos \noutputPos \nPosition.stringOfPos \nstringOfPos \nPosition.pos0 \npos0","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-positionmodule.html#mkPos","title":"Position.mkPos","content":"Position.mkPos \nmkPos \n Create a position for the given line and column","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-positionmodule.html#posLt","title":"Position.posLt","content":"Position.posLt \nposLt \n Compare positions for less-than","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-positionmodule.html#posGt","title":"Position.posGt","content":"Position.posGt \nposGt \n Compare positions for greater-than","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-positionmodule.html#posEq","title":"Position.posEq","content":"Position.posEq \nposEq \n Compare positions for equality","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-positionmodule.html#posGeq","title":"Position.posGeq","content":"Position.posGeq \nposGeq \n Compare positions for greater-than-or-equal-to","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-positionmodule.html#fromZ","title":"Position.fromZ","content":"Position.fromZ \nfromZ \n Convert a position from zero-based line counting (used by Visual Studio) to one-based line counting (used internally in the F# compiler and in F# error messages)","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-positionmodule.html#toZ","title":"Position.toZ","content":"Position.toZ \ntoZ \n Convert a position from one-based line counting (used internally in the F# compiler and in F# error messages) to zero-based line counting (used by Visual Studio)","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-positionmodule.html#outputPos","title":"Position.outputPos","content":"Position.outputPos \noutputPos \n Output a position","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-positionmodule.html#stringOfPos","title":"Position.stringOfPos","content":"Position.stringOfPos \nstringOfPos \n Convert a position to a string","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-positionmodule.html#pos0","title":"Position.pos0","content":"Position.pos0 \npos0 \n The zero position","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-rangemodule.html","title":"Range","content":"Range \n \nRange.posOrder \nposOrder \nRange.mkFileIndexRange \nmkFileIndexRange \nRange.mkRange \nmkRange \nRange.mkFirstLineOfFile \nmkFirstLineOfFile \nRange.equals \nequals \nRange.trimRangeToLine \ntrimRangeToLine \nRange.rangeOrder \nrangeOrder \nRange.outputRange \noutputRange \nRange.unionRanges \nunionRanges \nRange.withStartEnd \nwithStartEnd \nRange.withStart \nwithStart \nRange.withEnd \nwithEnd \nRange.shiftStart \nshiftStart \nRange.shiftEnd \nshiftEnd \nRange.rangeContainsRange \nrangeContainsRange \nRange.rangeContainsPos \nrangeContainsPos \nRange.rangeBeforePos \nrangeBeforePos \nRange.rangeN \nrangeN \nRange.range0 \nrange0 \nRange.rangeStartup \nrangeStartup \nRange.rangeCmdArgs \nrangeCmdArgs \nRange.stringOfRange \nstringOfRange \nRange.toZ \ntoZ \nRange.toFileZ \ntoFileZ \nRange.comparer \ncomparer","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-rangemodule.html#posOrder","title":"Range.posOrder","content":"Range.posOrder \nposOrder \n Ordering on positions","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-rangemodule.html#mkFileIndexRange","title":"Range.mkFileIndexRange","content":"Range.mkFileIndexRange \nmkFileIndexRange \n This view of range marks uses file indexes explicitly","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-rangemodule.html#mkRange","title":"Range.mkRange","content":"Range.mkRange \nmkRange \n This view hides the use of file indexes and just uses filenames","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-rangemodule.html#mkFirstLineOfFile","title":"Range.mkFirstLineOfFile","content":"Range.mkFirstLineOfFile \nmkFirstLineOfFile \n Make a range for the first non-whitespace line of the file if any. Otherwise use line 1 chars 0-80.\n This involves reading the file.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-rangemodule.html#equals","title":"Range.equals","content":"Range.equals \nequals \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-rangemodule.html#trimRangeToLine","title":"Range.trimRangeToLine","content":"Range.trimRangeToLine \ntrimRangeToLine \n Reduce a range so it only covers a line","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-rangemodule.html#rangeOrder","title":"Range.rangeOrder","content":"Range.rangeOrder \nrangeOrder \n Order ranges (file, then start pos, then end pos)","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-rangemodule.html#outputRange","title":"Range.outputRange","content":"Range.outputRange \noutputRange \n Output a range","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-rangemodule.html#unionRanges","title":"Range.unionRanges","content":"Range.unionRanges \nunionRanges \n Union two ranges, taking their first occurring start position and last occurring end position","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-rangemodule.html#withStartEnd","title":"Range.withStartEnd","content":"Range.withStartEnd \nwithStartEnd \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-rangemodule.html#withStart","title":"Range.withStart","content":"Range.withStart \nwithStart \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-rangemodule.html#withEnd","title":"Range.withEnd","content":"Range.withEnd \nwithEnd \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-rangemodule.html#shiftStart","title":"Range.shiftStart","content":"Range.shiftStart \nshiftStart \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-rangemodule.html#shiftEnd","title":"Range.shiftEnd","content":"Range.shiftEnd \nshiftEnd \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-rangemodule.html#rangeContainsRange","title":"Range.rangeContainsRange","content":"Range.rangeContainsRange \nrangeContainsRange \n Test to see if one range contains another range","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-rangemodule.html#rangeContainsPos","title":"Range.rangeContainsPos","content":"Range.rangeContainsPos \nrangeContainsPos \n Test to see if a range contains a position","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-rangemodule.html#rangeBeforePos","title":"Range.rangeBeforePos","content":"Range.rangeBeforePos \nrangeBeforePos \n Test to see if a range occurs fully before a position","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-rangemodule.html#rangeN","title":"Range.rangeN","content":"Range.rangeN \nrangeN \n Make a dummy range for a file","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-rangemodule.html#range0","title":"Range.range0","content":"Range.range0 \nrange0 \n The zero range","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-rangemodule.html#rangeStartup","title":"Range.rangeStartup","content":"Range.rangeStartup \nrangeStartup \n A range associated with a dummy file called \u0022startup\u0022","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-rangemodule.html#rangeCmdArgs","title":"Range.rangeCmdArgs","content":"Range.rangeCmdArgs \nrangeCmdArgs \n A range associated with a dummy file for the command line arguments","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-rangemodule.html#stringOfRange","title":"Range.stringOfRange","content":"Range.stringOfRange \nstringOfRange \n Convert a range to a string","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-rangemodule.html#toZ","title":"Range.toZ","content":"Range.toZ \ntoZ \n Convert a range from one-based line counting (used internally in the F# compiler and in F# error messages) to zero-based line counting (used by Visual Studio)","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-rangemodule.html#toFileZ","title":"Range.toFileZ","content":"Range.toFileZ \ntoFileZ \n Convert a range from one-based line counting (used internally in the F# compiler and in F# error messages) to zero-based line counting (used by Visual Studio)","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-rangemodule.html#comparer","title":"Range.comparer","content":"Range.comparer \ncomparer \n Equality comparer for range.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-sourcetext.html","title":"SourceText","content":"SourceText \n Functions related to ISourceText objects \nSourceText.ofString \nofString","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-sourcetext.html#ofString","title":"SourceText.ofString","content":"SourceText.ofString \nofString \n Creates an ISourceText object from the given string","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-sourcetextnew.html","title":"SourceTextNew","content":"SourceTextNew \n \nSourceTextNew.ofString \nofString \nSourceTextNew.ofISourceText \nofISourceText","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-sourcetextnew.html#ofString","title":"SourceTextNew.ofString","content":"SourceTextNew.ofString \nofString \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-sourcetextnew.html#ofISourceText","title":"SourceTextNew.ofISourceText","content":"SourceTextNew.ofISourceText \nofISourceText \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-taggedtextmodule.html","title":"TaggedText","content":"TaggedText \n \nTaggedText.tagText \ntagText \nTaggedText.tagClass \ntagClass \nTaggedText.comma \ncomma \nTaggedText.tagNamespace \ntagNamespace \nTaggedText.tagParameter \ntagParameter \nTaggedText.tagSpace \ntagSpace \nTaggedText.dot \ndot \nTaggedText.colon \ncolon \nTaggedText.minus \nminus \nTaggedText.lineBreak \nlineBreak \nTaggedText.space \nspace","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-taggedtextmodule.html#tagText","title":"TaggedText.tagText","content":"TaggedText.tagText \ntagText \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-taggedtextmodule.html#tagClass","title":"TaggedText.tagClass","content":"TaggedText.tagClass \ntagClass \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-taggedtextmodule.html#comma","title":"TaggedText.comma","content":"TaggedText.comma \ncomma \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-taggedtextmodule.html#tagNamespace","title":"TaggedText.tagNamespace","content":"TaggedText.tagNamespace \ntagNamespace \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-taggedtextmodule.html#tagParameter","title":"TaggedText.tagParameter","content":"TaggedText.tagParameter \ntagParameter \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-taggedtextmodule.html#tagSpace","title":"TaggedText.tagSpace","content":"TaggedText.tagSpace \ntagSpace \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-taggedtextmodule.html#dot","title":"TaggedText.dot","content":"TaggedText.dot \ndot \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-taggedtextmodule.html#colon","title":"TaggedText.colon","content":"TaggedText.colon \ncolon \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-taggedtextmodule.html#minus","title":"TaggedText.minus","content":"TaggedText.minus \nminus \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-taggedtextmodule.html#lineBreak","title":"TaggedText.lineBreak","content":"TaggedText.lineBreak \nlineBreak \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-taggedtextmodule.html#space","title":"TaggedText.space","content":"TaggedText.space \nspace \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-isourcetext.html","title":"ISourceText","content":"ISourceText \n Represents an input to the F# compiler \nISourceText.ContentEquals \nContentEquals \nISourceText.CopyTo \nCopyTo \nISourceText.GetLastCharacterPosition \nGetLastCharacterPosition \nISourceText.GetLineCount \nGetLineCount \nISourceText.GetLineString \nGetLineString \nISourceText.GetSubTextFromRange \nGetSubTextFromRange \nISourceText.GetSubTextString \nGetSubTextString \nISourceText.SubTextEquals \nSubTextEquals \nISourceText.Item \nItem \nISourceText.Length \nLength","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-isourcetext.html#ContentEquals","title":"ISourceText.ContentEquals","content":"ISourceText.ContentEquals \nContentEquals \n Checks if one input is equal to another","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-isourcetext.html#CopyTo","title":"ISourceText.CopyTo","content":"ISourceText.CopyTo \nCopyTo \n Copies a section of the input to the given destination ad the given index","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-isourcetext.html#GetLastCharacterPosition","title":"ISourceText.GetLastCharacterPosition","content":"ISourceText.GetLastCharacterPosition \nGetLastCharacterPosition \n Gets the last character position in the input, returning line and column","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-isourcetext.html#GetLineCount","title":"ISourceText.GetLineCount","content":"ISourceText.GetLineCount \nGetLineCount \n Gets the count of lines in the input","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-isourcetext.html#GetLineString","title":"ISourceText.GetLineString","content":"ISourceText.GetLineString \nGetLineString \n Gets a line of an input by index","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-isourcetext.html#GetSubTextFromRange","title":"ISourceText.GetSubTextFromRange","content":"ISourceText.GetSubTextFromRange \nGetSubTextFromRange \n Gets a section of the input based on a given range.\n \u003Cexception cref=\u0022System.ArgumentException\u0022\u003EThrows an exception when the input range is outside the file boundaries.\u003C/exception\u003E","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-isourcetext.html#GetSubTextString","title":"ISourceText.GetSubTextString","content":"ISourceText.GetSubTextString \nGetSubTextString \n Gets a section of the input","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-isourcetext.html#SubTextEquals","title":"ISourceText.SubTextEquals","content":"ISourceText.SubTextEquals \nSubTextEquals \n Checks if a section of the input is equal to the given string","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-isourcetext.html#Item","title":"ISourceText.Item","content":"ISourceText.Item \nItem \n Gets a character in an input based on an index of characters from the start of the file","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-isourcetext.html#Length","title":"ISourceText.Length","content":"ISourceText.Length \nLength \n Gets the total length of the input in characters","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-isourcetextnew.html","title":"ISourceTextNew","content":"ISourceTextNew \n Just like ISourceText, but with a checksum. Added as a separate type to avoid breaking changes. \nISourceTextNew.GetChecksum \nGetChecksum","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-isourcetextnew.html#GetChecksum","title":"ISourceTextNew.GetChecksum","content":"ISourceTextNew.GetChecksum \nGetChecksum \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-line0.html","title":"Line0","content":"Line0 \n Represents a line number when using zero-based line counting (used by Visual Studio)","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-navigabletaggedtext.html","title":"NavigableTaggedText","content":"NavigableTaggedText \n An enhancement to TaggedText in the TaggedText layouts generated by FSharp.Compiler.Service \nNavigableTaggedText.Range \nRange","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-navigabletaggedtext.html#Range","title":"NavigableTaggedText.Range","content":"NavigableTaggedText.Range \nRange \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-position.html","title":"Position","content":"Position \n Represents a position in a file \nPosition.Line \nLine \nPosition.Column \nColumn","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-position.html#Line","title":"Position.Line","content":"Position.Line \nLine \n The line number for the position","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-position.html#Column","title":"Position.Column","content":"Position.Column \nColumn \n The column number for the position","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-range.html","title":"Range","content":"Range \n Represents a range within a file \nRange.ApplyLineDirectives \nApplyLineDirectives \nRange.EndLine \nEndLine \nRange.StartRange \nStartRange \nRange.Start \nStart \nRange.StartColumn \nStartColumn \nRange.End \nEnd \nRange.IsSynthetic \nIsSynthetic \nRange.StartLine \nStartLine \nRange.FileName \nFileName \nRange.EndRange \nEndRange \nRange.EndColumn \nEndColumn \nRange.Zero \nZero","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-range.html#ApplyLineDirectives","title":"Range.ApplyLineDirectives","content":"Range.ApplyLineDirectives \nApplyLineDirectives \n Apply the line directives to the range.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-range.html#EndLine","title":"Range.EndLine","content":"Range.EndLine \nEndLine \n The line number for the end position of the range","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-range.html#StartRange","title":"Range.StartRange","content":"Range.StartRange \nStartRange \n The empty range that is located at the start position of the range","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-range.html#Start","title":"Range.Start","content":"Range.Start \nStart \n The start position of the range","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-range.html#StartColumn","title":"Range.StartColumn","content":"Range.StartColumn \nStartColumn \n The start column of the range","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-range.html#End","title":"Range.End","content":"Range.End \nEnd \n The end position of the range","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-range.html#IsSynthetic","title":"Range.IsSynthetic","content":"Range.IsSynthetic \nIsSynthetic \n Synthetic marks ranges which are produced by intermediate compilation phases. This\n bit signifies that the range covers something that should not be visible to language\n service operations like dot-completion.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-range.html#StartLine","title":"Range.StartLine","content":"Range.StartLine \nStartLine \n The start line of the range","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-range.html#FileName","title":"Range.FileName","content":"Range.FileName \nFileName \n The file name for the file of the range","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-range.html#EndRange","title":"Range.EndRange","content":"Range.EndRange \nEndRange \n The empty range that is located at the end position of the range","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-range.html#EndColumn","title":"Range.EndColumn","content":"Range.EndColumn \nEndColumn \n The column number for the end position of the range","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-range.html#Zero","title":"Range.Zero","content":"Range.Zero \nZero \n The range where all values are zero","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-taggedtext.html","title":"TaggedText","content":"TaggedText \n Represents text with a tag \nTaggedText.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nTaggedText.Text \nText \nTaggedText.Tag \nTag","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-taggedtext.html#\u0060\u0060.ctor\u0060\u0060","title":"TaggedText.\u0060\u0060.ctor\u0060\u0060","content":"TaggedText.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n Creates text with a tag","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-taggedtext.html#Text","title":"TaggedText.Text","content":"TaggedText.Text \nText \n Gets the text","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-taggedtext.html#Tag","title":"TaggedText.Tag","content":"TaggedText.Tag \nTag \n Gets the tag","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html","title":"TextTag","content":"TextTag \n Represents the tag of some tagged text \nTextTag.IsActivePatternResult \nIsActivePatternResult \nTextTag.IsEvent \nIsEvent \nTextTag.IsMember \nIsMember \nTextTag.IsUnknownType \nIsUnknownType \nTextTag.IsActivePatternCase \nIsActivePatternCase \nTextTag.IsAlias \nIsAlias \nTextTag.IsEnum \nIsEnum \nTextTag.IsTypeParameter \nIsTypeParameter \nTextTag.IsNamespace \nIsNamespace \nTextTag.IsParameter \nIsParameter \nTextTag.IsClass \nIsClass \nTextTag.IsRecord \nIsRecord \nTextTag.IsUnion \nIsUnion \nTextTag.IsProperty \nIsProperty \nTextTag.IsOperator \nIsOperator \nTextTag.IsStruct \nIsStruct \nTextTag.IsDelegate \nIsDelegate \nTextTag.IsInterface \nIsInterface \nTextTag.IsUnknownEntity \nIsUnknownEntity \nTextTag.IsText \nIsText \nTextTag.IsField \nIsField \nTextTag.IsMethod \nIsMethod \nTextTag.IsRecordField \nIsRecordField \nTextTag.IsStringLiteral \nIsStringLiteral \nTextTag.IsLineBreak \nIsLineBreak \nTextTag.IsFunction \nIsFunction \nTextTag.IsSpace \nIsSpace \nTextTag.IsModule \nIsModule \nTextTag.IsLocal \nIsLocal \nTextTag.IsModuleBinding \nIsModuleBinding \nTextTag.IsPunctuation \nIsPunctuation \nTextTag.IsUnionCase \nIsUnionCase \nTextTag.IsNumericLiteral \nIsNumericLiteral \nTextTag.IsKeyword \nIsKeyword \nTextTag.ActivePatternCase \nActivePatternCase \nTextTag.ActivePatternResult \nActivePatternResult \nTextTag.Alias \nAlias \nTextTag.Class \nClass \nTextTag.Union \nUnion \nTextTag.UnionCase \nUnionCase \nTextTag.Delegate \nDelegate \nTextTag.Enum \nEnum \nTextTag.Event \nEvent \nTextTag.Field \nField \nTextTag.Interface \nInterface \nTextTag.Keyword \nKeyword \nTextTag.LineBreak \nLineBreak \nTextTag.Local \nLocal \nTextTag.Record \nRecord \nTextTag.RecordField \nRecordField \nTextTag.Method \nMethod \nTextTag.Member \nMember \nTextTag.ModuleBinding \nModuleBinding \nTextTag.Function \nFunction \nTextTag.Module \nModule \nTextTag.Namespace \nNamespace \nTextTag.NumericLiteral \nNumericLiteral \nTextTag.Operator \nOperator \nTextTag.Parameter \nParameter \nTextTag.Property \nProperty \nTextTag.Space \nSpace \nTextTag.StringLiteral \nStringLiteral \nTextTag.Struct \nStruct \nTextTag.TypeParameter \nTypeParameter \nTextTag.Text \nText \nTextTag.Punctuation \nPunctuation \nTextTag.UnknownType \nUnknownType \nTextTag.UnknownEntity \nUnknownEntity","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#IsActivePatternResult","title":"TextTag.IsActivePatternResult","content":"TextTag.IsActivePatternResult \nIsActivePatternResult \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#IsEvent","title":"TextTag.IsEvent","content":"TextTag.IsEvent \nIsEvent \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#IsMember","title":"TextTag.IsMember","content":"TextTag.IsMember \nIsMember \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#IsUnknownType","title":"TextTag.IsUnknownType","content":"TextTag.IsUnknownType \nIsUnknownType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#IsActivePatternCase","title":"TextTag.IsActivePatternCase","content":"TextTag.IsActivePatternCase \nIsActivePatternCase \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#IsAlias","title":"TextTag.IsAlias","content":"TextTag.IsAlias \nIsAlias \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#IsEnum","title":"TextTag.IsEnum","content":"TextTag.IsEnum \nIsEnum \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#IsTypeParameter","title":"TextTag.IsTypeParameter","content":"TextTag.IsTypeParameter \nIsTypeParameter \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#IsNamespace","title":"TextTag.IsNamespace","content":"TextTag.IsNamespace \nIsNamespace \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#IsParameter","title":"TextTag.IsParameter","content":"TextTag.IsParameter \nIsParameter \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#IsClass","title":"TextTag.IsClass","content":"TextTag.IsClass \nIsClass \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#IsRecord","title":"TextTag.IsRecord","content":"TextTag.IsRecord \nIsRecord \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#IsUnion","title":"TextTag.IsUnion","content":"TextTag.IsUnion \nIsUnion \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#IsProperty","title":"TextTag.IsProperty","content":"TextTag.IsProperty \nIsProperty \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#IsOperator","title":"TextTag.IsOperator","content":"TextTag.IsOperator \nIsOperator \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#IsStruct","title":"TextTag.IsStruct","content":"TextTag.IsStruct \nIsStruct \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#IsDelegate","title":"TextTag.IsDelegate","content":"TextTag.IsDelegate \nIsDelegate \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#IsInterface","title":"TextTag.IsInterface","content":"TextTag.IsInterface \nIsInterface \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#IsUnknownEntity","title":"TextTag.IsUnknownEntity","content":"TextTag.IsUnknownEntity \nIsUnknownEntity \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#IsText","title":"TextTag.IsText","content":"TextTag.IsText \nIsText \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#IsField","title":"TextTag.IsField","content":"TextTag.IsField \nIsField \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#IsMethod","title":"TextTag.IsMethod","content":"TextTag.IsMethod \nIsMethod \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#IsRecordField","title":"TextTag.IsRecordField","content":"TextTag.IsRecordField \nIsRecordField \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#IsStringLiteral","title":"TextTag.IsStringLiteral","content":"TextTag.IsStringLiteral \nIsStringLiteral \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#IsLineBreak","title":"TextTag.IsLineBreak","content":"TextTag.IsLineBreak \nIsLineBreak \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#IsFunction","title":"TextTag.IsFunction","content":"TextTag.IsFunction \nIsFunction \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#IsSpace","title":"TextTag.IsSpace","content":"TextTag.IsSpace \nIsSpace \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#IsModule","title":"TextTag.IsModule","content":"TextTag.IsModule \nIsModule \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#IsLocal","title":"TextTag.IsLocal","content":"TextTag.IsLocal \nIsLocal \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#IsModuleBinding","title":"TextTag.IsModuleBinding","content":"TextTag.IsModuleBinding \nIsModuleBinding \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#IsPunctuation","title":"TextTag.IsPunctuation","content":"TextTag.IsPunctuation \nIsPunctuation \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#IsUnionCase","title":"TextTag.IsUnionCase","content":"TextTag.IsUnionCase \nIsUnionCase \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#IsNumericLiteral","title":"TextTag.IsNumericLiteral","content":"TextTag.IsNumericLiteral \nIsNumericLiteral \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#IsKeyword","title":"TextTag.IsKeyword","content":"TextTag.IsKeyword \nIsKeyword \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#ActivePatternCase","title":"TextTag.ActivePatternCase","content":"TextTag.ActivePatternCase \nActivePatternCase \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#ActivePatternResult","title":"TextTag.ActivePatternResult","content":"TextTag.ActivePatternResult \nActivePatternResult \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#Alias","title":"TextTag.Alias","content":"TextTag.Alias \nAlias \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#Class","title":"TextTag.Class","content":"TextTag.Class \nClass \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#Union","title":"TextTag.Union","content":"TextTag.Union \nUnion \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#UnionCase","title":"TextTag.UnionCase","content":"TextTag.UnionCase \nUnionCase \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#Delegate","title":"TextTag.Delegate","content":"TextTag.Delegate \nDelegate \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#Enum","title":"TextTag.Enum","content":"TextTag.Enum \nEnum \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#Event","title":"TextTag.Event","content":"TextTag.Event \nEvent \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#Field","title":"TextTag.Field","content":"TextTag.Field \nField \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#Interface","title":"TextTag.Interface","content":"TextTag.Interface \nInterface \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#Keyword","title":"TextTag.Keyword","content":"TextTag.Keyword \nKeyword \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#LineBreak","title":"TextTag.LineBreak","content":"TextTag.LineBreak \nLineBreak \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#Local","title":"TextTag.Local","content":"TextTag.Local \nLocal \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#Record","title":"TextTag.Record","content":"TextTag.Record \nRecord \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#RecordField","title":"TextTag.RecordField","content":"TextTag.RecordField \nRecordField \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#Method","title":"TextTag.Method","content":"TextTag.Method \nMethod \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#Member","title":"TextTag.Member","content":"TextTag.Member \nMember \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#ModuleBinding","title":"TextTag.ModuleBinding","content":"TextTag.ModuleBinding \nModuleBinding \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#Function","title":"TextTag.Function","content":"TextTag.Function \nFunction \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#Module","title":"TextTag.Module","content":"TextTag.Module \nModule \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#Namespace","title":"TextTag.Namespace","content":"TextTag.Namespace \nNamespace \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#NumericLiteral","title":"TextTag.NumericLiteral","content":"TextTag.NumericLiteral \nNumericLiteral \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#Operator","title":"TextTag.Operator","content":"TextTag.Operator \nOperator \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#Parameter","title":"TextTag.Parameter","content":"TextTag.Parameter \nParameter \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#Property","title":"TextTag.Property","content":"TextTag.Property \nProperty \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#Space","title":"TextTag.Space","content":"TextTag.Space \nSpace \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#StringLiteral","title":"TextTag.StringLiteral","content":"TextTag.StringLiteral \nStringLiteral \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#Struct","title":"TextTag.Struct","content":"TextTag.Struct \nStruct \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#TypeParameter","title":"TextTag.TypeParameter","content":"TextTag.TypeParameter \nTypeParameter \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#Text","title":"TextTag.Text","content":"TextTag.Text \nText \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#Punctuation","title":"TextTag.Punctuation","content":"TextTag.Punctuation \nPunctuation \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#UnknownType","title":"TextTag.UnknownType","content":"TextTag.UnknownType \nUnknownType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#UnknownEntity","title":"TextTag.UnknownEntity","content":"TextTag.UnknownEntity \nUnknownEntity \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-pos.html","title":"pos","content":"pos \n Represents a position in a file \npos.Line \nLine \npos.Column \nColumn","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-pos.html#Line","title":"pos.Line","content":"pos.Line \nLine \n The line number for the position","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-pos.html#Column","title":"pos.Column","content":"pos.Column \nColumn \n The column number for the position","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-range-0.html","title":"range","content":"range \n Represents a range within a file \nrange.EndLine \nEndLine \nrange.StartRange \nStartRange \nrange.Start \nStart \nrange.StartColumn \nStartColumn \nrange.End \nEnd \nrange.IsSynthetic \nIsSynthetic \nrange.StartLine \nStartLine \nrange.FileName \nFileName \nrange.EndRange \nEndRange \nrange.EndColumn \nEndColumn \nrange.Zero \nZero","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-range-0.html#EndLine","title":"range.EndLine","content":"range.EndLine \nEndLine \n The line number for the end position of the range","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-range-0.html#StartRange","title":"range.StartRange","content":"range.StartRange \nStartRange \n The empty range that is located at the start position of the range","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-range-0.html#Start","title":"range.Start","content":"range.Start \nStart \n The start position of the range","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-range-0.html#StartColumn","title":"range.StartColumn","content":"range.StartColumn \nStartColumn \n The start column of the range","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-range-0.html#End","title":"range.End","content":"range.End \nEnd \n The end position of the range","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-range-0.html#IsSynthetic","title":"range.IsSynthetic","content":"range.IsSynthetic \nIsSynthetic \n Synthetic marks ranges which are produced by intermediate compilation phases. This\n bit signifies that the range covers something that should not be visible to language\n service operations like dot-completion.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-range-0.html#StartLine","title":"range.StartLine","content":"range.StartLine \nStartLine \n The start line of the range","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-range-0.html#FileName","title":"range.FileName","content":"range.FileName \nFileName \n The file name for the file of the range","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-range-0.html#EndRange","title":"range.EndRange","content":"range.EndRange \nEndRange \n The empty range that is located at the end position of the range","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-range-0.html#EndColumn","title":"range.EndColumn","content":"range.EndColumn \nEndColumn \n The column number for the end position of the range","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-range-0.html#Zero","title":"range.Zero","content":"range.Zero \nZero \n The range where all values are zero","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharpkeywords.html","title":"FSharpKeywords","content":"FSharpKeywords \n \nFSharpKeywords.NormalizeIdentifierBackticks \nNormalizeIdentifierBackticks \nFSharpKeywords.KeywordsWithDescription \nKeywordsWithDescription \nFSharpKeywords.KeywordNames \nKeywordNames","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharpkeywords.html#NormalizeIdentifierBackticks","title":"FSharpKeywords.NormalizeIdentifierBackticks","content":"FSharpKeywords.NormalizeIdentifierBackticks \nNormalizeIdentifierBackticks \n Add backticks if the identifier is a keyword.\n Remove backticks if present and not needed.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharpkeywords.html#KeywordsWithDescription","title":"FSharpKeywords.KeywordsWithDescription","content":"FSharpKeywords.KeywordsWithDescription \nKeywordsWithDescription \n Keywords paired with their descriptions. Used in completion and quick info.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharpkeywords.html#KeywordNames","title":"FSharpKeywords.KeywordNames","content":"FSharpKeywords.KeywordNames \nKeywordNames \n All the keywords in the F# language","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html","title":"FSharpTokenTag","content":"FSharpTokenTag \n Some of the values in the field FSharpTokenInfo.Tag \nFSharpTokenTag.Identifier \nIdentifier \nFSharpTokenTag.String \nString \nFSharpTokenTag.IDENT \nIDENT \nFSharpTokenTag.STRING \nSTRING \nFSharpTokenTag.INTERP_STRING_BEGIN_END \nINTERP_STRING_BEGIN_END \nFSharpTokenTag.INTERP_STRING_BEGIN_PART \nINTERP_STRING_BEGIN_PART \nFSharpTokenTag.INTERP_STRING_PART \nINTERP_STRING_PART \nFSharpTokenTag.INTERP_STRING_END \nINTERP_STRING_END \nFSharpTokenTag.LPAREN \nLPAREN \nFSharpTokenTag.RPAREN \nRPAREN \nFSharpTokenTag.LBRACK \nLBRACK \nFSharpTokenTag.RBRACK \nRBRACK \nFSharpTokenTag.LBRACE \nLBRACE \nFSharpTokenTag.RBRACE \nRBRACE \nFSharpTokenTag.LBRACK_LESS \nLBRACK_LESS \nFSharpTokenTag.GREATER_RBRACK \nGREATER_RBRACK \nFSharpTokenTag.LESS \nLESS \nFSharpTokenTag.GREATER \nGREATER \nFSharpTokenTag.LBRACK_BAR \nLBRACK_BAR \nFSharpTokenTag.BAR_RBRACK \nBAR_RBRACK \nFSharpTokenTag.PLUS_MINUS_OP \nPLUS_MINUS_OP \nFSharpTokenTag.MINUS \nMINUS \nFSharpTokenTag.STAR \nSTAR \nFSharpTokenTag.INFIX_STAR_DIV_MOD_OP \nINFIX_STAR_DIV_MOD_OP \nFSharpTokenTag.PERCENT_OP \nPERCENT_OP \nFSharpTokenTag.INFIX_AT_HAT_OP \nINFIX_AT_HAT_OP \nFSharpTokenTag.QMARK \nQMARK \nFSharpTokenTag.COLON \nCOLON \nFSharpTokenTag.EQUALS \nEQUALS \nFSharpTokenTag.SEMICOLON \nSEMICOLON \nFSharpTokenTag.COMMA \nCOMMA \nFSharpTokenTag.DOT \nDOT \nFSharpTokenTag.DOT_DOT \nDOT_DOT \nFSharpTokenTag.DOT_DOT_HAT \nDOT_DOT_HAT \nFSharpTokenTag.INT32_DOT_DOT \nINT32_DOT_DOT \nFSharpTokenTag.UNDERSCORE \nUNDERSCORE \nFSharpTokenTag.BAR \nBAR \nFSharpTokenTag.COLON_GREATER \nCOLON_GREATER \nFSharpTokenTag.COLON_QMARK_GREATER \nCOLON_QMARK_GREATER \nFSharpTokenTag.COLON_QMARK \nCOLON_QMARK \nFSharpTokenTag.INFIX_BAR_OP \nINFIX_BAR_OP \nFSharpTokenTag.INFIX_COMPARE_OP \nINFIX_COMPARE_OP \nFSharpTokenTag.COLON_COLON \nCOLON_COLON \nFSharpTokenTag.AMP_AMP \nAMP_AMP \nFSharpTokenTag.PREFIX_OP \nPREFIX_OP \nFSharpTokenTag.COLON_EQUALS \nCOLON_EQUALS \nFSharpTokenTag.BAR_BAR \nBAR_BAR \nFSharpTokenTag.RARROW \nRARROW \nFSharpTokenTag.LARROW \nLARROW \nFSharpTokenTag.QUOTE \nQUOTE \nFSharpTokenTag.WHITESPACE \nWHITESPACE \nFSharpTokenTag.COMMENT \nCOMMENT \nFSharpTokenTag.LINE_COMMENT \nLINE_COMMENT \nFSharpTokenTag.BEGIN \nBEGIN \nFSharpTokenTag.DO \nDO \nFSharpTokenTag.FUNCTION \nFUNCTION \nFSharpTokenTag.THEN \nTHEN \nFSharpTokenTag.ELSE \nELSE \nFSharpTokenTag.STRUCT \nSTRUCT \nFSharpTokenTag.CLASS \nCLASS \nFSharpTokenTag.TRY \nTRY \nFSharpTokenTag.WITH \nWITH \nFSharpTokenTag.OWITH \nOWITH \nFSharpTokenTag.NEW \nNEW","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#Identifier","title":"FSharpTokenTag.Identifier","content":"FSharpTokenTag.Identifier \nIdentifier \n Indicates the token is an identifier","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#String","title":"FSharpTokenTag.String","content":"FSharpTokenTag.String \nString \n Indicates the token is a string","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#IDENT","title":"FSharpTokenTag.IDENT","content":"FSharpTokenTag.IDENT \nIDENT \n Indicates the token is an identifier (synonym for FSharpTokenTag.Identifier)","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#STRING","title":"FSharpTokenTag.STRING","content":"FSharpTokenTag.STRING \nSTRING \n Indicates the token is a string (synonym for FSharpTokenTag.String)","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#INTERP_STRING_BEGIN_END","title":"FSharpTokenTag.INTERP_STRING_BEGIN_END","content":"FSharpTokenTag.INTERP_STRING_BEGIN_END \nINTERP_STRING_BEGIN_END \n Indicates the token is a part of an interpolated string","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#INTERP_STRING_BEGIN_PART","title":"FSharpTokenTag.INTERP_STRING_BEGIN_PART","content":"FSharpTokenTag.INTERP_STRING_BEGIN_PART \nINTERP_STRING_BEGIN_PART \n Indicates the token is a part of an interpolated string","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#INTERP_STRING_PART","title":"FSharpTokenTag.INTERP_STRING_PART","content":"FSharpTokenTag.INTERP_STRING_PART \nINTERP_STRING_PART \n Indicates the token is a part of an interpolated string","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#INTERP_STRING_END","title":"FSharpTokenTag.INTERP_STRING_END","content":"FSharpTokenTag.INTERP_STRING_END \nINTERP_STRING_END \n Indicates the token is a part of an interpolated string","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#LPAREN","title":"FSharpTokenTag.LPAREN","content":"FSharpTokenTag.LPAREN \nLPAREN \n Indicates the token is a \u0060(\u0060","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#RPAREN","title":"FSharpTokenTag.RPAREN","content":"FSharpTokenTag.RPAREN \nRPAREN \n Indicates the token is a \u0060)\u0060","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#LBRACK","title":"FSharpTokenTag.LBRACK","content":"FSharpTokenTag.LBRACK \nLBRACK \n Indicates the token is a \u0060[\u0060","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#RBRACK","title":"FSharpTokenTag.RBRACK","content":"FSharpTokenTag.RBRACK \nRBRACK \n Indicates the token is a \u0060]\u0060","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#LBRACE","title":"FSharpTokenTag.LBRACE","content":"FSharpTokenTag.LBRACE \nLBRACE \n Indicates the token is a \u0060{\u0060","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#RBRACE","title":"FSharpTokenTag.RBRACE","content":"FSharpTokenTag.RBRACE \nRBRACE \n Indicates the token is a \u0060}\u0060","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#LBRACK_LESS","title":"FSharpTokenTag.LBRACK_LESS","content":"FSharpTokenTag.LBRACK_LESS \nLBRACK_LESS \n Indicates the token is a \u0060[\u003C\u0060","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#GREATER_RBRACK","title":"FSharpTokenTag.GREATER_RBRACK","content":"FSharpTokenTag.GREATER_RBRACK \nGREATER_RBRACK \n Indicates the token is a \u0060\u003E]\u0060","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#LESS","title":"FSharpTokenTag.LESS","content":"FSharpTokenTag.LESS \nLESS \n Indicates the token is a \u0060\u003C\u0060","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#GREATER","title":"FSharpTokenTag.GREATER","content":"FSharpTokenTag.GREATER \nGREATER \n Indicates the token is a \u0060\u003E\u0060","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#LBRACK_BAR","title":"FSharpTokenTag.LBRACK_BAR","content":"FSharpTokenTag.LBRACK_BAR \nLBRACK_BAR \n Indicates the token is a \u0060[|\u0060","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#BAR_RBRACK","title":"FSharpTokenTag.BAR_RBRACK","content":"FSharpTokenTag.BAR_RBRACK \nBAR_RBRACK \n Indicates the token is a \u0060|]\u0060","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#PLUS_MINUS_OP","title":"FSharpTokenTag.PLUS_MINUS_OP","content":"FSharpTokenTag.PLUS_MINUS_OP \nPLUS_MINUS_OP \n Indicates the token is a \u0060\u002B\u0060 or \u0060-\u0060","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#MINUS","title":"FSharpTokenTag.MINUS","content":"FSharpTokenTag.MINUS \nMINUS \n Indicates the token is a \u0060-\u0060","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#STAR","title":"FSharpTokenTag.STAR","content":"FSharpTokenTag.STAR \nSTAR \n Indicates the token is a \u0060*\u0060","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#INFIX_STAR_DIV_MOD_OP","title":"FSharpTokenTag.INFIX_STAR_DIV_MOD_OP","content":"FSharpTokenTag.INFIX_STAR_DIV_MOD_OP \nINFIX_STAR_DIV_MOD_OP \n Indicates the token is a \u0060%\u0060","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#PERCENT_OP","title":"FSharpTokenTag.PERCENT_OP","content":"FSharpTokenTag.PERCENT_OP \nPERCENT_OP \n Indicates the token is a \u0060%\u0060","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#INFIX_AT_HAT_OP","title":"FSharpTokenTag.INFIX_AT_HAT_OP","content":"FSharpTokenTag.INFIX_AT_HAT_OP \nINFIX_AT_HAT_OP \n Indicates the token is a \u0060^\u0060","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#QMARK","title":"FSharpTokenTag.QMARK","content":"FSharpTokenTag.QMARK \nQMARK \n Indicates the token is a \u0060?\u0060","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#COLON","title":"FSharpTokenTag.COLON","content":"FSharpTokenTag.COLON \nCOLON \n Indicates the token is a \u0060:\u0060","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#EQUALS","title":"FSharpTokenTag.EQUALS","content":"FSharpTokenTag.EQUALS \nEQUALS \n Indicates the token is a \u0060=\u0060","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#SEMICOLON","title":"FSharpTokenTag.SEMICOLON","content":"FSharpTokenTag.SEMICOLON \nSEMICOLON \n Indicates the token is a \u0060;\u0060","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#COMMA","title":"FSharpTokenTag.COMMA","content":"FSharpTokenTag.COMMA \nCOMMA \n Indicates the token is a \u0060,\u0060","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#DOT","title":"FSharpTokenTag.DOT","content":"FSharpTokenTag.DOT \nDOT \n Indicates the token is a \u0060.\u0060","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#DOT_DOT","title":"FSharpTokenTag.DOT_DOT","content":"FSharpTokenTag.DOT_DOT \nDOT_DOT \n Indicates the token is a \u0060..\u0060","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#DOT_DOT_HAT","title":"FSharpTokenTag.DOT_DOT_HAT","content":"FSharpTokenTag.DOT_DOT_HAT \nDOT_DOT_HAT \n Indicates the token is a \u0060..\u0060","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#INT32_DOT_DOT","title":"FSharpTokenTag.INT32_DOT_DOT","content":"FSharpTokenTag.INT32_DOT_DOT \nINT32_DOT_DOT \n Indicates the token is a \u0060..^\u0060","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#UNDERSCORE","title":"FSharpTokenTag.UNDERSCORE","content":"FSharpTokenTag.UNDERSCORE \nUNDERSCORE \n Indicates the token is a \u0060..\u0060","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#BAR","title":"FSharpTokenTag.BAR","content":"FSharpTokenTag.BAR \nBAR \n Indicates the token is a \u0060_\u0060","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#COLON_GREATER","title":"FSharpTokenTag.COLON_GREATER","content":"FSharpTokenTag.COLON_GREATER \nCOLON_GREATER \n Indicates the token is a \u0060:\u003E\u0060","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#COLON_QMARK_GREATER","title":"FSharpTokenTag.COLON_QMARK_GREATER","content":"FSharpTokenTag.COLON_QMARK_GREATER \nCOLON_QMARK_GREATER \n Indicates the token is a \u0060:?\u003E\u0060","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#COLON_QMARK","title":"FSharpTokenTag.COLON_QMARK","content":"FSharpTokenTag.COLON_QMARK \nCOLON_QMARK \n Indicates the token is a \u0060:?\u0060","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#INFIX_BAR_OP","title":"FSharpTokenTag.INFIX_BAR_OP","content":"FSharpTokenTag.INFIX_BAR_OP \nINFIX_BAR_OP \n Indicates the token is a \u0060|\u0060","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#INFIX_COMPARE_OP","title":"FSharpTokenTag.INFIX_COMPARE_OP","content":"FSharpTokenTag.INFIX_COMPARE_OP \nINFIX_COMPARE_OP \n Indicates the token is a \u0060|\u0060","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#COLON_COLON","title":"FSharpTokenTag.COLON_COLON","content":"FSharpTokenTag.COLON_COLON \nCOLON_COLON \n Indicates the token is a \u0060::\u0060","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#AMP_AMP","title":"FSharpTokenTag.AMP_AMP","content":"FSharpTokenTag.AMP_AMP \nAMP_AMP \n Indicates the token is a \u0060@@\u0060","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#PREFIX_OP","title":"FSharpTokenTag.PREFIX_OP","content":"FSharpTokenTag.PREFIX_OP \nPREFIX_OP \n Indicates the token is a \u0060~\u0060","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#COLON_EQUALS","title":"FSharpTokenTag.COLON_EQUALS","content":"FSharpTokenTag.COLON_EQUALS \nCOLON_EQUALS \n Indicates the token is a \u0060:=\u0060","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#BAR_BAR","title":"FSharpTokenTag.BAR_BAR","content":"FSharpTokenTag.BAR_BAR \nBAR_BAR \n Indicates the token is a \u0060||\u0060","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#RARROW","title":"FSharpTokenTag.RARROW","content":"FSharpTokenTag.RARROW \nRARROW \n Indicates the token is a \u0060-\u003E\u0060","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#LARROW","title":"FSharpTokenTag.LARROW","content":"FSharpTokenTag.LARROW \nLARROW \n Indicates the token is a \u0060\u003C-\u0060","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#QUOTE","title":"FSharpTokenTag.QUOTE","content":"FSharpTokenTag.QUOTE \nQUOTE \n Indicates the token is a \u0060\u0022\u0060","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#WHITESPACE","title":"FSharpTokenTag.WHITESPACE","content":"FSharpTokenTag.WHITESPACE \nWHITESPACE \n Indicates the token is a whitespace","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#COMMENT","title":"FSharpTokenTag.COMMENT","content":"FSharpTokenTag.COMMENT \nCOMMENT \n Indicates the token is a comment","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#LINE_COMMENT","title":"FSharpTokenTag.LINE_COMMENT","content":"FSharpTokenTag.LINE_COMMENT \nLINE_COMMENT \n Indicates the token is a line comment","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#BEGIN","title":"FSharpTokenTag.BEGIN","content":"FSharpTokenTag.BEGIN \nBEGIN \n Indicates the token is keyword \u0060begin\u0060","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#DO","title":"FSharpTokenTag.DO","content":"FSharpTokenTag.DO \nDO \n Indicates the token is keyword \u0060do\u0060","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#FUNCTION","title":"FSharpTokenTag.FUNCTION","content":"FSharpTokenTag.FUNCTION \nFUNCTION \n Indicates the token is keyword \u0060function\u0060","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#THEN","title":"FSharpTokenTag.THEN","content":"FSharpTokenTag.THEN \nTHEN \n Indicates the token is keyword \u0060then\u0060","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#ELSE","title":"FSharpTokenTag.ELSE","content":"FSharpTokenTag.ELSE \nELSE \n Indicates the token is keyword \u0060else\u0060","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#STRUCT","title":"FSharpTokenTag.STRUCT","content":"FSharpTokenTag.STRUCT \nSTRUCT \n Indicates the token is keyword \u0060struct\u0060","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#CLASS","title":"FSharpTokenTag.CLASS","content":"FSharpTokenTag.CLASS \nCLASS \n Indicates the token is keyword \u0060class\u0060","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#TRY","title":"FSharpTokenTag.TRY","content":"FSharpTokenTag.TRY \nTRY \n Indicates the token is keyword \u0060try\u0060","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#WITH","title":"FSharpTokenTag.WITH","content":"FSharpTokenTag.WITH \nWITH \n Indicates the token is keyword \u0060with\u0060","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#OWITH","title":"FSharpTokenTag.OWITH","content":"FSharpTokenTag.OWITH \nOWITH \n Indicates the token is keyword \u0060with\u0060 in #light","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#NEW","title":"FSharpTokenTag.NEW","content":"FSharpTokenTag.NEW \nNEW \n Indicates the token is keyword \u0060new\u0060","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharplexer.html","title":"FSharpLexer","content":"FSharpLexer \n \nFSharpLexer.Tokenize \nTokenize","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharplexer.html#Tokenize","title":"FSharpLexer.Tokenize","content":"FSharpLexer.Tokenize \nTokenize \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharplexerflags.html","title":"FSharpLexerFlags","content":"FSharpLexerFlags \n \nFSharpLexerFlags.Default \nDefault \nFSharpLexerFlags.LightSyntaxOn \nLightSyntaxOn \nFSharpLexerFlags.Compiling \nCompiling \nFSharpLexerFlags.CompilingFSharpCore \nCompilingFSharpCore \nFSharpLexerFlags.SkipTrivia \nSkipTrivia \nFSharpLexerFlags.UseLexFilter \nUseLexFilter","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharplexerflags.html#Default","title":"FSharpLexerFlags.Default","content":"FSharpLexerFlags.Default \nDefault \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharplexerflags.html#LightSyntaxOn","title":"FSharpLexerFlags.LightSyntaxOn","content":"FSharpLexerFlags.LightSyntaxOn \nLightSyntaxOn \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharplexerflags.html#Compiling","title":"FSharpLexerFlags.Compiling","content":"FSharpLexerFlags.Compiling \nCompiling \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharplexerflags.html#CompilingFSharpCore","title":"FSharpLexerFlags.CompilingFSharpCore","content":"FSharpLexerFlags.CompilingFSharpCore \nCompilingFSharpCore \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharplexerflags.html#SkipTrivia","title":"FSharpLexerFlags.SkipTrivia","content":"FSharpLexerFlags.SkipTrivia \nSkipTrivia \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharplexerflags.html#UseLexFilter","title":"FSharpLexerFlags.UseLexFilter","content":"FSharpLexerFlags.UseLexFilter \nUseLexFilter \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharplinetokenizer.html","title":"FSharpLineTokenizer","content":"FSharpLineTokenizer \n Object to tokenize a line of F# source code, starting with the given lexState.  The lexState should be FSharpTokenizerLexState.Initial for\n the first line of text. Returns an array of ranges of the text and two enumerations categorizing the\n tokens and characters covered by that range, i.e. FSharpTokenColorKind and FSharpTokenCharKind.  The enumerations\n are somewhat adhoc but useful enough to give good colorization options to the user in an IDE.\n\n A new lexState is also returned.  An IDE-plugin should in general cache the lexState\n values for each line of the edited code. \nFSharpLineTokenizer.ScanToken \nScanToken \nFSharpLineTokenizer.ColorStateOfLexState \nColorStateOfLexState \nFSharpLineTokenizer.LexStateOfColorState \nLexStateOfColorState","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharplinetokenizer.html#ScanToken","title":"FSharpLineTokenizer.ScanToken","content":"FSharpLineTokenizer.ScanToken \nScanToken \n Scan one token from the line","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharplinetokenizer.html#ColorStateOfLexState","title":"FSharpLineTokenizer.ColorStateOfLexState","content":"FSharpLineTokenizer.ColorStateOfLexState \nColorStateOfLexState \n Get the color state from the lexer state","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharplinetokenizer.html#LexStateOfColorState","title":"FSharpLineTokenizer.LexStateOfColorState","content":"FSharpLineTokenizer.LexStateOfColorState \nLexStateOfColorState \n Get a default lexer state for a color state.\n\n NOTE: This may result in an inaccurate lexer state\n not taking into account things such as the #if/#endif and string interpolation context\n within the file","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharpsourcetokenizer.html","title":"FSharpSourceTokenizer","content":"FSharpSourceTokenizer \n Tokenizer for a source file. Holds some expensive-to-compute resources at the scope of the file. \nFSharpSourceTokenizer.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nFSharpSourceTokenizer.CreateBufferTokenizer \nCreateBufferTokenizer \nFSharpSourceTokenizer.CreateLineTokenizer \nCreateLineTokenizer","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharpsourcetokenizer.html#\u0060\u0060.ctor\u0060\u0060","title":"FSharpSourceTokenizer.\u0060\u0060.ctor\u0060\u0060","content":"FSharpSourceTokenizer.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n Create a tokenizer for a source file.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharpsourcetokenizer.html#CreateBufferTokenizer","title":"FSharpSourceTokenizer.CreateBufferTokenizer","content":"FSharpSourceTokenizer.CreateBufferTokenizer \nCreateBufferTokenizer \n Create a tokenizer for a line of this source file using a buffer filler","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharpsourcetokenizer.html#CreateLineTokenizer","title":"FSharpSourceTokenizer.CreateLineTokenizer","content":"FSharpSourceTokenizer.CreateLineTokenizer \nCreateLineTokenizer \n Create a tokenizer for a line of this source file","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptoken.html","title":"FSharpToken","content":"FSharpToken \n \nFSharpToken.IsStringLiteral \nIsStringLiteral \nFSharpToken.IsNumericLiteral \nIsNumericLiteral \nFSharpToken.IsKeyword \nIsKeyword \nFSharpToken.Range \nRange \nFSharpToken.IsCommentTrivia \nIsCommentTrivia \nFSharpToken.IsIdentifier \nIsIdentifier \nFSharpToken.Kind \nKind \nFSharpToken.tok \ntok \nFSharpToken.tokRange \ntokRange","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptoken.html#IsStringLiteral","title":"FSharpToken.IsStringLiteral","content":"FSharpToken.IsStringLiteral \nIsStringLiteral \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptoken.html#IsNumericLiteral","title":"FSharpToken.IsNumericLiteral","content":"FSharpToken.IsNumericLiteral \nIsNumericLiteral \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptoken.html#IsKeyword","title":"FSharpToken.IsKeyword","content":"FSharpToken.IsKeyword \nIsKeyword \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptoken.html#Range","title":"FSharpToken.Range","content":"FSharpToken.Range \nRange \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptoken.html#IsCommentTrivia","title":"FSharpToken.IsCommentTrivia","content":"FSharpToken.IsCommentTrivia \nIsCommentTrivia \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptoken.html#IsIdentifier","title":"FSharpToken.IsIdentifier","content":"FSharpToken.IsIdentifier \nIsIdentifier \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptoken.html#Kind","title":"FSharpToken.Kind","content":"FSharpToken.Kind \nKind \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptoken.html#tok","title":"FSharpToken.tok","content":"FSharpToken.tok \ntok \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptoken.html#tokRange","title":"FSharpToken.tokRange","content":"FSharpToken.tokRange \ntokRange \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokencharkind.html","title":"FSharpTokenCharKind","content":"FSharpTokenCharKind \n Gives an indication of the class to assign to the characters of the token an IDE \nFSharpTokenCharKind.Default \nDefault \nFSharpTokenCharKind.Text \nText \nFSharpTokenCharKind.Keyword \nKeyword \nFSharpTokenCharKind.Identifier \nIdentifier \nFSharpTokenCharKind.String \nString \nFSharpTokenCharKind.Literal \nLiteral \nFSharpTokenCharKind.Operator \nOperator \nFSharpTokenCharKind.Delimiter \nDelimiter \nFSharpTokenCharKind.WhiteSpace \nWhiteSpace \nFSharpTokenCharKind.LineComment \nLineComment \nFSharpTokenCharKind.Comment \nComment","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokencharkind.html#Default","title":"FSharpTokenCharKind.Default","content":"FSharpTokenCharKind.Default \nDefault \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokencharkind.html#Text","title":"FSharpTokenCharKind.Text","content":"FSharpTokenCharKind.Text \nText \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokencharkind.html#Keyword","title":"FSharpTokenCharKind.Keyword","content":"FSharpTokenCharKind.Keyword \nKeyword \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokencharkind.html#Identifier","title":"FSharpTokenCharKind.Identifier","content":"FSharpTokenCharKind.Identifier \nIdentifier \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokencharkind.html#String","title":"FSharpTokenCharKind.String","content":"FSharpTokenCharKind.String \nString \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokencharkind.html#Literal","title":"FSharpTokenCharKind.Literal","content":"FSharpTokenCharKind.Literal \nLiteral \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokencharkind.html#Operator","title":"FSharpTokenCharKind.Operator","content":"FSharpTokenCharKind.Operator \nOperator \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokencharkind.html#Delimiter","title":"FSharpTokenCharKind.Delimiter","content":"FSharpTokenCharKind.Delimiter \nDelimiter \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokencharkind.html#WhiteSpace","title":"FSharpTokenCharKind.WhiteSpace","content":"FSharpTokenCharKind.WhiteSpace \nWhiteSpace \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokencharkind.html#LineComment","title":"FSharpTokenCharKind.LineComment","content":"FSharpTokenCharKind.LineComment \nLineComment \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokencharkind.html#Comment","title":"FSharpTokenCharKind.Comment","content":"FSharpTokenCharKind.Comment \nComment \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokencolorkind.html","title":"FSharpTokenColorKind","content":"FSharpTokenColorKind \n Gives an indication of the color class to assign to the token an IDE \nFSharpTokenColorKind.Default \nDefault \nFSharpTokenColorKind.Text \nText \nFSharpTokenColorKind.Keyword \nKeyword \nFSharpTokenColorKind.Comment \nComment \nFSharpTokenColorKind.Identifier \nIdentifier \nFSharpTokenColorKind.String \nString \nFSharpTokenColorKind.UpperIdentifier \nUpperIdentifier \nFSharpTokenColorKind.InactiveCode \nInactiveCode \nFSharpTokenColorKind.PreprocessorKeyword \nPreprocessorKeyword \nFSharpTokenColorKind.Number \nNumber \nFSharpTokenColorKind.Operator \nOperator \nFSharpTokenColorKind.Punctuation \nPunctuation","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokencolorkind.html#Default","title":"FSharpTokenColorKind.Default","content":"FSharpTokenColorKind.Default \nDefault \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokencolorkind.html#Text","title":"FSharpTokenColorKind.Text","content":"FSharpTokenColorKind.Text \nText \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokencolorkind.html#Keyword","title":"FSharpTokenColorKind.Keyword","content":"FSharpTokenColorKind.Keyword \nKeyword \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokencolorkind.html#Comment","title":"FSharpTokenColorKind.Comment","content":"FSharpTokenColorKind.Comment \nComment \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokencolorkind.html#Identifier","title":"FSharpTokenColorKind.Identifier","content":"FSharpTokenColorKind.Identifier \nIdentifier \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokencolorkind.html#String","title":"FSharpTokenColorKind.String","content":"FSharpTokenColorKind.String \nString \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokencolorkind.html#UpperIdentifier","title":"FSharpTokenColorKind.UpperIdentifier","content":"FSharpTokenColorKind.UpperIdentifier \nUpperIdentifier \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokencolorkind.html#InactiveCode","title":"FSharpTokenColorKind.InactiveCode","content":"FSharpTokenColorKind.InactiveCode \nInactiveCode \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokencolorkind.html#PreprocessorKeyword","title":"FSharpTokenColorKind.PreprocessorKeyword","content":"FSharpTokenColorKind.PreprocessorKeyword \nPreprocessorKeyword \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokencolorkind.html#Number","title":"FSharpTokenColorKind.Number","content":"FSharpTokenColorKind.Number \nNumber \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokencolorkind.html#Operator","title":"FSharpTokenColorKind.Operator","content":"FSharpTokenColorKind.Operator \nOperator \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokencolorkind.html#Punctuation","title":"FSharpTokenColorKind.Punctuation","content":"FSharpTokenColorKind.Punctuation \nPunctuation \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokeninfo.html","title":"FSharpTokenInfo","content":"FSharpTokenInfo \n Information about a particular token from the tokenizer \nFSharpTokenInfo.LeftColumn \nLeftColumn \nFSharpTokenInfo.RightColumn \nRightColumn \nFSharpTokenInfo.ColorClass \nColorClass \nFSharpTokenInfo.CharClass \nCharClass \nFSharpTokenInfo.FSharpTokenTriggerClass \nFSharpTokenTriggerClass \nFSharpTokenInfo.Tag \nTag \nFSharpTokenInfo.TokenName \nTokenName \nFSharpTokenInfo.FullMatchedLength \nFullMatchedLength","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokeninfo.html#LeftColumn","title":"FSharpTokenInfo.LeftColumn","content":"FSharpTokenInfo.LeftColumn \nLeftColumn \n Left column of the token.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokeninfo.html#RightColumn","title":"FSharpTokenInfo.RightColumn","content":"FSharpTokenInfo.RightColumn \nRightColumn \n Right column of the token.","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokeninfo.html#ColorClass","title":"FSharpTokenInfo.ColorClass","content":"FSharpTokenInfo.ColorClass \nColorClass \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokeninfo.html#CharClass","title":"FSharpTokenInfo.CharClass","content":"FSharpTokenInfo.CharClass \nCharClass \n Gives an indication of the class to assign to the token an IDE","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokeninfo.html#FSharpTokenTriggerClass","title":"FSharpTokenInfo.FSharpTokenTriggerClass","content":"FSharpTokenInfo.FSharpTokenTriggerClass \nFSharpTokenTriggerClass \n Actions taken when the token is typed","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokeninfo.html#Tag","title":"FSharpTokenInfo.Tag","content":"FSharpTokenInfo.Tag \nTag \n The tag is an integer identifier for the token","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokeninfo.html#TokenName","title":"FSharpTokenInfo.TokenName","content":"FSharpTokenInfo.TokenName \nTokenName \n Provides additional information about the token","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokeninfo.html#FullMatchedLength","title":"FSharpTokenInfo.FullMatchedLength","content":"FSharpTokenInfo.FullMatchedLength \nFullMatchedLength \n The full length consumed by this match, including delayed tokens (which can be ignored in naive lexers)","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html","title":"FSharpTokenKind","content":"FSharpTokenKind \n \nFSharpTokenKind.IsInline \nIsInline \nFSharpTokenKind.IsMatch \nIsMatch \nFSharpTokenKind.IsNativeInt \nIsNativeInt \nFSharpTokenKind.IsOffsideBlockBegin \nIsOffsideBlockBegin \nFSharpTokenKind.IsOffsideElse \nIsOffsideElse \nFSharpTokenKind.IsDefault \nIsDefault \nFSharpTokenKind.IsInfixAtHatOperator \nIsInfixAtHatOperator \nFSharpTokenKind.IsUnderscore \nIsUnderscore \nFSharpTokenKind.IsWhen \nIsWhen \nFSharpTokenKind.IsStar \nIsStar \nFSharpTokenKind.IsBar \nIsBar \nFSharpTokenKind.IsClass \nIsClass \nFSharpTokenKind.IsInt32DotDot \nIsInt32DotDot \nFSharpTokenKind.IsFun \nIsFun \nFSharpTokenKind.IsGlobal \nIsGlobal \nFSharpTokenKind.IsOr \nIsOr \nFSharpTokenKind.IsSemicolon \nIsSemicolon \nFSharpTokenKind.IsIeee64 \nIsIeee64 \nFSharpTokenKind.IsGreaterRightBracket \nIsGreaterRightBracket \nFSharpTokenKind.IsOffsideDeclEnd \nIsOffsideDeclEnd \nFSharpTokenKind.IsInfixStarDivideModuloOperator \nIsInfixStarDivideModuloOperator \nFSharpTokenKind.IsHashLight \nIsHashLight \nFSharpTokenKind.IsUInt8 \nIsUInt8 \nFSharpTokenKind.IsOffsideBinder \nIsOffsideBinder \nFSharpTokenKind.IsQuestionMarkQuestionMark \nIsQuestionMarkQuestionMark \nFSharpTokenKind.IsSemicolonSemicolon \nIsSemicolonSemicolon \nFSharpTokenKind.IsSig \nIsSig \nFSharpTokenKind.IsString \nIsString \nFSharpTokenKind.IsVal \nIsVal \nFSharpTokenKind.IsLeftBracketBar \nIsLeftBracketBar \nFSharpTokenKind.IsInfixLsr \nIsInfixLsr \nFSharpTokenKind.IsFunkyOperatorName \nIsFunkyOperatorName \nFSharpTokenKind.IsInt16 \nIsInt16 \nFSharpTokenKind.IsMember \nIsMember \nFSharpTokenKind.IsEquals \nIsEquals \nFSharpTokenKind.IsFor \nIsFor \nFSharpTokenKind.IsUpcast \nIsUpcast \nFSharpTokenKind.IsCommentTrivia \nIsCommentTrivia \nFSharpTokenKind.IsOverride \nIsOverride \nFSharpTokenKind.IsRightQuote \nIsRightQuote \nFSharpTokenKind.IsLeftParenthesisStarRightParenthesis \nIsLeftParenthesisStarRightParenthesis \nFSharpTokenKind.IsHash \nIsHash \nFSharpTokenKind.IsHighPrecedenceTypeApp \nIsHighPrecedenceTypeApp \nFSharpTokenKind.IsWarnDirective \nIsWarnDirective \nFSharpTokenKind.IsBarBar \nIsBarBar \nFSharpTokenKind.IsColonQuestionMark \nIsColonQuestionMark \nFSharpTokenKind.IsFinally \nIsFinally \nFSharpTokenKind.IsInt8 \nIsInt8 \nFSharpTokenKind.IsPercentOperator \nIsPercentOperator \nFSharpTokenKind.IsReserved \nIsReserved \nFSharpTokenKind.IsAmpersand \nIsAmpersand \nFSharpTokenKind.IsNew \nIsNew \nFSharpTokenKind.IsBarRightBrace \nIsBarRightBrace \nFSharpTokenKind.IsElif \nIsElif \nFSharpTokenKind.IsInternal \nIsInternal \nFSharpTokenKind.IsOffsideWith \nIsOffsideWith \nFSharpTokenKind.IsTrue \nIsTrue \nFSharpTokenKind.IsRightQuoteDot \nIsRightQuoteDot \nFSharpTokenKind.IsTry \nIsTry \nFSharpTokenKind.IsMinus \nIsMinus \nFSharpTokenKind.IsLeftBrace \nIsLeftBrace \nFSharpTokenKind.IsInstance \nIsInstance \nFSharpTokenKind.IsIn \nIsIn \nFSharpTokenKind.IsPrivate \nIsPrivate \nFSharpTokenKind.IsColonQuestionMarkGreater \nIsColonQuestionMarkGreater \nFSharpTokenKind.IsChar \nIsChar \nFSharpTokenKind.IsHashElse \nIsHashElse \nFSharpTokenKind.IsConstraint \nIsConstraint \nFSharpTokenKind.IsInfixLsl \nIsInfixLsl \nFSharpTokenKind.IsOffsideFun \nIsOffsideFun \nFSharpTokenKind.IsOffsideLet \nIsOffsideLet \nFSharpTokenKind.IsQuote \nIsQuote \nFSharpTokenKind.IsOffsideBlockSep \nIsOffsideBlockSep \nFSharpTokenKind.IsIeee32 \nIsIeee32 \nFSharpTokenKind.IsJoinIn \nIsJoinIn \nFSharpTokenKind.IsConstructor \nIsConstructor \nFSharpTokenKind.IsQuestionMark \nIsQuestionMark \nFSharpTokenKind.IsHighPrecedenceParenthesisApp \nIsHighPrecedenceParenthesisApp \nFSharpTokenKind.IsInfixMod \nIsInfixMod \nFSharpTokenKind.IsHashLine \nIsHashLine \nFSharpTokenKind.IsLess \nIsLess \nFSharpTokenKind.IsWhileBang \nIsWhileBang \nFSharpTokenKind.IsExtern \nIsExtern \nFSharpTokenKind.IsEnd \nIsEnd \nFSharpTokenKind.IsComma \nIsComma \nFSharpTokenKind.IsDotDotHat \nIsDotDotHat \nFSharpTokenKind.IsMatchBang \nIsMatchBang \nFSharpTokenKind.IsAnd \nIsAnd \nFSharpTokenKind.IsHighPrecedenceBracketApp \nIsHighPrecedenceBracketApp \nFSharpTokenKind.IsDownTo \nIsDownTo \nFSharpTokenKind.IsElse \nIsElse \nFSharpTokenKind.IsBase \nIsBase \nFSharpTokenKind.IsException \nIsException \nFSharpTokenKind.IsInactiveCode \nIsInactiveCode \nFSharpTokenKind.IsLeftBraceBar \nIsLeftBraceBar \nFSharpTokenKind.IsStruct \nIsStruct \nFSharpTokenKind.IsOffsideEnd \nIsOffsideEnd \nFSharpTokenKind.IsLeftBracket \nIsLeftBracket \nFSharpTokenKind.IsWhitespaceTrivia \nIsWhitespaceTrivia \nFSharpTokenKind.IsYield \nIsYield \nFSharpTokenKind.IsAbstract \nIsAbstract \nFSharpTokenKind.IsIf \nIsIf \nFSharpTokenKind.IsFalse \nIsFalse \nFSharpTokenKind.IsDot \nIsDot \nFSharpTokenKind.IsModule \nIsModule \nFSharpTokenKind.IsInt64 \nIsInt64 \nFSharpTokenKind.IsKeywordString \nIsKeywordString \nFSharpTokenKind.IsColonColon \nIsColonColon \nFSharpTokenKind.IsTo \nIsTo \nFSharpTokenKind.IsOpen \nIsOpen \nFSharpTokenKind.IsOffsideThen \nIsOffsideThen \nFSharpTokenKind.IsNull \nIsNull \nFSharpTokenKind.IsColon \nIsColon \nFSharpTokenKind.IsDotDot \nIsDotDot \nFSharpTokenKind.IsMutable \nIsMutable \nFSharpTokenKind.IsFixed \nIsFixed \nFSharpTokenKind.IsOffsideDo \nIsOffsideDo \nFSharpTokenKind.IsAs \nIsAs \nFSharpTokenKind.IsDoBang \nIsDoBang \nFSharpTokenKind.IsInfixLor \nIsInfixLor \nFSharpTokenKind.IsDowncast \nIsDowncast \nFSharpTokenKind.IsLeftArrow \nIsLeftArrow \nFSharpTokenKind.IsStatic \nIsStatic \nFSharpTokenKind.IsUInt16 \nIsUInt16 \nFSharpTokenKind.IsDone \nIsDone \nFSharpTokenKind.IsVoid \nIsVoid \nFSharpTokenKind.IsBinder \nIsBinder \nFSharpTokenKind.IsGreaterBarRightBrace \nIsGreaterBarRightBrace \nFSharpTokenKind.IsRightBracket \nIsRightBracket \nFSharpTokenKind.IsNone \nIsNone \nFSharpTokenKind.IsHashEndIf \nIsHashEndIf \nFSharpTokenKind.IsBegin \nIsBegin \nFSharpTokenKind.IsLeftQuote \nIsLeftQuote \nFSharpTokenKind.IsOf \nIsOf \nFSharpTokenKind.IsDollar \nIsDollar \nFSharpTokenKind.IsInfixLand \nIsInfixLand \nFSharpTokenKind.IsUInt64 \nIsUInt64 \nFSharpTokenKind.IsByteArray \nIsByteArray \nFSharpTokenKind.IsYieldBang \nIsYieldBang \nFSharpTokenKind.IsInherit \nIsInherit \nFSharpTokenKind.IsAsr \nIsAsr \nFSharpTokenKind.IsOffsideAssert \nIsOffsideAssert \nFSharpTokenKind.IsDelegate \nIsDelegate \nFSharpTokenKind.IsWhile \nIsWhile \nFSharpTokenKind.IsInfixBarOperator \nIsInfixBarOperator \nFSharpTokenKind.IsType \nIsType \nFSharpTokenKind.IsAdjacentPrefixOperator \nIsAdjacentPrefixOperator \nFSharpTokenKind.IsUInt32 \nIsUInt32 \nFSharpTokenKind.IsAmpersandAmpersand \nIsAmpersandAmpersand \nFSharpTokenKind.IsOffsideLazy \nIsOffsideLazy \nFSharpTokenKind.IsFunction \nIsFunction \nFSharpTokenKind.IsLineCommentTrivia \nIsLineCommentTrivia \nFSharpTokenKind.IsUNativeInt \nIsUNativeInt \nFSharpTokenKind.IsLazy \nIsLazy \nFSharpTokenKind.IsAssert \nIsAssert \nFSharpTokenKind.IsRightParenthesis \nIsRightParenthesis \nFSharpTokenKind.IsIdentifier \nIsIdentifier \nFSharpTokenKind.IsNamespace \nIsNamespace \nFSharpTokenKind.IsDecimal \nIsDecimal \nFSharpTokenKind.IsInfixLxor \nIsInfixLxor \nFSharpTokenKind.IsRQuoteBarRightBrace \nIsRQuoteBarRightBrace \nFSharpTokenKind.IsPlusMinusOperator \nIsPlusMinusOperator \nFSharpTokenKind.IsConst \nIsConst \nFSharpTokenKind.IsGreater \nIsGreater \nFSharpTokenKind.IsRec \nIsRec \nFSharpTokenKind.IsStringText \nIsStringText \nFSharpTokenKind.IsThen \nIsThen \nFSharpTokenKind.IsInfixAmpersandOperator \nIsInfixAmpersandOperator \nFSharpTokenKind.IsRightArrow \nIsRightArrow \nFSharpTokenKind.IsInfixCompareOperator \nIsInfixCompareOperator \nFSharpTokenKind.IsPrefixOperator \nIsPrefixOperator \nFSharpTokenKind.IsGreaterBarRightBracket \nIsGreaterBarRightBracket \nFSharpTokenKind.IsPublic \nIsPublic \nFSharpTokenKind.IsRightBrace \nIsRightBrace \nFSharpTokenKind.IsWith \nIsWith \nFSharpTokenKind.IsOffsideBlockEnd \nIsOffsideBlockEnd \nFSharpTokenKind.IsOffsideReset \nIsOffsideReset \nFSharpTokenKind.IsColonGreater \nIsColonGreater \nFSharpTokenKind.IsInt32 \nIsInt32 \nFSharpTokenKind.IsInfixAsr \nIsInfixAsr \nFSharpTokenKind.IsBarRightBracket \nIsBarRightBracket \nFSharpTokenKind.IsOffsideFunction \nIsOffsideFunction \nFSharpTokenKind.IsHashIf \nIsHashIf \nFSharpTokenKind.IsInfixStarStarOperator \nIsInfixStarStarOperator \nFSharpTokenKind.IsOffsideDoBang \nIsOffsideDoBang \nFSharpTokenKind.IsInterface \nIsInterface \nFSharpTokenKind.IsDo \nIsDo \nFSharpTokenKind.IsOffsideInterfaceMember \nIsOffsideInterfaceMember \nFSharpTokenKind.IsOffsideRightBlockEnd \nIsOffsideRightBlockEnd \nFSharpTokenKind.IsBigNumber \nIsBigNumber \nFSharpTokenKind.IsLet \nIsLet \nFSharpTokenKind.IsColonEquals \nIsColonEquals \nFSharpTokenKind.IsLeftParenthesis \nIsLeftParenthesis \nFSharpTokenKind.IsLeftBracketLess \nIsLeftBracketLess \nFSharpTokenKind.None \nNone \nFSharpTokenKind.HashIf \nHashIf \nFSharpTokenKind.HashElse \nHashElse \nFSharpTokenKind.HashEndIf \nHashEndIf \nFSharpTokenKind.WarnDirective \nWarnDirective \nFSharpTokenKind.CommentTrivia \nCommentTrivia \nFSharpTokenKind.WhitespaceTrivia \nWhitespaceTrivia \nFSharpTokenKind.HashLine \nHashLine \nFSharpTokenKind.HashLight \nHashLight \nFSharpTokenKind.InactiveCode \nInactiveCode \nFSharpTokenKind.LineCommentTrivia \nLineCommentTrivia \nFSharpTokenKind.StringText \nStringText \nFSharpTokenKind.Fixed \nFixed \nFSharpTokenKind.OffsideInterfaceMember \nOffsideInterfaceMember \nFSharpTokenKind.OffsideBlockEnd \nOffsideBlockEnd \nFSharpTokenKind.OffsideRightBlockEnd \nOffsideRightBlockEnd \nFSharpTokenKind.OffsideDeclEnd \nOffsideDeclEnd \nFSharpTokenKind.OffsideEnd \nOffsideEnd \nFSharpTokenKind.OffsideBlockSep \nOffsideBlockSep \nFSharpTokenKind.OffsideBlockBegin \nOffsideBlockBegin \nFSharpTokenKind.OffsideReset \nOffsideReset \nFSharpTokenKind.OffsideFun \nOffsideFun \nFSharpTokenKind.OffsideFunction \nOffsideFunction \nFSharpTokenKind.OffsideWith \nOffsideWith \nFSharpTokenKind.OffsideElse \nOffsideElse \nFSharpTokenKind.OffsideThen \nOffsideThen \nFSharpTokenKind.OffsideDoBang \nOffsideDoBang \nFSharpTokenKind.OffsideDo \nOffsideDo \nFSharpTokenKind.OffsideBinder \nOffsideBinder \nFSharpTokenKind.OffsideLet \nOffsideLet \nFSharpTokenKind.HighPrecedenceTypeApp \nHighPrecedenceTypeApp \nFSharpTokenKind.HighPrecedenceParenthesisApp \nHighPrecedenceParenthesisApp \nFSharpTokenKind.HighPrecedenceBracketApp \nHighPrecedenceBracketApp \nFSharpTokenKind.Extern \nExtern \nFSharpTokenKind.Void \nVoid \nFSharpTokenKind.Public \nPublic \nFSharpTokenKind.Private \nPrivate \nFSharpTokenKind.Internal \nInternal \nFSharpTokenKind.Global \nGlobal \nFSharpTokenKind.Static \nStatic \nFSharpTokenKind.Member \nMember \nFSharpTokenKind.Class \nClass \nFSharpTokenKind.Abstract \nAbstract \nFSharpTokenKind.Override \nOverride \nFSharpTokenKind.Default \nDefault \nFSharpTokenKind.Constructor \nConstructor \nFSharpTokenKind.Inherit \nInherit \nFSharpTokenKind.GreaterRightBracket \nGreaterRightBracket \nFSharpTokenKind.Struct \nStruct \nFSharpTokenKind.Sig \nSig \nFSharpTokenKind.Bar \nBar \nFSharpTokenKind.RightBracket \nRightBracket \nFSharpTokenKind.RightBrace \nRightBrace \nFSharpTokenKind.Minus \nMinus \nFSharpTokenKind.Dollar \nDollar \nFSharpTokenKind.BarRightBracket \nBarRightBracket \nFSharpTokenKind.BarRightBrace \nBarRightBrace \nFSharpTokenKind.Underscore \nUnderscore \nFSharpTokenKind.Semicolon \nSemicolon \nFSharpTokenKind.SemicolonSemicolon \nSemicolonSemicolon \nFSharpTokenKind.LeftArrow \nLeftArrow \nFSharpTokenKind.Equals \nEquals \nFSharpTokenKind.LeftBracket \nLeftBracket \nFSharpTokenKind.LeftBracketBar \nLeftBracketBar \nFSharpTokenKind.LeftBraceBar \nLeftBraceBar \nFSharpTokenKind.LeftBracketLess \nLeftBracketLess \nFSharpTokenKind.LeftBrace \nLeftBrace \nFSharpTokenKind.QuestionMark \nQuestionMark \nFSharpTokenKind.QuestionMarkQuestionMark \nQuestionMarkQuestionMark \nFSharpTokenKind.Dot \nDot \nFSharpTokenKind.Colon \nColon \nFSharpTokenKind.ColonColon \nColonColon \nFSharpTokenKind.ColonGreater \nColonGreater \nFSharpTokenKind.ColonQuestionMark \nColonQuestionMark \nFSharpTokenKind.ColonQuestionMarkGreater \nColonQuestionMarkGreater \nFSharpTokenKind.ColonEquals \nColonEquals \nFSharpTokenKind.When \nWhen \nFSharpTokenKind.While \nWhile \nFSharpTokenKind.WhileBang \nWhileBang \nFSharpTokenKind.With \nWith \nFSharpTokenKind.Hash \nHash \nFSharpTokenKind.Ampersand \nAmpersand \nFSharpTokenKind.AmpersandAmpersand \nAmpersandAmpersand \nFSharpTokenKind.Quote \nQuote \nFSharpTokenKind.LeftParenthesis \nLeftParenthesis \nFSharpTokenKind.RightParenthesis \nRightParenthesis \nFSharpTokenKind.Star \nStar \nFSharpTokenKind.Comma \nComma \nFSharpTokenKind.RightArrow \nRightArrow \nFSharpTokenKind.GreaterBarRightBracket \nGreaterBarRightBracket \nFSharpTokenKind.GreaterBarRightBrace \nGreaterBarRightBrace \nFSharpTokenKind.RQuoteBarRightBrace \nRQuoteBarRightBrace \nFSharpTokenKind.LeftParenthesisStarRightParenthesis \nLeftParenthesisStarRightParenthesis \nFSharpTokenKind.Open \nOpen \nFSharpTokenKind.Or \nOr \nFSharpTokenKind.Rec \nRec \nFSharpTokenKind.Then \nThen \nFSharpTokenKind.To \nTo \nFSharpTokenKind.True \nTrue \nFSharpTokenKind.Try \nTry \nFSharpTokenKind.Type \nType \nFSharpTokenKind.Val \nVal \nFSharpTokenKind.Inline \nInline \nFSharpTokenKind.Interface \nInterface \nFSharpTokenKind.Instance \nInstance \nFSharpTokenKind.Const \nConst \nFSharpTokenKind.Lazy \nLazy \nFSharpTokenKind.OffsideLazy \nOffsideLazy \nFSharpTokenKind.Match \nMatch \nFSharpTokenKind.MatchBang \nMatchBang \nFSharpTokenKind.Mutable \nMutable \nFSharpTokenKind.New \nNew \nFSharpTokenKind.Of \nOf \nFSharpTokenKind.Exception \nException \nFSharpTokenKind.False \nFalse \nFSharpTokenKind.For \nFor \nFSharpTokenKind.Fun \nFun \nFSharpTokenKind.Function \nFunction \nFSharpTokenKind.If \nIf \nFSharpTokenKind.In \nIn \nFSharpTokenKind.JoinIn \nJoinIn \nFSharpTokenKind.Finally \nFinally \nFSharpTokenKind.DoBang \nDoBang \nFSharpTokenKind.And \nAnd \nFSharpTokenKind.As \nAs \nFSharpTokenKind.Assert \nAssert \nFSharpTokenKind.OffsideAssert \nOffsideAssert \nFSharpTokenKind.Begin \nBegin \nFSharpTokenKind.Do \nDo \nFSharpTokenKind.Done \nDone \nFSharpTokenKind.DownTo \nDownTo \nFSharpTokenKind.Else \nElse \nFSharpTokenKind.Elif \nElif \nFSharpTokenKind.End \nEnd \nFSharpTokenKind.DotDot \nDotDot \nFSharpTokenKind.DotDotHat \nDotDotHat \nFSharpTokenKind.BarBar \nBarBar \nFSharpTokenKind.Upcast \nUpcast \nFSharpTokenKind.Downcast \nDowncast \nFSharpTokenKind.Null \nNull \nFSharpTokenKind.Reserved \nReserved \nFSharpTokenKind.Module \nModule \nFSharpTokenKind.Namespace \nNamespace \nFSharpTokenKind.Delegate \nDelegate \nFSharpTokenKind.Constraint \nConstraint \nFSharpTokenKind.Base \nBase \nFSharpTokenKind.LeftQuote \nLeftQuote \nFSharpTokenKind.RightQuote \nRightQuote \nFSharpTokenKind.RightQuoteDot \nRightQuoteDot \nFSharpTokenKind.PercentOperator \nPercentOperator \nFSharpTokenKind.Binder \nBinder \nFSharpTokenKind.Less \nLess \nFSharpTokenKind.Greater \nGreater \nFSharpTokenKind.Let \nLet \nFSharpTokenKind.Yield \nYield \nFSharpTokenKind.YieldBang \nYieldBang \nFSharpTokenKind.BigNumber \nBigNumber \nFSharpTokenKind.Decimal \nDecimal \nFSharpTokenKind.Char \nChar \nFSharpTokenKind.Ieee64 \nIeee64 \nFSharpTokenKind.Ieee32 \nIeee32 \nFSharpTokenKind.NativeInt \nNativeInt \nFSharpTokenKind.UNativeInt \nUNativeInt \nFSharpTokenKind.UInt64 \nUInt64 \nFSharpTokenKind.UInt32 \nUInt32 \nFSharpTokenKind.UInt16 \nUInt16 \nFSharpTokenKind.UInt8 \nUInt8 \nFSharpTokenKind.Int64 \nInt64 \nFSharpTokenKind.Int32 \nInt32 \nFSharpTokenKind.Int32DotDot \nInt32DotDot \nFSharpTokenKind.Int16 \nInt16 \nFSharpTokenKind.Int8 \nInt8 \nFSharpTokenKind.FunkyOperatorName \nFunkyOperatorName \nFSharpTokenKind.AdjacentPrefixOperator \nAdjacentPrefixOperator \nFSharpTokenKind.PlusMinusOperator \nPlusMinusOperator \nFSharpTokenKind.InfixAmpersandOperator \nInfixAmpersandOperator \nFSharpTokenKind.InfixStarDivideModuloOperator \nInfixStarDivideModuloOperator \nFSharpTokenKind.PrefixOperator \nPrefixOperator \nFSharpTokenKind.InfixBarOperator \nInfixBarOperator \nFSharpTokenKind.InfixAtHatOperator \nInfixAtHatOperator \nFSharpTokenKind.InfixCompareOperator \nInfixCompareOperator \nFSharpTokenKind.InfixStarStarOperator \nInfixStarStarOperator \nFSharpTokenKind.Identifier \nIdentifier \nFSharpTokenKind.KeywordString \nKeywordString \nFSharpTokenKind.String \nString \nFSharpTokenKind.ByteArray \nByteArray \nFSharpTokenKind.Asr \nAsr \nFSharpTokenKind.InfixAsr \nInfixAsr \nFSharpTokenKind.InfixLand \nInfixLand \nFSharpTokenKind.InfixLor \nInfixLor \nFSharpTokenKind.InfixLsl \nInfixLsl \nFSharpTokenKind.InfixLsr \nInfixLsr \nFSharpTokenKind.InfixLxor \nInfixLxor \nFSharpTokenKind.InfixMod \nInfixMod","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsInline","title":"FSharpTokenKind.IsInline","content":"FSharpTokenKind.IsInline \nIsInline \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsMatch","title":"FSharpTokenKind.IsMatch","content":"FSharpTokenKind.IsMatch \nIsMatch \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsNativeInt","title":"FSharpTokenKind.IsNativeInt","content":"FSharpTokenKind.IsNativeInt \nIsNativeInt \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsOffsideBlockBegin","title":"FSharpTokenKind.IsOffsideBlockBegin","content":"FSharpTokenKind.IsOffsideBlockBegin \nIsOffsideBlockBegin \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsOffsideElse","title":"FSharpTokenKind.IsOffsideElse","content":"FSharpTokenKind.IsOffsideElse \nIsOffsideElse \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsDefault","title":"FSharpTokenKind.IsDefault","content":"FSharpTokenKind.IsDefault \nIsDefault \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsInfixAtHatOperator","title":"FSharpTokenKind.IsInfixAtHatOperator","content":"FSharpTokenKind.IsInfixAtHatOperator \nIsInfixAtHatOperator \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsUnderscore","title":"FSharpTokenKind.IsUnderscore","content":"FSharpTokenKind.IsUnderscore \nIsUnderscore \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsWhen","title":"FSharpTokenKind.IsWhen","content":"FSharpTokenKind.IsWhen \nIsWhen \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsStar","title":"FSharpTokenKind.IsStar","content":"FSharpTokenKind.IsStar \nIsStar \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsBar","title":"FSharpTokenKind.IsBar","content":"FSharpTokenKind.IsBar \nIsBar \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsClass","title":"FSharpTokenKind.IsClass","content":"FSharpTokenKind.IsClass \nIsClass \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsInt32DotDot","title":"FSharpTokenKind.IsInt32DotDot","content":"FSharpTokenKind.IsInt32DotDot \nIsInt32DotDot \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsFun","title":"FSharpTokenKind.IsFun","content":"FSharpTokenKind.IsFun \nIsFun \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsGlobal","title":"FSharpTokenKind.IsGlobal","content":"FSharpTokenKind.IsGlobal \nIsGlobal \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsOr","title":"FSharpTokenKind.IsOr","content":"FSharpTokenKind.IsOr \nIsOr \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsSemicolon","title":"FSharpTokenKind.IsSemicolon","content":"FSharpTokenKind.IsSemicolon \nIsSemicolon \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsIeee64","title":"FSharpTokenKind.IsIeee64","content":"FSharpTokenKind.IsIeee64 \nIsIeee64 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsGreaterRightBracket","title":"FSharpTokenKind.IsGreaterRightBracket","content":"FSharpTokenKind.IsGreaterRightBracket \nIsGreaterRightBracket \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsOffsideDeclEnd","title":"FSharpTokenKind.IsOffsideDeclEnd","content":"FSharpTokenKind.IsOffsideDeclEnd \nIsOffsideDeclEnd \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsInfixStarDivideModuloOperator","title":"FSharpTokenKind.IsInfixStarDivideModuloOperator","content":"FSharpTokenKind.IsInfixStarDivideModuloOperator \nIsInfixStarDivideModuloOperator \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsHashLight","title":"FSharpTokenKind.IsHashLight","content":"FSharpTokenKind.IsHashLight \nIsHashLight \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsUInt8","title":"FSharpTokenKind.IsUInt8","content":"FSharpTokenKind.IsUInt8 \nIsUInt8 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsOffsideBinder","title":"FSharpTokenKind.IsOffsideBinder","content":"FSharpTokenKind.IsOffsideBinder \nIsOffsideBinder \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsQuestionMarkQuestionMark","title":"FSharpTokenKind.IsQuestionMarkQuestionMark","content":"FSharpTokenKind.IsQuestionMarkQuestionMark \nIsQuestionMarkQuestionMark \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsSemicolonSemicolon","title":"FSharpTokenKind.IsSemicolonSemicolon","content":"FSharpTokenKind.IsSemicolonSemicolon \nIsSemicolonSemicolon \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsSig","title":"FSharpTokenKind.IsSig","content":"FSharpTokenKind.IsSig \nIsSig \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsString","title":"FSharpTokenKind.IsString","content":"FSharpTokenKind.IsString \nIsString \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsVal","title":"FSharpTokenKind.IsVal","content":"FSharpTokenKind.IsVal \nIsVal \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsLeftBracketBar","title":"FSharpTokenKind.IsLeftBracketBar","content":"FSharpTokenKind.IsLeftBracketBar \nIsLeftBracketBar \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsInfixLsr","title":"FSharpTokenKind.IsInfixLsr","content":"FSharpTokenKind.IsInfixLsr \nIsInfixLsr \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsFunkyOperatorName","title":"FSharpTokenKind.IsFunkyOperatorName","content":"FSharpTokenKind.IsFunkyOperatorName \nIsFunkyOperatorName \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsInt16","title":"FSharpTokenKind.IsInt16","content":"FSharpTokenKind.IsInt16 \nIsInt16 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsMember","title":"FSharpTokenKind.IsMember","content":"FSharpTokenKind.IsMember \nIsMember \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsEquals","title":"FSharpTokenKind.IsEquals","content":"FSharpTokenKind.IsEquals \nIsEquals \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsFor","title":"FSharpTokenKind.IsFor","content":"FSharpTokenKind.IsFor \nIsFor \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsUpcast","title":"FSharpTokenKind.IsUpcast","content":"FSharpTokenKind.IsUpcast \nIsUpcast \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsCommentTrivia","title":"FSharpTokenKind.IsCommentTrivia","content":"FSharpTokenKind.IsCommentTrivia \nIsCommentTrivia \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsOverride","title":"FSharpTokenKind.IsOverride","content":"FSharpTokenKind.IsOverride \nIsOverride \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsRightQuote","title":"FSharpTokenKind.IsRightQuote","content":"FSharpTokenKind.IsRightQuote \nIsRightQuote \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsLeftParenthesisStarRightParenthesis","title":"FSharpTokenKind.IsLeftParenthesisStarRightParenthesis","content":"FSharpTokenKind.IsLeftParenthesisStarRightParenthesis \nIsLeftParenthesisStarRightParenthesis \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsHash","title":"FSharpTokenKind.IsHash","content":"FSharpTokenKind.IsHash \nIsHash \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsHighPrecedenceTypeApp","title":"FSharpTokenKind.IsHighPrecedenceTypeApp","content":"FSharpTokenKind.IsHighPrecedenceTypeApp \nIsHighPrecedenceTypeApp \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsWarnDirective","title":"FSharpTokenKind.IsWarnDirective","content":"FSharpTokenKind.IsWarnDirective \nIsWarnDirective \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsBarBar","title":"FSharpTokenKind.IsBarBar","content":"FSharpTokenKind.IsBarBar \nIsBarBar \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsColonQuestionMark","title":"FSharpTokenKind.IsColonQuestionMark","content":"FSharpTokenKind.IsColonQuestionMark \nIsColonQuestionMark \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsFinally","title":"FSharpTokenKind.IsFinally","content":"FSharpTokenKind.IsFinally \nIsFinally \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsInt8","title":"FSharpTokenKind.IsInt8","content":"FSharpTokenKind.IsInt8 \nIsInt8 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsPercentOperator","title":"FSharpTokenKind.IsPercentOperator","content":"FSharpTokenKind.IsPercentOperator \nIsPercentOperator \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsReserved","title":"FSharpTokenKind.IsReserved","content":"FSharpTokenKind.IsReserved \nIsReserved \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsAmpersand","title":"FSharpTokenKind.IsAmpersand","content":"FSharpTokenKind.IsAmpersand \nIsAmpersand \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsNew","title":"FSharpTokenKind.IsNew","content":"FSharpTokenKind.IsNew \nIsNew \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsBarRightBrace","title":"FSharpTokenKind.IsBarRightBrace","content":"FSharpTokenKind.IsBarRightBrace \nIsBarRightBrace \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsElif","title":"FSharpTokenKind.IsElif","content":"FSharpTokenKind.IsElif \nIsElif \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsInternal","title":"FSharpTokenKind.IsInternal","content":"FSharpTokenKind.IsInternal \nIsInternal \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsOffsideWith","title":"FSharpTokenKind.IsOffsideWith","content":"FSharpTokenKind.IsOffsideWith \nIsOffsideWith \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsTrue","title":"FSharpTokenKind.IsTrue","content":"FSharpTokenKind.IsTrue \nIsTrue \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsRightQuoteDot","title":"FSharpTokenKind.IsRightQuoteDot","content":"FSharpTokenKind.IsRightQuoteDot \nIsRightQuoteDot \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsTry","title":"FSharpTokenKind.IsTry","content":"FSharpTokenKind.IsTry \nIsTry \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsMinus","title":"FSharpTokenKind.IsMinus","content":"FSharpTokenKind.IsMinus \nIsMinus \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsLeftBrace","title":"FSharpTokenKind.IsLeftBrace","content":"FSharpTokenKind.IsLeftBrace \nIsLeftBrace \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsInstance","title":"FSharpTokenKind.IsInstance","content":"FSharpTokenKind.IsInstance \nIsInstance \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsIn","title":"FSharpTokenKind.IsIn","content":"FSharpTokenKind.IsIn \nIsIn \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsPrivate","title":"FSharpTokenKind.IsPrivate","content":"FSharpTokenKind.IsPrivate \nIsPrivate \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsColonQuestionMarkGreater","title":"FSharpTokenKind.IsColonQuestionMarkGreater","content":"FSharpTokenKind.IsColonQuestionMarkGreater \nIsColonQuestionMarkGreater \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsChar","title":"FSharpTokenKind.IsChar","content":"FSharpTokenKind.IsChar \nIsChar \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsHashElse","title":"FSharpTokenKind.IsHashElse","content":"FSharpTokenKind.IsHashElse \nIsHashElse \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsConstraint","title":"FSharpTokenKind.IsConstraint","content":"FSharpTokenKind.IsConstraint \nIsConstraint \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsInfixLsl","title":"FSharpTokenKind.IsInfixLsl","content":"FSharpTokenKind.IsInfixLsl \nIsInfixLsl \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsOffsideFun","title":"FSharpTokenKind.IsOffsideFun","content":"FSharpTokenKind.IsOffsideFun \nIsOffsideFun \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsOffsideLet","title":"FSharpTokenKind.IsOffsideLet","content":"FSharpTokenKind.IsOffsideLet \nIsOffsideLet \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsQuote","title":"FSharpTokenKind.IsQuote","content":"FSharpTokenKind.IsQuote \nIsQuote \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsOffsideBlockSep","title":"FSharpTokenKind.IsOffsideBlockSep","content":"FSharpTokenKind.IsOffsideBlockSep \nIsOffsideBlockSep \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsIeee32","title":"FSharpTokenKind.IsIeee32","content":"FSharpTokenKind.IsIeee32 \nIsIeee32 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsJoinIn","title":"FSharpTokenKind.IsJoinIn","content":"FSharpTokenKind.IsJoinIn \nIsJoinIn \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsConstructor","title":"FSharpTokenKind.IsConstructor","content":"FSharpTokenKind.IsConstructor \nIsConstructor \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsQuestionMark","title":"FSharpTokenKind.IsQuestionMark","content":"FSharpTokenKind.IsQuestionMark \nIsQuestionMark \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsHighPrecedenceParenthesisApp","title":"FSharpTokenKind.IsHighPrecedenceParenthesisApp","content":"FSharpTokenKind.IsHighPrecedenceParenthesisApp \nIsHighPrecedenceParenthesisApp \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsInfixMod","title":"FSharpTokenKind.IsInfixMod","content":"FSharpTokenKind.IsInfixMod \nIsInfixMod \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsHashLine","title":"FSharpTokenKind.IsHashLine","content":"FSharpTokenKind.IsHashLine \nIsHashLine \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsLess","title":"FSharpTokenKind.IsLess","content":"FSharpTokenKind.IsLess \nIsLess \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsWhileBang","title":"FSharpTokenKind.IsWhileBang","content":"FSharpTokenKind.IsWhileBang \nIsWhileBang \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsExtern","title":"FSharpTokenKind.IsExtern","content":"FSharpTokenKind.IsExtern \nIsExtern \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsEnd","title":"FSharpTokenKind.IsEnd","content":"FSharpTokenKind.IsEnd \nIsEnd \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsComma","title":"FSharpTokenKind.IsComma","content":"FSharpTokenKind.IsComma \nIsComma \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsDotDotHat","title":"FSharpTokenKind.IsDotDotHat","content":"FSharpTokenKind.IsDotDotHat \nIsDotDotHat \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsMatchBang","title":"FSharpTokenKind.IsMatchBang","content":"FSharpTokenKind.IsMatchBang \nIsMatchBang \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsAnd","title":"FSharpTokenKind.IsAnd","content":"FSharpTokenKind.IsAnd \nIsAnd \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsHighPrecedenceBracketApp","title":"FSharpTokenKind.IsHighPrecedenceBracketApp","content":"FSharpTokenKind.IsHighPrecedenceBracketApp \nIsHighPrecedenceBracketApp \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsDownTo","title":"FSharpTokenKind.IsDownTo","content":"FSharpTokenKind.IsDownTo \nIsDownTo \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsElse","title":"FSharpTokenKind.IsElse","content":"FSharpTokenKind.IsElse \nIsElse \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsBase","title":"FSharpTokenKind.IsBase","content":"FSharpTokenKind.IsBase \nIsBase \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsException","title":"FSharpTokenKind.IsException","content":"FSharpTokenKind.IsException \nIsException \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsInactiveCode","title":"FSharpTokenKind.IsInactiveCode","content":"FSharpTokenKind.IsInactiveCode \nIsInactiveCode \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsLeftBraceBar","title":"FSharpTokenKind.IsLeftBraceBar","content":"FSharpTokenKind.IsLeftBraceBar \nIsLeftBraceBar \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsStruct","title":"FSharpTokenKind.IsStruct","content":"FSharpTokenKind.IsStruct \nIsStruct \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsOffsideEnd","title":"FSharpTokenKind.IsOffsideEnd","content":"FSharpTokenKind.IsOffsideEnd \nIsOffsideEnd \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsLeftBracket","title":"FSharpTokenKind.IsLeftBracket","content":"FSharpTokenKind.IsLeftBracket \nIsLeftBracket \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsWhitespaceTrivia","title":"FSharpTokenKind.IsWhitespaceTrivia","content":"FSharpTokenKind.IsWhitespaceTrivia \nIsWhitespaceTrivia \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsYield","title":"FSharpTokenKind.IsYield","content":"FSharpTokenKind.IsYield \nIsYield \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsAbstract","title":"FSharpTokenKind.IsAbstract","content":"FSharpTokenKind.IsAbstract \nIsAbstract \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsIf","title":"FSharpTokenKind.IsIf","content":"FSharpTokenKind.IsIf \nIsIf \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsFalse","title":"FSharpTokenKind.IsFalse","content":"FSharpTokenKind.IsFalse \nIsFalse \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsDot","title":"FSharpTokenKind.IsDot","content":"FSharpTokenKind.IsDot \nIsDot \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsModule","title":"FSharpTokenKind.IsModule","content":"FSharpTokenKind.IsModule \nIsModule \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsInt64","title":"FSharpTokenKind.IsInt64","content":"FSharpTokenKind.IsInt64 \nIsInt64 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsKeywordString","title":"FSharpTokenKind.IsKeywordString","content":"FSharpTokenKind.IsKeywordString \nIsKeywordString \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsColonColon","title":"FSharpTokenKind.IsColonColon","content":"FSharpTokenKind.IsColonColon \nIsColonColon \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsTo","title":"FSharpTokenKind.IsTo","content":"FSharpTokenKind.IsTo \nIsTo \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsOpen","title":"FSharpTokenKind.IsOpen","content":"FSharpTokenKind.IsOpen \nIsOpen \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsOffsideThen","title":"FSharpTokenKind.IsOffsideThen","content":"FSharpTokenKind.IsOffsideThen \nIsOffsideThen \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsNull","title":"FSharpTokenKind.IsNull","content":"FSharpTokenKind.IsNull \nIsNull \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsColon","title":"FSharpTokenKind.IsColon","content":"FSharpTokenKind.IsColon \nIsColon \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsDotDot","title":"FSharpTokenKind.IsDotDot","content":"FSharpTokenKind.IsDotDot \nIsDotDot \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsMutable","title":"FSharpTokenKind.IsMutable","content":"FSharpTokenKind.IsMutable \nIsMutable \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsFixed","title":"FSharpTokenKind.IsFixed","content":"FSharpTokenKind.IsFixed \nIsFixed \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsOffsideDo","title":"FSharpTokenKind.IsOffsideDo","content":"FSharpTokenKind.IsOffsideDo \nIsOffsideDo \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsAs","title":"FSharpTokenKind.IsAs","content":"FSharpTokenKind.IsAs \nIsAs \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsDoBang","title":"FSharpTokenKind.IsDoBang","content":"FSharpTokenKind.IsDoBang \nIsDoBang \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsInfixLor","title":"FSharpTokenKind.IsInfixLor","content":"FSharpTokenKind.IsInfixLor \nIsInfixLor \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsDowncast","title":"FSharpTokenKind.IsDowncast","content":"FSharpTokenKind.IsDowncast \nIsDowncast \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsLeftArrow","title":"FSharpTokenKind.IsLeftArrow","content":"FSharpTokenKind.IsLeftArrow \nIsLeftArrow \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsStatic","title":"FSharpTokenKind.IsStatic","content":"FSharpTokenKind.IsStatic \nIsStatic \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsUInt16","title":"FSharpTokenKind.IsUInt16","content":"FSharpTokenKind.IsUInt16 \nIsUInt16 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsDone","title":"FSharpTokenKind.IsDone","content":"FSharpTokenKind.IsDone \nIsDone \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsVoid","title":"FSharpTokenKind.IsVoid","content":"FSharpTokenKind.IsVoid \nIsVoid \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsBinder","title":"FSharpTokenKind.IsBinder","content":"FSharpTokenKind.IsBinder \nIsBinder \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsGreaterBarRightBrace","title":"FSharpTokenKind.IsGreaterBarRightBrace","content":"FSharpTokenKind.IsGreaterBarRightBrace \nIsGreaterBarRightBrace \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsRightBracket","title":"FSharpTokenKind.IsRightBracket","content":"FSharpTokenKind.IsRightBracket \nIsRightBracket \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsNone","title":"FSharpTokenKind.IsNone","content":"FSharpTokenKind.IsNone \nIsNone \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsHashEndIf","title":"FSharpTokenKind.IsHashEndIf","content":"FSharpTokenKind.IsHashEndIf \nIsHashEndIf \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsBegin","title":"FSharpTokenKind.IsBegin","content":"FSharpTokenKind.IsBegin \nIsBegin \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsLeftQuote","title":"FSharpTokenKind.IsLeftQuote","content":"FSharpTokenKind.IsLeftQuote \nIsLeftQuote \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsOf","title":"FSharpTokenKind.IsOf","content":"FSharpTokenKind.IsOf \nIsOf \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsDollar","title":"FSharpTokenKind.IsDollar","content":"FSharpTokenKind.IsDollar \nIsDollar \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsInfixLand","title":"FSharpTokenKind.IsInfixLand","content":"FSharpTokenKind.IsInfixLand \nIsInfixLand \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsUInt64","title":"FSharpTokenKind.IsUInt64","content":"FSharpTokenKind.IsUInt64 \nIsUInt64 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsByteArray","title":"FSharpTokenKind.IsByteArray","content":"FSharpTokenKind.IsByteArray \nIsByteArray \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsYieldBang","title":"FSharpTokenKind.IsYieldBang","content":"FSharpTokenKind.IsYieldBang \nIsYieldBang \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsInherit","title":"FSharpTokenKind.IsInherit","content":"FSharpTokenKind.IsInherit \nIsInherit \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsAsr","title":"FSharpTokenKind.IsAsr","content":"FSharpTokenKind.IsAsr \nIsAsr \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsOffsideAssert","title":"FSharpTokenKind.IsOffsideAssert","content":"FSharpTokenKind.IsOffsideAssert \nIsOffsideAssert \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsDelegate","title":"FSharpTokenKind.IsDelegate","content":"FSharpTokenKind.IsDelegate \nIsDelegate \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsWhile","title":"FSharpTokenKind.IsWhile","content":"FSharpTokenKind.IsWhile \nIsWhile \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsInfixBarOperator","title":"FSharpTokenKind.IsInfixBarOperator","content":"FSharpTokenKind.IsInfixBarOperator \nIsInfixBarOperator \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsType","title":"FSharpTokenKind.IsType","content":"FSharpTokenKind.IsType \nIsType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsAdjacentPrefixOperator","title":"FSharpTokenKind.IsAdjacentPrefixOperator","content":"FSharpTokenKind.IsAdjacentPrefixOperator \nIsAdjacentPrefixOperator \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsUInt32","title":"FSharpTokenKind.IsUInt32","content":"FSharpTokenKind.IsUInt32 \nIsUInt32 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsAmpersandAmpersand","title":"FSharpTokenKind.IsAmpersandAmpersand","content":"FSharpTokenKind.IsAmpersandAmpersand \nIsAmpersandAmpersand \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsOffsideLazy","title":"FSharpTokenKind.IsOffsideLazy","content":"FSharpTokenKind.IsOffsideLazy \nIsOffsideLazy \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsFunction","title":"FSharpTokenKind.IsFunction","content":"FSharpTokenKind.IsFunction \nIsFunction \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsLineCommentTrivia","title":"FSharpTokenKind.IsLineCommentTrivia","content":"FSharpTokenKind.IsLineCommentTrivia \nIsLineCommentTrivia \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsUNativeInt","title":"FSharpTokenKind.IsUNativeInt","content":"FSharpTokenKind.IsUNativeInt \nIsUNativeInt \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsLazy","title":"FSharpTokenKind.IsLazy","content":"FSharpTokenKind.IsLazy \nIsLazy \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsAssert","title":"FSharpTokenKind.IsAssert","content":"FSharpTokenKind.IsAssert \nIsAssert \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsRightParenthesis","title":"FSharpTokenKind.IsRightParenthesis","content":"FSharpTokenKind.IsRightParenthesis \nIsRightParenthesis \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsIdentifier","title":"FSharpTokenKind.IsIdentifier","content":"FSharpTokenKind.IsIdentifier \nIsIdentifier \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsNamespace","title":"FSharpTokenKind.IsNamespace","content":"FSharpTokenKind.IsNamespace \nIsNamespace \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsDecimal","title":"FSharpTokenKind.IsDecimal","content":"FSharpTokenKind.IsDecimal \nIsDecimal \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsInfixLxor","title":"FSharpTokenKind.IsInfixLxor","content":"FSharpTokenKind.IsInfixLxor \nIsInfixLxor \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsRQuoteBarRightBrace","title":"FSharpTokenKind.IsRQuoteBarRightBrace","content":"FSharpTokenKind.IsRQuoteBarRightBrace \nIsRQuoteBarRightBrace \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsPlusMinusOperator","title":"FSharpTokenKind.IsPlusMinusOperator","content":"FSharpTokenKind.IsPlusMinusOperator \nIsPlusMinusOperator \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsConst","title":"FSharpTokenKind.IsConst","content":"FSharpTokenKind.IsConst \nIsConst \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsGreater","title":"FSharpTokenKind.IsGreater","content":"FSharpTokenKind.IsGreater \nIsGreater \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsRec","title":"FSharpTokenKind.IsRec","content":"FSharpTokenKind.IsRec \nIsRec \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsStringText","title":"FSharpTokenKind.IsStringText","content":"FSharpTokenKind.IsStringText \nIsStringText \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsThen","title":"FSharpTokenKind.IsThen","content":"FSharpTokenKind.IsThen \nIsThen \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsInfixAmpersandOperator","title":"FSharpTokenKind.IsInfixAmpersandOperator","content":"FSharpTokenKind.IsInfixAmpersandOperator \nIsInfixAmpersandOperator \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsRightArrow","title":"FSharpTokenKind.IsRightArrow","content":"FSharpTokenKind.IsRightArrow \nIsRightArrow \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsInfixCompareOperator","title":"FSharpTokenKind.IsInfixCompareOperator","content":"FSharpTokenKind.IsInfixCompareOperator \nIsInfixCompareOperator \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsPrefixOperator","title":"FSharpTokenKind.IsPrefixOperator","content":"FSharpTokenKind.IsPrefixOperator \nIsPrefixOperator \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsGreaterBarRightBracket","title":"FSharpTokenKind.IsGreaterBarRightBracket","content":"FSharpTokenKind.IsGreaterBarRightBracket \nIsGreaterBarRightBracket \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsPublic","title":"FSharpTokenKind.IsPublic","content":"FSharpTokenKind.IsPublic \nIsPublic \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsRightBrace","title":"FSharpTokenKind.IsRightBrace","content":"FSharpTokenKind.IsRightBrace \nIsRightBrace \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsWith","title":"FSharpTokenKind.IsWith","content":"FSharpTokenKind.IsWith \nIsWith \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsOffsideBlockEnd","title":"FSharpTokenKind.IsOffsideBlockEnd","content":"FSharpTokenKind.IsOffsideBlockEnd \nIsOffsideBlockEnd \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsOffsideReset","title":"FSharpTokenKind.IsOffsideReset","content":"FSharpTokenKind.IsOffsideReset \nIsOffsideReset \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsColonGreater","title":"FSharpTokenKind.IsColonGreater","content":"FSharpTokenKind.IsColonGreater \nIsColonGreater \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsInt32","title":"FSharpTokenKind.IsInt32","content":"FSharpTokenKind.IsInt32 \nIsInt32 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsInfixAsr","title":"FSharpTokenKind.IsInfixAsr","content":"FSharpTokenKind.IsInfixAsr \nIsInfixAsr \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsBarRightBracket","title":"FSharpTokenKind.IsBarRightBracket","content":"FSharpTokenKind.IsBarRightBracket \nIsBarRightBracket \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsOffsideFunction","title":"FSharpTokenKind.IsOffsideFunction","content":"FSharpTokenKind.IsOffsideFunction \nIsOffsideFunction \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsHashIf","title":"FSharpTokenKind.IsHashIf","content":"FSharpTokenKind.IsHashIf \nIsHashIf \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsInfixStarStarOperator","title":"FSharpTokenKind.IsInfixStarStarOperator","content":"FSharpTokenKind.IsInfixStarStarOperator \nIsInfixStarStarOperator \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsOffsideDoBang","title":"FSharpTokenKind.IsOffsideDoBang","content":"FSharpTokenKind.IsOffsideDoBang \nIsOffsideDoBang \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsInterface","title":"FSharpTokenKind.IsInterface","content":"FSharpTokenKind.IsInterface \nIsInterface \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsDo","title":"FSharpTokenKind.IsDo","content":"FSharpTokenKind.IsDo \nIsDo \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsOffsideInterfaceMember","title":"FSharpTokenKind.IsOffsideInterfaceMember","content":"FSharpTokenKind.IsOffsideInterfaceMember \nIsOffsideInterfaceMember \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsOffsideRightBlockEnd","title":"FSharpTokenKind.IsOffsideRightBlockEnd","content":"FSharpTokenKind.IsOffsideRightBlockEnd \nIsOffsideRightBlockEnd \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsBigNumber","title":"FSharpTokenKind.IsBigNumber","content":"FSharpTokenKind.IsBigNumber \nIsBigNumber \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsLet","title":"FSharpTokenKind.IsLet","content":"FSharpTokenKind.IsLet \nIsLet \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsColonEquals","title":"FSharpTokenKind.IsColonEquals","content":"FSharpTokenKind.IsColonEquals \nIsColonEquals \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsLeftParenthesis","title":"FSharpTokenKind.IsLeftParenthesis","content":"FSharpTokenKind.IsLeftParenthesis \nIsLeftParenthesis \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#IsLeftBracketLess","title":"FSharpTokenKind.IsLeftBracketLess","content":"FSharpTokenKind.IsLeftBracketLess \nIsLeftBracketLess \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#None","title":"FSharpTokenKind.None","content":"FSharpTokenKind.None \nNone \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#HashIf","title":"FSharpTokenKind.HashIf","content":"FSharpTokenKind.HashIf \nHashIf \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#HashElse","title":"FSharpTokenKind.HashElse","content":"FSharpTokenKind.HashElse \nHashElse \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#HashEndIf","title":"FSharpTokenKind.HashEndIf","content":"FSharpTokenKind.HashEndIf \nHashEndIf \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#WarnDirective","title":"FSharpTokenKind.WarnDirective","content":"FSharpTokenKind.WarnDirective \nWarnDirective \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#CommentTrivia","title":"FSharpTokenKind.CommentTrivia","content":"FSharpTokenKind.CommentTrivia \nCommentTrivia \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#WhitespaceTrivia","title":"FSharpTokenKind.WhitespaceTrivia","content":"FSharpTokenKind.WhitespaceTrivia \nWhitespaceTrivia \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#HashLine","title":"FSharpTokenKind.HashLine","content":"FSharpTokenKind.HashLine \nHashLine \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#HashLight","title":"FSharpTokenKind.HashLight","content":"FSharpTokenKind.HashLight \nHashLight \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#InactiveCode","title":"FSharpTokenKind.InactiveCode","content":"FSharpTokenKind.InactiveCode \nInactiveCode \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#LineCommentTrivia","title":"FSharpTokenKind.LineCommentTrivia","content":"FSharpTokenKind.LineCommentTrivia \nLineCommentTrivia \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#StringText","title":"FSharpTokenKind.StringText","content":"FSharpTokenKind.StringText \nStringText \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Fixed","title":"FSharpTokenKind.Fixed","content":"FSharpTokenKind.Fixed \nFixed \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#OffsideInterfaceMember","title":"FSharpTokenKind.OffsideInterfaceMember","content":"FSharpTokenKind.OffsideInterfaceMember \nOffsideInterfaceMember \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#OffsideBlockEnd","title":"FSharpTokenKind.OffsideBlockEnd","content":"FSharpTokenKind.OffsideBlockEnd \nOffsideBlockEnd \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#OffsideRightBlockEnd","title":"FSharpTokenKind.OffsideRightBlockEnd","content":"FSharpTokenKind.OffsideRightBlockEnd \nOffsideRightBlockEnd \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#OffsideDeclEnd","title":"FSharpTokenKind.OffsideDeclEnd","content":"FSharpTokenKind.OffsideDeclEnd \nOffsideDeclEnd \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#OffsideEnd","title":"FSharpTokenKind.OffsideEnd","content":"FSharpTokenKind.OffsideEnd \nOffsideEnd \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#OffsideBlockSep","title":"FSharpTokenKind.OffsideBlockSep","content":"FSharpTokenKind.OffsideBlockSep \nOffsideBlockSep \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#OffsideBlockBegin","title":"FSharpTokenKind.OffsideBlockBegin","content":"FSharpTokenKind.OffsideBlockBegin \nOffsideBlockBegin \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#OffsideReset","title":"FSharpTokenKind.OffsideReset","content":"FSharpTokenKind.OffsideReset \nOffsideReset \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#OffsideFun","title":"FSharpTokenKind.OffsideFun","content":"FSharpTokenKind.OffsideFun \nOffsideFun \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#OffsideFunction","title":"FSharpTokenKind.OffsideFunction","content":"FSharpTokenKind.OffsideFunction \nOffsideFunction \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#OffsideWith","title":"FSharpTokenKind.OffsideWith","content":"FSharpTokenKind.OffsideWith \nOffsideWith \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#OffsideElse","title":"FSharpTokenKind.OffsideElse","content":"FSharpTokenKind.OffsideElse \nOffsideElse \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#OffsideThen","title":"FSharpTokenKind.OffsideThen","content":"FSharpTokenKind.OffsideThen \nOffsideThen \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#OffsideDoBang","title":"FSharpTokenKind.OffsideDoBang","content":"FSharpTokenKind.OffsideDoBang \nOffsideDoBang \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#OffsideDo","title":"FSharpTokenKind.OffsideDo","content":"FSharpTokenKind.OffsideDo \nOffsideDo \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#OffsideBinder","title":"FSharpTokenKind.OffsideBinder","content":"FSharpTokenKind.OffsideBinder \nOffsideBinder \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#OffsideLet","title":"FSharpTokenKind.OffsideLet","content":"FSharpTokenKind.OffsideLet \nOffsideLet \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#HighPrecedenceTypeApp","title":"FSharpTokenKind.HighPrecedenceTypeApp","content":"FSharpTokenKind.HighPrecedenceTypeApp \nHighPrecedenceTypeApp \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#HighPrecedenceParenthesisApp","title":"FSharpTokenKind.HighPrecedenceParenthesisApp","content":"FSharpTokenKind.HighPrecedenceParenthesisApp \nHighPrecedenceParenthesisApp \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#HighPrecedenceBracketApp","title":"FSharpTokenKind.HighPrecedenceBracketApp","content":"FSharpTokenKind.HighPrecedenceBracketApp \nHighPrecedenceBracketApp \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Extern","title":"FSharpTokenKind.Extern","content":"FSharpTokenKind.Extern \nExtern \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Void","title":"FSharpTokenKind.Void","content":"FSharpTokenKind.Void \nVoid \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Public","title":"FSharpTokenKind.Public","content":"FSharpTokenKind.Public \nPublic \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Private","title":"FSharpTokenKind.Private","content":"FSharpTokenKind.Private \nPrivate \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Internal","title":"FSharpTokenKind.Internal","content":"FSharpTokenKind.Internal \nInternal \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Global","title":"FSharpTokenKind.Global","content":"FSharpTokenKind.Global \nGlobal \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Static","title":"FSharpTokenKind.Static","content":"FSharpTokenKind.Static \nStatic \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Member","title":"FSharpTokenKind.Member","content":"FSharpTokenKind.Member \nMember \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Class","title":"FSharpTokenKind.Class","content":"FSharpTokenKind.Class \nClass \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Abstract","title":"FSharpTokenKind.Abstract","content":"FSharpTokenKind.Abstract \nAbstract \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Override","title":"FSharpTokenKind.Override","content":"FSharpTokenKind.Override \nOverride \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Default","title":"FSharpTokenKind.Default","content":"FSharpTokenKind.Default \nDefault \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Constructor","title":"FSharpTokenKind.Constructor","content":"FSharpTokenKind.Constructor \nConstructor \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Inherit","title":"FSharpTokenKind.Inherit","content":"FSharpTokenKind.Inherit \nInherit \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#GreaterRightBracket","title":"FSharpTokenKind.GreaterRightBracket","content":"FSharpTokenKind.GreaterRightBracket \nGreaterRightBracket \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Struct","title":"FSharpTokenKind.Struct","content":"FSharpTokenKind.Struct \nStruct \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Sig","title":"FSharpTokenKind.Sig","content":"FSharpTokenKind.Sig \nSig \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Bar","title":"FSharpTokenKind.Bar","content":"FSharpTokenKind.Bar \nBar \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#RightBracket","title":"FSharpTokenKind.RightBracket","content":"FSharpTokenKind.RightBracket \nRightBracket \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#RightBrace","title":"FSharpTokenKind.RightBrace","content":"FSharpTokenKind.RightBrace \nRightBrace \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Minus","title":"FSharpTokenKind.Minus","content":"FSharpTokenKind.Minus \nMinus \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Dollar","title":"FSharpTokenKind.Dollar","content":"FSharpTokenKind.Dollar \nDollar \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#BarRightBracket","title":"FSharpTokenKind.BarRightBracket","content":"FSharpTokenKind.BarRightBracket \nBarRightBracket \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#BarRightBrace","title":"FSharpTokenKind.BarRightBrace","content":"FSharpTokenKind.BarRightBrace \nBarRightBrace \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Underscore","title":"FSharpTokenKind.Underscore","content":"FSharpTokenKind.Underscore \nUnderscore \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Semicolon","title":"FSharpTokenKind.Semicolon","content":"FSharpTokenKind.Semicolon \nSemicolon \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#SemicolonSemicolon","title":"FSharpTokenKind.SemicolonSemicolon","content":"FSharpTokenKind.SemicolonSemicolon \nSemicolonSemicolon \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#LeftArrow","title":"FSharpTokenKind.LeftArrow","content":"FSharpTokenKind.LeftArrow \nLeftArrow \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Equals","title":"FSharpTokenKind.Equals","content":"FSharpTokenKind.Equals \nEquals \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#LeftBracket","title":"FSharpTokenKind.LeftBracket","content":"FSharpTokenKind.LeftBracket \nLeftBracket \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#LeftBracketBar","title":"FSharpTokenKind.LeftBracketBar","content":"FSharpTokenKind.LeftBracketBar \nLeftBracketBar \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#LeftBraceBar","title":"FSharpTokenKind.LeftBraceBar","content":"FSharpTokenKind.LeftBraceBar \nLeftBraceBar \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#LeftBracketLess","title":"FSharpTokenKind.LeftBracketLess","content":"FSharpTokenKind.LeftBracketLess \nLeftBracketLess \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#LeftBrace","title":"FSharpTokenKind.LeftBrace","content":"FSharpTokenKind.LeftBrace \nLeftBrace \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#QuestionMark","title":"FSharpTokenKind.QuestionMark","content":"FSharpTokenKind.QuestionMark \nQuestionMark \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#QuestionMarkQuestionMark","title":"FSharpTokenKind.QuestionMarkQuestionMark","content":"FSharpTokenKind.QuestionMarkQuestionMark \nQuestionMarkQuestionMark \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Dot","title":"FSharpTokenKind.Dot","content":"FSharpTokenKind.Dot \nDot \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Colon","title":"FSharpTokenKind.Colon","content":"FSharpTokenKind.Colon \nColon \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#ColonColon","title":"FSharpTokenKind.ColonColon","content":"FSharpTokenKind.ColonColon \nColonColon \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#ColonGreater","title":"FSharpTokenKind.ColonGreater","content":"FSharpTokenKind.ColonGreater \nColonGreater \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#ColonQuestionMark","title":"FSharpTokenKind.ColonQuestionMark","content":"FSharpTokenKind.ColonQuestionMark \nColonQuestionMark \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#ColonQuestionMarkGreater","title":"FSharpTokenKind.ColonQuestionMarkGreater","content":"FSharpTokenKind.ColonQuestionMarkGreater \nColonQuestionMarkGreater \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#ColonEquals","title":"FSharpTokenKind.ColonEquals","content":"FSharpTokenKind.ColonEquals \nColonEquals \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#When","title":"FSharpTokenKind.When","content":"FSharpTokenKind.When \nWhen \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#While","title":"FSharpTokenKind.While","content":"FSharpTokenKind.While \nWhile \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#WhileBang","title":"FSharpTokenKind.WhileBang","content":"FSharpTokenKind.WhileBang \nWhileBang \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#With","title":"FSharpTokenKind.With","content":"FSharpTokenKind.With \nWith \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Hash","title":"FSharpTokenKind.Hash","content":"FSharpTokenKind.Hash \nHash \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Ampersand","title":"FSharpTokenKind.Ampersand","content":"FSharpTokenKind.Ampersand \nAmpersand \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#AmpersandAmpersand","title":"FSharpTokenKind.AmpersandAmpersand","content":"FSharpTokenKind.AmpersandAmpersand \nAmpersandAmpersand \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Quote","title":"FSharpTokenKind.Quote","content":"FSharpTokenKind.Quote \nQuote \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#LeftParenthesis","title":"FSharpTokenKind.LeftParenthesis","content":"FSharpTokenKind.LeftParenthesis \nLeftParenthesis \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#RightParenthesis","title":"FSharpTokenKind.RightParenthesis","content":"FSharpTokenKind.RightParenthesis \nRightParenthesis \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Star","title":"FSharpTokenKind.Star","content":"FSharpTokenKind.Star \nStar \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Comma","title":"FSharpTokenKind.Comma","content":"FSharpTokenKind.Comma \nComma \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#RightArrow","title":"FSharpTokenKind.RightArrow","content":"FSharpTokenKind.RightArrow \nRightArrow \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#GreaterBarRightBracket","title":"FSharpTokenKind.GreaterBarRightBracket","content":"FSharpTokenKind.GreaterBarRightBracket \nGreaterBarRightBracket \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#GreaterBarRightBrace","title":"FSharpTokenKind.GreaterBarRightBrace","content":"FSharpTokenKind.GreaterBarRightBrace \nGreaterBarRightBrace \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#RQuoteBarRightBrace","title":"FSharpTokenKind.RQuoteBarRightBrace","content":"FSharpTokenKind.RQuoteBarRightBrace \nRQuoteBarRightBrace \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#LeftParenthesisStarRightParenthesis","title":"FSharpTokenKind.LeftParenthesisStarRightParenthesis","content":"FSharpTokenKind.LeftParenthesisStarRightParenthesis \nLeftParenthesisStarRightParenthesis \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Open","title":"FSharpTokenKind.Open","content":"FSharpTokenKind.Open \nOpen \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Or","title":"FSharpTokenKind.Or","content":"FSharpTokenKind.Or \nOr \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Rec","title":"FSharpTokenKind.Rec","content":"FSharpTokenKind.Rec \nRec \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Then","title":"FSharpTokenKind.Then","content":"FSharpTokenKind.Then \nThen \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#To","title":"FSharpTokenKind.To","content":"FSharpTokenKind.To \nTo \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#True","title":"FSharpTokenKind.True","content":"FSharpTokenKind.True \nTrue \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Try","title":"FSharpTokenKind.Try","content":"FSharpTokenKind.Try \nTry \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Type","title":"FSharpTokenKind.Type","content":"FSharpTokenKind.Type \nType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Val","title":"FSharpTokenKind.Val","content":"FSharpTokenKind.Val \nVal \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Inline","title":"FSharpTokenKind.Inline","content":"FSharpTokenKind.Inline \nInline \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Interface","title":"FSharpTokenKind.Interface","content":"FSharpTokenKind.Interface \nInterface \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Instance","title":"FSharpTokenKind.Instance","content":"FSharpTokenKind.Instance \nInstance \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Const","title":"FSharpTokenKind.Const","content":"FSharpTokenKind.Const \nConst \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Lazy","title":"FSharpTokenKind.Lazy","content":"FSharpTokenKind.Lazy \nLazy \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#OffsideLazy","title":"FSharpTokenKind.OffsideLazy","content":"FSharpTokenKind.OffsideLazy \nOffsideLazy \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Match","title":"FSharpTokenKind.Match","content":"FSharpTokenKind.Match \nMatch \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#MatchBang","title":"FSharpTokenKind.MatchBang","content":"FSharpTokenKind.MatchBang \nMatchBang \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Mutable","title":"FSharpTokenKind.Mutable","content":"FSharpTokenKind.Mutable \nMutable \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#New","title":"FSharpTokenKind.New","content":"FSharpTokenKind.New \nNew \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Of","title":"FSharpTokenKind.Of","content":"FSharpTokenKind.Of \nOf \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Exception","title":"FSharpTokenKind.Exception","content":"FSharpTokenKind.Exception \nException \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#False","title":"FSharpTokenKind.False","content":"FSharpTokenKind.False \nFalse \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#For","title":"FSharpTokenKind.For","content":"FSharpTokenKind.For \nFor \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Fun","title":"FSharpTokenKind.Fun","content":"FSharpTokenKind.Fun \nFun \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Function","title":"FSharpTokenKind.Function","content":"FSharpTokenKind.Function \nFunction \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#If","title":"FSharpTokenKind.If","content":"FSharpTokenKind.If \nIf \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#In","title":"FSharpTokenKind.In","content":"FSharpTokenKind.In \nIn \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#JoinIn","title":"FSharpTokenKind.JoinIn","content":"FSharpTokenKind.JoinIn \nJoinIn \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Finally","title":"FSharpTokenKind.Finally","content":"FSharpTokenKind.Finally \nFinally \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#DoBang","title":"FSharpTokenKind.DoBang","content":"FSharpTokenKind.DoBang \nDoBang \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#And","title":"FSharpTokenKind.And","content":"FSharpTokenKind.And \nAnd \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#As","title":"FSharpTokenKind.As","content":"FSharpTokenKind.As \nAs \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Assert","title":"FSharpTokenKind.Assert","content":"FSharpTokenKind.Assert \nAssert \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#OffsideAssert","title":"FSharpTokenKind.OffsideAssert","content":"FSharpTokenKind.OffsideAssert \nOffsideAssert \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Begin","title":"FSharpTokenKind.Begin","content":"FSharpTokenKind.Begin \nBegin \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Do","title":"FSharpTokenKind.Do","content":"FSharpTokenKind.Do \nDo \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Done","title":"FSharpTokenKind.Done","content":"FSharpTokenKind.Done \nDone \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#DownTo","title":"FSharpTokenKind.DownTo","content":"FSharpTokenKind.DownTo \nDownTo \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Else","title":"FSharpTokenKind.Else","content":"FSharpTokenKind.Else \nElse \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Elif","title":"FSharpTokenKind.Elif","content":"FSharpTokenKind.Elif \nElif \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#End","title":"FSharpTokenKind.End","content":"FSharpTokenKind.End \nEnd \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#DotDot","title":"FSharpTokenKind.DotDot","content":"FSharpTokenKind.DotDot \nDotDot \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#DotDotHat","title":"FSharpTokenKind.DotDotHat","content":"FSharpTokenKind.DotDotHat \nDotDotHat \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#BarBar","title":"FSharpTokenKind.BarBar","content":"FSharpTokenKind.BarBar \nBarBar \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Upcast","title":"FSharpTokenKind.Upcast","content":"FSharpTokenKind.Upcast \nUpcast \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Downcast","title":"FSharpTokenKind.Downcast","content":"FSharpTokenKind.Downcast \nDowncast \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Null","title":"FSharpTokenKind.Null","content":"FSharpTokenKind.Null \nNull \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Reserved","title":"FSharpTokenKind.Reserved","content":"FSharpTokenKind.Reserved \nReserved \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Module","title":"FSharpTokenKind.Module","content":"FSharpTokenKind.Module \nModule \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Namespace","title":"FSharpTokenKind.Namespace","content":"FSharpTokenKind.Namespace \nNamespace \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Delegate","title":"FSharpTokenKind.Delegate","content":"FSharpTokenKind.Delegate \nDelegate \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Constraint","title":"FSharpTokenKind.Constraint","content":"FSharpTokenKind.Constraint \nConstraint \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Base","title":"FSharpTokenKind.Base","content":"FSharpTokenKind.Base \nBase \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#LeftQuote","title":"FSharpTokenKind.LeftQuote","content":"FSharpTokenKind.LeftQuote \nLeftQuote \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#RightQuote","title":"FSharpTokenKind.RightQuote","content":"FSharpTokenKind.RightQuote \nRightQuote \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#RightQuoteDot","title":"FSharpTokenKind.RightQuoteDot","content":"FSharpTokenKind.RightQuoteDot \nRightQuoteDot \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#PercentOperator","title":"FSharpTokenKind.PercentOperator","content":"FSharpTokenKind.PercentOperator \nPercentOperator \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Binder","title":"FSharpTokenKind.Binder","content":"FSharpTokenKind.Binder \nBinder \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Less","title":"FSharpTokenKind.Less","content":"FSharpTokenKind.Less \nLess \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Greater","title":"FSharpTokenKind.Greater","content":"FSharpTokenKind.Greater \nGreater \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Let","title":"FSharpTokenKind.Let","content":"FSharpTokenKind.Let \nLet \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Yield","title":"FSharpTokenKind.Yield","content":"FSharpTokenKind.Yield \nYield \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#YieldBang","title":"FSharpTokenKind.YieldBang","content":"FSharpTokenKind.YieldBang \nYieldBang \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#BigNumber","title":"FSharpTokenKind.BigNumber","content":"FSharpTokenKind.BigNumber \nBigNumber \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Decimal","title":"FSharpTokenKind.Decimal","content":"FSharpTokenKind.Decimal \nDecimal \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Char","title":"FSharpTokenKind.Char","content":"FSharpTokenKind.Char \nChar \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Ieee64","title":"FSharpTokenKind.Ieee64","content":"FSharpTokenKind.Ieee64 \nIeee64 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Ieee32","title":"FSharpTokenKind.Ieee32","content":"FSharpTokenKind.Ieee32 \nIeee32 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#NativeInt","title":"FSharpTokenKind.NativeInt","content":"FSharpTokenKind.NativeInt \nNativeInt \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#UNativeInt","title":"FSharpTokenKind.UNativeInt","content":"FSharpTokenKind.UNativeInt \nUNativeInt \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#UInt64","title":"FSharpTokenKind.UInt64","content":"FSharpTokenKind.UInt64 \nUInt64 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#UInt32","title":"FSharpTokenKind.UInt32","content":"FSharpTokenKind.UInt32 \nUInt32 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#UInt16","title":"FSharpTokenKind.UInt16","content":"FSharpTokenKind.UInt16 \nUInt16 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#UInt8","title":"FSharpTokenKind.UInt8","content":"FSharpTokenKind.UInt8 \nUInt8 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Int64","title":"FSharpTokenKind.Int64","content":"FSharpTokenKind.Int64 \nInt64 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Int32","title":"FSharpTokenKind.Int32","content":"FSharpTokenKind.Int32 \nInt32 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Int32DotDot","title":"FSharpTokenKind.Int32DotDot","content":"FSharpTokenKind.Int32DotDot \nInt32DotDot \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Int16","title":"FSharpTokenKind.Int16","content":"FSharpTokenKind.Int16 \nInt16 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Int8","title":"FSharpTokenKind.Int8","content":"FSharpTokenKind.Int8 \nInt8 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#FunkyOperatorName","title":"FSharpTokenKind.FunkyOperatorName","content":"FSharpTokenKind.FunkyOperatorName \nFunkyOperatorName \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#AdjacentPrefixOperator","title":"FSharpTokenKind.AdjacentPrefixOperator","content":"FSharpTokenKind.AdjacentPrefixOperator \nAdjacentPrefixOperator \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#PlusMinusOperator","title":"FSharpTokenKind.PlusMinusOperator","content":"FSharpTokenKind.PlusMinusOperator \nPlusMinusOperator \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#InfixAmpersandOperator","title":"FSharpTokenKind.InfixAmpersandOperator","content":"FSharpTokenKind.InfixAmpersandOperator \nInfixAmpersandOperator \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#InfixStarDivideModuloOperator","title":"FSharpTokenKind.InfixStarDivideModuloOperator","content":"FSharpTokenKind.InfixStarDivideModuloOperator \nInfixStarDivideModuloOperator \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#PrefixOperator","title":"FSharpTokenKind.PrefixOperator","content":"FSharpTokenKind.PrefixOperator \nPrefixOperator \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#InfixBarOperator","title":"FSharpTokenKind.InfixBarOperator","content":"FSharpTokenKind.InfixBarOperator \nInfixBarOperator \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#InfixAtHatOperator","title":"FSharpTokenKind.InfixAtHatOperator","content":"FSharpTokenKind.InfixAtHatOperator \nInfixAtHatOperator \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#InfixCompareOperator","title":"FSharpTokenKind.InfixCompareOperator","content":"FSharpTokenKind.InfixCompareOperator \nInfixCompareOperator \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#InfixStarStarOperator","title":"FSharpTokenKind.InfixStarStarOperator","content":"FSharpTokenKind.InfixStarStarOperator \nInfixStarStarOperator \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Identifier","title":"FSharpTokenKind.Identifier","content":"FSharpTokenKind.Identifier \nIdentifier \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#KeywordString","title":"FSharpTokenKind.KeywordString","content":"FSharpTokenKind.KeywordString \nKeywordString \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#String","title":"FSharpTokenKind.String","content":"FSharpTokenKind.String \nString \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#ByteArray","title":"FSharpTokenKind.ByteArray","content":"FSharpTokenKind.ByteArray \nByteArray \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Asr","title":"FSharpTokenKind.Asr","content":"FSharpTokenKind.Asr \nAsr \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#InfixAsr","title":"FSharpTokenKind.InfixAsr","content":"FSharpTokenKind.InfixAsr \nInfixAsr \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#InfixLand","title":"FSharpTokenKind.InfixLand","content":"FSharpTokenKind.InfixLand \nInfixLand \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#InfixLor","title":"FSharpTokenKind.InfixLor","content":"FSharpTokenKind.InfixLor \nInfixLor \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#InfixLsl","title":"FSharpTokenKind.InfixLsl","content":"FSharpTokenKind.InfixLsl \nInfixLsl \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#InfixLsr","title":"FSharpTokenKind.InfixLsr","content":"FSharpTokenKind.InfixLsr \nInfixLsr \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#InfixLxor","title":"FSharpTokenKind.InfixLxor","content":"FSharpTokenKind.InfixLxor \nInfixLxor \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#InfixMod","title":"FSharpTokenKind.InfixMod","content":"FSharpTokenKind.InfixMod \nInfixMod \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentriggerclass.html","title":"FSharpTokenTriggerClass","content":"FSharpTokenTriggerClass \n Gives an indication of what should happen when the token is typed in an IDE \nFSharpTokenTriggerClass.None \nNone \nFSharpTokenTriggerClass.MemberSelect \nMemberSelect \nFSharpTokenTriggerClass.MatchBraces \nMatchBraces \nFSharpTokenTriggerClass.ChoiceSelect \nChoiceSelect \nFSharpTokenTriggerClass.MethodTip \nMethodTip \nFSharpTokenTriggerClass.ParamStart \nParamStart \nFSharpTokenTriggerClass.ParamNext \nParamNext \nFSharpTokenTriggerClass.ParamEnd \nParamEnd","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentriggerclass.html#None","title":"FSharpTokenTriggerClass.None","content":"FSharpTokenTriggerClass.None \nNone \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentriggerclass.html#MemberSelect","title":"FSharpTokenTriggerClass.MemberSelect","content":"FSharpTokenTriggerClass.MemberSelect \nMemberSelect \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentriggerclass.html#MatchBraces","title":"FSharpTokenTriggerClass.MatchBraces","content":"FSharpTokenTriggerClass.MatchBraces \nMatchBraces \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentriggerclass.html#ChoiceSelect","title":"FSharpTokenTriggerClass.ChoiceSelect","content":"FSharpTokenTriggerClass.ChoiceSelect \nChoiceSelect \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentriggerclass.html#MethodTip","title":"FSharpTokenTriggerClass.MethodTip","content":"FSharpTokenTriggerClass.MethodTip \nMethodTip \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentriggerclass.html#ParamStart","title":"FSharpTokenTriggerClass.ParamStart","content":"FSharpTokenTriggerClass.ParamStart \nParamStart \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentriggerclass.html#ParamNext","title":"FSharpTokenTriggerClass.ParamNext","content":"FSharpTokenTriggerClass.ParamNext \nParamNext \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentriggerclass.html#ParamEnd","title":"FSharpTokenTriggerClass.ParamEnd","content":"FSharpTokenTriggerClass.ParamEnd \nParamEnd \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenizercolorstate.html","title":"FSharpTokenizerColorState","content":"FSharpTokenizerColorState \n Represents stable information for the state of the lexing engine at the end of a line \nFSharpTokenizerColorState.Token \nToken \nFSharpTokenizerColorState.IfDefSkip \nIfDefSkip \nFSharpTokenizerColorState.String \nString \nFSharpTokenizerColorState.Comment \nComment \nFSharpTokenizerColorState.StringInComment \nStringInComment \nFSharpTokenizerColorState.VerbatimStringInComment \nVerbatimStringInComment \nFSharpTokenizerColorState.CamlOnly \nCamlOnly \nFSharpTokenizerColorState.VerbatimString \nVerbatimString \nFSharpTokenizerColorState.SingleLineComment \nSingleLineComment \nFSharpTokenizerColorState.EndLineThenSkip \nEndLineThenSkip \nFSharpTokenizerColorState.EndLineThenToken \nEndLineThenToken \nFSharpTokenizerColorState.TripleQuoteString \nTripleQuoteString \nFSharpTokenizerColorState.TripleQuoteStringInComment \nTripleQuoteStringInComment \nFSharpTokenizerColorState.InitialState \nInitialState","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenizercolorstate.html#Token","title":"FSharpTokenizerColorState.Token","content":"FSharpTokenizerColorState.Token \nToken \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenizercolorstate.html#IfDefSkip","title":"FSharpTokenizerColorState.IfDefSkip","content":"FSharpTokenizerColorState.IfDefSkip \nIfDefSkip \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenizercolorstate.html#String","title":"FSharpTokenizerColorState.String","content":"FSharpTokenizerColorState.String \nString \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenizercolorstate.html#Comment","title":"FSharpTokenizerColorState.Comment","content":"FSharpTokenizerColorState.Comment \nComment \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenizercolorstate.html#StringInComment","title":"FSharpTokenizerColorState.StringInComment","content":"FSharpTokenizerColorState.StringInComment \nStringInComment \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenizercolorstate.html#VerbatimStringInComment","title":"FSharpTokenizerColorState.VerbatimStringInComment","content":"FSharpTokenizerColorState.VerbatimStringInComment \nVerbatimStringInComment \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenizercolorstate.html#CamlOnly","title":"FSharpTokenizerColorState.CamlOnly","content":"FSharpTokenizerColorState.CamlOnly \nCamlOnly \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenizercolorstate.html#VerbatimString","title":"FSharpTokenizerColorState.VerbatimString","content":"FSharpTokenizerColorState.VerbatimString \nVerbatimString \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenizercolorstate.html#SingleLineComment","title":"FSharpTokenizerColorState.SingleLineComment","content":"FSharpTokenizerColorState.SingleLineComment \nSingleLineComment \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenizercolorstate.html#EndLineThenSkip","title":"FSharpTokenizerColorState.EndLineThenSkip","content":"FSharpTokenizerColorState.EndLineThenSkip \nEndLineThenSkip \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenizercolorstate.html#EndLineThenToken","title":"FSharpTokenizerColorState.EndLineThenToken","content":"FSharpTokenizerColorState.EndLineThenToken \nEndLineThenToken \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenizercolorstate.html#TripleQuoteString","title":"FSharpTokenizerColorState.TripleQuoteString","content":"FSharpTokenizerColorState.TripleQuoteString \nTripleQuoteString \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenizercolorstate.html#TripleQuoteStringInComment","title":"FSharpTokenizerColorState.TripleQuoteStringInComment","content":"FSharpTokenizerColorState.TripleQuoteStringInComment \nTripleQuoteStringInComment \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenizercolorstate.html#InitialState","title":"FSharpTokenizerColorState.InitialState","content":"FSharpTokenizerColorState.InitialState \nInitialState \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenizerlexstate.html","title":"FSharpTokenizerLexState","content":"FSharpTokenizerLexState \n Represents encoded information for the end-of-line continuation of lexing \nFSharpTokenizerLexState.Equals \nEquals \nFSharpTokenizerLexState.Initial \nInitial \nFSharpTokenizerLexState.PosBits \nPosBits \nFSharpTokenizerLexState.OtherBits \nOtherBits","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenizerlexstate.html#Equals","title":"FSharpTokenizerLexState.Equals","content":"FSharpTokenizerLexState.Equals \nEquals \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenizerlexstate.html#Initial","title":"FSharpTokenizerLexState.Initial","content":"FSharpTokenizerLexState.Initial \nInitial \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenizerlexstate.html#PosBits","title":"FSharpTokenizerLexState.PosBits","content":"FSharpTokenizerLexState.PosBits \nPosBits \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenizerlexstate.html#OtherBits","title":"FSharpTokenizerLexState.OtherBits","content":"FSharpTokenizerLexState.OtherBits \nOtherBits \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-xml-prexmldoc.html","title":"PreXmlDoc","content":"PreXmlDoc \n Represents the XmlDoc fragments as collected from the lexer during parsing \nPreXmlDoc.ToXmlDoc \nToXmlDoc \nPreXmlDoc.Range \nRange \nPreXmlDoc.IsEmpty \nIsEmpty \nPreXmlDoc.Create \nCreate \nPreXmlDoc.Merge \nMerge \nPreXmlDoc.Empty \nEmpty","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-xml-prexmldoc.html#ToXmlDoc","title":"PreXmlDoc.ToXmlDoc","content":"PreXmlDoc.ToXmlDoc \nToXmlDoc \n Process and check the PreXmlDoc, checking with respect to the given parameter names","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-xml-prexmldoc.html#Range","title":"PreXmlDoc.Range","content":"PreXmlDoc.Range \nRange \n Get the overall range of the PreXmlDoc","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-xml-prexmldoc.html#IsEmpty","title":"PreXmlDoc.IsEmpty","content":"PreXmlDoc.IsEmpty \nIsEmpty \n Indicates if the PreXmlDoc is non-empty","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-xml-prexmldoc.html#Create","title":"PreXmlDoc.Create","content":"PreXmlDoc.Create \nCreate \n Create a PreXmlDoc from a collection of unprocessed lines","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-xml-prexmldoc.html#Merge","title":"PreXmlDoc.Merge","content":"PreXmlDoc.Merge \nMerge \n Merge two PreXmlDoc","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-xml-prexmldoc.html#Empty","title":"PreXmlDoc.Empty","content":"PreXmlDoc.Empty \nEmpty \n Get the empty PreXmlDoc","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-xml-xmldoc.html","title":"XmlDoc","content":"XmlDoc \n Represents collected XmlDoc lines \nXmlDoc.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nXmlDoc.GetElaboratedXmlLines \nGetElaboratedXmlLines \nXmlDoc.GetXmlText \nGetXmlText \nXmlDoc.NonEmpty \nNonEmpty \nXmlDoc.UnprocessedLines \nUnprocessedLines \nXmlDoc.Range \nRange \nXmlDoc.IsEmpty \nIsEmpty \nXmlDoc.Merge \nMerge \nXmlDoc.Empty \nEmpty","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-xml-xmldoc.html#\u0060\u0060.ctor\u0060\u0060","title":"XmlDoc.\u0060\u0060.ctor\u0060\u0060","content":"XmlDoc.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-xml-xmldoc.html#GetElaboratedXmlLines","title":"XmlDoc.GetElaboratedXmlLines","content":"XmlDoc.GetElaboratedXmlLines \nGetElaboratedXmlLines \n Get the lines after insertion of implicit summary tags and encoding","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-xml-xmldoc.html#GetXmlText","title":"XmlDoc.GetXmlText","content":"XmlDoc.GetXmlText \nGetXmlText \n Get the elaborated XML documentation as XML text","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-xml-xmldoc.html#NonEmpty","title":"XmlDoc.NonEmpty","content":"XmlDoc.NonEmpty \nNonEmpty \n Indicates if the XmlDoc is non-empty","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-xml-xmldoc.html#UnprocessedLines","title":"XmlDoc.UnprocessedLines","content":"XmlDoc.UnprocessedLines \nUnprocessedLines \n Get the lines before insertion of implicit summary tags and encoding","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-xml-xmldoc.html#Range","title":"XmlDoc.Range","content":"XmlDoc.Range \nRange \n Indicates the overall original source range of the XmlDoc","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-xml-xmldoc.html#IsEmpty","title":"XmlDoc.IsEmpty","content":"XmlDoc.IsEmpty \nIsEmpty \n Indicates if the XmlDoc is empty","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-xml-xmldoc.html#Merge","title":"XmlDoc.Merge","content":"XmlDoc.Merge \nMerge \n Merge two XML documentation","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-xml-xmldoc.html#Empty","title":"XmlDoc.Empty","content":"XmlDoc.Empty \nEmpty \n Get the empty XmlDoc","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/internal-utilities-collections-extensions.html","title":"Extensions","content":"Extensions \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/internal-utilities-library-interruptiblelazy.html","title":"InterruptibleLazy","content":"InterruptibleLazy \n \nInterruptibleLazy.force \nforce","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/internal-utilities-library-interruptiblelazy.html#force","title":"InterruptibleLazy.force","content":"InterruptibleLazy.force \nforce \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/internal-utilities-library-delayinitarraymap-3.html","title":"DelayInitArrayMap\u003C\u0027T, \u0027TDictKey, \u0027TDictValue\u003E","content":"DelayInitArrayMap\u003C\u0027T, \u0027TDictKey, \u0027TDictValue\u003E \n \nDelayInitArrayMap\u003C\u0027T, \u0027TDictKey, \u0027TDictValue\u003E.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nDelayInitArrayMap\u003C\u0027T, \u0027TDictKey, \u0027TDictValue\u003E.CreateDictionary \nCreateDictionary \nDelayInitArrayMap\u003C\u0027T, \u0027TDictKey, \u0027TDictValue\u003E.GetArray \nGetArray \nDelayInitArrayMap\u003C\u0027T, \u0027TDictKey, \u0027TDictValue\u003E.GetDictionary \nGetDictionary","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/internal-utilities-library-delayinitarraymap-3.html#\u0060\u0060.ctor\u0060\u0060","title":"DelayInitArrayMap\u003C\u0027T, \u0027TDictKey, \u0027TDictValue\u003E.\u0060\u0060.ctor\u0060\u0060","content":"DelayInitArrayMap\u003C\u0027T, \u0027TDictKey, \u0027TDictValue\u003E.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/internal-utilities-library-delayinitarraymap-3.html#CreateDictionary","title":"DelayInitArrayMap\u003C\u0027T, \u0027TDictKey, \u0027TDictValue\u003E.CreateDictionary","content":"DelayInitArrayMap\u003C\u0027T, \u0027TDictKey, \u0027TDictValue\u003E.CreateDictionary \nCreateDictionary \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/internal-utilities-library-delayinitarraymap-3.html#GetArray","title":"DelayInitArrayMap\u003C\u0027T, \u0027TDictKey, \u0027TDictValue\u003E.GetArray","content":"DelayInitArrayMap\u003C\u0027T, \u0027TDictKey, \u0027TDictValue\u003E.GetArray \nGetArray \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/internal-utilities-library-delayinitarraymap-3.html#GetDictionary","title":"DelayInitArrayMap\u003C\u0027T, \u0027TDictKey, \u0027TDictValue\u003E.GetDictionary","content":"DelayInitArrayMap\u003C\u0027T, \u0027TDictKey, \u0027TDictValue\u003E.GetDictionary \nGetDictionary \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/internal-utilities-library-interruptiblelazy-1.html","title":"InterruptibleLazy\u003C\u0027T\u003E","content":"InterruptibleLazy\u003C\u0027T\u003E \n \nInterruptibleLazy\u003C\u0027T\u003E.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nInterruptibleLazy\u003C\u0027T\u003E.Force \nForce \nInterruptibleLazy\u003C\u0027T\u003E.IsValueCreated \nIsValueCreated \nInterruptibleLazy\u003C\u0027T\u003E.Value \nValue \nInterruptibleLazy\u003C\u0027T\u003E.FromValue \nFromValue","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/internal-utilities-library-interruptiblelazy-1.html#\u0060\u0060.ctor\u0060\u0060","title":"InterruptibleLazy\u003C\u0027T\u003E.\u0060\u0060.ctor\u0060\u0060","content":"InterruptibleLazy\u003C\u0027T\u003E.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/internal-utilities-library-interruptiblelazy-1.html#Force","title":"InterruptibleLazy\u003C\u0027T\u003E.Force","content":"InterruptibleLazy\u003C\u0027T\u003E.Force \nForce \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/internal-utilities-library-interruptiblelazy-1.html#IsValueCreated","title":"InterruptibleLazy\u003C\u0027T\u003E.IsValueCreated","content":"InterruptibleLazy\u003C\u0027T\u003E.IsValueCreated \nIsValueCreated \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/internal-utilities-library-interruptiblelazy-1.html#Value","title":"InterruptibleLazy\u003C\u0027T\u003E.Value","content":"InterruptibleLazy\u003C\u0027T\u003E.Value \nValue \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/internal-utilities-library-interruptiblelazy-1.html#FromValue","title":"InterruptibleLazy\u003C\u0027T\u003E.FromValue","content":"InterruptibleLazy\u003C\u0027T\u003E.FromValue \nFromValue \n","headings":[],"type":"apiDocs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/memory-usage.html","title":"Memory usage","content":"\nCompiler Memory Usage\nOverall memory usage is a primary determinant of the usability of the F# compiler and instances of the F# compiler service.\nWhy memory usage matters\nOverly high memory usage results in poor throughput (particularly due to increased GC times) and low user interface responsivity in tools such as Visual Studio or other editing environments. In some extreme cases, it can lead to Visual Studio crashing or another IDE becoming unusable due to constant paging from absurdly high memory usage. Luckily, these extreme cases are very rare.\nWhen you do a single compilation to produce a binary, memory usage typically doesn\u0027t matter much. It\u0027s often fine to allocate a lot of memory because it will just be reclaimed after compilation is over.\nHowever, the F# compiler is not simply a batch process that accepts source code as input and produces an assembly as output. When you consider the needs of editor and project tooling in IDEs, the F# compiler is:\n\nA database of syntactic and semantic data about the code hosted in an IDE\nAn API for tools to request tooling-specific data (e.g. F# tooltip information)\nIn FsAutoComplete or other LSP implementations, it\u0027s a server process that accepts requests for syntactic and semantic information\n\nThinking about the F# compiler in these ways makes performance far more complicated than just throughput of a batch compilation process.\nAnalyzing compiler memory usage\nIn general, the F# compiler allocates a lot of memory. More than it needs to. However, most of the \u0022easy\u0022 sources of allocations have been squashed out and what remains are many smaller sources of allocations. The remaining \u0022big\u0022 pieces allocate as a result of their current architecture, so it isn\u0027t straightforward to address them.\nSome allocations are much more than others\n* Large Object Heap (LOH) allocations (\u0026gt; ~80K) are rarely collected and should only be used for long-lived items.\n* Ephemeral allocations that never escape the Gen0 seem to not matter that much, though of course should be considered.\n* Don\u0027t try to remove all allocations, and don\u0027t assume copying of large structs is better than allocating a reference type. Measure instead.\nTo analyze memory usage of F# tooling, you have two primary avenues:\n\nTake a process dump on your machine and analyze it\nUse sampling to collect a trace of your system while you perform various tasks in an IDE, ideally for 60 seconds or more.\n\nYou can analyze dumps and take samples with dotMemory or PerfView.\nTo analyze memory usage of the F# compiler itself:\n* extract the compilation arguments out of msbuild output (or in the output pane of Visual Studio)\n* put this content in a \u0022response file\u0022 (a text file listing compiler arguments, one per line)\n* use the memory profiler tool of choice, invoking the compiler (either fsc.exe, or through dotnet path/to/fsc.dll) giving it the argument @name-of-response-file, and setting the directory of the project that is compiled as working directory\nAnalyzing a process dump file\nProcess dump files are extremely information-rich data files that can be used to see the distribution of memory usage across various types. Tools like dotMemory will show these distributions and intelligently group things to help identify the biggest areas worth improving. Additionally, they will notice things like duplicate strings and sparse arrays, which are often great ways to improve memory usage since it means more memory is being used than is necessary.\nAnalyzing a sample trace of IDE usage\nThe other important tool to understand memory and CPU usage for a given sample of IDE usage is a trace file. These are collected and analyzed by tools like PerfView and dotTrace.\nWhen analyzing a trace, there are a few things to look out for:\n\n\nOverall GC statistics for the sample to give an overall picture of what was going on in the IDE for your sample:\na. How much CPU time was spent in the GC as a percentage of total CPU time for the IDE process?\nb. What was the peak working set (total memory usage)?\nc. What was the peak allocations per second?\nd. How many allocations were Gen0? Gen1? Gen2?\n\n\nMemory allocations for the sample, typically also ignoring object deaths:\na. Is LargeObject showing up anywhere prominently? If so, that\u0027s a problem!\nb. Which objects show up highest on the list? Does their presence that high make sense?\nc. For a type such as System.String, which caller allocates it the most? Can that be improved?\n\n\nCPU sampling data, sorted by most CPU time\na. Are any methods showing up that correspond with high memory allocations? Something showing up prominently in both places is often a sign that it needs work!\n\n\nAfter analyzing a trace, you should have a good idea of places that could see improvement. Often times a tuple can be made into a struct tuple, or some convenient string processing could be adjusted to use a ReadonlySpan\u0026lt;\u0027T\u0026gt; or turned into a more verbose loop that avoids allocations.\n","headings":["Compiler Memory Usage","Why memory usage matters","Analyzing compiler memory usage","Analyzing a process dump file","Analyzing a sample trace of IDE usage"],"type":"content"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/diagnostics.html","title":"Diagnostics","content":"\nDiagnostics\nThe key types are:\n\nErrorLogger\nFSharpDiagnosticSeverity\nFSharpDiagnostic\nDiagnosticWithText\n\nand functions\n\nwarning - emit a warning\nerrorR - emit an error and continue\nerror - emit an error and throw an exception\nerrorRecovery - recover from an exception\n\nFor the compiler, a key file is https://github.com/dotnet/fsharp/blob/main/src/Compiler/FSComp.txt holding most of the messages. There are also a few other similar files including some old error messages in FSStrings.resx.\nAdding Diagnostics\nAdding or adjusting diagnostics emitted by the compiler is usually straightforward (though it can sometimes imply deeper compiler work). Here\u0027s the general process:\n\nReproduce the compiler error or warning with the latest F# compiler built from the F# compiler repository.\nFind the error code (such as FS0020) in the message.\nUse a search tool and search for a part of the message. You should find it in FSComp.fs with a title, such as parsMissingTypeArgs.\nUse another search tool or a tool like Find All References / Find Usages to see where it\u0027s used in the compiler source code.\nSet a breakpoint at the location in source you found. If you debug the compiler with the same steps, it should trigger the breakpoint you set. This verifies that the location you found is the one that emits the error or warning you want to improve.\n\nFrom here, you can either simply update the error text, or you can use some of the information at the point in the source code you identified to see if there is more information to include in the error message. For example, if the error message doesn\u0027t contain information about the identifier the user is using incorrectly, you may be able to include the name of the identifier based on data the compiler has available at that stage of compilation.\nIf you\u0027re including data from user code in an error message, it\u0027s important to also write a test that verifies the exact error message for a given string of F# code.\nFormatting Typed Tree items in Diagnostics\nDiagnostics must often format TAST items as user text. When formatting these, you normally use either\n\nThe functions in the NicePrint module such as NicePrint.outputTyconRef. These take a DisplayEnv that records the context in which a type was referenced, for example, the open namespaces. Opened namespaces are not shown in the displayed output.\nThe DisplayName properties on the relevant object. This drops the \u0027n text that .NET adds to the compiled name of a type, and uses the F#-facing name for a type rather than the compiled name for a type (for example, the name given in a CompiledName attribute).\n\nWhen formatting \u0022info\u0022 objects, see the functions in the NicePrint module.\nNotes on displaying types\nDiagnostics must often format types.\n\nWhen displaying a type, you will normally want to \u0022prettify\u0022 the type first. This converts any remaining type inference variables to new, better user-friendly type variables with names like \u0027a. Various functions prettify types prior to display, for example, NicePrint.layoutPrettifiedTypes and others.\nWhen displaying multiple types in a comparative way, for example, two types that didn\u0027t match, you will want to display the minimal amount of information to convey the fact that the two types are different, for example, NicePrint.minimalStringsOfTwoTypes.\nWhen displaying a type, you have the option of displaying the constraints implied by any type variables mentioned in the types, appended as when .... For example, NicePrint.layoutPrettifiedTypeAndConstraints.\n\nLocalization\nThe file FSComp.txt contains the canonical listing of diagnostic messages, but there are also .xlf localization files for various languages.\nSee the DEVGUIDE for more details.\nEnabling a warning or error by default\nThe file CompilerDiagnostics.fs contains the function IsWarningOrInfoEnabled, which determines whether a given diagnostic is emitted.\n","headings":["Diagnostics","Adding Diagnostics","Formatting Typed Tree items in Diagnostics","Notes on displaying types","Localization","Enabling a warning or error by default"],"type":"content"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/coding-standards.html","title":"Coding standards","content":"\nCoding standards and idioms\nThe F# compiler code base is slowly being updated to better coding standards. There is a long way to go.\nThe future work includes\n\n[ ] Consistent use of fantomas formatting across as much of the codebase as feasible\n[ ] Consistent naming conventions\n[ ] Reduction in line length\n[ ] Reduction in single-character identifiers\n[ ] XML documentation for all types, members and cross-module functions\n\nAbbreviations\nThe compiler codebase uses various abbreviations. Here are some of the most common ones.\n\n\n\nAbbreviation\nMeaning\n\n\n\n\nad\nAccessor domain, meaning the permissions the accessing code has to access other constructs\n\n\namap\nAssembly map, saying how to map IL references to F# CCUs\n\n\narg\nArgument (parameter)\n\n\nargty\nArgument (parameter) type\n\n\narginfo\nArgument (parameter) metadata\n\n\nccu\nReference to an F# compilation unit = an F# DLL (possibly including the DLL being compiled)\n\n\ncelem\nCustom attribute element\n\n\ncenv\nCompilation environment. Means different things in different contexts, but usually a parameter for a single compilation state object being passed through a set of related functions in a single phase. The compilation state is often mutable.\n\n\ncpath\nCompilation path, meaning A.B.C for the overall names containing a type or module definition\n\n\ncss\nConstraint solver state.\n\n\ndenv\nDisplay Environment. Parameters guiding the formatting of types\n\n\neinfo\nAn info object for an event  (whether a .NET event, an F# event or a provided event)\n\n\ne\nExpression\n\n\nenv\nEnvironment. Means different things in different contexts, but usually immutable state being passed and adjusted  through a set of related functions in a single phase.\n\n\nfinfo\nAn info object for a field (whether a .NET field or a provided field)\n\n\nfref\nA reference to an ILFieldRef Abstract IL node for a field reference. Would normally be modernized to ilFieldRef\n\n\ng\nThe TcGlobals value\n\n\nid\nIdentifier\n\n\nlid\nLong Identifier\n\n\nm\nA source code range marker\n\n\nmimpl\nIL interface method implementation\n\n\nminfo\nAn info object for a method (whether a .NET method, an F# method or a provided method)\n\n\nmk\nMeans make in old fashioned F#/OCaml coding style\n\n\nmodul\na Typed Tree structure for a namespace or F# module\n\n\npat\nPattern, a syntactic AST node representing part of a pattern in a pattern match\n\n\npinfo\nAn info object for a property  (whether a .NET property, an F# property or a provided property)\n\n\nrfref\nRecord or class field  reference, a reference to a Typed Tree node for a record or class field\n\n\nscoref\nThe scope of a reference in IL metadata, either assembly, .netmodule or local\n\n\nsp\nSequence points or debug points\n\n\nspat\nSimple Pattern, a syntactic AST node representing part of a pattern in a pattern match\n\n\ntau\nA type with the \u0022forall\u0022 nodes stripped off (i.e. the nodes which represent generic type parameters). Comes from the notation \uD835\uDED5 used in type theory\n\n\ntcref\nType constructor  reference (an EntityRef)\n\n\ntinst\nType instantiation\n\n\ntpenv\nType parameter environment, tracks the type parameters in scope during type checking\n\n\nty (not: typ)\nType, usually a Typed Tree type\n\n\ntys (not: typs)\nList of types, usually Typed Tree types\n\n\ntypar\nType Parameter\n\n\ntyvar\nType Variable, usually referring to an IL type variable, the compiled form of an F# type parameter\n\n\nucref\nUnion case reference, a reference to a Typed Tree node for a union case\n\n\nvref\nValue reference, a reference to a Typed Tree node for a value\n\n\n\n\n\n\n\nPhase Abbreviation\nMeaning\n\n\n\n\nSyn\nAbstract Syntax Tree\n\n\nTc\nType-checker\n\n\nIL\nAbstract  IL = F# representation of .NET IL\n\n\nIlx\nExtended Abstract IL = .NET IL plus a couple of constructs that get erased\n\n\n\n\n","headings":["Coding standards and idioms","Abbreviations"],"type":"content"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/perf-discussions-archive.html","title":"Comparisons\n","content":"This is just a typed version of these notes, generated during perf discussions on summer of 2023. Can be used as a reference point.\n\nComparisons\n\nOCaml\nScala\nC#\nRust\n\nUnderlying problems\n\nLOH allocations\nBuild does too much for deltas\nGC Gen 2\n\nMajor problems\n\nScript start up CLI\nBuild on Linux \u0026amp; Mac\nGlitches in test discovery\nEdit \u0026amp; test workflow\nEdit \u0026amp; run workflow\nEdit \u0026amp; check workflow\nUnnecessary rebuilds\n\nHosted compiler problems\n\nStamp overflow\nNon-deterministic\nMemory leaks\nInfinite loops\nStay resident compiler\nPermission elevation\n\nMinor problems\n\nBenchmarking\nSquigglies\nColorization\nDebug\nPress dot\n\nIncremental phases\n\nIncremental parsing file\nIncremental checking file\nIncremental optimization for deltas\nCascading DLL builds\nIncremental DLL builds\nIncremental ILxGen for deltas\nIncremental assembly generation\nIncremental PDB generation for deltas\n\nCommunity guidelines\n\nCommunity leadership\nCommunity enablement for tool performance\nPerformance acceptance criteria\nPerformance running\nDocs for tooling performance\n\n","headings":["Comparisons","Underlying problems","Major problems","Hosted compiler problems","Minor problems","Incremental phases","Community guidelines"],"type":"content"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/fsi-emit.html","title":"F# Interactive Emit","content":"\nF# Interactive Code Generation\nF# Interactive (dotnet fsi) accepts incremental code fragments. This capability is also used by hosted execution capability of the FSharp.Compiler.Service API which is used to build the F# kernel for .NET Interactive notebooks.\nHistorically F# Interactive code was  emitted into a single dynamic assembly using Reflection.Emit and ilreflect.fs (meaning one assembly that is continually growing). However, .NET Core Reflection.Emit does not support the emit of debug symbols for dynamic assemblies, so in Feb 2022 we switched to emitting multiple non-dynamic assemblies (meaning assemblies dynamically created in-memory using ilwrite.fs, and loaded, but not growing).\nThe assemblies are named:\nFSI-ASSEMBLY1\nFSI-ASSEMBLY2\netc.\nCompat switch\nThere is a switch fsi --multiemit that turns on the use of multi-assembly generation (when it is off, we use Reflection Emit for  single-dynamic-assembly generation).  This is on by default for .NET Core, and off by default for .NET Framework for compat reasons.\nAre multiple assemblies too costly?\nThere is general assumption in this that on modern dev machines (where users execute multiple interactions) then generating 50, 100 or 1,000 or 10,000 dynamic assemblies by repeated manual execution of code is not a problem: the extra overheads of multiple assemblies compared to one dynamic assembly is of no real significance in developer REPL scenarios given the vast amount of memory available on modern 64-bit machines.\nQuick check: adding 10,000 let x = 1;; interactions to .NET Core dotnet fsi adds about 300MB to the FSI.EXE process, meaning 30K/interaction. A budget of 1GB for interactive fragments (reasonable on a 64-bit machine), and an expected maximum of 10000 fragments before restart (that\u0027s a lot!), then each fragment can take up to 100K. This is well below the cost of a new assembly.\nAdditionally, these costs are not substantially reduced if --multiemit is disabled, so they\u0027ve always been the approximate costs of F# Interactive fragment generation.\nInternals and accessibility across fragments\nGenerating into multiple assemblies raises issues for some things that are assembly bound such as \u0022internals\u0022 accessibility. In a first iteration of this we had a failing case here:\n\u0026gt; artifacts\n...\n// Fragment 1\n\u0026gt; let internal f() = 1;;\nval internal f: unit -\u0026gt; int\n\n// Fragment 2 - according to existing rules it is allowed to access internal things of the first\nf();; \nSystem.MethodAccessException: Attempt by method \u0026#39;\u0026lt;StartupCode$FSI_0003\u0026gt;FSI_0003.main@()\u0026#39; to access method \u0026#39;FSI_0002.f()\u0026#39; failed.\n   at \u0026lt;StartupCode$FSI_0003\u0026gt;FSI_0003.main@()\n\nThis is because we are now generating into multiple assemblies. Another bug was this:\n\u0026gt; artifacts\n...\n// Fragment 1 - not \u0060x\u0060 becomes an internal field of the class\n\u0026gt; type C() =\n\u0026gt;    let mutable x = 1\n\u0026gt;    member _.M() = x\n\u0026gt; ;;\n...\n// Fragment 2 - inlining \u0026#39;M()\u0026#39; gave an access to the internal field \u0060x\u0060\n\u0026gt; C().M();;\n...\u0026lt;bang\u0026gt;\n\nAccording to the current F# scripting programming model (the one checked in the editor), the \u0022internal\u0022 thing should be accessible in subsequent fragments. Should this be changed? No:\n\nIt\u0027s very hard to adjust the implementation of the editor scripting model to consider fragments delimited by ;; to be different assemblies, whether in the editor or in F# Interactive.\nAnd would we even want to?  It\u0027s common enough for people to debug code scattered with \u0022internal\u0022 declarations.\n\nIn scripts, the ;; aren\u0027t actually accurate markers for what will or won\u0027t be sent to F# Interactive, which get added implicitly.\nFor example, consider the script\nlet internal f() = 1;;\nf();; \n\nIn the editor should this be given an error or not?  That is, should the ;; be seen as accurate indicators of separate script fragments? (Answer: yes if we know the script will be piped-to-input, no if the script is used as a single file entry - when the ;; are ignored)\n\nFurther, this would be a breaking change, e.g. it could arise in an automated compat situation if people are piping into standard input and the input contains ;; markers.\n\nBecause of this we emit IVTs for the next 30 FSI-ASSEMBLYnnn assemblies on each assembly fragment, giving a warning when an internal thing is accessed across assembly boundaries within that 30 (reporting it as a deprecated feature), and give an error if internal access happens after that.\nFrom a compat perspective this seems reasonable, and the compat flag is available to return the whole system to generate-one-assembly behavior.\n","headings":["F# Interactive Code Generation","Compat switch","Are multiple assemblies too costly?","Internals and accessibility across fragments"],"type":"content"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/compiler-startup-performance.html","title":"Startup Performance","content":"\nCompiler Startup Performance\nCompiler startup performance is a key factor affecting happiness of F# users. If the compiler took 10sec to start up, then far fewer people would use F#.\nOn all platforms, the following factors affect startup performance:\n\nTime to load compiler binaries. This depends on the size of the generated binaries, whether they are pre-compiled (for example, using NGEN or CrossGen), and the way the .NET implementation loads them.\nTime to open referenced assemblies (for example, mscorlib.dll, FSharp.Core.dll) and analyze them for the types and namespaces defined. This depends particularly on whether this is correctly done in an on-demand way.\nTime to process \u0022open\u0022 declarations at the top of each file. Processing these declarations have been observed to take time in some cases of  F# compilation.\nFactors specific to the specific files being compiled.\n\nOn Windows, the compiler delivered with Visual Studio currently uses NGEN to pre-compile fsc, fsi, and some assemblies used in Visual Studio tooling. For .NET Core, the CrossGen tool is used to accomplish the same thing. Visual Studio will use delayed NGEN, meaning that it does not run NGEN on every binary up front. This means that F# compilation through Visual Studio may be slow for a few times before it gets NGENed.\n","headings":["Compiler Startup Performance"],"type":"content"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/running-documentation-locally.html","title":"Running the documentation locally","content":"\nRunning the documentation locally\nThe source of this documentation website is hosted on https://github.com/fsharp/fsharp-compiler-docs.\nYou can follow this guide to see the results of your document changes rendered in the browser.\nSetup\nfsharp/fsharp-compiler-docs will clone the dotnet/fsharp repository first to generate the documentation.\nYou can however, easily run the documentation locally and modify the docs from dotnet/fsharp.\n\nClone fsharp/fsharp-compiler-docs at the same level as your local dotnet/fsharp repository:\n\ngit clone https://github.com/fsharp/fsharp-compiler-docs.git\n\n\nRestore the FSharp.Compiler.Service project in fsharp-compiler-docs:\n\ncd fsharp-compiler-docs/FSharp.Compiler.Service\ndotnet restore\n\n\nRestore the local tools in fsharp-compiler-docs:\n\ncd ..\ndotnet tool restore\n\n\nRun the documentation tool using your dotnet/fsharp fork as input.\n\ndotnet fsdocs watch --eval --sourcefolder ../fsharp/ --input ../fsharp/docs/\n\nRelease notes caveat\nThe release notes pages from docs/release-notes are composed from the MarkDown files in subfolders.\nChanging any of these files, won\u0027t regenerate the served webpage. Only the changes to the .fsx will trigger the tool. This is a known limitation.\n","headings":["Running the documentation locally","Setup","Release notes caveat"],"type":"content"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reusing-typechecking-results.html","title":"Reusing typechecking results","content":"\nReusing typechecking results between compiler runs\nCaching and reusing compilation results between compiler runs will be an optimization technique aimed at improving the performance and efficiency of the F# development experience.\nMotivation\n\nPerformance. Things like recomputing type information for large projects are time-consuming. By caching the results, subsequent compilation can skip some steps, leading to faster builds.\nBetter IDE cold start. IDEs can provide faster IntelliSense, code navigation, and other features if they can quickly access cached compilation information. The bigger and the less coupled the project is, the greater will be the gains.\n\nExample real-world scenarios\nThe optimization will benefit the most in large and not very interdependent projects. For instance, a 100-files test project where a single test is changed. MSBuild will mark the project for recompilation but thanks to the improvement only one file would be recompiled in the full-blown manner.\nPremises\nHere are some assumptions I am coming with after tinkering with the topic and investigating the current state of the art.\nPremise 1: current compiler design\nThe heart of the compiler, fsc.fs, is split into 6 phases (main1 - main6). The code is designed to pass minimum information between phases, using the Args structure, which is essentially a data bag. The first phase takes info from the program arguments.\nmain1 (...args...)\n|\u0026gt; main2\n|\u0026gt; main3\n|\u0026gt; main4 (tcImportsCapture, dynamicAssemblyCreator)\n|\u0026gt; main5\n|\u0026gt; main6 dynamicAssemblyCreator\n\nPremise 2: current compilation time consumption\nLet\u0027s measure (fsc --times) the fresh compilation of large F# files. We\u0027ll use examples from our benchmarks - those are different but should be good to see general trends.\nSomethingToCompile.fs\n--------------------------------------------------------------------------------------------------------\n|Phase name                          |Elapsed |Duration| WS(MB)|  GC0  |  GC1  |  GC2  |Handles|Threads|\n|------------------------------------|--------|--------|-------|-------|-------|-------|-------|-------|\n// main1\n|Import mscorlib\u002BFSharp.Core         |  0,2720|  0,2604|     96|      0|      0|      0|    365|     30|     \u0026lt;-- long\n|Parse inputs                        |  0,3378|  0,0560|    108|      0|      0|      0|    372|     30|\n|Import non-system references        |  0,3932|  0,0476|    127|      0|      0|      0|    372|     30|\n|Typecheck                           |  0,9020|  0,5025|    164|      3|      2|      1|    456|     46|     \u0026lt;-- longest\n|Typechecked                         |  0,9087|  0,0002|    164|      0|      0|      0|    456|     46|\n// main2\n|Write Interface File                |  0,9191|  0,0000|    164|      0|      0|      0|    456|     46|\n|Write XML doc signatures            |  0,9280|  0,0000|    164|      0|      0|      0|    456|     46|\n|Write XML docs                      |  0,9342|  0,0002|    164|      0|      0|      0|    456|     46|\n// main3\n|Encode Interface Data               |  0,9778|  0,0345|    164|      0|      0|      0|    456|     46|\n|Optimizations                       |  1,2312|  0,2463|    178|      2|      2|      1|    456|     46|     \u0026lt;-- long\n|Ending Optimizations                |  1,2386|  0,0000|    178|      0|      0|      0|    456|     46|\n|Encoding OptData                    |  1,2549|  0,0093|    178|      0|      0|      0|    456|     46|\n|TailCall Checks                     |  1,2687|  0,0054|    178|      0|      0|      0|    456|     46|\n// main4, main5\n|TAST -\u0026gt; IL                          |  1,3657|  0,0883|    180|      0|      0|      0|    456|     46|\n// main6\n|Write .NET Binary                   |  1,6016|  0,2284|    183|      0|      0|      0|    462|     46|     \u0026lt;-- long\n--------------------------------------------------------------------------------------------------------\n\ndecentlySizedStandAloneFile.fs\n--------------------------------------------------------------------------------------------------------\n|Phase name                          |Elapsed |Duration| WS(MB)|  GC0  |  GC1  |  GC2  |Handles|Threads|\n|------------------------------------|--------|--------|-------|-------|-------|-------|-------|-------|\n// main1\n|Import mscorlib\u002BFSharp.Core         |  0,3285|  0,3120|    101|      0|      0|      0|    365|     30|     \u0026lt;-- longest\n|Parse inputs                        |  0,3673|  0,0292|    108|      0|      0|      0|    374|     30|\n|Import non-system references        |  0,4354|  0,0622|    128|      0|      0|      0|    374|     30|\n|Typecheck                           |  0,6464|  0,2045|    144|      1|      1|      1|    378|     30|     \u0026lt;-- long\n|Typechecked                         |  0,6522|  0,0004|    144|      0|      0|      0|    378|     30|\n// main2\n|Write Interface File                |  0,6597|  0,0000|    144|      0|      0|      0|    378|     30|\n|Write XML doc signatures            |  0,6661|  0,0000|    144|      0|      0|      0|    378|     30|\n|Write XML docs                      |  0,6710|  0,0002|    144|      0|      0|      0|    378|     30|\n// main3\n|Encode Interface Data               |  0,7273|  0,0503|    154|      0|      0|      0|    378|     30|\n|Optimizations                       |  0,8757|  0,1425|    172|      1|      1|      0|    378|     30|     \u0026lt;-- long\n|Ending Optimizations                |  0,8815|  0,0000|    172|      0|      0|      0|    378|     30|\n|Encoding OptData                    |  0,8899|  0,0024|    173|      0|      0|      0|    378|     30|\n|TailCall Checks                     |  0,8990|  0,0025|    173|      0|      0|      0|    378|     30|\n// main4, main5\n|TAST -\u0026gt; IL                          |  0,9487|  0,0447|    176|      0|      0|      0|    378|     30|\n// main6\n|Write .NET Binary                   |  1,1530|  0,1972|    180|      0|      0|      0|    384|     30|     \u0026lt;-- long\n--------------------------------------------------------------------------------------------------------\n\nCE100xnest5.fs\n--------------------------------------------------------------------------------------------------------\n|Phase name                          |Elapsed |Duration| WS(MB)|  GC0  |  GC1  |  GC2  |Handles|Threads|\n|------------------------------------|--------|--------|-------|-------|-------|-------|-------|-------|\n// main1\n|Import mscorlib\u002BFSharp.Core         |  0,4092|  0,4084|    101|      0|      0|      0|    365|     30|     \u0026lt;-- long\n|Parse inputs                        |  0,4635|  0,0445|    108|      0|      0|      0|    374|     30|\n|Import non-system references        |  0,5475|  0,0775|    128|      0|      0|      0|    374|     30|\n|Typecheck                           |  3,1157|  2,5612|    198|     18|     15|      3|    712|     45|     \u0026lt;-- long\n|Typechecked                         |  3,1219|  0,0002|    198|      0|      0|      0|    712|     45|\n// main2\n|Write Interface File                |  3,1280|  0,0000|    198|      0|      0|      0|    712|     45|\n|Write XML doc signatures            |  3,1363|  0,0000|    198|      0|      0|      0|    712|     45|\n|Write XML docs                      |  3,1435|  0,0002|    198|      0|      0|      0|    712|     45|\n// main3\n|Encode Interface Data               |  3,1803|  0,0296|    198|      0|      0|      0|    712|     45|\n|Optimizations                       |  8,9949|  5,8049|    216|     43|     42|      2|    457|     45|     \u0026lt;-- longest\n|Ending Optimizations                |  9,0015|  0,0000|    216|      0|      0|      0|    457|     45|\n|Encoding OptData                    |  9,0090|  0,0010|    216|      0|      0|      0|    457|     45|\n|TailCall Checks                     |  9,0190|  0,0013|    216|      0|      0|      0|    457|     45|\n// main4, main5\n|TAST -\u0026gt; IL                          |  9,0463|  0,0210|    217|      0|      0|      0|    458|     46|\n// main6\n|Write .NET Binary                   |  9,2463|  0,1930|    218|      0|      0|      0|    464|     46|     \u0026lt;-- long\n--------------------------------------------------------------------------------------------------------\n\nThe phases taking the longest are marked in the right. Those are assembly import, type check, optimizations and IL writing.\nOptimizations are not relevant in the dev loop with run/debug/test cycles so we won\u0027t take those into account.\nExperiment: force-generated signature files efficiency\nIn the initial discussions, we decided to make an experiment to see if force-generating and caching signature files in a project saves much time during recompilations.\nMy setup was a project of 25 independent big files (copies of Utilities.fs).\nThere, I measured (few times, with cleaning artifacts, using --times):\n1. Typechecking - time1\n2. Typechecking \u002B all signature generation (--allsigs) - time2\n3. Typechecking with signatures generated (left from previous run and added to the project) - time3\n4. Typechecking with partial signature usage and generation (20 sigs used, 5 generated) - time4\nI picked a slow machine to better see the differences. But all the differences were largely marginal (including between time1 and time3). I can imagine squeezing stable single-digit % performance differences in a cleaner experiment - that said:\n- It\u0027s not clear if it\u0027s going to be for better or for worse, since the signature generation penalty can be bigger than the benefit of having them.\n- Even if it\u0027s for better, such a small improvement won\u0027t be worse the hassle.\nTherefore, I think it\u0027s not the way to go here.\n\nNumbers, for completeness\nNormal compilation:\n1. Typecheck: 23.7531\n2. Typecheck: 27.4234\n3. Typecheck: 24.5202\n\nNormal compilation \u002B generating signatures (added extra \u0060ReportTime\u0060 for measuring the latter):\n1. Typecheck: 26.5991, Siggen: 1.9369\n2. Typecheck: 25.0246, Siggen: 1.7517\n3. Typecheck: 27.0057, Siggen: 1.9093\n\nCompilation with given signatures:\n1. Typecheck: 25.7741\n2. Typecheck: 26.2904\n3. Typecheck: 24.3852\n\nCompilation with given 80% signatures \u002B generating 20% signatures:\n1. Typecheck: 24.1338, Siggen: 0.5284\n2. Typecheck: 27.6037, Siggen: 0.7526\n3. Typecheck: 25.6967, Siggen: 0.6244\n\n\nImplementation plan\nThe conclusion from the above is that there is a lot of potential in caching - at the same time, implementing things to the full potential right away will require serious changes in the compiler code, which will be dangerous, hard to test and review. Therefore, I propose to implement the feature in stages where each stage brings gains in some scenarios.\nStage 1 - force-gen and compare typechecking graphs\nWe already create the TC graph in main1 and we are able to dump it (in Mermaid) via the compiler flags.\nThat means we can force-gen and save the graph which will allow us to skip retypechecking if we detect that the graph is not changed. We should also track all the compilation information (the argument string) and the last update times of the files.\nThis step won\u0027t bring big observable benefits, yet it will create necessary MSBuild hooks to communicate the intermediate files folder towards the compiler, add time-based and hash-based cache invalidation logic, and create testing rails which will include the clean and rebuild tests to make sure the cache is easily invalidated on demand.\nStage 2 - skip retypechecking for some files\nIn main1, we do unpickling (= deserializing) and pickling (= serializing) of the code. This currently happens on the module/namespace basis.\nIn this stage, we will fully implement pickling and unpickling of all typechecked files (CheckedImplFile per file as well as all other outputs of main1 which cannot be cheaply recreated like topAttrs and CcuThunk). Parts of the pickling/unpickling can reuse the primitives already existing in TypedTreePickle and built upon them. So we can save acquired typechecking information to the intermediate folder after the typechecking - and for the files not needing retypechecking as per graph diff, skip the phase, instead restoring the typechecking info. We also need to identify the side effects happening during typechecking and probably replay them in such cases.\nThis is likely the biggest amount of work expected but it will hugely benefit the scenarios when only the edge of the graph is affected (think one test in a test project).\nStage 3 - reduce signature data generation\nIn main3, we encode signature data in the assemblies.\nSince we are addressing run/debug/test scenarios, a lot of projects can avoid signature data at all, because signature data is only needed for cross-project compilation. This could be detected automatically for certain types of projects (think web apps, console apps, test projects).\nFor libraries, the signature information resource blob (a byte array) would have to be split into per-file data and we\u0027ll and logic to recombine the splits with freshly typechecked information into a single binary resource back.\nStage 4 - reuse import data\nIn main1, we restore imported assemblies to get their IL (e.g. system assemblies).\nSo here, we can serialize and cache imported IL - we\u0027ll need to evaluate and benchmark if per assembly or per assembly block (cases like  System.*.dll). We\u0027ll apply this for the cross-project case, to not reimport IL for repeating assemblies but instead restore it from the cache - by adding a cross-project intermediate file location to be coordinated with MSBuild properties.\nThis will be a smaller gain for any particular project but a big accumulated one for large multi-project solutions.\nTesting and benchmarking\nWe should have a compiler switch for this: applying it to current typechecking tests shouldn\u0027t make any difference in results. Tests should test that restored cached results \u002B reusing them should be equivalent to fresh typechecking results.\nBenchmarks should be added or run at every stage to the FCSBenchmarks project. A good inspiration can be workflow-style tests for updating files done by @0101 in Transparent Compiler.\n","headings":["Reusing typechecking results between compiler runs","Motivation","Example real-world scenarios","Premises","Premise 1: current compiler design","Premise 2: current compilation time consumption","Experiment: force-generated signature files efficiency","Implementation plan","Testing and benchmarking"],"type":"content"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/changing-the-ast.html","title":"Changing the AST","content":"\nChanging the AST\nMaking changes to the AST is a common task when working on new F# compiler features or when working on developer tooling.\nThis document describes the process of making changes to the AST.\nThe easiest way to modify the AST is to start with the type definitions in SyntaxTree.fsi and SyntaxTree.fs and then let the compiler guide you to the places where you need to make changes.\nLet\u0027s look at an example: We want to extend the AST to include the range of the / symbol in a SynRationalConst.Rational.\nThere are two solutions to choose from:\n- Add a new field to the Rational union case\n- Add a dedicated trivia type to the union case which contains the new range and maybe move the existing ranges to the trivia type as well\nThe pros of introducing a dedicated trivia type are:\n- Having the additional information in a separate structure allows it to grow more easily over time. Adding new information to an existing trivia type won\u0027t disrupt most FCS consumers.\n- It is clear that it is information that is not relevant for the compilation.\nThe cons are:\n- It can be a bit excessive to introduce for a single field.\n- The existing AST node might already contain fields that are historically more suited for trivia, but predate the SyntaxTrivia module.\nIn this example, we\u0027ll go with the first solution and add a new field named divRange to the Rational union case as it felt a bit excessive to introduce a new trivia type for a single field.\nBut these are the type of decisions that need to be made when changing the AST.\ntype SynRationalConst =\n\n    // ...\n\n    | Rational of\n        numerator: int32 *\n        numeratorRange: range *\n        divRange: range *   // our new field\n        denominator: int32 *\n        denominatorRange: range *\n        range: range\n    \n    // ...\n\nAfter modifying SyntaxTree.fsi and SyntaxTree.fs, the compiler will report errors in pars.fsy. If not, the fsy file wasn\u0027t processed by the compilation. In this case, a rebuild of FSharp.Compiler.Service.fsproj should help.\npars.fsy is the parser specification of F#, a list of rules that describe how to parse F# code. Don\u0027t be scared by the size of the file or the unfamiliar content.\nIt\u0027s easier than it looks.\nThe F# compiler uses a parser generator called fsyacc to generate the parser from the specification in pars.fsy.\nLet\u0027s look at the most relevant syntax parts of a .fsy file:\nrationalConstant:\n  | INT32 INFIX_STAR_DIV_MOD_OP INT32\n    { if $2 \u0026lt;\u0026gt; \u0026quot;/\u0026quot; then reportParseErrorAt (rhs parseState 2) (FSComp.SR.parsUnexpectedOperatorForUnitOfMeasure())\n      if fst $3 = 0 then reportParseErrorAt (rhs parseState 3) (FSComp.SR.parsIllegalDenominatorForMeasureExponent())\n      if (snd $1) || (snd $3) then errorR(Error(FSComp.SR.lexOutsideThirtyTwoBitSigned(), lhs parseState))\n      SynRationalConst.Rational(fst $1, rhs parseState 1, fst $3, rhs parseState 3, lhs parseState) }\n  | // ...\n\nThe first line is the name of the rule, rationalConstant in this case. It\u0027s a so called non-terminal symbol in contrast to a terminal symbol like INT32 or INFIX_STAR_DIV_MOD_OP. The individual cases of the rule are separated by |, they are called productions.\nBy now, you should be able to see the similarities between an fsyacc rule and the pattern matching you know from F#.\nThe code between the curly braces is the code that gets executed when the rule is matched and is real F# code. After compilation, it ends up in\n.\\artifacts\\obj\\FSharp.Compiler.Service\\Debug\\netstandard2.0\\pars.fs, generated by fsyacc.\nThe first three lines do error checking and report errors if the input is invalid.\nThen the code calls the Rational constructor of SynRationalConst and passes some values to it. Here we need to make changes to adjust the parser to our modified type definition.\nThe values or symbols that matched the rule are available as $1, $2, $3 etc. in the code. As you can see, $1 is a tuple, consisting of the parsed number and a boolean indicating whether the number is a valid 32 bit signed integer or not.\nThe code is executed in the context of the parser, so you can use the parseState variable, an instance of IParseState, to access the current state of the parser. There are helper functions defined in ParseHelpers.fs that make it easier to work with it.\nrhs parseState 1 returns the range of the first symbol that matched the rule, here INT32. So, it returns the range of 23 in 23/42.\nrhs is short for right hand side.\nAnother helper is rhs2. Using it like rhs2 parseState 2 3 for example, returns the range covering the symbols from the second to the third symbol that matched the rule. Given 23/42, it would return the range of /42.\nlhs parseState returns the range of the whole rule, 23/42 in our example.\nWhen parser recovery is of concern for a rule, it\u0027s preferred to use rhs2 over lhs.\nCircling back to our original example of adding a new field to SynRationalConst, we need to add a new parameter to the call of the Rational constructor. We want to pass the range of the / symbol, so we need to add rhs parseState 2 as the third parameter to the constructor call:\nSynRationalConst.Rational(fst $1, rhs parseState 1, rhs parseState 2, fst $3, rhs parseState 3, lhs parseState)\n\nThat\u0027s it. Adjusting the other constructor calls of Rational in pars.fsy should be enough to have a working parser again which returns the modified AST.\nWhile fixing the remaining compiler errors outside of pars.fsy, it\u0027s a good idea to use named access to the fields of the SynRationalConst.Rational union case instead of positional access. This way, the compilation won\u0027t fail if additional fields are added to the union case in the future.\nAfter a successful compilation, you can run the parser tests in SyntaxTreeTests.fs to verify that everything works as expected.\nIt\u0027s likely that you\u0027ll need to update the baseline files as described in SyntaxTreeTests.fs.\n","headings":["Changing the AST"],"type":"content"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/representations.html","title":"Representations","content":"\nRepresentation Decisions in the F# Compiler\nConsider the following declarations, all of which look very similar.\nmodule M = \n    let z = 1                   \n    let f = x \u002B z               \n                                \n\ntype C(w: int, z: int) =        \n                                \n    let f x = x \u002B z             \n    let f x = f 3 \u002B x           \n                                \n\nlet g (z: int) =                \n    let f x = x \u002B 1             \n\nPart of the job of the F# compiler is to \u0022decide\u0022 how these declarations are compiled. The following acts as a guide to how these different bindings are represented and where these decisions are made.\nFirst for module-level let bindings. These representations are decided by code in CheckExpressions.fs and CheckDeclarations.fs based on syntax.\nmodule M = \n    let z = 1              // z --\u0026gt; static property \u002B field, required by spec, compiled name mandated\n    let f x = x \u002B z          // f --\u0026gt; static method, required by spec, compiled name mandated\n\nNext for class-level let bindings.  These representations are decided by code in CheckIncrementalClasses.fs based on analysis of use.\n//    Decided in CheckIncrementalClasses.fs based on analysis of use\ntype C(w: int, z: int) =   // w --\u0026gt; local to object constructor, required by spec\n                           // z --\u0026gt; private instance field, required by spec\n    let f x = x \u002B z        // f --\u0026gt; private instance method, required by spec, compiled name not mandated\n                           // Note: initially uses an ephemeral \u0026#39;f\u0026#39; Val then creates a member Val with compiled name\n                           \n    let f x = f 3 \u002B x      // f --\u0026gt; private instance method, required by spec, compiled name not mandated\n                           // Note: initially uses an ephemeral \u0026#39;f\u0026#39; Val then creates a member Val with compiled name\n                           \n    static let g x = x \u002B 1 // g --\u0026gt; private static method, required by spec, compiled name not mandated, initially uses an ephemeral \u0026#39;g\u0026#39; Val then creates a member Val with compiled name\n    \n    static let g x = g 3   // g --\u0026gt; private static method, required by spec, compiled name not mandated, initially uses an ephemeral \u0026#39;g\u0026#39; Val then creates a member Val with compiled name\n\nNext for expression-level let bindings.  These representations are decided by code in various optimization phases.\nlet g (z: int) =          // z --\u0026gt; local \u002B field in closure for \u0026#39;f\u0026#39;, not mandated\n    let f x = x \u002B 1       // f --\u0026gt; FSharpFunc value, or maybe a static method, not mandated \n                          //    Decided in various optimization phases\n\n\nNOTE: The representation decision is implied by the addition of ValReprInfo to the Val node.\n\n","headings":["Representation Decisions in the F# Compiler"],"type":"content"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/tooling-features.html","title":"Overview","content":"\nOverview\nThe F# Language Service (FSharp.Editor, using FSharp.Compiler.Service) is designed to support tooling in Visual Studio and other IDEs. This document gives an overview of the features supported and notes on their technical characteristics.\nKinds of data processed and served in F# tooling\nThe following tables are split into two categories: syntactic and semantic. They contain common kinds of information requested, the kind of data that is involved, and roughly how expensive the operation is in terms of expected memory allocation and CPU processing.\nIDE actions based on syntax\n\n\n\nAction\nData inspected\nData returned\nExpected CPU/Allocations (S/M/L/XL)\n\n\n\n\nSyntactic Classification\nCurrent doc\u0027s source text\nText span and classification type for each token in the document\nS\n\n\nBreakpoint Resolution\nCurrent doc\u0027s syntax tree\nText span representing where breakpoints were resolved\nS\n\n\nDebugging data tip info\nCurrent doc\u0027s source text\nText span representing the token being inspected\nS\n\n\nBrace pair matching\nCurrent doc\u0027s source text\nText spans representing brace pairs that match in the input document\nS\n\n\n\u0022Smart\u0022 indentation\nCurrent doc\u0027s source text\nIndentation location in a document\nS\n\n\nCode fixes operating only on syntax\nCurrent doc\u0027s source text\nSmall text change for document\nS\n\n\nXML doc template generation\nCurrent doc\u0027s syntax tree\nSmall (usually) text change for document\nS\n\n\nBrace pair completion\nCurrent doc\u0027s source text\nAdditional brace pair inserted into source text\nS\n\n\nSource document navigation\nCurrent doc\u0027s syntax tree\n\u0022Navigation Items\u0022 with optional child navigation items containing ranges in source code\nS\n\n\nCode outlining\nCurrent doc\u0027s source text\nText spans representing blocks of F# code that are collapsable as a group\nS - M\n\n\nEditor formatting\nCurrent doc\u0027s source text\nNew source text for the document\nS - L\n\n\nSyntax diagnostics\nCurrent doc\u0027s source text\nList of diagnostic data including the span of text corresponding to the diagnostic\nS\n\n\nGlobal construct search and navigation\nAll syntax trees for all projects\nAll items that match a user\u0027s search pattern with spans of text that represent where a given item is located\nS-L\n\n\n\n\nYou likely noticed that nearly all of the syntactical operations are marked S. Aside from extreme cases, like files with 50k lines or higher, syntax-only operations typically finish very quickly. In addition to being computationally inexpensive, they are also run asynchronously and free-threaded.\nEditor formatting is a bit of an exception. Most IDEs offer common commands for format an entire document, and although they also offer commands to format a given text selection, users typically choose to format the whole document. This means an entire document has to be inspected and potentially rewritten based on often complex rules. In practice this isn\u0027t bad when working with a document that has already been formatted, but it can be expensive for larger documents with strange stylistic choices.\nMost of the syntax operations require an entire document\u0027s source text or parse tree. It stands to reason that this could be improved by operating on a diff of a parse tree instead of the whole thing. This is likely a very complex thing to implement though, since none of the F# compiler infrastructure works in this way today.\nIDE actions based on semantics\n\n\n\nAction\nData inspected\nData returned\nExpected CPU/Allocations (S/M/L/XL)\n\n\n\n\nMost code fixes\nCurrent document\u0027s typecheck data\nSet (1 or more) of suggested text replacements\nS-M\n\n\nSemantic classification\nCurrent document\u0027s typecheck data\nSpans of text with semantic classification type for all constructs in a document\nS-L\n\n\nCode generation / refactorings\nCurrent document\u0027s typecheck data and/or current resolved symbol/symbols\nText replacement(s)\nS-L\n\n\nCode completion\nCurrent document\u0027s typecheck data and currently-resolved symbol user is typing at\nList of all symbols in scope that are \u0022completable\u0022 based on where completion is invoked\nS-L\n\n\nEditor tooltips\nCurrent document\u0027s typecheck data and resolved symbol where user invoked a tooltip\nF# tooltip data based on inspecting a type and its declarations, then pretty-printing them\nS-XL\n\n\nDiagnostics based on F# semantics\nCurrent document\u0027s typecheck data\nDiagnostic info for each symbol with diagnostics to show, including the range of text associated with the diagnostic\nM-XL\n\n\nSymbol highlighting in a document\nCurrent document\u0027s typecheck data and currently-resolved symbol where user\u0027s caret is located\nRanges of text representing instances of that symbol in the document\nS-M\n\n\nSemantic navigation (for example, Go to Definition)\nCurrent document\u0027s typecheck data and currently-resolved symbol where the user invoked navigation\nLocation of a symbol\u0027s declaration\nS-M\n\n\nRename\nGraph of all projects that use the symbol that rename is triggered on and the typecheck data for each of those projects\nList of all uses of all symbols that are to be renamed\nS-XL\n\n\nFind all references\nGraph of all projects that Find References is triggered on and the typecheck data for each of those projects\nList of all uses of all symbols that are found\nS-XL\n\n\nUnused value/symbol analysis\nTypecheck data for the current document\nList of all symbols that aren\u0027t a public API and are unused\nS-M\n\n\nUnused open analysis\nTypecheck data for the current document and all symbol data brought into scope by each open declaration\nList of open declarations whose symbols it exposes aren\u0027t used in the current document\nS-L\n\n\nMissing open analysis\nTypecheck data for the current document, resolved symbol with an error, and list of available namespaces or modules\nList of candidate namespaces or modules that can be opened\nS-M\n\n\nMisspelled name suggestion analysis\nTypecheck data for the current document and resolved symbol with an error\nList of candidates that are in scope and best match the misspelled name based on a string distance algorithm\nS-M\n\n\nName simplification analysis\nTypecheck data for the current document and all symbol data brought into scope by each open declaration\nList of text changes available for any fully- or partially-qualified symbol that can be simplified\nS-XL\n\n\n\n\nYou likely noticed that every cost associated with an action has a range. This is based on two factors:\n\nIf the semantic data being operated on is cached\nHow much semantic data must be processed for the action to be completed\n\nMost actions are S if they operate on cached data and the compiler determines that no data needs to be re-computed. The size of their range is influenced largely by the kind of semantic operations each action has to do, such as:\n\nTypechecking a single document and processing the resulting data\nTypechecking a document and its containing project and then processing the resulting data\nResolving a single symbol in a document\nResolving the definition of a single symbol in a codebase\nInspecting all symbols brought into scope by a given open declaration\nInspecting all symbols in a document\nInspecting all symbols in all documents contained in a graph of projects\n\nFor example, commands like Find All References and Rename can be cheap if a codebase is small, hence the lower bound being S. But if the symbol in question is used across many documents in a large project graph, they are very expensive because the entire graph must be crawled and all symbols contained in its documents must be inspected.\nIn contrast, actions like highlighting all symbols in a document aren\u0027t terribly expensive even for very large files. That\u0027s because the symbols to be inspected are ultimately only in a single document.\n","headings":["Overview","Kinds of data processed and served in F# tooling","IDE actions based on syntax","IDE actions based on semantics"],"type":"content"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/optimizations-equality.html","title":"Compiling Equality\n","content":"Compiling Equality\nThis spec covers how equality is compiled and executed by the F# compiler and library, based mainly on the types involved in the equality operation after all inlining, type specialization and other optimizations have been applied.\nWhat do we mean by an equality operation?\nThis spec is about the semantics and performance of the following coding constructs\n\na = b\na \u0026lt;\u0026gt; b\n\nIt is also about the semantics and performance of uses of the following FSharp.Core constructs which, after inlining, generate code that contains an equality check at the specific EQTYPE\n* HashIdentity.Structural\u0026lt;\u0027T\u0026gt;\n* {Array,Seq,List}.contains\n* {Array,Seq,List}.countBy\n* {Array,Seq,List}.groupBy\n* {Array,Seq,List}.distinct\n* {Array,Seq,List}.distinctBy\n* {Array,Seq,List}.except\nAll of which have implied equality checks. Some of these operations are inlined, see below, which in turn affects the semantics and performance of the overall operation.\nER vs PER equality\nIn math, a (binary) relation is a way to describe a relationship between the elements of sets. \u0022Greater than\u0022 is a relation for numbers, \u0022Subset of\u0022 is a relation for sets.\nHere we talk about 3 particular relations:\n1) Reflexivity - every element is related to itself\n- For integers, = is reflexive (a = a is always true) and \u0026gt; is not (a \u0026gt; a is never true)\n2) Symmetry - if a is related to b, then b is related to a\n- For integers, = is symmetric (a = b -\u0026gt; b = a) and \u0026gt; is not (if a \u0026gt; b then b \u0026gt; a is false)\n3) Transitivity -  if a is related to b, and b is related to c, then a is also related c\n- For integers, \u0026gt; is transitive (a \u0026gt; b \u0026amp;\u0026amp; b \u0026gt; c -\u0026gt; a \u0026gt; c) and \u221A is not (a = \u221Ab \u0026amp;\u0026amp; b = \u221Ac doesn\u0027t mean a = \u221Ac)\nIf a relation has 1, 2, and 3, we talk about Equivalence Relation (ER). If a relation only has 2 and 3, we talk about Partial Equivalence Relation (PER).\nThis matters in comparing floats since they include NaN. Depending on if we consider NaN = NaN true or false, we talk about ER or PER comparison respectively.\nWhat is the type known to the compiler and library for an equality operation?\nThe static type known to the F# compiler is crucial to determining the performance of the operation. The runtime type of the equality check is also significant in some situations.\nHere we define the relevant static type EQTYPE for the different constructs above:\nBasics\n\na = b:  EQTYPE is the statically known type of a or b\na \u0026lt;\u0026gt; b: EQTYPE is the statically known type of a or b\n\nInlined constructs\n\nHashIdentity.Structural\u0026lt;\u0027T\u0026gt;, EQTYPE is the inlined \u0027T (results in specialized equality)\nArray.contains\u0026lt;\u0027T\u0026gt;, EQTYPE is the inlined \u0027T (results in specialized equality)\nList.contains\u0026lt;T\u0026gt; likewise\nSeq.contains\u0026lt;T\u0026gt; likewise\n\nThese only result in naked generic equality if themselves used from a non-inlined generic context.\nNon-inlined constructs always resulting in naked generic equality\n\nArray.groupBy\u0026lt;\u0027Key, \u0027T\u0026gt; f array, EQTYPE is non-inlined \u0027Key, results in naked generic equality\nArray.countBy array likewise for \u0027T\nArray.distinct\u0026lt;\u0027T\u0026gt; array likewise\nArray.distinctBy array likewise\nArray.except array likewise\nList.groupBy likewise\nList.countBy likewise\nList.distinct likewise\nList.distinctBy likewise\nList.except likewise\nSeq.groupBy likewise\nSeq.countBy likewise\nSeq.distinct likewise\nSeq.distinctBy likewise\nSeq.except likewise\n\nThese always result in naked generic equality checks.\nExample 1:\nlet x = HashIdentity.Structural\u0026lt;byte\u0026gt;  // EQTYPE known to compiler is \u0060byte\u0060\n\nExample 2 (a non-inlined \u0022naked\u0022 generic context):\nlet f2\u0026lt;\u0026#39;T\u0026gt; () =\n   ... some long code\n   // EQTYPE known to the compiler is \u0060\u0026#39;T\u0060\n   // RUNTIME-EQTYPE known to the library is \u0060byte\u0060\n   let x = HashIdentity.Structural\u0026lt;\u0026#39;T\u0026gt;\n   ... some long code\n\nf2\u0026lt;byte\u0026gt;() // performance of this is determined by EQTYPE\u0026lt;\u0026#39;T\u0026gt; and RUNTIME-EQTYPE\u0026lt;byte\u0026gt;\n\nExample 3 (an inlined generic context):\nlet f3\u0026lt;\u0026#39;T\u0026gt; () =\n   ... some long code\n   // EQTYPE known to the compiler is \u0060byte\u0060\n   // RUNTIME-EQTYPE known to the library is \u0060byte\u0060\n   let x = HashIdentity.Structural\u0026lt;\u0026#39;T\u0026gt;\n   ... some long code\n\nf3\u0026lt;byte\u0026gt;() // performance of this is determined by EQTYPE\u0026lt;byte\u0026gt; and RUNTIME-EQTYPE\u0026lt;byte\u0026gt;\n\nExample 4 (a generic struct type in a non-inline generic context):\nlet f4\u0026lt;\u0026#39;T\u0026gt; () =\n   ... some long code\n   // EQTYPE known to the compiler is \u0060SomeStructType\u0026lt;\u0026#39;T\u0026gt;\u0060\n   // RUNTIME-EQTYPE known to the library is \u0060SomeStructType\u0026lt;byte\u0026gt;\u0060\n   let x = HashIdentity.Structural\u0026lt;SomeStructType\u0026lt;\u0026#39;T\u0026gt;\u0026gt;\n   ... some long code\n\nf4\u0026lt;byte\u0026gt;() // performance of this determined by EQTYPE\u0026lt;SomeStructType\u0026lt;\u0026#39;T\u0026gt;\u0026gt; and RUNTIME-EQTYPE\u0026lt;SomeStructType\u0026lt;byte\u0026gt;\u0026gt;\n\nHow we compile equality \u0022a = b\u0022\nThis very much depends on the EQTYPE involved in the equality as known by the compiler\nAim here is to flesh these all out with:\n* Semantics: what semantics the user expects, and what the semantics actually is\n* Perf expectation: what perf the user expects\n* Compilation today: How we actually compile today\n* Perf today: What is the perf we achieve today\n* (Optional) sharplab.io link to how things are in whatever version is selected in sharplab\n* (Optional) notes\nprimitive integer types (int32, int64, ...)\nlet f (x: int) (y: int) = (x = y)\n\n\nSemantics: equality on primitive\nPerf: User expects full performance down to native\nCompilation today: compiles to IL instruction \u2705\nPerf today: good \u2705\nsharplab int32\n\nprimitive floating point types (float32, float64)\nlet f (x: float32) (y: float32) = (x = y)\n\n\nSemantics: IEEE floating point equality (respecting NaN etc.)\nPerf: User expects full performance down to native\nCompilation today: compiles to IL instruction \u2705\nPerf today: good \u2705\nsharplab float32\n\nprimitive string, decimal\n\nSemantics: .NET equivalent equality, non-localized for strings\nPerf: User expects full performance down to native\nCompilation today: compiles to String.Equals or Decimal.op_Equality call \u2705\nPerf today: good \u2705\nsharplab decimal\nsharplab string\n\nreference tuple type (size \u0026lt;= 5)\n\nSemantics: User expects structural\nPerf: User expects flattening to constituent checks\nCompilation today: tuple equality is flattened to constituent checks \u2705\nPerf today: good \u2705\nsharplab (int * double * \u0027T), with example reductions/optimizations noted\n\nreference tuple type (size \u0026gt; 5)\n\nSemantics: User expects structural\nPerf: User expects flattening to constituent checks\nCompilation today: not flattened, compiled to GenericEqualityIntrinsic\nPerf today: the check does type tests, does virtual calls via IStructuralEqualityComparer, boxes etc. \u274C(Problem1)\nsharplab for size 6\n\nstruct tuple type\n\nSemantics: User expects structural\nPerf: User expects flattening to constituent checks or at least the same optimizations as tuples\nCompilation today: compiled to GenericEqualityIntrinsic\nPerf today: boxes, does type tests, does virtual calls via IStructuralEqualityComparer etc. \u274C(Problem2)\nsharplab for size 3\n\nC# or F# enum type\n\nSemantics: User expects identical to equality on the underlying type\nPerf: User expects same perf as flattening to underlying type\nCompilation today: flattens to underlying type\nPerf today: good \u2705\nsharplab for C# enum int\nsharplab for F# enum int\n\nC# struct type\n\nSemantics: User expects call to IEquatable\u0026lt;T\u0026gt; if present, but F# spec says call this.Equals(box that), in practice these are the same\nPerf expected: no boxing\nCompilation today: EqualityComparer.Default\nPerf today: good \u2705\nsharplab\n\nF# struct type (records, tuples - with compiler-generated structural equality)\n\nSemantics: User expects field-by-field structural equality\nPerf expected: no boxing\nCompilation today: GenericEqualityIntrinsic\u0026lt;SomeStructType\u0026gt;\nPerf today: good \u2705\nsharplab\n\n\narray type (byte[], int[], some-struct-type[],  ...)\n\nSemantics: User expects structural\nPerf expected: User expects perf is sum of constituent parts\nCompilation today: either FSharpEqualityComparer_PER\u00601\u0026lt;uint8[]\u0026gt;::get_EqualityComparer().Equals(...) or FSharpEqualityComparer_PER\u00601\u0026lt;T[]\u0026gt;::get_EqualityComparer().Equals(...)\nPerf today: good \u2705\nsharplab for byte[]\n\nF# large reference record/union type\nHere \u0022large\u0022 means the compiler-generated structural equality is NOT inlined.\n\nSemantics: User expects structural by default\nPerf expected: User expects perf is sum of constituent parts, type-specialized if generic\nCompilation today: direct call to Equals(T)\nPerf today: the call to Equals(T) has specialized code but boxes fields if struct or generic, see Problem3 \u274C, Problem4 \u274C\n\nF# tiny reference (anonymous) record or union type\nHere \u0022tiny\u0022 means the compiler-generated structural equality IS inlined.\n\nSemantics: User expects structural by default\nPerf expected: User expects perf is sum of constituent parts, type-specialized if generic\nCompilation today: FSharpEqualityComparer_ER\u00601\u0026lt;!a\u0026gt;::get_EqualityComparer().Equals(...)\nPerf today: good \u2705\n\nGeneric \u0027T in non-inlined generic code\n\nSemantics: User expects the PER equality semantics of whatever \u0027T actually is\nPerf expected: User expects no boxing\nCompilation today: FSharpEqualityComparer_ER\u00601\u0026lt;!a\u0026gt;::get_EqualityComparer().Equals(...)\nPerf today: good \u2705\n\nGeneric \u0027T in recursive position in structural comparison\nThis case happens in structural equality for tuple types and other structural types\n\nSemantics: User expects the PER equality semantics of whatever \u0027T actually is\nPerf: User expects no boxing\nCompilation today: FSharpEqualityComparer_ER\u00601\u0026lt;!a\u0026gt;::get_EqualityComparer().Equals(...)\nPerf today: good \u2705\nSharplab\n\nTechniques available to us\n\nFlatten and inline\nRCG: Use reflective code generation internally in FSharp.Core\nKFS: Rely on known semantics of F# structural types and treat those as special\nTS: Hand-code type-specializations using static optimization conditions in FSharp.Core\nTT: Type-indexed tables of baked (poss by reflection) equality comparers and functions, where some pre-computation is done\nDV: De-virtualization\nDEQ: Use EqualityComparer\u0026lt;\u0027T\u0026gt;.Default where possible\n\nNotes on previous attempts to improve things\n#5112\n\nUses TT, DEQ, KFS, DV\nFocuses on solving Problem4\n99% not breaking, apart from the case of value types with custom equality implemented differently than the EqualityComparer.Default - the change would lead to the usage of the custom implementation which is reasonable\n\nNote: this included changes to the optimizer to reduce GenericEqualityIntrinsic down to a type-indexed table lookup fetching an IEqualityComparer and calling it. These hand-coded reductions appear unnecessary as the reduction doesn\u0027t open up any further optimizations.\n","headings":["Compiling Equality","What do we mean by an equality operation?","ER vs PER equality","What is the type known to the compiler and library for an equality operation?","Basics","Inlined constructs","Non-inlined constructs always resulting in naked generic equality","How we compile equality \u0022a = b\u0022","reference tuple type (size \u0026lt;= 5)","reference tuple type (size \u0026gt; 5)","struct tuple type","C# or F# enum type","C# struct type","F# struct type (records, tuples - with compiler-generated structural equality)","array type (byte[], int[], some-struct-type[],  ...)","F# large reference record/union type","F# tiny reference (anonymous) record or union type","Techniques available to us","Notes on previous attempts to improve things"],"type":"content"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/debug-emit.html","title":"Debug emit","content":"\nDebug emit\nThe F# compiler code base emits debug information and attributes. This article documents what we do, how it is implemented and the problem areas in our implementation.\nThere are mistakes and missing pieces to our debug information. Small improvements can make a major difference. Please help us fix mistakes and get things right.\nThe file tests\\walkthroughs\\DebugStepping\\TheBigFileOfDebugStepping.fsx is crucial for testing the stepping experience for a range of constructs.\nUser experiences\nDebugging information affects numerous user experiences:\n\nCall stacks during debugging\nBreakpoint placement before and during debugging\nLocals during debugging\nJust my code debugging (which limits the view of debug code to exclude libraries)\nException debugging (e.g. \u0022first chance\u0022 debugging when exceptions occur)\nStepping debugging\nWatch window\nProfiling results\nCode coverage results\n\nSome experiences are un-implemented by F# including:\n\nAutos during debugging\nEdit and Continue\nHot reload\n\nEmitted information\nEmitted debug information includes:\n\nThe names of methods in .NET IL\n\nThe PDB file/information (embedded or in PDB file) which contains\n\nDebug \u0022sequence\u0022 points for IL code\nNames of locals and the IL code scopes over which those names are active\n\n\nThe attributes on IL methods such as CompilerGeneratedAttribute and DebuggerNonUserCodeAttribute, see below\nWe add some codegen to give better debug experiences, see below.\n\nWe almost always now emit the Portable PDB format.\nDesign-time services\nIDE tooling performs queries into the F# language service, notably:\n\nValidateBreakpointLocation is called to validate every breakpoint before debugging is launched. This operates on syntax trees. See notes below.\n\nDebugging and optimization\nNearly all optimizations are off when debug code is being generated.\n\nThe optimizer is run for forced inlining only\nList and array expressions do generate collector code\nState machines are generated for tasks and sequences\n\u0022let mutable\u0022 --\u0026gt; \u0022ref\u0022 promotion happens for captured local mutables\nTailcalls are off by default and not emitted in IlxGen.\n\nOtherwise, what comes out of the type checker is pretty much what goes into IlxGen.fs.\nDebug points\nTerminology\nWe use the terms \u0022sequence point\u0022 and \u0022debug point\u0022 interchangeably. The word \u0022sequence\u0022 has too many meanings in the F# compiler so in the actual code you\u0027ll see \u0022DebugPoint\u0022 more often, though for abbreviations you may see spFoo or mFoo.\nHow breakpoints work (high level)\nBreakpoints have two existences which must give matching behavior:\n\nAt design-time, before debugging is launched, ValidateBreakpointLocation is called to validate every breakpoint.  This operates on the SyntaxTree and forms a kind of \u0022gold-standard\u0022 about the exact places where break points are valid.\nAt run-time, breakpoints are \u0022mapped\u0022 by the .NET runtime to actual sequence points found in the PDB data for .NET methods. The runtime searches all methods with debug points for the relevant document and determines where to \u0022bind\u0022 the actual breakpoint to.  A typical debugger can bind a breakpoint to multiple locations.\n\nThis means there is an invariant that ValidateBreakpointLocation and the emitted IL debug points correspond.\n\nNOTE: The IL code can and does contain extra debug points that don\u0027t pass ValidateBreakpointLocation. It won\u0027t be possible to set a breakpoint for these, but they will appear in stepping.\n\nIntended debug points based on syntax\nThe intended debug points for constructs are determined by syntax as follows.  Processing depends on whether a construct is being processed as \u0022control-flow\u0022 or not. This means at least one debug point will be placed, either over the whole expression or some of its parts.\n\nThe bodies of functions, methods, lambdas and initialization code for top-level-bindings are all processed as control flow\nEach Upper-Cased EXPR below is processed as control-flow (the bodies of loops, conditionals etc.)\nLeaf expressions are the other composite expressions like applications that are not covered by the other constructs.\nThe sub-expressions of leaf expressions are not processed as control-flow.\n\n\n\n\nConstruct\nDebug points\n\n\n\n\nlet x = leaf-expr in BODY-EXPR\nDebug point over let x = leaf-expr.\n\n\nlet x = NON-LEAF-EXPR in BODY-EXPR\n\n\n\nlet f x = BODY-EXPR in BODY-EXPR\n\n\n\nlet rec f x = BODY-EXPR and g x = BODY-EXPR in BODY-EXPR\n\n\n\nif guard-expr then THEN-EXPR\nDebug point over if guard-expr then\n\n\nif guard-expr then THEN-EXPR else ELSE-EXPR\nDebug point over if .. then\n\n\nmatch .. with ...\nDebug point over match .. with\n\n\n... -\u0026gt; TARGET-EXPR\n\n\n\n... when WHEN-EXPR -\u0026gt; TARGET-EXPR\n\n\n\nwhile .. do BODY-EXPR\nDebug point over while .. do\n\n\nfor .. in collection-expr do BODY-EXPR\nDebug points over for, in and collection-expr\n\n\ntry TRY-EXPR with .. -\u0026gt; HANDLER-EXPR\nDebug points over try and with\n\n\ntry TRY-EXPR finally .. -\u0026gt; FINALLY-EXPR\nDebug points try and finally\n\n\nuse x = leaf-expr in BODY-EXPR\nDebug point over use x = leaf-expr.\n\n\nuse x = NON-LEAF-EXPR in BODY-EXPR\n\n\n\nEXPR; EXPR\n\n\n\n(fun .. -\u0026gt; BODY-EXPR)\nNot a leaf, do not produce a debug point on outer expression, but include them on BODY-EXPR\n\n\n{ new C(args) with member ... = BODY-EXPR }\n\n\n\nPipe EXPR1 \u0026amp;amp;\u0026amp;amp; EXPR2\n\n\n\nPipe EXPR1 \u0026amp;#124;\u0026amp;#124; EXPR2\n\n\n\nPipe EXPR1 \u0026amp;#124;\u0026gt; EXPR2\n\n\n\nPipe (EXPR1, EXPR2) \u0026amp;#124;\u0026amp;#124;\u0026gt; EXPR3\n\n\n\nPipe (EXPR1, EXPR2, EXPR3) \u0026amp;#124;\u0026amp;#124;\u0026amp;#124;\u0026gt; EXPR4\n\n\n\nyield leaf-expr\nDebug point over \u0027yield expr\u0027\n\n\nyield! leaf-expr\nDebug point over \u0027yield! expr\u0027\n\n\nreturn leaf-expr\nDebug point over \u0027return expr\u0027\n\n\nreturn! leaf-expr\nDebug point over \u0027return! expr\u0027\n\n\n[ BODY ]\nSee notes below. If a computed list expression with yields (explicit or implicit) then process as control-flow. Otherwise treat as leaf\n\n\n[| BODY |]\nSee notes below. If a computed list expression with yields (explicit or implicit) then process as control-flow. Otherwise treat as leaf\n\n\nseq { BODY }\nSee notes below\n\n\nbuilder { BODY }\nSee notes below\n\n\nf expr, new C(args), constants or other leaf\nDebug point when being processed as control-flow. The sub-expressions are processed as non-control-flow.\n\n\n\n\nIntended debug points for let-bindings\nSimple let bindings get debug points that extend over the let (if the thing is not a function and the implementation is a leaf expression):\nlet f () =\n    let x = 1 // debug point for whole of \u0060let x = 1\u0060\n    let f x = 1 // no debug point on \u0060let f x =\u0060, debug point on \u00601\u0060\n    let x = if today then 1 else tomorrow // no debug point on \u0060let x =\u0060, debug point on \u0060if today then\u0060 and \u00601\u0060 and \u0060tomorrow\u0060\n    let x = let y = 1 in y \u002B y // no debug point on \u0060let x =\u0060, debug point on \u0060let y = 1\u0060 and \u0060y \u002B y\u0060\n    ...\n\nIntended debug points for nested control-flow\nDebug points are not generally emitted for constituent parts of non-leaf constructs, in particular function applications, e.g. consider:\nlet h1 x = g (f x)\nlet h2 x = x |\u0026gt; f |\u0026gt; g\n\nHere g (f x) gets one debug point covering the whole expression. The corresponding pipelining gets three debug points.\nIf however a nested expression is control-flow, then debug points start being emitted again e.g.\nlet h3 x = f (if today then 1 else 2)\n\nHere debug points are at if today then and 1 and 2 and all of f (if today then 1 else 2)\n\nNOTE: these debug points are overlapping. That\u0027s life.\n\nIntended debug points for [...], [| ... |] code\nThe intended debug points for computed list and array expressions are the same as for the expressions inside the constructs. For example\nlet x = [ for i in 1 .. 10 do yield 1 ]\n\nThis will have debug points on for i in 1 .. 10 do and yield 1.\nIntended debug points for seq { .. } and task { .. } code\nThe intended debug points for tasks is the same as for the expressions inside the constructs. For example\nlet f() = task { for i in 1 .. 10 do printfn \u0026quot;hello\u0026quot; }\n\nThis will have debug points on for i in 1 .. 10 do and printfn \u0022hello\u0022.\n\nNOTE: there are glitches, see further below\n\nIntended debug points for other computation expressions\nOther computation expressions such as async { .. } or builder { ... } get debug points as follows:\n\nA debug point for builder prior to the evaluation of the expression\n\nIn the de-sugaring of the computation expression, each point a lambda is created implicitly, then the body of that\nlambda as specified by the F# language spec is treated as control-flow and debug points added per the earlier spec.\n\nFor every builder.Bind, builder.BindReturn and similar call that corresponds to a let where there would be a debug point, a debug point is added immediately prior to the call.\nFor every builder.For call, a debug point covering the for keyword is added immediately prior to the call.  No debug point is added for the builder.For call itself even if used in statement position.\nFor every builder.While call, a debug point covering the while keyword plus guard expression is added immediately prior to the execution of the guard within the guard lambda expression. No debug point is added for the builder.While call itself even if used in statement position.\nFor every builder.TryFinally call, a debug point covering the try keyword is added immediately within the body lambda expression. A debug point covering the finally keyword is added immediately within the finally lambda expression. No debug point is added for the builder.TryFinally call itself even if used in statement position.\nFor every builder.Yield, builder.Return, builder.YieldFrom or builder.ReturnFrom call, debug points are placed on the expression as if it were control flow. For example yield 1 will place a debug point on 1 and yield! printfn \u0022hello\u0022; [2] will place two debug points.\nNo debug point is added for the builder.Run, builder.Run or builder.Delay calls at the entrance to the computation expression, nor the builder.Delay calls implied by try/with or try/finally or sequential Combine calls.\n\nThe computations are often \u0022cold-start\u0022 anyway, leading to a two-phase debug problem.\nThe \u0022step-into\u0022 and \u0022step-over\u0022 behaviour for computation expressions is often buggy because it is performed with respect to the de-sugaring and inlining rather than the original source.\nFor example, a \u0022step over\u0022 on a \u0022while\u0022 with a non-inlined builder.While will step over the whole call, when the user expects it to step the loop.\nOne approach is to inline the builder.While method, and apply [\u0026lt;InlineIfLambda\u0026gt;] to the body function. This however has only limited success\nas at some points inlining fails to fully flatten. Builders implemented with resumable code tend to be much better in this regards as\nmore complete inlining and code-flattening is applied.\nIntended debug points for implicit constructors\n\nThe let and do bindings of an implicit constructor generally gets debug points as if it were a function.\ninherits SubClass(expr) gets a debug point. If there is no inherits, an initial debug point is placed over the text of the arguments.\n\ne.g.\ntype C(args) =        \n    let x = 1\u002B1         // debug point over \u0060let x = 1\u002B1\u0060 as the only side effect\n    let f x = x \u002B 1\n    member _.P = x \u002B f 4\n\ntype C(args) =        \n    do printfn \u0026quot;hello\u0026quot;         // debug point over \u0060printfn \u0026quot;hello\u0026quot;\u0060 as side effect\n    static do printfn \u0026quot;hello\u0026quot;         // debug point over \u0060printfn \u0026quot;hello\u0026quot;\u0060 as side effect for static init\n    let f x = x \u002B 1\n    member _.P = x \u002B f 4\n\ntype C(args) =        // debug point over \u0060(args)\u0060 since there\u0026#39;s no other place to stop on object construction\n    let f x = x \u002B 1\n    member _.P = 4\n\nInternal implementation of debug points in the compiler\nMost (but not all) debug points are noted by the parser by adding DebugPointAtTry, DebugPointAtWith, DebugPointAtFinally, DebugPointAtFor, DebugPointAtWhile, DebugPointAtBinding or DebugPointAtLeaf.\nThese are then used by ValidateBreakpointLocation. These same values are also propagated unchanged all the way through to IlxGen.fs for actual code generation, and used for IL emit, e.g. a simple case like this:\n    match spTry with\n    | DebugPointAtTry.Yes m -\u0026gt; CG.EmitDebugPoint cgbuf m ... \n    | DebugPointAtTry.No -\u0026gt; ...\n    ...\n\nFor many constructs this is adequate. However, in practice the situation is far more complicated.\nInternals: Debug points for [...], [| ... |]\nThe internal implementation of debug points for list and array expressions is conceptually simple but a little complex.\nConceptually the task is easy, e.g. [ while check() do yield x \u002B x ] is lowered to code like this:\nlet $collector = ListCollector\u0026lt;int\u0026gt;()\nwhile check() do\n    $collector.Add(x\u002Bx)\n$collector.Close()\n\nNote the while loop is still a while loop - no magic here - and the debug points for the while loop can also apply to the actual generated for loop.\nHowever, the actual implementation is more complicated because there is a TypedTree representation of the code in-between that at first seems to bear little resemblance to what comes in.\nSyntaxTree --[CheckComputationExpressions.fs]--\u0026gt; TypedTree --\u0026gt; IlxGen --\u0026gt;[LowerComputedListOrArrayExpr.fs]--\u0026gt; IlxGen\n\nThe TypedTree is a functional encoding into Seq.toList, Seq.singleton and so on. How do the debug points get propagated?\n\nIn CheckComputationExpressions.fs we \u0022note\u0022 the debug point for the For loop and attach it to one of the lambdas generated in the TypedTreeForm\nIn LowerSequences.fs we \u0022recover\u0022 the debug point from precisely that lambda.\nIn IlxGen.fs this becomes an actual debug point in the actual generated \u0022while\u0022 loop.\n\nThis then gives accurate debug points for these constructs.\nInternals: debug points for seq { .. .} code\nDebug points for seq { .. } compiling to state machines poses similar problems.\n\nThe de-sugaring is as for list and array expressions\nThe debug points are recovered in the state machine generation\n\nInternals: debug points for task { .. .} code\nDebug points for task { .. } poses much harder problems. We use \u0022while\u0022 loops as an example:\n\nThe de-sugaring is for computation expressions, and in CheckComputationExpressions.fs places a debug point for while directly before the evaluation of the guard\nThe code is then checked and optimized, and all the resumable code is inlined, and this debug point is preserved throughout this process.\n\nInternals: debug points for other computation expressions\nAs mentioned above, other computation expressions such as async { .. } have significant problems with their debug points.\nThe main problem is stepping: even after inlining the code for computation expressions is rarely \u0022flattened\u0022 enough, so, for example, a \u0022step-into\u0022 is required to get into the second part of an expr1; expr2 construct (i.e. an async.Combine(..., async.Delay(fun () -\u0026gt; ...))) where the user expects to press \u0022step-over\u0022.\nBreakpoints tend to be less problematic.\n\nNOTE: A systematic solution for quality debugging of computation expressions code is still elusive, and especially for async { ... }.  Extensive use of inlining and InlineIfLambda can succeed in flattening most simple computation expression code. This is however not yet fully applied to async programming.\nNOTE: The use of library code to implement \u0022async\u0022 and similar computation expressions also interacts badly with \u0022Just My Code\u0022 debugging, see https://github.com/dotnet/fsharp/issues/5539 for example.\nNOTE: As mentioned, the use of many functions to implement \u0022async\u0022 and friends implements badly with \u0022Step Into\u0022 and \u0022Step Over\u0022 and related attributes, see for example https://github.com/dotnet/fsharp/issues/3359\n\nFeeFee and F00F00 debug points (Hidden and JustMyCodeWithNoSource)\nSome fragments of code use constructs generate calls and other IL code that should not have debug points and not participate in \u0022Step Into\u0022, for example. These are generated in IlxGen as \u0022FeeFee\u0022 debug points. See the the Portable PDB spec linked here.\n\nTODO: There is also the future prospect of generating JustMyCodeWithNoSource (0xF00F00) debug points but these are not yet emitted by F#.  We should check what this is and when the C# compiler emits these.\nNOTE: We always make space for a debug point at the head of each method by emitting a FeeFee debug sequence point. This may be immediately replaced by a \u0022real\u0022 debug point here.\n\nGenerated code\nThe F# compiler generates entire IL classes and methods for constructs such as records, closures, state machines and so on. Each time code is generated we must carefully consider what attributes and debug points are generated.\nGenerated \u0022augment\u0022 methods for records, unions and structs\nGenerated methods for equality, hash and comparison on records, unions and structs do not get debug points at all.\n\nNOTE: Methods without debug points (or with only 0xFEEFEE debug points) are shown as \u0022no code available\u0022 in Visual Studio - or in Just My Code they are hidden altogether - and are removed from profiling traces (in profiling, their costs are added to the cost of the calling method).\nTODO: we should also consider emitting ExcludeFromCodeCoverageAttribute, being assessed at time of writing, however the absence of debug points should be sufficient to exclude these.\n\nGenerated \u0022New*\u0022, \u0022Is*\u0022, \u0022Tag\u0022 etc. for unions\nDiscriminated unions generate NewXYZ, IsXYZ, Tag etc. members. These do not get debug points at all.\nThese methods also get CompilerGeneratedAttribute, and DebuggerNonUserCodeAttribute.\n\nTODO: we should also consider emitting ExcludeFromCodeCoverageAttribute, being assessed at time of writing, however the absence of debug points should be sufficient to exclude these.\nTODO: the NewABC methods are missing CompilerGeneratedAttribute, and DebuggerNonUserCodeAttribute. However, the absence of debug points should be sufficient to exclude these from code coverage and profiling.\n\nGenerated closures for lambdas\nThe debug codegen involved in closures is as follows:\n\n\n\nSource\nConstruct\nDebug Points\nAttributes\n\n\n\n\n(fun x -\u0026gt; ...)\nClosure class\n\n\n\n\n\n.ctor method\nnone\nCompilerGenerated, DebuggerNonUserCode\n\n\n\nInvoke method\nfrom body of closure\n\n\n\ngeneric local defn\nClosure class\n\n\n\n\n\n.ctor method\nnone\nCompilerGenerated, DebuggerNonUserCode\n\n\n\nSpecialize method\nfrom body of closure\n\n\n\nIntermediate closure classes\nFor long curried closures fun a b c d e f -\u0026gt; ....\n\nCompilerGenerated, DebuggerNonUserCode\n\n\n\n\nGenerated intermediate closure methods do not get debug points, and are labelled CompilerGenerated and DebuggerNonUserCode.\n\nTODO: we should also consider emitting ExcludeFromCodeCoverageAttribute, being assessed at time of writing\n\nGenerated state machines for seq { .. }\nSequence expressions generate class implementations which resemble closures.\nThe debug points recovered for the generated state machine code for seq { ... } is covered up above. The other codegen is as follows:\n\n\n\nSource\nConstruct\nDebug Points\nAttributes\n\n\n\n\nseq { ... }\nState machine class\n\n\u0022Closure\u0022\n\n\n\n.ctor method\nnone\nnone\n\n\n\nGetFreshEnumerator\nnone\nCompilerGenerated, DebuggerNonUserCode\n\n\n\nLastGenerated\nnone\nCompilerGenerated, DebuggerNonUserCode\n\n\n\nClose\nnone\nnone\n\n\n\nget_CheckClose\nnone\nnone\n\n\n\nGenerateNext\nfrom desugaring\nnone\n\n\n\n\n\nNOTE: it appears from the code that extraneous debug points are not being generated, which is good, though should be checked\nTODO: we should likely be generating CompilerGeneratedAttribute and DebuggerNonUserCodeAttribute attributes for the Close and get_CheckClose and .ctor methods\nTODO: we should also consider emitting ExcludeFromCodeCoverageAttribute, being assessed at time of writing\n\nGenerated state machines for task { .. }\nResumable state machines used for task { .. } also generate struct implementations which resemble closures.\nThe debug points recovered for the generated state machine code for seq { ... } is covered up above. The other codegen is as follows:\n\n\n\nSource\nConstruct\nDebug Points\nAttributes\nNotes\n\n\n\n\ntask { ... }\nState machine struct\n\n\u0022Closure\u0022\n\n\n\n\n.ctor method\nnone\nnone\n\n\n\n\nTBD\n\n\n\n\n\n\n\n\nTODO: we should be generating attributes for some of these\nTODO: we should assess that only the \u0022MoveNext\u0022 method gets any debug points at all\nTODO: Currently stepping into a task-returning method needs a second step-into to get into the MoveNext method of the state machine.  We should emit the StateMachineMethod and StateMachineHoistedLocalScopes tables into the PDB to get better debugging into task methods. See https://github.com/dotnet/fsharp/issues/12000.\n\nGenerated code for delegate constructions Func\u0026lt;int,int,int\u0026gt;(fun x y -\u0026gt; x \u002B y)\nA closure class is generated.  Consider the code\nopen System\nlet d = Func\u0026lt;int,int,int\u0026gt;(fun x y -\u0026gt; x \u002B y)\n\nThere is one debug point over all of Func\u0026lt;int,int,int\u0026gt;(fun x y -\u0026gt; x \u002B y) and one over x\u002By.\nGenerated code for constant-sized array and list expressions\nThese are not generally problematic for debug.\nGenerated code for large constant arrays\nThese are not generally problematic for debug.\nGenerated code for pattern matching\nThe implementation is a little gnarly and complicated and has historically had glitches.\nGenerated code for conditionals and boolean logic\nGenerally straight-forward. See for example this proposed feature improvement\nCapture and closures\nCaptured locals are available via the this pointer of the immediate closure.  Un-captured locals are not available as things stand.  See for example this proposed feature improvement.\nConsider this code:\nlet F() =\n    let x = 1\n    let y = 2\n    (fun () -\u0026gt; x \u002B y)\n\nHere x and y become closure fields of the closure class generated for the final lambda. When inspecting locals in the inner closure, the C# expression evaluator we rely on for Visual Studio takes local names like x and y and is happy to look them up via this. This means hovering over x correctly produces the value stored in this.x.\nFor nested closures, values are implicitly re-captured, and again the captured locals will be available.\nHowever this doesn\u0027t work with \u0022capture\u0022 from a class-defined \u0022let\u0022 context. Consider the following variation:\ntype C() =\n    let x = 1\n    member _.M() = \n        let y = 2\n        (fun () -\u0026gt; x \u002B y)\n\nHere the implicitly captured local is y, but x is not captured, instead it is implicitly rewritten by the F# compiler to c.x where c is the captured outer \u0022this\u0022 pointer of the invocation of M().  This means that hovering over x does not produce a value. See issue 3759.\nProvided code\nCode provided by erasing type providers has all debugging points removed.  It isn\u0027t possible to step into such code or if there are implicit debug points they will be the same range as the construct that was macro-expanded by the code erasure.\n\nFor example, a provided if/then/else expression has no debug point\n\nAdded code generation for better debugging\nWe do some \u0022extra\u0022 code gen to improve debugging. It is likely much of this could be removed if we had an expression evaluator for F#.\n\u0027this\u0027 value\nFor member x.Foo() = ... the implementation of the member adds a local variable x containing the this pointer from ldarg.0. This means hovering over x in the method produces the right value, as does x.Property etc.\nPipeline debugging\nFor pipeline debugging we emit extra locals for each stage of a pipe and debug points at each stage.\nSee pipeline debugging mini-spec.\nShadowed locals\nFor shadowed locals we change the name of a local for the scope for which it is shadowed.\nSee shadowed locals mini-spec.\nDiscriminated union debug display text\nFor discriminated union types and all implied subtypes we emit a DebuggerDisplayAttribute and a private __DebugDisplay() method that uses sprintf \u0022%\u002B0.8A\u0022 obj to format the object.\nMissing debug emit\nMissing debug emit for PDBs\nOur PDB emit is missing considerable information:\n\nNot emitted: LocalConstants table\nNot emitted: Compilation options table\nNot emitted: Dynamic local variables table\nNot emitted: StateMachineMethod table and StateMachineHoistedLocalScopes table\nNot emitted: ImportScopes table\n\nThese are major holes in the F# experience. Some are required for things like hot-reload.\nMissing design-time services\nSome design-time services are un-implemented by F#:\n\nUnimplemented: F# expression evaluator\nUnimplemented: Proximity expressions (for Autos window)\n\nThese are major holes in the F# experience and should be implemented.\n","headings":["Debug emit","User experiences","Emitted information","Design-time services","Debugging and optimization","Debug points","Terminology","How breakpoints work (high level)","Intended debug points based on syntax","Intended debug points for let-bindings","Intended debug points for nested control-flow","Intended debug points for other computation expressions","Intended debug points for implicit constructors","Internal implementation of debug points in the compiler","Internals: debug points for other computation expressions","FeeFee and F00F00 debug points (Hidden and JustMyCodeWithNoSource)","Generated code","Generated \u0022augment\u0022 methods for records, unions and structs","Generated \u0022New*\u0022, \u0022Is*\u0022, \u0022Tag\u0022 etc. for unions","Generated closures for lambdas","Generated code for constant-sized array and list expressions","Generated code for large constant arrays","Generated code for pattern matching","Generated code for conditionals and boolean logic","Capture and closures","Provided code","Added code generation for better debugging","\u0027this\u0027 value","Pipeline debugging","Shadowed locals","Discriminated union debug display text","Missing debug emit","Missing debug emit for PDBs","Missing design-time services"],"type":"content"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/lsp.html","title":"F# LSP\n","content":"F# LSP\nF# LSP support design proposal. To be expanded as we learn more / settle on things.\nTable of contents\n\n\nF# LSP\n\nTable of contents\nGoals / Requirements\nOverview\n\nComponents\n\n\nFsLSP\n\nFsLSPServer\n\nWorkspace State Management\n\nThings to keep track of:\n\n\nProject model\nExample sequence diagram\nConcurrency and cancellation\nRequest tracking\nConfiguration updates\nExtensibility\nRelease process\n\n\nNewVsix\nFCS\n\n\n\nLSP library\n\nCandidates\n\n\nLSP client (?)\nDiagnostic mode\nLSIF\nPerformance\nAnalyzers \\\u0026amp; Refactoring support\nMixed F# / C# solutions\nMultiple workspace support\n\nAction plan\n\nPhase 0\nPhase 1\nPhase 2 - 5\n\n\nLSP Endpoints\n\n\n\nGoals / Requirements\n\n\nFully featured F# LSP server implementation that can be used by any editor\n\nCan be used as a library (with optional customization) or executable\nIndependent of any particular project system - this needs to be handled by the client\nTarget LSP protocol version 3.17 (at least initially, we can upgrade as we go)\nSupport all useful LSP APIs\nSupport for analyzers\nSupport for code fixes and refactoring\nSupport for mixed F# / C# solutions (being able to delegate to C# LSP server)\nGood performance\nSupport for multiple workspaces\nSupport for LSIF\n\n\nVisual Studio extension that will use the LSP server\n\nOverview\n\ngraph TD\n\nVS(VS) --\u0026gt;|VS LSP client| NewVsix(\u0022NewVsix (Out-of-process)\u0022)\n\nVsCode(VS Code) --\u0026gt; Ionide(Ionide/FSAC)\n\nVim(Vim) --\u0026gt; Ionide(Ionide/FSAC)\n\nFsLSPServer(FsLSP Server)\n\nNewVsix --\u0026gt; ProjectQuery(Project Query API)\nNewVsix --\u0026gt; FsLSP\n\nFsLSPServer --\u0026gt; FsLSP\n\n\n\nsubgraph FsLSP\nProjectModel(Project Model)\nWorkspaceStateManagement(Workspace State Management)\nLSPLibrary(LSP Library)\nend\n\nFsLSP --\u0026gt; FCS\n\nIonide --\u0026gt; FsLSPServer\nIonide --\u0026gt; ProjInfo(ProjInfo)\n\nstyle VS stroke-dasharray: 2 4\nstyle Vim stroke-dasharray: 2 4\nstyle VsCode stroke-dasharray: 2 4\nstyle Ionide stroke-dasharray: 2 4\nstyle ProjInfo stroke-dasharray: 2 4\nstyle LSPLibrary stroke-dasharray: 2 4\nstyle ProjectQuery stroke-dasharray: 2 4\n\n\n\n\n\nComponent\nDescription\nRelease Process\n\n\n\n\nFCS\nF# Compiler Service\nNuget\n\n\nFsLSP\nThe F# LSP library. This can be used to create an LSP server.\nNuget\n\n\n\nFsLSPServer\n\nThe F# LSP server. An executable that can be started and will process LSP calls. Thin wrapper around FsLSP.\nwith FsLSP\n\n\n\nWorkspace State Management\n\nA system for keeping a \u0022current snapshot\u0022 of projects the user is working with\n\n\n\n\nProject Model\n\nA model for a project system we will use since we can\u0027t be tied to any particular one\n\n\n\n\nLSP Library\n\nA ready made library we will hopefully find to simplify LSP server development\n\n\n\nNewVsix\nThe new VS Extension which will be powered by LSP\nwith VS\n\n\n\n\nComponents\nFsLSP\nThe library containing the LSP functionality. Can be used to create an LSP server by adding the transport layer.\nFsLSPServer\nThe LSP server executable using STD IN/OUT for transport.\nWill be packaged with FsLSP and available as a dotnet tool (?)\nIt should always target the latest .NET runtime.\nWorkspace State Management\nThis part of the library is responsible for keeping track of the current workspace state. The internal workspace model is used to create requests for FCS. It needs to make sure the internal state doesn\u0027t get out of sync with what\u0027s in the editor and on disk.\nThings to keep track of:\n\nIncoming document changes\nDocuments\u0027 open/closed status\nSource files on-disk changes for documents that aren\u0027t open\nAny on-disk references that could have been rebuilt/updated\n\nProject model\nWe need some internal model for a workspace/solution with projects. We don\u0027t want to use any project system library because we don\u0027t need most of the functionality which will be instead handled by the client.\nThe model needs to be able to quickly absorb incoming changes and easily convert to (or already contain) inputs for FCS. We could consider a reactive/adaptive approach for this.\nWe should keep track of versions of each project and source file including all dependencies with regards to parsing and type checking.\nExample sequence diagram\n\nsequenceDiagram\n\nparticipant Client\nparticipant FsLSP\nparticipant WorkspaceStateManagement\nparticipant FCS\n\nClient-\u0026gt;\u0026gt;FsLSP: textDocument/didChange\nFsLSP-\u0026gt;\u0026gt;WorkspaceStateManagement: Update workspace state\nClient-\u0026gt;\u0026gt;\u002BFsLSP: textDocument/diagnostic\nFsLSP-\u0026gt;\u0026gt;\u002BWorkspaceStateManagement: Get current workspace snapshot\nWorkspaceStateManagement--\u0026gt;\u0026gt;-FsLSP: Current workspace snapshot\nFsLSP-\u0026gt;\u0026gt;\u002BFCS: ParseAndCheckFileInProject\nFCS--\u0026gt;\u0026gt;-FsLSP: FSharpCheckFileResults\nFsLSP--\u0026gt;\u0026gt;-Client: DocumentDiagnosticReport\n\n\nConcurrency and cancellation\nWe need to make sure when a project snapshot is needed to process a request, it will always contain all change notifications that were received before. There shouldn\u0027t be need for a global request queue, possibly only for change notifications inside WorkspaceStateManagement. And any language requests will wait until WorkspaceStateManagement has absorbed all previous changes.\nFor cancellation we should decide, potentially on a case-by-case basis what to do when an incoming change notification invalidates an ongoing request.\n\nDo nothing and let the request run either until it completes or is cancelled by the client. This is the easiest so we will probably start with this.\nCancel the request and return \u0022cancelled\u0022 result to the client. The client then needs to deal with it.\nInternally restart the work updated inputs and complete the original request until cancelled. This mode might save a bunch of back-and-forth with the client when user is typing. But it requires the client to expect it and not send cancellations a re-requests for the same thing.\n\n\nRequest update example\n\nsequenceDiagram\n\nparticipant Client\nparticipant FsLSP\nparticipant WorkspaceStateManagement\nparticipant FCS\n\nClient-\u0026gt;\u0026gt;\u002BFsLSP: textDocument/diagnostic\nFsLSP-\u0026gt;\u0026gt;\u002BWorkspaceStateManagement: Get current workspace snapshot\nWorkspaceStateManagement--\u0026gt;\u0026gt;-FsLSP: Current workspace snapshot\nFsLSP-\u0026gt;\u0026gt;FCS: ParseAndCheckFileInProject\nactivate FCS\nClient-\u0026gt;\u0026gt;FsLSP: textDocument/didChange\nFsLSP-\u0026gt;\u0026gt;FCS: Cancel ParseAndCheckFileInProject\ndeactivate FCS\nFsLSP-\u0026gt;\u0026gt;WorkspaceStateManagement: Update workspace state\nFsLSP-\u0026gt;\u0026gt;\u002BWorkspaceStateManagement: Get current workspace snapshot\nWorkspaceStateManagement--\u0026gt;\u0026gt;-FsLSP: Current workspace snapshot\n\nFsLSP-\u0026gt;\u0026gt;\u002BFCS: ParseAndCheckFileInProject\nFCS--\u0026gt;\u0026gt;-FsLSP: FSharpCheckFileResults\nFsLSP--\u0026gt;\u0026gt;-Client: DocumentDiagnosticReport\n\n\n\nRequest tracking\nThis will hopefully be handled by the LSP library. Although we might need to be able to keep track of requests in progress for the purpose of cancellation.\nConfiguration updates\nWe should be able to apply configuration changes that require re-creating the FCS checker. We should be able to keep the caches since the results shouldn\u0027t depend on checker settings (rather only the input Project Snapshots).\nExtensibility\nThe FsLSP library should be extensible by adding custom endpoints or overriding existing ones.\nIt should also allow to hook into background processes or events to customize behavior.\nThe code for extending the behavior should look the same as the code for implementing the core functionality. That way it\u0027s easy to test out and then potentially contribute it directly to the library.\nRelease process\nWe should use a similar release process as we have now for FCS. Potentially also provide a pre-release package with the latest version from main.\nNewVsix\nNew VS extension that will be backed by the LSP server. It should mostly contain plumbing to connect LSP to the editor and CPS.\nWe should build on new VisualStudio.Extensibility model to run the extension out-of-process. It can also directly connect native VS LSP directly to our server which we can host directly in the extension.\nWe might need a wrapper C# project because the new extensibility model relies on source generation.\nWe should be able to load project information via ProjectQuery API to which we can also subscribe for changes.\nThe new extension should be able to run side by side with the current and extension gradually take over the functionality we will add to LSP.\nIf there is any missing functionality in any of these, we might need to supplement it from our current MEF extension and connect from it to the new one.\nFCS\nThe only strict requirement on FCS is to be able to process open files from memory and non-open files from filesystem. But probably best to abstract that within FsLSP and just provide ISourceText objects for both cases.\nAt the moment this is possible via the experimental DocumentSource.Custom parameter. But hopefully we will be able to use a new FSharpProjectSnapshot model (from #15179) which combines all the necessary inputs into a single object.\nLSP library\nThe library needs to support all the features we want to implement including the ability to add custom F# ones. It also shouldn\u0027t incur an unnecessary performance overhead.\nCandidates\n\n\n\nLibrary\nPros\nCons\n\n\n\n\nWe write our own\n\nComplete control over everything\n\n\nA lot of extra work\n\n\n\nIonide LanguageServerProtocol\n\nBattle tested with Ionide and FSAC \u002B Natural F# API\n\n\nMight not be able to fully customize it to our need\n\n\n\nRoslyn CLaSP\n\nShould be performant \u002B Future support\n\n\nNot stable API - Unnatural C# API\n\n\n\nOmniSharp C# LSP\n\n\nUnnatural C# API\n\n\n\n\n\nIt probably makes sense to start with an existing library which should be able to get us to a working product and only then consider writing our own in case it\u0027s the only way to enable more functionality or performance.\nLSP client (?)\n\nIs there any code that can be shared by various clients?\nMost likely not, since each client will be specific to its platform and project system\n\nDiagnostic mode\nInitially we will be offering the Pull Diagnostics mode where the client will request diagnostics for a particular document. It will be up to the client to ask for diagnostics for documents at appropriate times and cancel requests that are no longer needed. The client can also use this to implement background checking of all documents in the workspace.\nLater we can also add an option to have the server control diagnostics and publish them via Publish Diagnostics. Then it will be pushing diagnostics as they are discovered either for active document, open documents or all documents.\nLSIF\nWe should eventually add support for LSIF. At the moment it looks like we would have to construct it manually (as in, no helpful libraries are available).\nThis is probably lower priority than anything else.\nIt might also be a good opportunity to re-think how we store symbols for purposes of finding references, go to definition, or code search (go to symbol in workspace by name/query).\nPerformance\nAreas to pay attention to with regards to performance\n\nSerialization. Hopefully this will be handled reasonably by a library.\nSpamming too many requests. Though this will be mainly up to the client, we could think about throttling or debouncing.\nCaching. This will be mostly up to FCS but we can send hints about what can be cleaned up.\n\nAnalyzers \u0026amp; Refactoring support\nThese will hopefully not require any special treatment and can just use existing LSP APIs.\nMixed F# / C# solutions\nWe need to figure out how to talk to C# LSP server for:\n\nGo to definition\nFind references / rename\n(Make sure these work both ways)\n\nMultiple workspace support\nWe should be able to use a single instance of LSP server even for multiple workspaces. We can keep a separate instance of WorkspaceStateManagement for each workspace but send language requests to a single instance of FCS checker. This way it\u0027s possible to reuse some results if the workspaces share the same projects (with the same options).\nAction plan\nA rough draft of how to plan the work and which items can be done in parallel.\nPhase 0\nWe need to investigate which system we\u0027ll use for the New Vsix. Ideally we\u0027re able to go with new VisualStudio.Extensibility but if that has any blockers we might need to stick to in-process MEF.\nWe can prototype the New Vsix with some sample LSP server or maybe with an existing one like FSAC. Just to figure out how to connect it to F# projects in VS.\nFor FsLSP we need to choose a library and implement a dummy LSP server with it that we can connect to the New Vsix and get some sort of basic setup that can then be improved upon.\n\n\ngantt\n    axisFormat .\n    section FsLSP\n        Choose LSP library :fs1, 1900-01-01, 1d\n        Add projects for FsLSP and FsLSPServer :fs2, after fs1, 1d\n        Implement dummy LSP server using the library :fs3, after fs2, 1d\n        Connect to NewVsix :after vsix2 fs3, 1d\n    section Vsix\n        Investigate options for NewVsix :vsix1, 1900-01-01, 1d\n        Implement NewVsix prototype with dummy or some existing LSP server :vsix2, after vsix1, 2d\n\nPhase 1\nGet some sort of working prototype that can do semantic highlighting and show diagnostics.\nFigure out how to run side-by-side and gradually take over functionality from the current Vsix, if possible.\n\ngantt\n    axisFormat .\n    section FsLSP\n        Implement WorkspaceStateManagement :fs1, 1900-01-01, 3d\n        Implement Phase 1 endpoints :fs2, after fs1, 2d\n    section Vsix\n        Investigate running side-by-side with old Vsix :vsix1, 1900-01-01, 1d\n        Implement configuration of which features are handled by which Vsix :vsix2, after vsix1, 2d\n\nPhase 2 - 5\nImplement endpoints based on their assigned priority. See next section.\nIndependently we can start on setting up the build \u0026amp; release process for FsLSP and insertions of NewVsix into VS.\nAnother potentially parallel track can be figuring out interop with C# LSP server for mixed solutions.\n\ngantt\n    axisFormat .\n    section FsLSP\n        Implement Phase 2 endpoints :fs1, 1900-01-01, 1d\n        Implement Phase 3 endpoints :fs2, after fs1, 1d\n        Implement Phase 4 endpoints :fs3, after fs2, 1d\n        Implement Phase 5 endpoints :fs4, after fs3, 1d\n    section Distribution\n        Settle on release process :d1, 1900-01-01, 1d\n        Add / update build pipelines :d2, after d1, 1d\n        Set up VS insertions :d3, after d2, 1d\n\n    section Cs interop\n        Figure out how to talk to CSharp LSP server :c1, 1900-01-01, 4d\n\nLSP Endpoints\nThis is a preliminary list of LSP APIs we want (or don\u0027t want) to implement, roughly ordered by priority. We will probably re-classify some of them as we go.\n\n\n\nName\nType\nDirection\nCategory\nPriority / Dev phase\nSupported by FSAC\nNote\n\n\n\n\ninitialize\nRequest\n\u21A9\uFE0F\nLifecycle\n0\n\u2705\n\n\n\ninitialized\nNotification\n\u27A1\uFE0F\nLifecycle\n0\n\n\n\n\ntextDocument/didChange\nNotification\n\u27A1\uFE0F\nDocument synchronization\n1\n\u2705\n\n\n\ntextDocument/didClose\nNotification\n\u27A1\uFE0F\nDocument synchronization\n1\n\n\n\n\ntextDocument/didOpen\nNotification\n\u27A1\uFE0F\nDocument synchronization\n1\n\u2705\n\n\n\ntextDocument/diagnostic\nRequest\n\u21A9\uFE0F\nLanguage features\n1\n\n\n\n\ntextDocument/semanticTokens/full\nRequest\n\u21A9\uFE0F\nLanguage features\n1\n\n\n\n\n$/logTrace\nNotification\n\u2B05\uFE0F\nLifecycle\n1\n\n\n\n\n$/setTrace\nNotification\n\u27A1\uFE0F\nLifecycle\n1\n\n\n\n\nexit\nNotification\n\u27A1\uFE0F\nLifecycle\n1\n\n\n\n\nshutdown\nRequest\n\u21A9\uFE0F\nLifecycle\n1\n\n\n\n\ncompletionItem/resolve\nRequest\n\u21A9\uFE0F\nLanguage features\n2\n\u2705\n\n\n\ntextDocument/completion\nRequest\n\u21A9\uFE0F\nLanguage features\n2\n\u2705\n\n\n\ntextDocument/declaration\nRequest\n\u21A9\uFE0F\nLanguage features\n2\n\n\n\n\ntextDocument/definition\nRequest\n\u21A9\uFE0F\nLanguage features\n2\n\u2705\n\n\n\ntextDocument/hover\nRequest\n\u21A9\uFE0F\nLanguage features\n2\n\u2705\n\n\n\ntextDocument/implementation\nRequest\n\u21A9\uFE0F\nLanguage features\n2\n\u2705\n\n\n\ntextDocument/references\nRequest\n\u21A9\uFE0F\nLanguage features\n2\n\u2705\n\n\n\ntextDocument/semanticTokens/full/delta\nRequest\n\u21A9\uFE0F\nLanguage features\n2\n\n\n\n\ntextDocument/semanticTokens/range\nRequest\n\u21A9\uFE0F\nLanguage features\n2\n\n\n\n\ntextDocument/typeDefinition\nRequest\n\u21A9\uFE0F\nLanguage features\n2\n\u2705\n\n\n\nworkspace/semanticTokens/refresh\nRequest\n\u21A9\uFE0F\nLanguage features\n2\n\u2705\n\n\n\nfsharp/compilerLocation\nRequest\n\u21A9\uFE0F\nF# Custom\n3\n\u2705\n\n\n\nfsharp/documentAnalyzed\nNotification\n\u2B05\uFE0F\nF# Custom\n3\n\u2705\n\n\n\nfsharp/documentation\nRequest\n\u21A9\uFE0F\nF# Custom\n3\n\u2705\n\n\n\nfsharp/documentationGenerator\nRequest\n\u21A9\uFE0F\nF# Custom\n3\n\u2705\n\n\n\nfsharp/documentationSymbol\nRequest\n\u21A9\uFE0F\nF# Custom\n3\n\u2705\n\n\n\nfsharp/dotnetaddproject\nRequest\n\u21A9\uFE0F\nF# Custom\n3\n\u2705\n\n\n\nfsharp/dotnetaddsln\nRequest\n\u21A9\uFE0F\nF# Custom\n3\n\u2705\n\n\n\nfsharp/dotnetnewlist\nRequest\n\u21A9\uFE0F\nF# Custom\n3\n\u2705\n\n\n\nfsharp/dotnetnewrun\nRequest\n\u21A9\uFE0F\nF# Custom\n3\n\u2705\n\n\n\nfsharp/dotnetremoveproject\nRequest\n\u21A9\uFE0F\nF# Custom\n3\n\u2705\n\n\n\nfsharp/fileParsed\nNotification\n\u2B05\uFE0F\nF# Custom\n3\n\u2705\n\n\n\nfsharp/lineLens\nRequest\n\u21A9\uFE0F\nF# Custom\n3\n\u2705\n\n\n\nfsharp/notifyCancel\nNotification\n\u2B05\uFE0F\nF# Custom\n3\n\u2705\n\n\n\nfsharp/notifyWorkspace\nNotification\n\u2B05\uFE0F\nF# Custom\n3\n\u2705\n\n\n\nfsharp/notifyWorkspacePeek\nNotification\n\u2B05\uFE0F\nF# Custom\n3\n\u2705\n\n\n\nfsharp/pipelineHint\nRequest\n\u21A9\uFE0F\nF# Custom\n3\n\u2705\n\n\n\nfsharp/project\nRequest\n\u21A9\uFE0F\nF# Custom\n3\n\u2705\n\n\n\nfsharp/signature\nRequest\n\u21A9\uFE0F\nF# Custom\n3\n\u2705\n\n\n\nfsharp/signatureData\nRequest\n\u21A9\uFE0F\nF# Custom\n3\n\u2705\n\n\n\nfsharp/testDetected\nNotification\n\u2B05\uFE0F\nF# Custom\n3\n\u2705\n\n\n\nfsharp/workspaceLoad\nRequest\n\u21A9\uFE0F\nF# Custom\n3\n\u2705\n\n\n\nfsharp/workspacePeek\nRequest\n\u21A9\uFE0F\nF# Custom\n3\n\u2705\n\n\n\nfsproj/addExistingFile\nRequest\n\u21A9\uFE0F\nF# Custom\n3\n\u2705\n\n\n\nfsproj/addFile\nRequest\n\u21A9\uFE0F\nF# Custom\n3\n\u2705\n\n\n\nfsproj/addFileAbove\nRequest\n\u21A9\uFE0F\nF# Custom\n3\n\u2705\n\n\n\nfsproj/addFileBelow\nRequest\n\u21A9\uFE0F\nF# Custom\n3\n\u2705\n\n\n\nfsproj/moveFileDown\nRequest\n\u21A9\uFE0F\nF# Custom\n3\n\u2705\n\n\n\nfsproj/moveFileUp\nRequest\n\u21A9\uFE0F\nF# Custom\n3\n\u2705\n\n\n\nfsproj/removeFile\nRequest\n\u21A9\uFE0F\nF# Custom\n3\n\u2705\n\n\n\ntextDocument/documentHighlight\nRequest\n\u21A9\uFE0F\nLanguage features\n3\n\u2705\n\n\n\ntextDocument/documentSymbol\nRequest\n\u21A9\uFE0F\nLanguage features\n3\n\u2705\n\n\n\ntextDocument/formatting\nRequest\n\u21A9\uFE0F\nLanguage features\n3\n\u2705\n\n\n\ntextDocument/rename\nRequest\n\u21A9\uFE0F\nLanguage features\n3\n\u2705\n\n\n\ntextDocument/signatureHelp\nRequest\n\u21A9\uFE0F\nLanguage features\n3\n\u2705\n\n\n\n$/progress\nNotification\n\u2B05\uFE0F\nWindow Features\n3\n\u2705\nWould be nice to have for long running operations\n\n\nworkspace/didChangeWatchedFiles\nNotification\n\u27A1\uFE0F\nWorkspace Features\n3\n\u2705\n\n\n\ntextDocument/willSave\nNotification\n\u27A1\uFE0F\nDocument synchronization\n4\n\n\n\n\ntextDocument/willSaveWaitUntil\nRequest\n\u21A9\uFE0F\nDocument synchronization\n4\n\n\n\n\ncodeAction/resolve\nRequest\n\u21A9\uFE0F\nLanguage features\n4\n\n\n\n\ncodeLens/resolve\nRequest\n\u21A9\uFE0F\nLanguage features\n4\n\u2705\n\n\n\ninlayHint/resolve\nRequest\n\u21A9\uFE0F\nLanguage features\n4\n\n\n\n\ntextDocument/codeAction\nRequest\n\u21A9\uFE0F\nLanguage features\n4\n\u2705\n\n\n\ntextDocument/codeLens\nRequest\n\u21A9\uFE0F\nLanguage features\n4\n\u2705\n\n\n\ntextDocument/prepareRename\nRequest\n\u21A9\uFE0F\nLanguage features\n4\n\n\n\n\ntextDocument/publishDiagnostics\nNotification\n\u2B05\uFE0F\nLanguage features\n4\n\u2705\n\n\n\nworkspace/codeLens/refresh\nRequest\n\u21AA\uFE0F\nLanguage Features\n4\n\u2705\n\n\n\nwindow/showMessage\nNotification\n\u2B05\uFE0F\nWindow Features\n4\n\u2705\n\n\n\nworkspace/configuration\nRequest\n\u21AA\uFE0F\nWorkspace Features\n4\n\n\n\n\nworkspace/diagnostic\nRequest\n\u21A9\uFE0F\nWorkspace Features\n4\n\n\n\n\nworkspace/didChangeConfiguration\nNotification\n\u27A1\uFE0F\nWorkspace Features\n4\n\u2705\n\n\n\nworkspace/symbol\nRequest\n\u21A9\uFE0F\nWorkspace Features\n4\n\u2705\n\n\n\nworkspaceSymbol/resolve\nRequest\n\u21A9\uFE0F\nWorkspace Features\n4\n\n\n\n\nnotebookDocument/didChange\nNotification\n\u27A1\uFE0F\nNotebook Document synchronization\n5\n\n\n\n\nnotebookDocument/didClose\nNotification\n\u27A1\uFE0F\nNotebook Document synchronization\n5\n\n\n\n\nnotebookDocument/didOpen\nNotification\n\u27A1\uFE0F\nNotebook Document synchronization\n5\n\n\n\n\nnotebookDocument/didSave\nNotification\n\u27A1\uFE0F\nNotebook Document synchronization\n5\n\n\n\n\nfsharp/f1Help\nRequest\n\u21A9\uFE0F\nF# Custom\n\u2754\n\u2705\n\n\n\nfsharp/fsdn\nRequest\n\u21A9\uFE0F\nF# Custom\n\u2754\n\u2705\n\n\n\nfsharp/loadAnalyzers\nRequest\n\u21A9\uFE0F\nF# Custom\n\u2754\n\u2705\n\n\n\ncallHierarchy/incomingCalls\nRequest\n\u21A9\uFE0F\nLanguage features\n\u2754\n\n\n\n\ncallHierarchy/outgoingCalls\nRequest\n\u21A9\uFE0F\nLanguage features\n\u2754\n\n\n\n\ndocumentLink/resolve\nRequest\n\u21A9\uFE0F\nLanguage features\n\u2754\n\n\n\n\ntextDocument/documentLink\nRequest\n\u21A9\uFE0F\nLanguage features\n\u2754\n\nIs this useful for us?\n\n\ntextDocument/inlayHint\nRequest\n\u21A9\uFE0F\nLanguage features\n\u2754\n\n\n\n\ntextDocument/inlineValue\nRequest\n\u21A9\uFE0F\nLanguage features\n\u2754\n\n\n\n\ntextDocument/moniker\nRequest\n\u21A9\uFE0F\nLanguage features\n\u2754\n\n\n\n\ntextDocument/prepareCallHierarchy\nRequest\n\u21A9\uFE0F\nLanguage features\n\u2754\n\n\n\n\ntextDocument/prepareTypeHierarchy\nRequest\n\u21A9\uFE0F\nLanguage features\n\u2754\n\n\n\n\ntextDocument/rangeFormatting\nRequest\n\u21A9\uFE0F\nLanguage features\n\u2754\n\n\n\n\ntextDocument/selectionRange\nRequest\n\u21A9\uFE0F\nLanguage features\n\u2754\n\n\n\n\ntypeHierarchy/subtypes\nRequest\n\u21A9\uFE0F\nLanguage features\n\u2754\n\n\n\n\ntypeHierarchy/supertypes\nRequest\n\u21A9\uFE0F\nLanguage features\n\u2754\n\n\n\n\nclient/registerCapability\nRequest\n\u21A9\uFE0F\nLifecycle\n\u2754\n\n\n\n\nclient/unregisterCapability\nRequest\n\u21A9\uFE0F\nLifecycle\n\u2754\n\n\n\n\ntelemetry/event\nNotification\n\u2B05\uFE0F\nWindow Features\n\u2754\n\u2705\n\n\n\nwindow/logMessage\nNotification\n\u2B05\uFE0F\nWindow Features\n\u2754\n\u2705\n\n\n\nwindow/workDoneProgress/cancel\nNotification\n\u2B05\uFE0F\nWindow Features\n\u2754\n\n\n\n\nwindow/workDoneProgress/create\nRequest\n\u21A9\uFE0F\nWindow Features\n\u2754\n\n\n\n\nworkDoneProgress/cancel\nNotification\n\u27A1\uFE0F\nWindow Features\n\u2754\n\n\n\n\nworkDoneProgress/create\nRequest\n\u2B05\uFE0F\nWindow Features\n\u2754\n\n\n\n\nworkspace/applyEdit\nRequest\n\u21AA\uFE0F\nWorkspace Features\n\u2754\n\u2705\nCould be used for refactoring?\n\n\nworkspace/diagnostic/refresh\nRequest\n\u21AA\uFE0F\nWorkspace Features\n\u2754\n\n\n\n\nworkspace/executeCommand\nRequest\n\u21A9\uFE0F\nWorkspace Features\n\u2754\n\nCould be used for refactoring?\n\n\ntextDocument/didSave\nNotification\n\u27A1\uFE0F\nDocument synchronization\n\u274C\n\u2705\nProbably don\u0027t need this?\n\n\ntextDocument/colorPresentation\nRequest\n\u21A9\uFE0F\nLanguage features\n\u274C\n\n\n\n\ntextDocument/documentColor\nRequest\n\u21A9\uFE0F\nLanguage features\n\u274C\n\n\n\n\ntextDocument/linkedEditingRange\nRequest\n\u21A9\uFE0F\nLanguage features\n\u274C\n\n\n\n\ntextDocument/onTypeFormatting\nRequest\n\u21A9\uFE0F\nLanguage features\n\u274C\n\n\n\n\nwindow/showDocument\nRequest\n\u21AA\uFE0F\nWindow Features\n\u274C\n\n\n\n\nwindow/showMessageRequest\nRequest\n\u21AA\uFE0F\nWindow Features\n\u274C\n\n\n\n\nworkspace/didChangeWorkspaceFolders\nNotification\n\u27A1\uFE0F\nWorkspace Features\n\u274C\n\n\n\n\nworkspace/didCreateFiles\nNotification\n\u27A1\uFE0F\nWorkspace Features\n\u274C\n\n\n\n\nworkspace/didDeleteFiles\nNotification\n\u27A1\uFE0F\nWorkspace Features\n\u274C\n\n\n\n\nworkspace/didRenameFiles\nNotification\n\u27A1\uFE0F\nWorkspace Features\n\u274C\n\n\n\n\nworkspace/willCreateFiles\nNotification\n\u27A1\uFE0F\nWorkspace Features\n\u274C\n\n\n\n\nworkspace/willDeleteFiles\nNotification\n\u27A1\uFE0F\nWorkspace Features\n\u274C\n\n\n\n\nworkspace/willRenameFiles\nNotification\n\u27A1\uFE0F\nWorkspace Features\n\u274C\n\n\n\n\nworkspace/workspaceFolders\nRequest\n\u2B05\uFE0F\nWorkspace Features\n\u274C\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","headings":["F# LSP","Table of contents","Goals / Requirements","Overview","Components","FsLSP","FsLSPServer","Workspace State Management","Things to keep track of:","Project model","Example sequence diagram","Concurrency and cancellation","Request tracking","Configuration updates","Extensibility","Release process","NewVsix","FCS","LSP library","Candidates","LSP client (?)","Diagnostic mode","LSIF","Performance","Analyzers \u0026amp; Refactoring support","Mixed F# / C# solutions","Multiple workspace support","Action plan","Phase 0","Phase 1","Phase 2 - 5","LSP Endpoints"],"type":"content"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/names.html","title":"Display names, logical names and compiled names","content":"\nNames of entities and values in the F# Compiler\nThe F# tooling distinguishes between the following concepts of \u0022name\u0022 for values, union cases, class/record fields and entities:\n\n\nDisplay names as they appear in code\nCharacteristics:\n\nFor most identifiers, have double backticks, e.g. \u0060\u0060Module name with spaces\u0060\u0060\nFor operator names, are short and parenthesized, e.g. (\u002B) for the logical name op_Addition\nFor active patterns, are parenthesized, e.g. (|A|_|)\n\netc., see exact specification below\nUsed in:\n\nCode outputs, e.g. signature files\n\nDiagnostics (BUG: not consistently the case today)\nCurrent aliases in code:\n\nvref.DisplayName\nentity.DisplayName\nentity.DisplayNameWithStaticParameters\nentity.DisplayNameWithStaticParametersAndUnderscoreTypars\nminfo.DisplayName\npinfo.DisplayName\neinfo.DisplayName\netc.\n\n\n\nDisplay names as they appear in declaration lists, navigation etc.\nCharacteristics:\n\n\nSame as above without the double backticks or parentheses\nCurrent aliases in code:\n\nvref.DisplayNameCore\nentity.DisplayNameCore\nminfo.DisplayNameCore\npinfo.DisplayNameCore\neinfo.DisplayNameCore\netc.\n\n\n\nLogical names\nCharacteristics:\n\nAre used in TypedTree, often \u0022canonical\u0022\n\nSometimes require extra flags to qualify the meaning of the name\nCurrent aliases in code:\n\nvref.LogicalName\nentity.LogicalName\nminfo.LogicalName\npinfo.PropertyName\neinfo.EventName\netc.\n\n\n\nCompiled names\nCharacteristics:\n\n\nMark the names that appear in the .NET IL\nCurrent aliases in code:\n\nvref.CompiledName\nentity.CompiledName\netc.\n\n\n\nSpecification of all logical names\nThe following tables loosely characterise the variations in logical names, how\nthey correspond to F# source constructs and the SyntaxTree/TypedTree metadata for these.\nEntities:\n\n\n\nDisplay name in code\nLogical name\nNotes\n\n\n\n\nC\nC\ntype definition\n\n\nC\nC\u00601\ne.g. generic type, see notes below for variations of display names\n\n\nM\nM\nmodule definition\n\n\nM\nMModule\n\u0022ModuleSuffix\u0022 attribute for F# modules, now somewhat legacy, rarely used, but still allowed; also where \u0022ModuleSuffix\u0022 is implied because type and module have the same name\n\n\nJsonProvider\nJsonProvider,Schema=\\\u0022xyz\\\u0022\nstatic parameters, see notes below for variations of display names\n\n\n\n\nValues:\n\n\n\nDisplay name in code\nRelation\nLogical name\nNotes\n\n\n\n\n(\u002B)\n\nop_Addition\n\n\n\n(\u002B )\n--\u0026gt;\nop_Addition\nnot reversed\n\n\nop_Addition\n--\u0026gt;\nop_Addition\nnot reversed\n\n\n(*)\n\nop_Multiply\n\n\n\n( * )\n--\u0026gt;\nop_Multiply\nnot reversed\n\n\nop_Multiply\n--\u0026gt;\nop_Multiply\nnot reversed\n\n\n( *\u002B )\n\nop_MultiplyPlus\n\n\n\n( *\u002B  )\n--\u0026gt;\nop_MultiplyPlus\nnot reversed\n\n\nop_MultiplyPlus\n--\u0026gt;\nop_MultiplyPlus\nnot reversed\n\n\n(\u002B\u002B\u002B)\n\nop_PlusPlusPlus\n\n\n\nop_PlusPlusPlus\n--\u0026gt;\nop_PlusPlusPlus\nnot reversed\n\n\n(%)\n\nop_Modulus\n\n\n\nop_Modulus\n--\u0026gt;\nop_Modulus\n\n\n\n(?)\n\nop_Dynamic\nnot defined by default, for x?SomeThing\n\n\n(?\u0026lt;-)\n\nop_DynamicAssignment\nnot defined by default, for x?SomeThing \u0026lt;- \u0022a\u0022\n\n\n(..)\n\nop_Range\nfor \u00223 .. 5\u0022\n\n\n(.. ..)\n\nop_RangeStep\nfor \u00225 .. -1 .. 3\u0022\n\n\nor\n\nor\n\n\n\nmod\n\nmod\n\n\n\nlet\n\nlet\nthis is a keyword, in code it appears as let\n\n\ntype\n\ntype\nthis is a keyword, in code it appears as type\n\n\nbase\n\nbase\nfor IsBaseVal=true only. Base is a keyword, this is a special base val\n\n\nbase\n\nbase\nfor IsBaseVal=false only. Base is a keyword, this is not a special base val\n\n\nSomeClass\n\n.ctor\nIsConstructor=true\n\n\n.ctor\n\n.ctor\nIsConstructor=false, this is only allowed for let-definitions, e.g. let .ctor x = 1\n\n\n\n\n.cctor\nIsClassConstructor=true, should never really appear in diagnostics or user-facing output\n\n\n.cctor\n\n.cctor\nIsClassConstructor=false, this is only allowed for let-definitions, e.g. let .cctor x = 1\n\n\n(\\|A\\|_\\|)\n\n\\|A\\|_\\|\n\n\n\n(\\|A  \\|_  \\|)\n--\u0026gt;\n\\|A\\|_\\|\nnot reversed\n\n\nP\n\nget_P\nIsPropertyGetterMethod = true\n\n\nP\n\nset_P\nIsPropertySetterMethod = true\n\n\n\n\nOther Val constructs less problematic for naming are:\n\n\n\nDisplay name in code\nRelation\nLogical name\nNotes\n\n\n\n\nthis\n\nthis\nIsCtorThisVal = true; From type C() as this; Can have any name, not particularly special with regard to names; This has a \u0027ref\u0027 type for initialization checks\n\n\nthis\n\nthis\nIsMemberThisVal = true; From member this.M() = ...; This can have a \u0027ref\u0027 type for initialization checks; Can have any name, not particularly special with regard to names\n\n\n\\\n\nSystem.IDisposable.Dispose\nImplementedSlotSigs is non-empty, i.e. length 1, should never really appear in diagnostics or user-facing output\n\n\n\n\nUnion cases:\n\n\n\nDisplay name in code\nRelation\nLogical name\nNotes\n\n\n\n\n\n\nSomeCase             |      | SomeCase\n\u0060\u0060Case with space\u0060\u0060  |      | Case with space\n\u0060\u0060type\u0060\u0060             |      | type                 | This is a keyword\n(::)                 |      | op_ColonColon        | This is the logical name for the cons union case on FSharpList only\n[]                   |      | op_Nil               | This is the logical name for the nil case on FSharpList only\nClass and record fields, enum cases, active pattern cases, anonymous record fields:\n\n\n\nDisplay name in code\nRelation\nLogical name\nNotes\n\n\n\n\n\n\nSomeField            |      | SomeField\n\u0060\u0060Field with space\u0060\u0060|      | Field with space\n\u0060\u0060type\u0060\u0060            |      | type                 | This is a keyword\nGeneric parameters:\n\n\n\nDisplay name in code\nRelation\nLogical name\nNotes\n\n\n\n\n\n\n\u0027T                   |      | T\n\u0027\u0060\u0060T T T\u0060\u0060           |      | T T T                | BUG: the backticks are not currently added\n\u0027\u0060\u0060type\u0060\u0060            |      | type                 | This is a keyword, BUG: the backticks are not currently added\nVariations on display names\nIn different display settings, Entities/Types/Modules can have some variations on display names. For example, when showing some kinds of output we may set shortTypeNames=true which will never show full names.\n\n\nSomeTypeProvider\n\nUsed for omitting static parameters\nAlias in code: entity.CompiledName\n\n\n\nSomeTypeProvider\u0026lt;...\u0026gt;\n\nUsed for eliding static parameters\n\n\n\nSomeTypeProvider\u0026lt;\u0022foo.json\u0022\u0026gt;\n\nUsed for showing static parameters. These can be very large, e.g. entire connection strings, so better to elide or omit.\nAlias in code: entity.DisplayNameWithStaticParameters\n\n\n\nList\u0026lt;_\u0026gt;\n\nUsed with underscore typars\nAlias in code: entity.DisplayNameWithStaticParametersAndUnderscoreTypars\n\n\n\nDictionary\u0026lt;\u0027TKey,\u0027TResult\u0026gt;\n\nUsed with general typars\n\n\nFull name\n\nExamples:\n- SomeNamespace.OtherNamespace.SomeType\n- \u0060\u0060Some Namespace With Spaces\u0060\u0060.SomeType  \u003C-- BUG: not double-ticks today\n- \u0060SomeEnclosingType.SomeStaticMethod\u0060         \u0026lt;-- BUG: the mangled generic type counts are shown today\nCompiled names\nThe name that appears in the .NET IL.\nAffected by:\n- CompiledName attribute\n- some heuristics for generic type parameters\nAlso the name from signature is generally preferred; if there is any difference, a warning is emitted.\nExample of how signature affects compiled names\nFoo.fsi \n\n  val SomeFunction: x: int -\u0026gt; y: int -\u0026gt; int \n\nFoo.fs\n\n  let SomeFunction a b = a \u002B b // compiled name of parameters is x, y - warning emitted\n\n","headings":["Names of entities and values in the F# Compiler","Specification of all logical names","Variations on display names","Compiled names"],"type":"content"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/optimizations.html","title":"Optimizations","content":"\nCode Optimizations\nCode optimizations are in Compiler/Optimize/*.\nSome of the optimizations performed in Optimizer.fs are:\n\nPropagation of known values (constants, x = y, lambdas, tuples/records/union-cases of known values)\nInlining of known lambda values\nEliminating unused bindings\nEliminating sequential code when there is no side-effect\nEliminating switches when we determine definite success or failure of pattern matching\nEliminating getting fields from an immutable record/tuple/union-case of known value\nExpansion of tuple bindings \u0022let v = (x1,...x3)\u0022 to avoid allocations if it\u0027s not used as a first class value\nSplitting large functions into multiple methods, especially at match cases, to avoid massive methods that take a long time to JIT\nRemoving tailcalls when it is determined that no code in the transitive closure does a tailcall nor recurses\n\nIn DetupleArgs.fs, tuples at call sites are eliminated if possible. Concretely, functions that accept a tuple at all call sites are replaced by functions that accept each of the tuple\u0027s arguments individually. This may require inlining to activate.\nConsidering the following example:\nlet max3 t =\n    let (x, y, z) = t\n    max x (max y z)\n\nmax3 (1, 2, 3)\n\nThe max3 function gets rewritten to simply accept three arguments, and depending on how it gets called it will either get inlined at the call site or called with 3 arguments instead of a new tuple. In either case, the tuple allocation is eliminated.\nHowever, sometimes this optimization is not applied unless a function is marked inline. Consider a more complicated case:\nlet rec runWithTuple t offset times =\n    let offsetValues x y z offset =\n        (x \u002B offset, y \u002B offset, z \u002B offset)\n    if times \u0026lt;= 0 then\n        t\n    else\n        let (x, y, z) = t\n        let r = offsetValues x y z offset\n        runWithTuple r offset (times - 1)\n\nThe inner function offsetValues will allocate a new tuple when called. However, if offsetValues is marked as inline then it will no longer allocate a tuple.\nCurrently, these optimizations are not applied to struct tuples or explicit ValueTuples passed to a function. In most cases, this doesn\u0027t matter because the handling of ValueTuple is well-optimized and may be erased at runtime. However, in the previous runWithTuple function, the overhead of allocating a ValueTuple each call ends up being higher than the previous example with inline applied to offsetValues. This may be addressed in the future.\nIn InnerLambdasToTopLevelFuncs.fs, inner functions and lambdas are analyzed and, if possible, rewritten into separate methods that do not require an FSharpFunc allocation.\nConsider the following implementation of sumBy on an F# list:\nlet sumBy f xs =\n    let rec loop xs acc =\n        match xs with\n        | [] -\u0026gt; acc\n        | x :: t -\u0026gt; loop t (f x \u002B acc)\n    loop xs 0\n\nThe inner loop function is emitted as a separate static method named loop@2 and incurs no overhead involved with allocating an FSharpFunc at runtime.\nIn LowerCalls.fs:\n\nPerforms eta-expansion on under-applied values applied to lambda expressions and does a beta-reduction to bind any known arguments\n\nIn LowerSequences.fs:\n\nAnalyzes a sequence expression and translates it into a state machine so that operating on sequences doesn\u0027t incur significant closure overhead\n\nPotential future optimizations: Better Inlining\nConsider the following example:\nlet inline f k = (fun x -\u0026gt; k (x \u002B 1))\nlet inline g k = (fun x -\u0026gt; k (x \u002B 2))\n\nlet res = (f \u0026lt;\u0026lt; g) id 1 // 4\n\nIntermediate values that inherit from FSharpFunc are allocated at the call set of res to support function composition, even if the functions are marked as inline. Currently, if this overhead needs removal, you need to rewrite the code to be more like this:\nlet f x = x \u002B 1\nlet g x = x \u002B 2\n\nlet res = id 1 |\u0026gt; g |\u0026gt; f // 4\n\nThe downside of course being that the id function can\u0027t propagate to composed functions, meaning the code is now different despite yielding the same result.\nMore generally, any time a first-order function is passed as an argument to a second-order function, the first-order function is not inlined even if everything is marked as inline. This results in a performance penalty.\n","headings":["Code Optimizations","Potential future optimizations: Better Inlining"],"type":"content"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/fsharp-core-notes.html","title":"Guidance","content":"\nNotes and Guidance on FSharp.Core\nThis technical guide discusses the FSharp.Core library.\nReference documentation for FSharp.Core can be found here: https://fsharp.github.io/fsharp-core-docs/\nMuch of the guidance below applies to any .NET library respecting binary compatibility.\nFSharp.Core is binary compatible\nFSharp.Core is binary compatible across versions of the F# language. For example, this means you can create a newer project with a newer FSharp.Core in an older codebase and things should generally \u0022just work\u0022.\nBinary compatibility means that a component built for X can bind to Y at runtime. It doesn\u0027t mean that Y behaves 100% the same as X, though. For example, an older compiler that doesn\u0027t know how to understand inref\u0026lt;\u0027T\u0026gt; referencing a newer FSharp.Core that has inref\u0026lt;\u0027T\u0026gt; defined may not behave correctly if inref\u0026lt;\u0027T\u0026gt; is used in source.\nFSharp.Core and F# scripts\nF# scripts, executed by F# interactive, execute against the FSharp.Core deployed with the .NET SDK you are using. If you\u0027re expecting to use a more modern library feature and find that it\u0027s missing, it\u0027s likely because you have an older .NET SDK and thus an older F# Interactive. Upgrade your .NET SDK.\nGuidance for package authors\nIf you are authoring a NuGet package for consumption in the F# and .NET ecosystem, you already have to make a decision about functionality vs. reach by deciding what target framework(s) you support.\nAs an F# package author, you also need to make this decision with respect to FSharp.Core:\n\nTargeting an earlier version of FSharp.Core increases your reach because older codebases can use it without issue\nTargeting a newer version of FSharp.Core lets you use and extend newer features\n\nThis decision is critical, because it can have a network effect. If you choose a higher FSharp.Core version, then that also becomes a dependency for any other package that may depend on your package.\nPackage authors should pin their FSharp.Core reference\nThe default templates for F# projects carry an implicit reference to FSharp.Core. This is ideal for application developers, since applications almost always want to be referencing the highest FSharp.Core available to them. As you upgrade your .NET SDK, the FSharp.Core package referenced implicitly will also be upgraded over time, since FSharp.Core is also distributed with the .NET SDK.\nHowever, as a package author this means that unless you reference FSharp.Core explicitly, you will default to the latest possible version and thus eliminate any hope of reaching older projects in older environments.\nHow to explicitly reference FSharp.Core\nIt\u0027s a simple gesture in your project file that pins to FSharp.Core 4.7.2:\n\u0026lt;ItemGroup\u0026gt;\n  \u0026lt;PackageReference Update=\u0022FSharp.Core\u0022 Version=\u00224.7.2\u0022 /\u0026gt;\n\u0026lt;/ItemGroup\u0026gt;\n\nOr if you\u0027re using Paket:\nnuget FSharp.Core \u0026gt;= 4.7.2\n\nAnd that\u0027s it!\nCompatibility table\nThe following table can help you decide the minimum language/package version you want to support:\n\n\n\nMinimum F# language version\nMinimum FSharp.Core package version\n\n\n\n\nF# 4.1\n4.3.4\n\n\nF# 4.5\n4.5.2\n\n\nF# 4.6\n4.6.2\n\n\nF# 4.7\n4.7.2\n\n\nF# 5.0\n5.0.0\n\n\nF# 6.0\n6.0.0\n\n\n\n\nIf you want to be compatible with much older projects using an F# 4.0 compiler or earlier, you can still do that but it\u0027s not recommended. People using those codebases should upgrade instead.\nDo not bundle FSharp.Core directly with a library\nDo not include a copy of FSharp.Core with your library or package, such in the lib folder of a package. If you do this, you will create havoc for users of your library.\nThe decision about which FSharp.Core a library binds to is up to the application hosting of the library.\nGuidance for everyone else\nIf you\u0027re not authoring packages for distribution, you have a lot less to worry about.\nIf you are distributing library code across a private organization as if it were a NuGet package, please see the above guidance, as it likely still applies. Otherwise, the below guidance applies.\nApplication authors don\u0027t have to explicitly reference FSharp.Core\nIn general, applications can always just use the latest FSharp.Core bundled in the SDK they are built with.\nC# projects referencing F# projects may need to pin FSharp.Core\nYou can reference an F# project just fine without needing to be explicit about an FSharp.Core reference when using C# projects based on the .NET SDK. References flow transitively for SDK-style projects, so even if you need to use types directly from FSharp.Core (which you probably shouldn\u0027t do anyways) it will pick up the right types from the right assembly.\nIf you do have an explicit FSharp.Core reference in your C# project that you need, you should pin your FSharp.Core reference across your entire codebase. Being in a mixed pinned/non-pinned world is difficult to keep straight over a long period of time.\nGuidance for older projects, compilers, and tools\nModern .NET development, including F#, uses SDK-style projects. You can read about that here: https://learn.microsoft.com/dotnet/core/project-sdk/overview\nIf you are not using SDK-style projects F# projects and/or have an older toolset, the following guidance applies.\nConsider upgrading\nYes, really. The old project system that manages legacy projects is not that good, the compiler is older and unoptimized for supporting larger codebases, tooling is not as responsive, etc. You will really have a much better life if you upgrade. Try out the try-convert tool to do that: https://github.com/dotnet/try-convert\nIf you cannot upgrade for some reason, the rest of the guidance applies.\nAlways deploy FSharp.Core as part of a compiled application\nFor applications, FSharp.Core is normally part of the application itself (so-called \u0022xcopy deploy\u0022 of FSharp.Core).\nFor older project files, you may need to use \u0026lt;Private\u0026gt;true\u0026lt;/Private\u0026gt; in your project file. In  Visual Studio this is equivalent to setting the CopyLocal property to true properties for the FSharp.Core reference.\nFSharp.Core.dll will normally appear in the bin output folder for your application. For example:\n    Directory of ...\n    \n    18/04/2020  13:20             5,632 ConsoleApplication3.exe\n    14/10/2020  12:12         1,400,472 FSharp.Core.dll\n\nFSharp.Core and static linking\nThe ILMerge tool and the F# compiler both allow static linking of assemblies including static linking of FSharp.Core.\nThis can be useful to build a single standalone file for a tool.\nHowever, these options must be used with caution.\n\nOnly use this option for applications, not libraries. If it\u0027s not a .EXE (or a library that is effectively an application) then don\u0027t even try using this option.\n\nSearching on stackoverflow reveals further guidance on this topic.\nReference: FSharp.Core version and NuGet package numbers\nSee the F# version information RFC.\n","headings":["Notes and Guidance on FSharp.Core","FSharp.Core is binary compatible","FSharp.Core and F# scripts","Guidance for package authors","Package authors should pin their FSharp.Core reference","How to explicitly reference FSharp.Core","Compatibility table","Guidance for everyone else","Application authors don\u0027t have to explicitly reference FSharp.Core","C# projects referencing F# projects may need to pin FSharp.Core","Guidance for older projects, compilers, and tools","Consider upgrading","Always deploy FSharp.Core as part of a compiled application","FSharp.Core and static linking","Reference: FSharp.Core version and NuGet package numbers"],"type":"content"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/project-builds.html","title":"Project builds","content":"\nProject builds\nThe compiler is generally built to compile one assembly: the assumption that the compiler is compiling one assembly is baked into several aspects of the design of the Typed Tree. In contrast, FCS supports compiling a graph of projects, each for a different assembly, each undergoing incremental change.\nProject builds are currently stateful and reliant on I/O to on-disk assemblies. This causes many problems and we have a plan for how to fix this core issue in the F# Language Service implementation. See Plan: Modernizing F# Analysis. Please read this carefully if you plan to work on any of service.fs, IncrementalBuild.fs or FSharpCheckerResults.fs.\nKey data structures:\n\n\nIncrementalBuilder  manages an incremental build graph for the build of an F# project.\n\nSee also Plan: Modernizing F# Analysis for how this will evolve to FSharpProject.\n\n\n\nFSharpParseFileResults -  represents the enrichment (e.g. breakpoint validation) available from the parse tree of a file. The enrichment is made up of several pieces such as:\n\nSyntaxTree/ParsedInput\ndiagnostics from the parsing\n\n\n\nFSharpCheckFileResults -  represents the enrichment (e.g. tooltips) available after checking a file. The enrichment is made up of several pieces such as\n\nTcGlobals - the globals for the compilation, also used in command-line build\nTcConfig - the compiler configuration for the compilation, also used in command-line build\nTcImports - the table of imports for the compilation\nCcuThunk - the thunk of the assembly being compiled\nTcState - the state of the compilation up to this point\nTcResolutions - name environments across the file, ultimately from NameResolution.fs\nTcSymbolUses - resolutions of symbols across the file\nLoadClosure - the #load closure of a script\nTypedImplFile - the TAST expression results of compilation, may be thrown away if keepAssemblyContents is not true\n\n\n\nFSharpCheckProjectResults -  represents the enrichment (e.g. find-all symbol uses) available after checking a project\n\nTcGlobals - the globals for the compilation, also used in command-line build\nTcConfig - the compiler configuration for the compilation, also used in command-line build\nTcImports - the table of imports for the compilation\nCcuThunk - the thunk of the assembly being compiled\nTcState - the final state of the compilation\n\n\n\nMulti-project builds and cross-project references\nIn FCS, there is no single abstraction for a \u0022solution build\u0022 and instead you have multiple project builds. These are all essentially independent, in the sense they each logically represent an invocation of the F# compiler. That is, the Typed Tree (TAST), TcState etc. nodes are not shared between different project compilations.\nIf you want to understand why this invariant is important, some key things to understand are:\n\nThe RawFSharpAssemblyData is the data blob that would normally be stuffed in the F# resource in the generated DLL  in a normal compilation. That\u0027s the \u0022output\u0022 of checking each project.\nThis is used as \u0022input\u0022 for the assembly reference of each consuming project (instead of an on-disk DLL)\nWithin each consuming project that blob is then resurrected to Typed Tree nodes in TypedTreePickle.fs.\n\nCould the compiler share this data across projects? In theory, yes. In practice, it\u0027s very tricky business. From a correctness point of view: the process of generating this blob (TypedTreePickle p_XYZ) and resurrecting it (TypedTreePickle u_*) does some transformations to the Typed Tree that are necessary for correctness of compilation, for example, in TypedTreePickle. Basically, the Typed Tree nodes from the compilation of one assembly are not valid when compiling a different assembly.\nThe Typed Tree nodes include CcuData nodes, which have access to a number of callbacks into the TcImports compilation context for the assembly being compiled. TypedTree nodes are effectively tied to a particular compilation of a particular assembly due to this. There isn\u0027t any way to share this data without losing correctness and invalidating many invariants held in the current design. From a lifetime point of view: the Typed Tree nodes are tied together in a graph, so sharing one or two of them might drag across the entire graph and extend lifetimes of that graph. None of these interrelated nodes were designed to be shared across assemblies.\n","headings":["Project builds","Multi-project builds and cross-project references"],"type":"content"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/large-inputs-and-stack-overflows.html","title":"Large inputs","content":"\nProcessing large inputs without stack overflows\nThe compiler accepts large inputs such as:\n\nLarge literals, such as let str = \u0022a1\u0022 \u002B \u0022a2\u0022 \u002B ... \u002B \u0022a1000\u0022\nLarge array expressions\nLarge list expressions\nLong lists of sequential expressions\nLong lists of bindings, such as let v1 = e1 in let v2 = e2 in ....\nLong sequences of if .. then ... else expressions\nLong sequences of match x with ... | ... expressions\nCombinations of these\n\nThe compiler performs constant folding for large constants so there are no costs to using them at runtime. However, this is subject to a machine\u0027s stack size when compiling, leading to StackOverflow exceptions if those constants are very large. The same can be observed for certain kinds of array, list, or sequence expressions. This appears to be more prominent when compiling on macOS because macOS has a smaller stack size.\nMany sources of StackOverflow exceptions prior to F# 4.7 when processing these kinds of constructs were resolved by processing them on the heap via continuation passing techniques. This avoids filling data on the stack and appears to have negligible effects on overall throughput or memory usage of the compiler.\nThere are two techniques to deal with this\n\nLinearizing processing of specific input shapes, keeping stacks small\nUsing stack guards to simply temporarily move to a new thread when a certain threshold is reached.\n\nLinearizing processing if certain inputs\nAside from array expressions, most of the previously-listed inputs are called \u0022linear\u0022 expressions. This means that there is a single linear hole in the shape of expressions. For example:\n\nexpr :: HOLE (list expressions or other right-linear constructions)\nexpr; HOLE (sequential expressions)\nlet v = expr in HOLE (let expressions)\nif expr then expr else HOLE (conditional expression)\nmatch expr with pat[vs] -\u0026gt; e1[vs] | pat2 -\u0026gt; HOLE (for example, match expr with Some x -\u0026gt; ... | None -\u0026gt; ...)\n\nProcessing these constructs with continuation passing is more difficult than a more \u0022natural\u0022 approach that would use the stack.\nFor example, consider the following contrived example:\nand remapLinearExpr g compgen tmenv expr contf =\n    match expr with\n    | Expr.Let (bind, bodyExpr, m, _) -\u0026gt;\n        ...\n        // tailcall for the linear position\n        remapLinearExpr g compgen tmenvinner bodyExpr (contf \u0026lt;\u0026lt; (fun bodyExpr\u0026#39; -\u0026gt;\n            ...))\n\n    | Expr.Sequential (expr1, expr2, dir, spSeq, m)  -\u0026gt;\n        ...\n        // tailcall for the linear position\n        remapLinearExpr g compgen tmenv expr2 (contf \u0026lt;\u0026lt; (fun expr2\u0026#39; -\u0026gt;\n            ...))\n\n    | LinearMatchExpr (spBind, exprm, dtree, tg1, expr2, sp2, m2, ty) -\u0026gt;\n        ...\n        // tailcall for the linear position\n        remapLinearExpr g compgen tmenv expr2 (contf \u0026lt;\u0026lt; (fun expr2\u0026#39; -\u0026gt;  ...))\n\n    | LinearOpExpr (op, tyargs, argsFront, argLast, m) -\u0026gt;\n        ...\n        // tailcall for the linear position\n        remapLinearExpr g compgen tmenv argLast (contf \u0026lt;\u0026lt; (fun argLast\u0026#39; -\u0026gt; ...))\n\n    | _ -\u0026gt; contf (remapExpr g compgen tmenv e)\n\nand remapExpr (g: TcGlobals) (compgen:ValCopyFlag) (tmenv:Remap) expr =\n    match expr with\n    ...\n    | LinearOpExpr _\n    | LinearMatchExpr _\n    | Expr.Sequential _\n    | Expr.Let _ -\u0026gt; remapLinearExpr g compgen tmenv expr (fun x -\u0026gt; x)\n\nThe remapExpr operation becomes two functions, remapExpr (for non-linear cases) and remapLinearExpr (for linear cases). remapLinearExpr uses tailcalls for constructs in the HOLE positions mentioned previously, passing the result to the continuation.\nSome common aspects of this style of programming are:\n\nThe tell-tale use of contf (continuation function)\nThe processing of the body expression e of a let-expression is tail-recursive, if the next construct is also a let-expression.\nThe processing of the e2 expression of a sequential-expression is tail-recursive\nThe processing of the second expression in a cons is tail-recursive\n\nThe previous example is considered incomplete, because arbitrary combinations of let and sequential expressions aren\u0027t going to be dealt with in a tail-recursive way. The compiler generally tries to do these combinations as well.\nStack Guards\nThe StackGuard type is used to move to a new thread if there is no sufficient stack space for a synchronous recursive call. Compilation globals are re-installed. Sample:\n...\n   stackGuard = StackGuard(\u0026quot;TcExpr\u0026quot;)\n\nlet rec ....\n\nand TcExpr cenv ty (env: TcEnv) tpenv (expr: SynExpr) =\n\n    // Guard the stack for deeply nested expressions\n    cenv.stackGuard.Guard \u0026lt;| fun () -\u0026gt;\n\n    ...\n\nNote stack guarding doesn\u0027t result in a tailcall so will appear in recursive stack frames, because a counter must be decremented after the call.\nCompiling with --times option will show a summary if any thread switches were made due to stack guarding:\n    StackGuard jumps:\n    -----------------------------------------------------\n    | caller |        source        | jumps | min depth |\n    |--------|----------------------|-------|-----------|\n    | exprF  | TypedTreeOps.fs:7444 |    25 |      1601 |\n    -----------------------------------------------------\n\n","headings":["Processing large inputs without stack overflows","Linearizing processing if certain inputs","Stack Guards"],"type":"content"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/overview.html","title":"Overview","content":"\nOverview\nThere are several artifacts involved in the development of F#:\n\nFSharp.Compiler.Service (docs, source). Contains all logic for F# compilation - including parsing, syntax tree processing, typechecking, constraint solving, optimizations, IL importing, IL writing, pretty printing of F# constructs, and F# metadata format processing - and the F# compiler APIs for tooling.\nThe F# compiler executable, called fsc, which is called as a console app. It sets the .NET GC into batch mode and then invokes FSharp.Compiler.Service with command-line arguments.\nThe FSharp.Core Library, called FSharp.Core. Contains all primitive F# types and logic for how they interact, core data structures and library functions for operating on them, structured printing logic, units of measure for scientific programming, core numeric functionality, F# quotations, F# type reflection logic, and asynchronous programming types and logic.\nThe F# Interactive tool, called fsi. A REPL for F# that supports execution and pretty-printing of F# code and results, loading F# script files, referencing assemblies, and referencing packages from NuGet.\n\nThe FSharp.Compiler.Service is by far the largest of these components and contains nearly all logic that fsc and fsi use. It is the primary subject of this guide.\nKey compiler data formats and representations\nThe following are the key data formats and internal data representations of the F# compiler code in its various configurations:\n\nInput source files  Read as Unicode text, or binary for referenced assemblies.\nInput command-line arguments  See CompilerOptions.fs for the full code implementing the arguments table. Command-line arguments are also accepted by the F# Compiler Service API in project specifications, and as optional input to F# Interactive.\nTokens, see pars.fsy, lex.fsl, LexHelpers.fs and related files.\nAbstract Syntax Tree (AST), see SyntaxTree.fs, the untyped syntax tree resulting from parsing.\nTyped Abstract Syntax Tree (Typed Tree), see TypedTree.fs, TypedTreeBasics.fs, TypedTreeOps.fs, and related files. The typed, bound syntax tree including both type/module definitions and their backing expressions, resulting from type checking and the subject of successive phases of optimization and representation change.\nType checking context/state, see for example TcState in ParseAndCheckInputs.fsi and its constituent parts, particularly TcEnv in CheckExpressions.fsi and NameResolutionEnv in NameResolution.fsi. A set of tables representing the available names, assemblies etc. in scope during type checking, plus associated information.\nAbstract IL, the output of code generation, then used for binary generation, and the input format when reading .NET assemblies, see ILModuleDef in il.fsi.\nThe .NET Binary format (with added \u0022pickled\u0022 F# Metadata resource), the final output of fsc.exe, see the ECMA 335 specification and the ilread.fs and ilwrite.fs binary reader/generator implementations. The added F# metadata is stored in a binary resource, see TypedTreePickle.fs.\nThe incrementally emitted .NET reflection assembly, the incremental output of fsi.exe. See ilreflect.fs.\n\nKey constructs and APIs for F# tooling\nThe following are the most relevant parts of the F# compiler tooling, making up the \u0022engine\u0022 and API surface area of FSharp.Compiler.Service.\n\nThe incremental project build engine state in IncrementalBuild.fsi/IncrementalBuild.fs, a part of the F# Compiler Service API.\nThe corresponding APIs wrapping and accessing these structures in the public-facing FSharp.Compiler.Service API and Symbol API.\nThe F# Compiler Service Caches, the various caches maintained by an instance of an FSharpChecker.\n\nKey compiler phases\nThe following is a diagram of how the different phases of the F# compiler work:\nstateDiagram-v2\n    state \u0022Compilation phases\u0022 as Flow {\n      Lexing: Lexing\n      Parsing: Parsing\n      Import: Import\n      Typechecking: Type checking\n      Codegen: Code generation\n      Emit: IL emit\n      Inputs --\u0026gt; Lexing: Source and signature files\n      Inputs --\u0026gt; Import: References\n      Lexing --\u0026gt; Parsing\n      Parsing --\u0026gt; Typechecking\n      Import --\u0026gt; Typechecking\n      Typechecking --\u0026gt; Codegen\n      Codegen --\u0026gt; Emit\n      state Lexing {\n          BasicLexing: Basic Lexing\n          WhitespaceSensitiveLexing: Whitespace Sensitive Lexing\n          [*] --\u0026gt; BasicLexing\n          BasicLexing --\u0026gt; WhitespaceSensitiveLexing: A token stream from input source text.\n          WhitespaceSensitiveLexing --\u0026gt; [*]: A token stream, augmented per the F# Language Specification.\n      }\n      state Parsing {\n          Parser: Parsing\n          [*] --\u0026gt; Parser\n          Parser --\u0026gt; [*]: AST per the grammar in the F# Language Specification.\n      }\n      state Import {\n          Resolving: Resolving references\n          ImportNET: Importing .NET references\n          ImportFS: Importing F# references\n          [*] --\u0026gt; Resolving\n          Resolving --\u0026gt; ImportNET\n          Resolving --\u0026gt; ImportFS\n          ImportNET --\u0026gt; [*]\n          ImportFS --\u0026gt; [*]\n      }\n      state Typechecking {\n          SequentialTypechecking: Sequentially type checking files\n          PatternMatchCompilation: Pattern match compilation\n          ConstraintSolving: Constraint solving\n          PostInferenceChecks: Post inference checks\n          [*] --\u0026gt; SequentialTypechecking\n          SequentialTypechecking --\u0026gt; PatternMatchCompilation\n          PatternMatchCompilation --\u0026gt; ConstraintSolving\n          ConstraintSolving --\u0026gt; PostInferenceChecks\n          PostInferenceChecks --\u0026gt; [*]\n      }\n      state Codegen {\n          QuotationTranslation: Quotation translation\n          Optimization: Optimization\n          Codegeneration: Code generation\n          AbstractILRewrite: Abstract IL rewriting\n          [*] --\u0026gt; QuotationTranslation\n          QuotationTranslation --\u0026gt; Optimization\n          Optimization --\u0026gt; Codegeneration\n          Codegeneration --\u0026gt; AbstractILRewrite\n          AbstractILRewrite --\u0026gt; [*]\n      }\n      state Emit {\n          Binary: Binary emit\n          Reflection: Reflection emit\n          Output: Output (assembly, references, PDBs, etc.)\n          [*] --\u0026gt; Binary\n          [*] --\u0026gt; Reflection\n          Binary --\u0026gt; Output\n          Reflection --\u0026gt; Output\n      }\n  }\n\nThe following are the key phases and high-level logical operations of the F# compiler code in its various configurations:\n\nBasic lexing. Produces a token stream from input source file text. F# uses the FsLex tool to process a declarative specification of the tokenizer in lex.fsl. This compiles the tokenizer specification to a number of tables which are then interpreted by the code in prim-lexing.fs (see also prim-lexing.fsi.\nWhite-space sensitive lexing. Accepts and produces a token stream, augmenting per the F# Language Specification.\nParsing. Accepts a token stream and produces an AST per the grammar in the F# Language Specification. F# uses the FsYacc tool to process a declarative specification of the parser in pars.fsy. This compiles the grammar to a number of tables which are then interpreted by the code in prim-parsing.fs (see also prim-parsing.fsi.\n\nResolving references. For .NET SDK generally references are resolved explicitly by external tooling.\nThere is a legacy aspect to this if references use old .NET Framework references including for\nscripting.  See ReferenceResolver.fs for the abstract definition of compiler reference resolution. See LegacyMSBuildReferenceResolver.fs for reference resolution used by the .NET Framework F# compiler when running on .NET Framework. See SimulatedMSBuildReferenceResolver.fs when not using the .NET Framework F# compiler.\nSee DependencyManager for reference resolution and package management used in fsi.\n\nImporting referenced .NET binaries, see import.fsi/import.fs. Accepts file references and produces a Typed Tree node for each referenced assembly, including information about its type definitions (and type forwarders if any).\nImporting referenced F# binaries and optimization information as Typed Tree data structures, see TypedTreePickle.fs. Accepts binary data and produces  Typed Tree nodes for each referenced assembly, including information about its type/module/function/member definitions.\n\nSequentially type checking files, see CheckDeclarations.fsi/CheckDeclarations.fs. Accepts an AST plus a type checking context/state and produces new Typed Tree nodes\nincorporated into an updated type checking state, plus additional Typed Tree Expression nodes used during code generation.  A key part of this is\nchecking syntactic types and expressions, see CheckExpressions.fsi/CheckExpressions.fs including the state held across the checking of a file (see TcFileState) and the\nenvironment active as we traverse declarations and expressions (see TcEnv).\n\nPattern match compilation, see PatternMatchCompilation.fsi/PatternMatchCompilation.fs. Accepts a subset of checked Typed Tree nodes representing F# pattern matching and produces Typed Tree expressions implementing the pattern matching. Called during type checking as each construct involving pattern matching is processed.\nConstraint solving, see ConstraintSolver.fsi/ConstraintSolver.fs. A constraint solver state is maintained during type checking of a single file, and constraints are progressively asserted (i.e. added to this state). Fresh inference variables are generated and variables are eliminated (solved). Variables are also generalized at various language constructs, or explicitly declared, making them \u0022rigid\u0022. Called during type checking as each construct is processed.\nPost-inference type checks, see PostInferenceChecks.fsi/PostInferenceChecks.fs. Called at the end of type checking/inference for each file. A range of checks that can only be enforced after type checking on a file is complete, such as analysis when using byref\u0026lt;\u0027T\u0026gt; or other IsByRefLike structs.\nQuotation translation, see QuotationTranslator.fsi/QuotationTranslator.fs/QuotationPickler.fsi/QuotationPickler.fs. Generates the stored information for F# quotation nodes, generated from the Typed Tree expression structures of the F# compiler. Quotations are ultimately stored as binary data plus some added type references. \u0022ReflectedDefinition\u0022 quotations are collected and stored in a single blob.\nOptimization phases, primarily the \u0022Optimize\u0022 (peephole/inlining) and \u0022Top Level Representation\u0022 (lambda lifting) phases, see Optimizer.fsi/Optimizer.fs and InnerLambdasToTopLevelFuncs.fsi/InnerLambdasToTopLevelFuncs.fs and LowerCalls.fs. Each of these takes Typed Tree nodes for types and expressions and either modifies the nodes in place or produces new Typed Tree nodes. These phases are orchestrated in CompilerOptions.fs\nCode generation, see IlxGen.fsi/IlxGen.fs. Accepts Typed Tree nodes and produces Abstract IL nodes, sometimes applying optimizations.\n\nAbstract IL code rewriting, see EraseClosures.fs and\nEraseUnions.fs. Eliminates some constructs by rewriting Abstract IL nodes.\n\nBinary emit, see ilwrite.fsi/ilwrite.fs.\nReflection-Emit, see ilreflect.fs.\n\nThese and transformations used to build the following:\n\nThe F# Compiler Service API, see the Symbol API and Service API\nThe F# Interactive Shell, see fsi.fs.\nThe F# Compiler Shell, see fsc.fs and fscmain.fs.\n\nBootstrapping\nThe F# compiler is bootstrapped. That is, an existing F# compiler is used to build a \u0022proto\u0022 compiler from the current source code. That \u0022proto\u0022 compiler is then used to compile itself, producing a \u0022final\u0022 compiler. This ensures the final compiler is compiled with all relevant optimizations and fixes.\nFSharp.Build\nFSharp.Build.dll and Microsoft.FSharp.targets give MSBuild support for F# projects (.fsproj) and contain the targets. Although not strictly part of the F# compiler, they are essential for using F# in all contexts for .NET, aside from some more targeted scripting scenarios. The targets expose things like the CoreCompile and Fsc tasks called by MSBuild.\n","headings":["Overview","Key compiler data formats and representations","Key constructs and APIs for F# tooling","Key compiler phases","Bootstrapping","FSharp.Build"],"type":"content"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/index.html","title":"F# compiler guide\n","content":"F# compiler guide\nWelcome to the F# compiler and tools repository! This guide discusses the F# compiler source code and implementation from a technical point of view.\nDocumentation Topics\n\nOverview\nCoding Standards\nCompiler Startup Performance\nDebug Emit\nDiagnostics\nNotes on FSharp.Core\nF# Interactive Code Emit\nLarge inputs and stack overflows\nMemory usage\nOptimizations\nEquality optimizations\nProject builds\nTooling features\n\nEdit the source for these docs. The docs are published automatically daily fsharp.github.io/fsharp-compiler-docs/ by this repo.\nKey Folders\n\nsrc/Compiler/Utilities - various utilities, largely independent of the compiler\nsrc/Compiler/Facilities - various items of functionality specific to the compiler\nsrc/Compiler/AbstractIL - the Abstract IL library used for .NET IL\nsrc/Compiler/SyntaxTree - the SyntaxTree, parsing and lexing\nsrc/Compiler/TypedTree - the TypedTree, and utilities associated with it\nsrc/Compiler/Checking - checking logic\nsrc/Compiler/Optimize - optimization and \u0022lowering\u0022 logic\nsrc/Compiler/CodeGen - IL code generation logic\nsrc/Compiler/Driver - compiler options, diagnostics and other coordinating functionality\nsrc/Compiler/Symbols - symbols in the public API to the compiler\nsrc/Compiler/Service - the incremental compilation and build logic, plus editor services in the public API to the compiler\nsrc/Compiler/Interactive - the components forming the interactive REPL and core of the notebook engine\nsrc/FSharp.Core - the core library\ntests - the tests\nvsintegration - the Visual Studio integration\n\nResources for learning\n\nChannel: F# Software Foundation compiler sessions\nVideo: Learn me some F# Compiler, an online chat with Vlad and Don\nVideo: Understanding the F# Optimizer, and online chat with Vlad and Don\nVideo: Lexer and Parser, an online chat with Vlad and Don\nVideo: Resumable State Machines, an online chat with Vlad and Don\nVideo: The Typechecker, an online chat with Vlad and Don\nVideo: FSharp.Compiler.Service, an online chat with Vlad and Don\n\nTools to help work with the compiler\n\nsharplab.io can be used to decompile code.\nfantomas-tools can be used to view the Untyped Abstract Syntax Tree.\n\nAttribution\nThis document is based on an original document published in 2015 by the F# Software Foundation. It has since been updated substantially.\n","headings":["F# compiler guide","Documentation Topics","Key Folders","Resources for learning","Tools to help work with the compiler","Attribution"],"type":"content"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/release-notes/About.html","title":"About","content":"\nAbout\nThe release notes for the F# language, FSharp.Core and FSharp.Compiler.Service are based on the Keep a Changelog format.\nThe target audience of these release notes are the respective end-users.\nWriting a changelog entry\nIn order to keep the change logs consistent the following format was proposed for each entry:\n* \u0026lt;Informative description\u0026gt;. ([PR #16106](https://github.com/dotnet/fsharp/pull/16106))\n\nSome tips:\n\nUse valid Markdown.\nUse * as bullet point symbol. We don\u0027t want to mix * and -.\nStart your description with a capital and end the sentence with a dot.\nAlways include a link to your pull request before the closing ), ([PR #16106](https://github.com/dotnet/fsharp/pull/16106)).\nOptionally, include a link to an issue on dotnet/fsharp use Issue #number before the link to the pull request.\n\nExample:\n* Correctly handle assembly imports with public key token of 0 length. ([Issue #16359](https://github.com/dotnet/fsharp/issues/16359), [PR #16363](https://github.com/dotnet/fsharp/pull/16363))\n\n\nOptionally, include a link to a language suggestion from  dotnet/fsharp use Language suggestion #number before the link to the pull request.\n\nExample:\n* \u0060while!\u0060 ([Language suggestion #1038](https://github.com/fsharp/fslang-suggestions/issues/1038), [PR #14238](https://github.com/dotnet/fsharp/pull/14238))\n\n\nChoose the right section for your type of change. (## Added, ## Changed, ## Deprecated, ## Removed, ## Fixed or ## Security).\nEnsure your description makes it clear what the change is about. The reader should be informed on a high level without needing to click through the pull request link and find out in the code what actually changed.\nMaintainers or other contributors might rewrite your changelog entry in the future. This might be done when multiple pull requests can be consolidated under the same umbrella.\nRelated pull requests can be listed in the same entry when it makes sense.\n\nExample:\n* Miscellaneous fixes to parentheses analysis. ([PR #16262](https://github.com/dotnet/fsharp/pull/16262), [PR #16391](https://github.com/dotnet/fsharp/pull/16391), [PR #16370](https://github.com/dotnet/fsharp/pull/16370))\n\nThe release process\nGeneral\nHow does it work? Different stages/phases?\nFSharp.Compiler.Service\nPerhaps add some specific info if available?\n","headings":["About","Writing a changelog entry","The release process","General","FSharp.Compiler.Service"],"type":"content"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/release-notes/Language.html","title":"F# Language","content":"\nF# Language\nPreviewAdded\n\nBetter generic unmanaged structs handling. (Language suggestion #692, PR #12154)\nDeprecate places where seq can be omitted. (Language suggestion #1033, PR #17772)\nAdded type conversions cache, only enabled for compiler runs (PR#17668)\nSupport ValueOption \u002B Struct attribute as optional parameter for methods (Language suggestion #1136, PR #18098)\nAllow _ in use! bindings values (lift FS1228 restriction) (PR #18487)\nWarn when unit is passed to an obj-typed argument  (PR #18330)\nFix parsing errors using anonymous records and units of measures (PR #18543)\nScoped Nowarn: added the #warnon compiler directive (Language suggestion #278, RFC FS-1146 PR, PR #18049)\nAllow let!, use!, and! type annotations without requiring parentheses ((PR #18508 and PR #18682))\nException names are now validated for illegal characters using the same mechanism as types/modules/namespaces (Issue #18763)\nSupport tail calls in computation expressions (PR #18804)\n\nFixed\n\nWarn on uppercase identifiers in patterns. (PR #15816)\nError on invalid declarations in type definitions.(Issue #10066, PR #18813)\n\nChanged\n\n8.0Fixed\n\nDisallow using base to invoke an abstract base method (Issue #13926, PR #16773)\n\nAdded\n\nwhile! (Language suggestion #1038, PR #14238)\n\n\n9.0Added\n\nSpeed up for x in xs -\u0026gt; \u2026 in list \u0026amp; array comprehensions in certain scenarios. (PR #16948)\nLower integral ranges to fast loops in more cases and optimize list and array construction from ranges. (PR #16650, PR #16832)\nSupport for nullable reference types (PR #15181)\nBidirectional F#/C# interop for \u0027unmanaged\u0027 constraint. (PR #12154)\nMake .Is* discriminated union properties visible. (Language suggestion #222, PR #16341)\nAllow returning bool instead of unit option for partial active patterns. (Language suggestion #1041, PR #16473)\nAllow access modifies to auto properties getters and setters (Language suggestion #430, PR 16687, PR 16861, PR 17522)\nAllow #nowarn to support the FS prefix on error codes to disable warnings (Issue #17206, PR #17209)\nAllow ParsedHashDirectives to have argument types other than strings (Issue #17240, PR #17209)\nSupport empty-bodied computation expressions. (Language suggestion #1232, PR #17352)\nAllow object expression without overrides. (Language suggestion #632, PR #17387)\nEnable FSharp 9.0 Language Version (Issue #17497), PR))\n\nFixed\n\nAllow extension methods without type attribute work for types from imported assemblies. (PR #16368)\nEnforce AttributeTargets on let values and functions. (PR #16692)\nEnforce AttributeTargets on union case declarations. (PR #16764)\nEnforce AttributeTargets on implicit constructors. (PR #16845)\nEnforce AttributeTargets on structs and classes (PR #16790)\nEnsure consistent interaction between \u0060\u0060#lineand#nowarn\u0060 directives (PR #17649)\nRevert EnforceAttributeTargets Feature. (PR #18005)\n\nChanged\n\nLower interpolated strings to string concatenation. (PR #16556)\n\n\n","headings":["F# Language","Preview","Added","Fixed","Changed","8.0","Fixed","Added","9.0","Added","Fixed","Changed"],"type":"content"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/release-notes/FSharp.Core.html","title":"FSharp.Core","content":"\nFSharp.Core\n9.0.300 - 2025-05-13Fixed\n\nModified the behavior of Array.insertManyAt to return a copy of the original array when inserting an empty array. (PR #18353)\n\nAdded\n\nAdded nullability annotations to .Using builder method for async and task builders (PR #18292)\nSupport for and! in TaskBuilder (LanguageSuggestion #1363, PR #18451)\n\nChanged\nBreaking Changes\n\nStruct unions with overlapping fields now generate mappings needed for reading via reflection (Issue #18121, PR #18274). Previous versions of FSharp.Core returned incomplete mapping between fields and cases, these older fslib versions will now report an exception.\n\n\n9.0.200 - UnreleasedFixed\n\nFix exception on Post after MailboxProcessor was disposed (Issue #17849, PR #17922)\nFix missing null annotation in Async.SwitchToContext (Issue #18055, PR #18059)\n\nAdded\nChanged\n\nString function changed to guarantee a non-null string return type (PR #17809)\nAdd Parameters as valid target for the Struct attribute (Language suggestion #1136, PR #18098)\n\nBreaking Changes\n\n9.0.101 - 2025-01-14FSharp.Core 9.0.101 did not change compared to version 9.0.100. Below are the changes for FSharp.Core 9.0.100\nFixed\n\nStruct UnionCase doesn\u0027t seem to be a valid target for the DefaultAugmentationAttribute (Issue #17499, PR #17502)\n\nAdded\n\nEnable C# collection expression support for F# lists \u0026amp; sets. (Language suggestion #1355, RFC FS-1145 (PR#776), PR #17359)\nAdd module functions for converting between \u0027T option and \u0027T voption. (PR #17436)\n\nChanged\n\nChange compiler default setting realsig\u002B when building assemblies (Issue #17384, PR #17378)\nChange compiler default setting for compressedMetadata (Issue #17379, PR #17383)\nEnable FSharp 9.0 Language Version (Issue #17497), PR))\nStruct UnionCase doesn\u0027t seem to be a valid target for the DefaultAugmentationAttribute (Issue #17499, PR #17502)\n\nBreaking Changes\n\n9.0.100 - 2024-11-12Fixed\n\nStruct UnionCase doesn\u0027t seem to be a valid target for the DefaultAugmentationAttribute (Issue #17499, PR #17502)\n\nAdded\n\nEnable C# collection expression support for F# lists \u0026amp; sets. (Language suggestion #1355, RFC FS-1145 (PR#776), PR #17359)\nAdd module functions for converting between \u0027T option and \u0027T voption. (PR #17436)\n\nChanged\n\nChange compiler default setting realsig\u002B when building assemblies (Issue #17384, PR #17378)\nChange compiler default setting for compressedMetadata (Issue #17379, PR #17383)\nEnable FSharp 9.0 Language Version (Issue #17497), PR))\nStruct UnionCase doesn\u0027t seem to be a valid target for the DefaultAugmentationAttribute (Issue #17499, PR #17502)\n\nBreaking Changes\n\n8.0.400 - 2024-08-13Fixed\nAdded\n\nRandom functions for collections (RFC #1135, PR #17277)\n\nChanged\n\nCache delegate in query extensions. (PR #17130)\nUpdate AllowNullLiteralAttribute to also use AttributeTargets.Interface (PR #17173)\nUpdate StructAttribute  to also use AttributeTargets.Class (PR #17207)\n\nBreaking Changes\n\nFixed argument exception throwing inconsistency - accessing an out-of-bounds collection index will now throw ArgumentOutOfRangeException instead of ArgumentException (#17328)\n\n\n8.0.300 - 2024-05-14Added\n\nMinor tweaks to inline specifications to support Visibility PR (PR #15484, #PR 16427\nOptimize equality in generic contexts. (PR #16615)\nAdd a constructor for MailboxProcessor with a flag denoting that an exception will be thrown when Post is called after the MailboxProcessor has been disposed. (PR #13036)\n\nFixed\n\nPreserve original stack traces in resumable state machines generated code if available. (PR #16568)\nFix receiving and processing mailbox after Dispose. (PR #13036)\nEnforce AttributeTargets on structs and classes. Also update RequireQualifiedAccessAttribute and AutoOpenAttribute to use AttributeTargets.Struct (PR #16790)\nEnforce AttributeTargets on enums. Also update RequireQualifiedAccessAttribute to use AttributeTargets.Enum (PR #16887)\nEnforce AttributeTargets on delegates. Also update ReflectedDefinitionAttribute to use AttributeTargets.Delegate (PR #16891)\n\n\n8.0.200 - 2024-02-13Added\n\nMore inlines for Result module. (PR #16106)\nAdded a new parameterless constructor for CustomOperationAttribute (PR #16475, part of implementation for fslang-suggestions/1250)\n\n\n10.0.100 - UnreleasedFixed\n\nCorrect a typo in docs for List.sort (PR #18938)\n\nAdded\n\nEnable more string optimizations by adding when \u0027T : Enum library-only library-only static optimization constraint. (PR #18546)\n\nChanged\n\nRandom functions support for zero element chosen/sampled (PR #18568)\nOptimize array slicing performance. (PR #18778)\n\nBreaking Changes\n\n1D array slicing now returns an empty array singleton instead of allocating a new array when the result is empty. (PR #18778)\n\n\n","headings":["FSharp.Core","9.0.300 - 2025-05-13","Fixed","Added","Changed","Breaking Changes","9.0.200 - Unreleased","Fixed","Added","Changed","Breaking Changes","9.0.101 - 2025-01-14","Fixed","Added","Changed","Breaking Changes","9.0.100 - 2024-11-12","Fixed","Added","Changed","Breaking Changes","8.0.400 - 2024-08-13","Fixed","Added","Changed","Breaking Changes","8.0.300 - 2024-05-14","Added","Fixed","8.0.200 - 2024-02-13","Added","10.0.100 - Unreleased","Fixed","Added","Changed","Breaking Changes"],"type":"content"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/release-notes/FSharp.Compiler.Service.html","title":"FSharp.Compiler.Service","content":"\nFSharp.Compiler.Service\n43.9.300 - 2025-05-13Fixed\n\nFix missing TailCall warning in TOp.IntegerForLoop (PR #18399)\nFix classification of nameof in nameof\u0026lt;\u0027T\u0026gt;, match \u2026 with nameof ident -\u0026gt; \u2026. (Issue #10026, PR #18300)\nFix Realsig\u002B generates nested closures with incorrect Generic  (Issue #17797, PR #17877)\nFix optimizer internal error for records with static fields  (Issue #18165, PR #18280)\nFix nullness warning with flexible types  (Issue #18056, PR #18266)\nAllow first branches of match and if expressions to return nullable results  (Issue #18015, PR #18322)\nFix internal error when missing measure attribute in an unsolved measure typar. (Issue #7491, PR #18234==\nSet Cancellable.token from async computation (Issue #18235, PR #18238)\nFix missing nullness warning when static upcast dropped nullness (Issue #18232, PR #18261)\nCancellable: only cancel on OCE with own token (PR #18277)\nCancellable: set token in more places (PR #18283)\nCancellable: fix leaking cancellation token (PR #18295)\nFix NRE when accessing nullable fields of types within their equals/hash/compare methods (PR #18296)\nFix nullness warning for overrides of generic code with nullable type instance (Issue #17988, PR #18337)\nUnsafe downcast from obj to generic T no longer requires not null constraint on T(Issue #18275, PR #18343)\nFix \u0026quot;type inference problem too complicated\u0026quot; for SRTP with T:null and T:struct dummy constraint(Issue #18288, PR #18345)\nFix for missing parse diagnostics in TransparentCompiler.ParseAndCheckProject (PR #18366)\nMiscellanous parentheses analyzer fixes. (PR #18350, PR #18534)\nFix duplicate parse error reporting for GetBackgroundCheckResultsForFileInProject (Issue #18379 PR #18380)\nFix MethodDefNotFound when compiling code invoking delegate with option parameter (Issue #5171, PR #18385)\nFix #r nuget ...\u0026quot; downloads unneeded packages (Issue #18231, PR #18393)\nFix checking bug in unpickling PR #18430\nReenable \u03B2-reduction and subsequent reoptimization of immediately-invoked F#-defined generic delegates. (PR #18401)\nFixed #18433, a rare case of an internal error in xml comment processing. (PR #18436)\nFix confusing type inference error in task expression (Issue #13789, PR #18450)\nFix missing null highlighting in tooltips (PR #18457)\nFix range of SynPat.Named doesn\u0027t include accessibility (PR #18526)\nAllow _ in use! bindings values (lift FS1228 restriction) (PR #18487)\nMake [\u0026lt;CallerMemberName; Struct\u0026gt;] combination work(PR #18444)\nFix code completion considers types from own namespace non-imported (PR #18518)\nCode completion: fix getting qualifier expression in do statements in type decls (PR #18524)\nFix parsing errors using anonymous records and units of measures (PR #18543)\nFixed: #18441 FSI multi-emit unstable. (PR #18465)\nFixed: Allow return, return!, yield, yield! type annotations without parentheses (PR #18533)\n\nAdded\n\nAdded missing type constraints in FCS. (PR #18241)\nThe \u0027use\u0027 keyword can be used on IDisposable|null without nullness warnings (PR #18262)\nAdd support for C# Experimental attribute. (PR #18253)\nNullness warnings are issued for signature\u0026lt;\u0026gt;implementation conformance (PR #18186)\nSymbols: Add FSharpAssembly.IsFSharp (PR #18290)\nType checker: don\u0027t suppress errors while checking expressions (PR #18311)\nType parameter constraint null in generic code will now automatically imply not struct (Issue #18320, PR #18323)\nAdd a switch to determine whether to generate a default implementation body for overridden method when completing. PR #18341\nUse a more accurate range for CE Combine methods. PR #18394\nEnable TypeSubsumptionCache for IDE use. PR #18499\n\nChanged\n\nFSharpCheckFileResults.ProjectContext.ProjectOptions will not be available when using the experimental Transparent Compiler feature. (PR #18205)\nUpdate Obsolete attribute checking to account for DiagnosticId and UrlFormat properties. (PR #18224)\nRemove Cancellable.UsingToken from tests (PR #18276)\nAdded nullability annotations to .Using builder method for async, task and compiler-internal builders (PR #18292)\nWarn when unit is passed to an obj-typed argument  (PR #18330)\nWarning for \u0026quot;useless null handling\u0026quot; works with piped syntax constructs now (PR #18331)\nMake indent in generated overridden member code depend on the context, not fix to 4. (PR #18341)\nAdjust caller info attribute error message range (PR #18388)\nMake attribute targets mismatch a warning and not an error (PR #18492)\n\nBreaking Changes\n\nStruct unions with overlapping fields now generate mappings needed for reading via reflection (Issue #18121, PR #18274)\n\n\n43.9.202 - 2025-04-08Fixed\n\nFix missing TailCall warning in Sequential in use scope (PR #17927)\nFix false negatives for passing null to \u0026quot;obj\u0026quot; arguments. Only \u0026quot;obj | null\u0026quot; can now subsume any type (PR #17757)\nFix internal error when calling \u0027AddSingleton\u0027 and other overloads only differing in generic arity (PR #17804)\nFix extension methods support for non-reference system assemblies (PR #17799)\nEnsure frameworkTcImportsCache mutations are threadsafe. (PR #17795)\nDisallow abstract member with access modifiers in sig file. (PR #17802)\nFix concurrency issue in ILPreTypeDefImpl  (PR #17812)\nFix nullness inference for member val and other OO scenarios  (PR #17845)\nFix internal error when analyzing incomplete inherit member (PR #17905)\nAdd warning when downcasting from nullable type to non-nullable (PR #17965)\nFix missing nullness warning in case of method resolution multiple candidates (PR #17917)\nFix failure to use bound values in when clauses of try-with in seq expressions (PR #17990)\nFix locals allocating for the special copyOfStruct defensive copy (PR #18025)\nFix lowering of computed array expressions when the expression consists of a simple mapping from a uint64 or unativeint array. PR #18081\nAdd missing nullable-metadata for C# consumers of records,exceptions and DU subtypes generated from F# code. PR #18079\nReduce excess memory usage in TransparentCompiler. PR #17543\nFix a race condition in file book keeping in the compiler service (#18008)\nFix trimming \u0027%\u0027 characters when lowering interpolated string to a concat call PR #18123\nCompletion: fix qualified completion in sequence expressions PR #18111\nSymbols: try to use ValReprInfoForDisplay in Mfv.CurriedParameterGroups (PR #18124)\nShim/file system: fix leaks of the shim PR #18144\n\nAdded\n\nLet dotnet fsi --help print a link to the documentation website. (PR #18006)\nDeprecate places where seq can be omitted. (Language suggestion #1033, PR #17772)\nSupport literal attribute on decimals (PR #17769)\nAdded type conversions cache, only enabled for compiler runs, guarded by language version preview (PR #17668)\nAdded project property ParallelCompilation which turns on graph based type checking, parallel ILXGen and parallel optimization. By default on for users of langversion=preview (PR #17948)\nAdding warning when consuming generic method returning T|null for types not supporting nullness (structs,anons,tuples) (PR #18057)\nSink: report SynPat.ArrayOrList type (PR #18127)\nShow the default value of compiler options (PR #18054)\nSupport ValueOption \u002B Struct attribute as optional parameter for methods (Language suggestion #1136, PR #18098)\nCancellable: add safer APIs to check the token (PR #18175)\n\nChanged\n\nMake ILTypeDef interface impls calculation lazy. (PR #17392)\nRemove non-functional useSyntaxTreeCache option. (PR #17768)\nBetter ranges for CE let! and use! error reporting. (PR #17712)\nBetter ranges for CE do! error reporting. (PR #17779)\nBetter ranges for CE return, yield, return! and yield! error reporting. (PR #17792)\nBetter ranges for CE match!. (PR #17789)\nBetter ranges for CE use error reporting. (PR #17811)\nBetter ranges for inherit error reporting. (PR #17879)\nBetter ranges for inherit struct error reporting. (PR #17886)\nWarn on uppercase identifiers in patterns. (PR #15816)\nBetter ranges for inherit objects error reporting. (PR #17893)\nBetter ranges for #nowarn error reporting; bring back #nowarn warnings for --langVersion:80; add warnings under feature flag (PR #17871)\nBetter ranges for #nowarn error reporting; bring back #nowarn warnings for --langVersion:80; add warnings under feature flag (PR #17871)\nCheckAndThrow can be invoked only from within Cancellable context (PR #18037)\nMake ILTypeDef base type calculation lazy. (PR #18005)\nRevert EnforceAttributeTargets Feature. (PR #18005)\n\nBreaking Changes\n\nAliasing StructAttribute will now produce a warning (part of Language suggestion #18298, PR #18355)\n\n\n43.9.200 - UnreleasedFixed\n\nFix Realsig\u002B generates nested closures with incorrect Generic  (Issue #17797, PR #17877)\nFix missing TailCall warning in Sequential in use scope (PR #17927)\nFix false negatives for passing null to \u0026quot;obj\u0026quot; arguments. Only \u0026quot;obj | null\u0026quot; can now subsume any type (PR #17757)\nFix internal error when calling \u0027AddSingleton\u0027 and other overloads only differing in generic arity (PR #17804)\nFix extension methods support for non-reference system assemblies (PR #17799)\nEnsure frameworkTcImportsCache mutations are threadsafe. (PR #17795)\nDisallow abstract member with access modifiers in sig file. (PR #17802)\nFix concurrency issue in ILPreTypeDefImpl  (PR #17812)\nFix nullness inference for member val and other OO scenarios  (PR #17845)\nAdd warning when downcasting from nullable type to non-nullable (PR #17965)\nFix missing nullness warning in case of method resolution multiple candidates (PR #17917)\nFix failure to use bound values in when clauses of try-with in seq expressions (PR #17990)\nFix locals allocating for the special copyOfStruct defensive copy (PR #18025)\nFix lowering of computed array expressions when the expression consists of a simple mapping from a uint64 or unativeint array. PR #18081\nAdd missing nullable-metadata for C# consumers of records,exceptions and DU subtypes generated from F# code. PR #18079\nReduce excess memory usage in TransparentCompiler. PR #17543\nFix a race condition in file book keeping in the compiler service (#18008)\nFix trimming \u0027%\u0027 characters when lowering interpolated string to a concat call PR #18123\nCompletion: fix qualified completion in sequence expressions PR #18111\nSymbols: try to use ValReprInfoForDisplay in Mfv.CurriedParameterGroups (PR #18124)\nShim/file system: fix leaks of the shim PR #18144\nfsi: fix auto-loading of script file inside NuGet package (PR #18177)\nFix for Obsolete attribute warning/error not taken into account when used with a unit of measure PR #18182\n\nAdded\n\nLet dotnet fsi --help print a link to the documentation website. (PR #18006)\nDeprecate places where seq can be omitted. (Language suggestion #1033, PR #17772)\nSupport literal attribute on decimals (PR #17769)\nAdded type conversions cache, only enabled for compiler runs, guarded by language version preview (PR #17668)\nAdded project property ParallelCompilation which turns on graph based type checking, parallel ILXGen and parallel optimization. By default on for users of langversion=preview (PR #17948)\nAdding warning when consuming generic method returning T|null for types not supporting nullness (structs,anons,tuples) (PR #18057)\nSink: report SynPat.ArrayOrList type (PR #18127)\nShow the default value of compiler options (PR #18054)\nSupport ValueOption \u002B Struct attribute as optional parameter for methods (Language suggestion #1136, PR #18098)\nCancellable: add safer APIs to check the token (PR #18175)\n\nChanged\n\nMake ILTypeDef interface impls calculation lazy. (PR #17392)\nRemove non-functional useSyntaxTreeCache option. (PR #17768)\nBetter ranges for CE let! and use! error reporting. (PR #17712)\nBetter ranges for CE do! error reporting. (PR #17779)\nBetter ranges for CE return, yield, return! and yield! error reporting. (PR #17792)\nBetter ranges for CE match!. (PR #17789)\nBetter ranges for CE use error reporting. (PR #17811)\nBetter ranges for inherit error reporting. (PR #17879)\nBetter ranges for inherit struct error reporting. (PR #17886)\nWarn on uppercase identifiers in patterns. (PR #15816)\nBetter ranges for inherit objects error reporting. (PR #17893)\nBetter ranges for #nowarn error reporting; bring back #nowarn warnings for --langVersion:80; add warnings under feature flag (PR #17871)\nBetter ranges for #nowarn error reporting; bring back #nowarn warnings for --langVersion:80; add warnings under feature flag (PR #17871)\nCheckAndThrow can be invoked only from within Cancellable context (PR #18037)\nMake ILTypeDef base type calculation lazy. (PR #18005)\nRemoved redundant hash directives around nullness syntax (Issue #18601, PR #18203, PR #18207)\n\nBreaking Changes\n\nAliasing StructAttribute will now produce a warning (part of Language suggestion #1136, PR #18098)\nThe baseType field in SynMemberDefn.Inherit has now type SynType option, to fix internal error when analyzing incomplete inherit member (PR #17905)\n\n\n43.9.100 - 2024-11-12Fixed\n\nFix wrong TailCall warning (Issue #17604, PR #17637)\nCompiler hangs when compiling inline recursive invocation (Issue #17376, PR #17394)\nFix reporting IsFromComputationExpression only for CE builder type constructors and let bindings. (PR #17375)\nOptimize simple mappings in comprehensions when the body of the mapping has let-bindings and/or sequential expressions before a single yield. (PR #17419)\nC# protected property can be assigned in F# inherit constructor call. (Issue #13299, PR #17391)\nMethodAccessException on equality comparison of a record with private fields. (Issue #17447, PR #17391)\nFix function implicit conversion. (Issue #7401, PR #17487)\nCompiler fails to recognise namespace in FQN with enabled GraphBasedChecking. (Issue #17508, PR #17510)\nFix missing message for type error (FS0001). (Issue #17373, PR #17516)\nNullness export - make sure option\u0026lt;\u0026gt; and other UseNullAsTrueValue types are properly annotated as nullable for C# and reflection consumers PR #17528\nMethodAccessException on equality comparison of a type private to module. (Issue #17541, PR #17548)\nFixed checking failure when global namespace is involved with enabled GraphBasedChecking (PR #17553)\nAdd missing byte chars notations, enforce limits in decimal notation in byte char \u0026amp; string (Issues #15867, #15868, #15869, PR #15898)\nParentheses analysis: keep extra parentheses around unit \u0026amp; tuples in method definitions. (PR #17618)\nFix IsUnionCaseTester throwing for non-methods/properties #17301\nFix xmlc doc tooltip display for nullable types #17741\nConsider open type used when the type is an enum and any of the enum cases is used unqualified. (PR #17628)\nGuard for possible StackOverflowException when typechecking non recursive modules and namespaces (PR #17654)\nNullable - fix for processing System.Nullable types with nesting (PR #17736)\nFixes for the optimization of simple mappings in array and list comprehensions. (Issue #17708, PR #17711)\n\nAdded\n\nSupport for nullable reference types (PR #15181)\nTreat .ToString() on F# types as returning non-nullable string in --checknulls\u002B context (PR #17547)\nParser: recover on missing union case fields (PR #17452)\nParser: recover on missing union case field types (PR #17455)\nSink: report function domain type (PR #17470)\nAllow access modifies to auto properties getters and setters (Language suggestion #430, PR 16687, PR 16861, PR 17522)\nRender C# nullable-analysis attributes in tooltips (PR #17485)\nAllow object expression without overrides. (Language suggestion #632, PR #17387)\nEnable FSharp 9.0 Language Version (Issue #17497), PR))\nEnable LanguageFeature.EnforceAttributeTargets in F# 9.0. (Issue #17514, PR #17516)\nParser: better recovery for unfinished patterns (PR #17231, PR #17232))\nEnable consuming generic arguments defined as allows ref struct in C# (Issue #17597, display them in tooltips PR #17706)\nTrivia for SynTypeConstraint.WhereTyparNotSupportsNull. (Issue #17721, PR #17745)\nTrivia for SynType.WithNull. (Issue #17720, PR #17745)\n\nChanged\n\nChange compiler default setting realsig\u002B when building assemblies (Issue #17384, PR #17378)\nChange compiler default setting for compressedMetadata (Issue #17379, PR #17383)\nTreat { new Foo() } as SynExpr.ObjExpr (PR #17388)\nOptimize metadata reading for type members and custom attributes. (PR #17364)\nEnforce AttributeTargets on unions. (PR #17389)\nApplied nullable reference types to FSharp.Compiler.Service itself (PR #15310)\nEnsure that isinteractive multi-emit backing fields are not public. (Issue #17439), (PR #17439)\nBetter error reporting for unions with duplicated fields. (PR #17521)\nBetter CE error reporting when using use! with and! (PR #17671)\nBetter error reporting for let bindings. (PR #17601)\nOptimize ILTypeDef interface impls reading from metadata. (PR #17382)\nMake ILTypeDef interface impls calculation lazy. (PR #17392)\nBetter error reporting for active patterns. (PR #17666)\nMultiple fsi sessions use separate temporary directories (PR #17760)\n\nBreaking Changes\n\n43.8.400 - 2024-08-13Fixed\n\nEnforce AttributeTargets on records. (PR #17207)\nFix a false positive of the [\u0026lt;TailCall\u0026gt;] analysis in combination with async. (Issue #17237, PR #17241)\nExtended #help directive in fsi to show documentation in the REPL. (PR #17140)\nFix internal error when dotting into delegates with multiple type parameters. (PR #17227)\nError for partial implementation of interface with static and non-static abstract members. (Issue #17138, PR #17160)\nOptimize simple mappings with preludes in computed collections. (PR #17067)\nImprove error reporting for abstract members when used in classes. (PR #17063)\nImprove error reporting when property has same name as DU case. (Issue #16646, PR #17088)\nMake typechecking of indexed setters with tuples on the right more consistent. (Issue #16987, PR #17017)\nStatic abstract method on classes no longer yields internal error. (Issue #17044, PR #17055)\nDisallow calling abstract methods directly on interfaces. (Issue #14012, Issue #16299, PR #17021)\nVarious parenthesization API fixes. (PR #16977)\nFiles passed with -embed:relative/path/to/file are not embedded. (Issue #16768)\nFix bug in optimization of for-loops over integral ranges with steps and units of measure. (Issue #17025, PR #17040, PR #17048)\nFix calling an overridden virtual static method via the interface (PR #17013)\nFix state machines compilation, when big decision trees are involved, by removing code split when resumable code is detected (PR #17076)\nFix for exponential runtime in CE builders when using nested implicit yields PR #17096\nFix several AND operator parser bugs and regressions (Issue #16447, Issue #17134, Issue #16309, PR #17113)\nTreat exceptions as types in a namespace for graph based type checking (Issue #17262, PR #17268)\nFS0243 - Unrecognized option: \u0027--realsig-\u0027 #17561 (Issue #17561, PR #17268)\n\nAdded\n\nGenerate new Equals overload to avoid boxing for structural comparison (PR #16857)\nAllow #nowarn to support the FS prefix on error codes to disable warnings (Issue #17206, PR #17209)\nAllow ParsedHashDirectives to have argument types other than strings (Issue #17240, PR #17209)\nParser: better recovery for unfinished patterns (PR #17231)\nExpose inner exception information of TypeProviders to help diagnostics in IDE (PR #17251)\nParser: recover on empty match clause (PR #17233)\nSupport empty-bodied computation expressions. (Language suggestion #1232, RFC FS-1144 (PR #774), PR #17352)\n\nChanged\n\nEnforce AttributeTargets.Interface (PR #17173)\nMinor compiler perf improvements. (PR #17130)\nImprove error messages for active pattern argument count mismatch (PR #16846, PR #17186)\nAsyncLocal diagnostics context. (PR #16779)\nReduce allocations in compiler checking via ValueOption usage (PR #16822)\nUse AsyncLocal instead of ThreadStatic to hold Cancellable.Token (PR #17156)\nShowing and inserting correct name of entities from unopened namespace/module (Issue #14375, PR #17261)\nImprove completion after method/property override (PR #17292)\nSupport lazy custom attributes calculation for ILTypeDef public API, improve ExtensionAttribute presence detecting perf. (PR #16168)\n\n\n43.8.300 - 2024-05-14Fixed\n\nFix a false positive of the [\u0026lt;TailCall\u0026gt;] analysis in combination with yield!. (PR #16933)\nImprove error reporting: ambiguous override method in object expression. (PR #16985)\nDon\u0027t blow the stack when traversing deeply nested sequential expressions. (PR #16882)\nFix wrong range start of INTERP_STRING_END. (PR #16774, PR #16785)\nFix missing warning for recursive calls in list comprehensions. (PR #16652)\nCode generated files with \u0026gt; 64K methods and generated symbols crash when loaded. Use inferred sequence points for debugging. (Issue #16399, #PR 16514)\nnameof Module expressions and patterns are processed to link files in --test:GraphBasedChecking. (PR #16550, PR #16743)\nGraph Based Checking doesn\u0027t throw on invalid parsed input so it can be used for IDE scenarios (PR #16575, PR #16588, PR #16643)\nVarious parenthesization API fixes. (PR #16578, PR #16666, PR #16901, PR #16973, PR #17012)\nKeep parens for problematic exprs (if, match, etc.) in $\u0026quot;{(\u2026):N0}\u0026quot;, $\u0026quot;{(\u2026),-3}\u0026quot;, etc. (PR #16578)\nFix crash in DOTNET_SYSTEM_GLOBALIZATION_INVARIANT mode #PR 16471)\nFix16572 - Fixed the preview feature enabling Is properties for union case did not work correctly with let .rec and .fsi files (PR #16657)\n[\u0026lt;CliEvent\u0026gt;] member should not produce property symbol. (Issue #16640, PR #16658)\nFix discriminated union initialization. (#PR 16661)\nAllow calling method with both Optional and ParamArray. (#PR 16688, suggestions #1120)\nReturn diagnostics that got suppressed by errors in previous files. (PR #16719)\nFix release inline optimization, which leads to MethodAccessException if used with \u0060assembly:InternalsVisibleTo\u0060\u0060 attribute. (Issue #16105, (PR #16737)\nEnforce AttributeTargets on let values and functions. (PR #16692)\nEnforce AttributeTargets on union case declarations. (PR #16764)\nDisallow using base to invoke an abstract base method. (Issue #13926, PR #16773)\nParser: more unfinished member recovery (PR #16835)\nEnforce AttributeTargets on implicit constructors. (PR #16845)\nEnforce AttributeTargets on structs and classes (PR #16790)\nParser: fix pattern range for idents with trivia (PR #16824)\nFix broken code completion after a record type declaration (PR #16813)\nEnforce AttributeTargets on enums (PR #16887)\nCompletion: fix for unfinished record field decl (PR #16893)\nEnforce AttributeTargets on delegates (PR #16891)\nObsolete attribute is ignored in constructor property assignment (PR #16900)\nCompletion: fix completion in empty dot lambda prefix (#16829)\nFix StackOverflow when checking non-recursive bindings in module or namespace in fscAnyCpu/fsiAnyCpu. (PR #16908)\nRemoves signature file adjacency check in Transparent Compiler Issue #17082 PR #17085\n\nAdded\n\nThe stackguard depth for ILPdbWriter.unshadowScopes can be modified via the environment variable FSHARP_ILPdb_UnshadowScopes_StackGuardDepth(PR #16583)\nParser recovers on complex primary constructor patterns, better tree representation for primary constructor patterns. (PR #16425)\nName resolution: keep type vars in subsequent checks (PR #16456)\nHigher-order-function-based API for working with the untyped abstract syntax tree. (PR #16462)\nPrettyNaming: make DoesIdentifierNeedBackticks public (PR #16613)\nAdd switch to generate types and members with  IL visibility that accurately represents their F# visibility. (PR #15484\nAllow returning bool instead of unit option for partial active patterns. (Language suggestion #1041, PR #16473)\nSymbols: Add GenericArguments to FSharpEntity (PR #16470)\nParser: more \u0027as\u0027 pattern recovery (PR #16837)\nAdd extended data for DefinitionsInSigAndImplNotCompatibleAbbreviationsDiffer (FS0318). (PR #16811))\nChecker/patterns: recover on unresolved long identifiers (PR #16842)\nSynExprSequentialTrivia (Issue #16914, PR #16981)\n\nChanged\n\nAutogenerated .Is* members for unions skipped for single-case unions. (PR 16571)\nimplicitCtorSynPats in SynTypeDefnSimpleRepr.General is now SynPat option instead of SynSimplePats option. (PR #16425)\nSyntaxVisitorBase\u0026lt;\u0027T\u0026gt;.VisitSimplePats now takes SynPat instead of SynSimplePat list. (PR #16425)\nReduce allocations in compiler checking via ValueOption usage (PR #16323, PR #16567)\nReverted #16348 ThreadStatic CancellationToken changes to improve test stability and prevent potential unwanted cancellations. (PR #16536)\nRefactored parenthesization API. ([PR #16461])(https://github.com/dotnet/fsharp/pull/16461))\nOptimize some interpolated strings by lowering to string concatenation. (PR #16556)\nSpeed up for x in xs -\u0026gt; \u2026 in list \u0026amp; array comprehensions in certain scenarios. (PR #16948)\nIntegral range optimizations. (PR #16650, PR #16832, PR #16947)\n\n\n43.8.202 - UnreleasedFixed\nnameof Module expressions and patterns are processed to link files in --test:GraphBasedChecking. (PR #16570, PR #16747)\n\n43.8.200 - 2024-02-13Fixed\n\nCorrectly handle assembly imports with public key token of 0 length. (Issue #16359, PR #16363)\nRange of SynField (PR #16357)\nLimit a type to 65K methods, introduce a compile-time error if any class has over approx 64K methods in generated IL. (Issue #16398, #PR 16427)\n\nAdded\n\nRaise a new error when interfaces with auto properties are implemented on constructor-less types. (PR #16352)\nAllow usage of [\u0026lt;TailCall\u0026gt;] with older FSharp.Core package versions. (PR #16373)\nParser recovers on unfinished as patterns. (PR #16404)\nAllow type-checking of unfinished object expressions. (PR #16413)\nParser recovers on unfinished enum case declarations. (PR #16401)\nParser recovers on unfinished record declarations. (PR #16357)\nMutableKeyword to SynFieldTrivia (PR #16357)\nAdded support for a new parameterless constructor for CustomOperationAttribute, which, when applied, will use method name as keyword for custom operation in computation expression builder. (PR #16475, part of implementation for fslang-suggestions/1250)\nCompiler service API for getting ranges of unnecessary parentheses. (PR #16079 et seq.)\n\nChanged\n\nSpeed up unused opens handling for empty results. (PR #16502)\n\n\n43.8.100 - 2023-11-14Fixed\n\nInclude the get,set keywords in the range of SynMemberDefn.AutoProperty. (PR #15835)\n\n\n43.11.0 - UnreleasedFixed\n\nScripts: Fix resolving the dotnet host path when an SDK directory is specified. (PR #18960)\nFix excessive StackGuard thread jumping (PR #18971)\n\nAdded\nChanged\nBreaking Changes\n\n43.10.100 - UnreleasedAdded\n\nSymbols: add Mfv.ApparentEnclosingType (PR #17494)\nAdd opt-in warning attribute not valid for union case with fields PR #18532)\nAdd support for when \u0027T : Enum library-only static optimization constraint. (PR #18546)\nAdd support for tail calls in computation expressions (PR #18804)\nAdd --typecheck-only flag support for F# Interactive (FSI) scripts to type-check without execution. (Issue #18686)\nDiagnostics: add extended data for \u0027No constructors\u0027 error (PR #18863)\nFSharpType.Format: support top-level prefix generic types style. (PR #18897)\nFCS: allow getting captured types (PR $18878)\n\nFixed\n\nFix duplicate .cctor issue for discriminated unions with generic statics (Issue #18767)\nFix F# compiler to prevent tail call emission when pinned locals are present (PR #18893)\nFix SignatureHash to include constant values in hash computation (Issue #18758)\nFix parsing errors using anonymous records and units of measures (PR #18543)\nFix parsing errors using anonymous records and code quotations (PR #18603)\nBetter error message for attribute targets. (PR #18641)\nFixed: Allow return, return!, yield, yield! type annotations without parentheses (PR #18533)\nAllow let!, use!, and! type annotations without requiring parentheses ((PR #18508 and PR #18682))\nFix find all references for F# exceptions (PR #18565)\nShorthand lambda: fix completion for chained calls and analysis for unfinished expression (PR #18560)\nCompletion: fix previous namespace considered opened PR #18609\nFix active pattern typechecking regression. (Issue #18638, PR #18642)\nFix nullness warnings when casting non-nullable values to IEquatable\u0026lt;T\u0026gt; to match C# behavior. (Issue #18759)\nError on invalid declarations in type definitions.(Issue #10066, PR #18813)\nFix IsByRefLikeAttribute types being incorrectly suppressed in completion lists. Types like Span\u0026lt;T\u0026gt; and ReadOnlySpan\u0026lt;T\u0026gt; now appear correctly in IntelliSense.\nFix SRTP nullness constraint resolution for types imported from older assemblies. AmbivalentToNull types now use legacy F# nullness rules instead of always satisfying \u0027T : null constraints. (Issue #18390, Issue #18344)\nFix Show XML doc for enum fields in external metadata (Issue #17939, PR #18800)\nFix nullable types formatting in FSharpType.Format and tooltips to include parentheses. (PR #18842)\nTypeMismatchDiagnosticExtendedData: fix expected and actual types calculation. (Issue )\nFormat top-level generic types using a prefix style in inherit/interface declarations and flexible type annotations. (PR #18897)\nParser: fix range for computed binding expressions (PR #18903)\nTests: set test source for range debug printing (PR #18879)\nChecker: fix declaring type for abbreviated types extensions (PR #18909)\nCaches: type subsumption cache key perf regression (Issue #18925 PR #18926)\nEnsure that line directives are applied to source identifiers (issue #18908, PR #18918)\nFix expected and actual types in ErrorFromAddingTypeEquation message and extended diagnostic data. (PR #18915)\nEditor: Fix Record fields completion in update record with partial field name. (PR #18946)\n\nChanged\n\nUse errorR instead of error in CheckDeclarations.fs when possible. (PR #18645)\nParser: Capture named fields block separators. (PR #18857)\nType checker: use inner expr range in upcast constraints errors (PR #18850)\nImport IEnumerable as seq. (PR #18865)\n\nBreaking Changes\n\nScoped Nowarn: Add the #warnon compiler directive (Language suggestion #278, RFC FS-1146 PR, PR #18049 and PR #18637)\nSimplify creation of FSharpDiagnostics. In a few cases, errors without ranges were assigned to the currently checked file, while in other cases they carried an empty range. The latter is now true in all cases. In a few cases, ranges at eof were corrected, while in others they were not. They are now always left uncorrected. This is a prerequisit for #18553. (PR #18610).\nSynExprRecordField now includes a range field (PR #18617)\nMark Range.Zero as obsolete in favor of Range.range0 (PR #18664)\nUse Synbinding to model and! (PR #18805)\nRedesign #line processing. The original positions (unaffected by #line directives) are now kept in the AST, and __LINE__ and __SOURCE_LINE__ show the original line numbers / file names. However, all diagnostics and debug information stays the same (shows the position transformed by the #line directives). (Issue #18553, PR #18699, PR 18828, PR 18829)\nUnify let, let!, use and use! AST representation. (PR #18825)[^1]\n\nMigration Guidance for AST Users\nNote: The unified AST introduces two new boolean fields:\n\nisFromSource: Indicates if the binding comes from user-written code (true) or is compiler-generated (false)\nisBang: Distinguishes computation expression bindings (let!/use! = true) from regular bindings (let/use = false)\n\n1. Pattern Matching Updates\nBefore:\nmatch expr with\n| SynExpr.LetOrUse(isRec, isUse, bindings, body, range, trivia) -\u0026gt;\n    // Handle regular let/use\n| SynExpr.LetOrUseBang(spBind, isUse, isFromSource, pat, rhs, andBangs, body, range, trivia) -\u0026gt;\n    // Handle let!/use!\n\nAfter:\nmatch expr with\n| SynExpr.LetOrUse(isRec, isUse, isFromSource, isBang, bindings, body, range, trivia) -\u0026gt;\n    if isBang then\n        // This is a let!/use! expression\n        match bindings with\n        | firstBinding :: andBangs -\u0026gt;\n            match firstBinding with\n            | SynBinding(headPat = pat; expr = rhs) -\u0026gt;\n                // pat and rhs extracted from first binding\n                // andBangs contains the and! bindings\n        | [] -\u0026gt; // error case\n    else\n        // This is a regular let/use expression\n\n2. Construction Updates\nBefore:\n// Creating a let! expression\nSynExpr.LetOrUseBang(\n    bindDebugPoint,\n    false,  // isUse\n    true,   // isFromSource\n    pat,\n    rhsExpr,\n    andBangs,\n    bodyExpr,\n    range,\n    trivia\n)\n\nAfter:\n// Creating a let! expression\nlet firstBinding = SynBinding(\n    accessibility = None,\n    kind = SynBindingKind.Normal,\n    isInline = false,\n    isMutable = false,\n    attributes = [],\n    xmlDoc = PreXmlDoc.Empty,\n    valData = SynInfo.emptySynValData,\n    headPat = pat,           // Pattern moved here\n    returnInfo = None,\n    expr = rhsExpr,          // RHS moved here\n    range = range,\n    debugPoint = bindDebugPoint,  // Debug point moved here\n    trivia = bindingTrivia\n)\nSynExpr.LetOrUse(\n    false,  // isRecursive\n    false,  // isUse\n    true,   // isFromSource\n    true,   // isBang (indicates let!)\n    firstBinding :: andBangs,  // All bindings in single list\n    bodyExpr,\n    range,\n    trivia\n)\n\n3. Common Migration Patterns\nChecking for computation expressions:\n// Before\nmatch expr with\n| SynExpr.LetOrUseBang _ -\u0026gt; true\n| _ -\u0026gt; false\n\n// After\nmatch expr with\n| SynExpr.LetOrUse(isBang = true) -\u0026gt; true\n| _ -\u0026gt; false\n\nExtracting pattern and expression from let!:\n// Before\n| SynExpr.LetOrUseBang(_, _, _, pat, rhs, _, _, _, _) -\u0026gt;\n    processBinding pat rhs\n\n// After\n| SynExpr.LetOrUse(isBang = true; bindings = binding :: _) -\u0026gt;\n    match binding with\n    | SynBinding(headPat = pat; expr = rhs) -\u0026gt;\n        processBinding pat rhs\n    | _ -\u0026gt; // error\n\nProcessing and! bindings:\n// Before\n| SynExpr.LetOrUseBang(_, _, _, firstPat, firstRhs, andBangs, _, _, _) -\u0026gt;\n    processFirst firstPat firstRhs\n    for andBang in andBangs do\n        processAndBang andBang\n\n// After\n| SynExpr.LetOrUse(isBang = true; bindings = bindings) -\u0026gt;\n    match bindings with\n    | first :: rest -\u0026gt;\n        processBinding first\n        for andBang in rest do\n            processAndBang andBang\n    | [] -\u0026gt; // error\n\n[^1]: See Migration Guidance for AST Users section for detailed information on how to update your code to work with the unified AST representation.\n\n","headings":["FSharp.Compiler.Service","43.9.300 - 2025-05-13","Fixed","Added","Changed","Breaking Changes","43.9.202 - 2025-04-08","Fixed","Added","Changed","Breaking Changes","43.9.200 - Unreleased","Fixed","Added","Changed","Breaking Changes","43.9.100 - 2024-11-12","Fixed","Added","Changed","Breaking Changes","43.8.400 - 2024-08-13","Fixed","Added","Changed","43.8.300 - 2024-05-14","Fixed","Added","Changed","43.8.202 - Unreleased","Fixed","43.8.200 - 2024-02-13","Fixed","Added","Changed","43.8.100 - 2023-11-14","Fixed","43.11.0 - Unreleased","Fixed","Added","Changed","Breaking Changes","43.10.100 - Unreleased","Added","Fixed","Changed","Breaking Changes","Migration Guidance for AST Users","1. Pattern Matching Updates","2. Construction Updates","3. Common Migration Patterns"],"type":"content"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/fcs/editor.html","title":"Tutorial: Editor services","content":"\nCompiler Services: Editor services\nThis tutorial demonstrates how to use the editor services provided by the F# compiler.\nThis API is used to provide auto-complete, tool-tips, parameter info help, matching of\nbrackets and other functions in F# editors including Visual Studio, Xamarin Studio and Emacs\n(see fsharpbindings project for more information).\nSimilarly to the tutorial on using untyped AST, we start by\ngetting the InteractiveChecker object.\n\nNOTE: The FSharp.Compiler.Service API is subject to change when later versions of the nuget package are published\n\nType checking sample source code\nAs in the previous tutorial (using untyped AST), we start by referencing\nFSharp.Compiler.Service.dll, opening the relevant namespace and creating an instance\nof InteractiveChecker:\n// Reference F# compiler API\n#r \u0026quot;FSharp.Compiler.Service.dll\u0026quot;\n\nopen FSharp.Compiler.CodeAnalysis\nopen FSharp.Compiler.EditorServices\nopen FSharp.Compiler.Text\nopen FSharp.Compiler.Tokenization\n\n// Create an interactive checker instance\nlet checker = FSharpChecker.Create()\n\nAs previously, we use GetProjectOptionsFromScriptRoot to get a context\nwhere the specified input is the only file passed to the compiler (and it is treated as a\nscript file or stand-alone F# source code).\n// Sample input as a multi-line string\nlet input =\n    \u0026quot;\u0026quot;\u0026quot;\n  open System\n\n  let foo() =\n    let msg = String.Concat(\u0026quot;Hello\u0026quot;,\u0026quot; \u0026quot;,\u0026quot;world\u0026quot;)\n    if true then\n      printfn \u0026quot;%s\u0026quot; msg.\n  \u0026quot;\u0026quot;\u0026quot;\n// Split the input \u0026amp; define file name\nlet inputLines = input.Split(\u0026#39;\\n\u0026#39;)\nlet file = \u0026quot;/home/user/Test.fsx\u0026quot;\n\nlet projOptions, _diagnostics =\n    checker.GetProjectOptionsFromScript(file, SourceText.ofString input, assumeDotNetFramework=false)\n    |\u0026gt; Async.RunSynchronously\n\nlet parsingOptions, _diagnostics2 =\n    checker.GetParsingOptionsFromProjectOptions(projOptions)\n\nTo perform type checking, we first need to parse the input using\nParseFile, which gives us access to the untyped AST. However,\nthen we need to call CheckFileInProject to perform the full type checking. This function\nalso requires the result of ParseFileInProject, so the two functions are often called\ntogether.\n// Perform parsing\n\nlet parseFileResults =\n    checker.ParseFile(file, SourceText.ofString input, parsingOptions)\n    |\u0026gt; Async.RunSynchronously\n\nBefore we look at the interesting operations provided by TypeCheckResults, we\nneed to run the type checker on a sample input. On F# code with errors, you would get some type checking\nresult (but it may contain incorrectly \u0022guessed\u0022 results).\n// Perform type checking\nlet checkFileAnswer =\n    checker.CheckFileInProject(parseFileResults, file, 0, SourceText.ofString input, projOptions)\n    |\u0026gt; Async.RunSynchronously\n\nAlternatively you can use ParseAndCheckFileInProject to check both in one step:\nlet parseResults2, checkFileAnswer2 =\n    checker.ParseAndCheckFileInProject(file, 0, SourceText.ofString input, projOptions)\n    |\u0026gt; Async.RunSynchronously\n\nThe function returns both the untyped parse result (which we do not use in this\ntutorial), but also a CheckFileAnswer value, which gives us access to all\nthe interesting functionality...\nlet checkFileResults =\n    match checkFileAnswer with\n    | FSharpCheckFileAnswer.Succeeded (res) -\u0026gt; res\n    | res -\u0026gt; failwithf \u0026quot;Parsing did not finish... (%A)\u0026quot; res\n\nHere, we type check a simple function that (conditionally) prints \u0022Hello world\u0022.\nOn the last line, we leave an additional dot in msg. so that we can get the\ncompletion list on the msg value (we expect to see various methods on the string\ntype there).\nUsing type checking results\nLet\u0027s now look at some of the API that is exposed by the TypeCheckResults type. In general,\nthis is the type that lets you implement most of the interesting F# source code editor services.\nGetting a tool tip\nTo get a tool tip, you can use the GetToolTip method. The method takes a line number and character\noffset. Both of the numbers are zero-based. In the sample code, we want to get a tooltip for the foo\nfunction that is defined on line 3 (line 0 is blank) and the letter f starts at index 7 (the tooltip\nwould work anywhere inside the identifier).\nIn addition, the method takes a tag of token which is typically IDENT, when getting a tooltip for an\nidentifier (the other option lets you get a tooltip with full assembly location when using #r \u0022...\u0022).\n// Get tag of the IDENT token to be used as the last argument\nlet identToken = FSharpTokenTag.Identifier\n\n// Get tool tip at the specified location\nlet tip =\n    checkFileResults.GetToolTip(4, 7, inputLines.[1], [ \u0026quot;foo\u0026quot; ], identToken)\n\nprintfn \u0026quot;%A\u0026quot; tip\n\nAside from the location and token kind, the function also requires the current contents of the line\n(useful when the source code changes) and a Names value, which is a list of strings representing\nthe current long name. For example, to get a tooltip for the Random identifier in a long name\nSystem.Random, you would use a location somewhere in the string Random and you would pass\n[\u0022System\u0022; \u0022Random\u0022] as the Names value.\nThe returned value is of type ToolTipText which contains a discriminated union ToolTipElement.\nThe union represents different kinds of tool tips that you can get from the compiler.\nGetting auto-complete lists\nThe next method exposed by TypeCheckResults lets us perform auto-complete on a given location.\nThis can be called on any identifier or in any scope (in which case you get a list of names visible\nin the scope) or immediately after . to get a list of members of some object. Here, we get a\nlist of members of the string value msg.\nTo do this, we call GetDeclarationListInfo with the location of the . symbol on the last line\n(ending with printfn \u0022%s\u0022 msg.). The offsets are one-based, so the location is 7, 23.\nWe also need to specify a function that says that the text has not changed and the current identifier\nwhere we need to perform the completion.\n// Get declarations (autocomplete) for a location\nlet decls =\n    checkFileResults.GetDeclarationListInfo(\n        Some parseFileResults,\n        7,\n        inputLines.[6],\n        PartialLongName.Empty 23,\n        (fun () -\u0026gt; [])\n    )\n\n// Print the names of available items\nfor item in decls.Items do\n    printfn \u0026quot; - %s\u0026quot; item.NameInList\n\n\nNOTE: v is an alternative name for the old GetDeclarations. The old GetDeclarations was\ndeprecated because it accepted zero-based line numbers.  At some point it will be removed, and  GetDeclarationListInfo will be renamed back to GetDeclarations.\n\nWhen you run the code, you should get a list containing the usual string methods such as\nSubstring, ToUpper, ToLower etc. The fourth argument of GetDeclarations, here ([], \u0022msg\u0022),\nspecifies the context for the auto-completion. Here, we want a completion on a complete name\nmsg, but you could for example use ([\u0022System\u0022; \u0022Collections\u0022], \u0022Generic\u0022) to get a completion list\nfor a fully qualified namespace.\nGetting parameter information\nThe next common feature of editors is to provide information about overloads of a method. In our\nsample code, we use String.Concat which has a number of overloads. We can get the list using\nGetMethods operation. As previously, this takes the zero-indexed offset of the location that we are\ninterested in (here, right at the end of the String.Concat identifier) and we also need to provide\nthe identifier again (so that the compiler can provide up-to-date information when the source code\nchanges):\n// Get overloads of the String.Concat method\nlet methods =\n    checkFileResults.GetMethods(5, 27, inputLines.[4], Some [ \u0026quot;String\u0026quot;; \u0026quot;Concat\u0026quot; ])\n\n// Print concatenated parameter lists\nfor mi in methods.Methods do\n    [ for p in mi.Parameters do\n          for tt in p.Display do\n              yield tt.Text ]\n    |\u0026gt; String.concat \u0026quot;, \u0026quot;\n    |\u0026gt; printfn \u0026quot;%s(%s)\u0026quot; methods.MethodName\n\nThe code uses the Display property to get the annotation for each parameter. This returns information\nsuch as arg0: obj or params args: obj[] or str0: string, str1: string. We concatenate the parameters\nand print a type annotation with the method name.\nAsynchronous and immediate operations\nYou may have noticed that CheckFileInProject is an asynchronous operation.\nThis indicates that type checking of F# code can take some time.\nThe F# compiler performs the work in the background (automatically) and when\nwe call the CheckFileInProject method, it returns an asynchronous operation.\nThere is also the CheckFileInProjectIfReady method. This returns immediately if the\ntype checking operation can\u0027t be started immediately, e.g. if other files in the project\nare not yet type-checked. In this case, a background worker might choose to do other\nwork in the meantime, or give up on type checking the file until the FileTypeCheckStateIsDirty event\nis raised.\n\nThe fsharpbinding project has a more advanced\nexample of handling the background work where all requests are sent through an F# agent.\nThis may be more appropriate for implementing editor support.\n\nSummary\nThe CheckFileAnswer object contains other useful methods that were not covered in this tutorial. You\ncan use it to get location of a declaration for a given identifier, additional colorization information\n(the F# 3.1 colorizes computation builder identifiers \u0026amp; query operators) and others.\nUsing the FSharpChecker component in multi-project, incremental and interactive editing situations may involve\nknowledge of the FSharpChecker operations queue and the FSharpChecker caches.\nFinally, if you are implementing an editor support for an editor that cannot directly call the .NET API,\nyou can call many of the methods discussed here via a command line interface that is available in the\nFSharp.AutoComplete project.\n","headings":["Compiler Services: Editor services","Type checking sample source code","Using type checking results","Getting a tool tip","Getting auto-complete lists","Getting parameter information","Asynchronous and immediate operations","Summary"],"type":"content"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/fcs/untypedtree-apis.html","title":"Tutorial: AST APIs","content":"\nCompiler Services: APIs for the untyped AST\nThe ParsedInput module\nAs established in Tutorial: Expressions, the AST held in a ParsedInput value\ncan be traversed by a set of recursive functions. It can be tedious and error-prone to write these functions from scratch every time, though,\nso the ParsedInput module\nexposes a number of functions to make common operations easier.\nFor example:\n\n\nParsedInput.exists\n\nMay be used by tooling to determine whether the user\u0027s cursor is in a certain context, e.g., to determine whether to offer a certain tooling action.\n\n\n\nParsedInput.fold\n\nMay be used when writing analyzers to collect diagnostic information for an entire source file.\n\n\n\nParsedInput.foldWhile\n\nLike fold but supports stopping traversal early.\n\n\n\nParsedInput.tryNode\n\nMay be used by tooling to get the last (deepest) node under the user\u0027s cursor.\n\n\n\nParsedInput.tryPick\n\nMay be used by tooling to find the first (shallowest) matching node near the user\u0027s cursor.\n\n\n\nParsedInput.tryPickLast\n\nMay be used by tooling to find the last (deepest) matching node near the user\u0027s cursor.\n\n\n\nSyntaxVisitorBase \u0026amp; SyntaxTraversal.Traverse\nWhile the ParsedInput module functions are usually the simplest way to meet most needs,\nthere is also a SyntaxVisitorBase-based API that can\nprovide somewhat more fine-grained control over syntax traversal for a subset of use-cases at the expense of a bit more\nceremony and complexity.\nExamples\nLet\u0027s start by introducing a helper function for constructing an AST from source code so we can run through some real examples:\n#r \u0026quot;FSharp.Compiler.Service.dll\u0026quot;\nopen FSharp.Compiler.CodeAnalysis\nopen FSharp.Compiler.Text\nopen FSharp.Compiler.Syntax\n\nlet checker = FSharpChecker.Create()\n\n/// A helper for constructing a \u0060ParsedInput\u0060 from a code snippet.\nlet mkTree codeSample =\n    let parseFileResults =\n        checker.ParseFile(\n            \u0026quot;FileName.fs\u0026quot;,\n            SourceText.ofString codeSample,\n            { FSharpParsingOptions.Default with SourceFiles = [| \u0026quot;FileName.fs\u0026quot; |] }\n        )\n        |\u0026gt; Async.RunSynchronously\n\n    parseFileResults.ParseTree\n\nParsedInput.exists\nNow consider the following code sample:\nlet brokenTypeDefn = \u0026quot;\u0026quot;\u0026quot;\nmodule Lib\n\n// Whoops, we forgot the equals sign.\ntype T { A: int; B: int }  \n\u0026quot;\u0026quot;\u0026quot;\n\nLet\u0027s say we have a code fix for adding an equals sign to a type definition that\u0027s missing one\u2014like the one above.\nWe want to offer the fix when the user\u0027s cursor is inside of\u2014or just after\u2014the broken type definition.\nWe can determine this by using ParsedInput.exists and passing in the position of the user\u0027s cursor:\n// type T { A: int; B: int } \n// \u0026#183;\u0026#183;\u0026#183;\u0026#183;\u0026#183;\u0026#183;\u0026#183;\u0026#183;\u0026#183;\u0026#183;\u0026#183;\u2191\nlet posInMiddleOfTypeDefn = Position.mkPos 5 12\n\nGiven that cursor position, all we need to do is find a SynTypeDefn node:\nlet isPosInTypeDefn = // true.\n    (posInMiddleOfTypeDefn, mkTree brokenTypeDefn)\n    ||\u0026gt; ParsedInput.exists (fun _path node -\u0026gt;\n        match node with\n        | SyntaxNode.SynTypeDefn _ -\u0026gt; true\n        | _ -\u0026gt; false)\n\nIf the position passed into ParsedInput.exists is not contained in any node in the given AST,\nbut rather is below or to the right of all nodes, ParsedInput.exists will fall back to exploring the nearest branch above\nand/or to the left. This is useful because the user\u0027s cursor may lie beyond the range of all nodes.\n// type T { A: int; B: int }  \n// \u0026#183;\u0026#183;\u0026#183;\u0026#183;\u0026#183;\u0026#183;\u0026#183;\u0026#183;\u0026#183;\u0026#183;\u0026#183;\u0026#183;\u0026#183;\u0026#183;\u0026#183;\u0026#183;\u0026#183;\u0026#183;\u0026#183;\u0026#183;\u0026#183;\u0026#183;\u0026#183;\u0026#183;\u0026#183;\u0026#183;\u2191\nlet posAfterTypeDefn = Position.mkPos 5 28\n\nOur function still returns true if the cursor is past the end of the type definition node itself:\nlet isPosInTypeDefn\u0026#39; = // Still true.\n    (posAfterTypeDefn, mkTree brokenTypeDefn)\n    ||\u0026gt; ParsedInput.exists (fun _path node -\u0026gt;\n        match node with\n        | SyntaxNode.SynTypeDefn _ -\u0026gt; true\n        | _ -\u0026gt; false)\n\nParsedInput.fold\nParsedInput.fold can be useful when writing an analyzer to collect diagnostics from entire input files.\nTake this code that has unnecessary parentheses in both patterns and expressions:\nlet unnecessaryParentheses = \u0026quot;\u0026quot;\u0026quot;\nlet (x) = (id (3))\n\u0026quot;\u0026quot;\u0026quot;\n\nWe can gather the ranges of all unnecessary parentheses like this:\nopen System.Collections.Generic\n\nmodule HashSet =\n    let add item (set: HashSet\u0026lt;_\u0026gt;) =\n        ignore (set.Add item)\n        set\n\nlet unnecessaryParenthesesRanges =\n   (HashSet Range.comparer, mkTree unnecessaryParentheses) ||\u0026gt; ParsedInput.fold (fun ranges path node -\u0026gt;\n       match node with\n       | SyntaxNode.SynExpr(SynExpr.Paren(expr = inner; rightParenRange = Some _; range = range)) when\n           not (SynExpr.shouldBeParenthesizedInContext getLineStr path inner)\n           -\u0026gt;\n           ranges |\u0026gt; HashSet.add range\n\n       | SyntaxNode.SynPat(SynPat.Paren(inner, range)) when\n           not (SynPat.shouldBeParenthesizedInContext path inner)\n           -\u0026gt;\n           ranges |\u0026gt; HashSet.add range\n\n       | _ -\u0026gt;\n           ranges)\n\nParsedInput.tryNode\nSometimes, we might just want to get whatever node is directly at a given position\u2014for example, if the user\u0027s\ncursor is on an argument of a function being applied, we can find the node representing the argument and use its path\nto backtrack and find the function\u0027s name.\nlet functionApplication = \u0026quot;\u0026quot;\u0026quot;\nf x y  \n\u0026quot;\u0026quot;\u0026quot;\n\nIf we have our cursor on y:\n// f x y\n// \u0026#183;\u0026#183;\u0026#183;\u0026#183;\u0026#183;\u2191\nlet posOnY = Position.mkPos 2 5\n\nThe syntax node representing the function f technically contains the cursor\u0027s position,\nbut ParsedInput.tryNode will keep diving until it finds the deepest node containing the position.\nWe can thus get the node representing y and its ancestors (the path) like this:\nlet yAndPath = // Some (SynExpr (Ident y), [SynExpr (App \u2026); \u2026])\n    mkTree functionApplication\n    |\u0026gt; ParsedInput.tryNode posOnY\n\nNote that, unlike ParsedInput.exists, ParsedInput.tryPick, and ParsedInput.tryPickLast,\nParsedInput.tryNode does not fall back to the nearest branch above or to the left.\n// f x y\n// \u0026#183;\u0026#183;\u0026#183;\u0026#183;\u0026#183;\u0026#183;\u2191\nlet posAfterY = Position.mkPos 2 8\n\nIf we take the same code snippet but pass in a position after y,\nwe get no node:\nlet nope = // None.\n    mkTree functionApplication\n    |\u0026gt; ParsedInput.tryNode posAfterY\n\nParsedInput.tryPick\nNow imagine that we have a code fix for converting a record construction expression into an anonymous record construction\nexpression when there is no record type in scope whose fields match.\nlet recordExpr = \u0026quot;\u0026quot;\u0026quot;\nlet r = { A = 1; B = 2 }\n\u0026quot;\u0026quot;\u0026quot;\n\nWe can offer this fix when the user\u0027s cursor is inside of a record expression by\nusing ParsedInput.tryPick to return the surrounding record expression\u0027s range, if any.\n// let r = { A = 1; B = 2 }\n// \u0026#183;\u0026#183;\u0026#183;\u0026#183;\u0026#183;\u0026#183;\u0026#183;\u0026#183;\u0026#183;\u0026#183;\u0026#183;\u0026#183;\u0026#183;\u0026#183;\u0026#183;\u0026#183;\u0026#183;\u0026#183;\u0026#183;\u0026#183;\u0026#183;\u0026#183;\u2191\nlet posInRecordExpr = Position.mkPos 2 25\n\nHere, even though ParsedInput.tryPick will try to cleave to the given position by default,\nwe want to verify that the record expression node that we\u0027ve come across actually contains the position,\nsince, like ParsedInput.exists, ParsedInput.tryPick will also fall back to the nearest branch above and/or\nto the left if no node actually contains the position. In this case, we don\u0027t want to offer the code fix\nif the user\u0027s cursor isn\u0027t actually inside of the record expression.\nlet recordExprRange = // Some (2,8--2,24).\n    (posInRecordExpr, mkTree recordExpr)\n    ||\u0026gt; ParsedInput.tryPick (fun _path node -\u0026gt;\n        match node with\n        | SyntaxNode.SynExpr(SynExpr.Record(range = range)) when\n            Range.rangeContainsPos range posInRecordExpr\n            -\u0026gt; Some range\n        | _ -\u0026gt; None)\n\nWe might also sometimes want to make use of the path parameter. Take this simple function definition:\nlet myFunction = \u0026quot;\u0026quot;\u0026quot;\nmodule Lib\n\nlet myFunction paramOne paramTwo =\n    ()\n\u0026quot;\u0026quot;\u0026quot;\n\nImagine we want to grab the myFunction name from the headPat in the SynBinding.\nWe can write a function to match the node we\u0027re looking for\u2014and not match anything we\u0027re not looking for (like the argument patterns)\u2014by taking its path into account:\nlet myFunctionId = // Some \u0026quot;myFunction\u0026quot;.\n    (Position.pos0, mkTree myFunction)\n    ||\u0026gt; ParsedInput.tryPick (fun path node -\u0026gt;\n        // Match on the node and the path (the node\u0026#39;s ancestors) to see whether:\n        //   1. The node is a pattern.\n        //   2. The pattern is a long identifier pattern.\n        //   3. The pattern\u0026#39;s parent node (the head of the path) is a binding.\n        match node, path with\n        | SyntaxNode.SynPat(SynPat.LongIdent(longDotId = SynLongIdent(id = [ ident ]))),\n          SyntaxNode.SynBinding _ :: _ -\u0026gt;\n            // We have found what we\u0026#39;re looking for.\n            Some ident.idText\n        | _ -\u0026gt;\n            // If the node or its context don\u0026#39;t match,\n            // we continue.\n            None)\n\nInstead of traversing manually from ParsedInput to SynModuleOrNamespace to SynModuleDecl.Let to SynBinding to SynPat, we leverage the default navigation that happens in ParsedInput.tryPick.\nParsedInput.tryPick will short-circuit once we have indicated that we have found what we\u0027re looking for by returning Some value.\nOur code sample of course only had one let-binding and thus we didn\u0027t need to specify any further logic to differentiate between bindings.\nLet\u0027s consider a second example involving multiple let-bindings:\nlet multipleLetsInModule = \u0026quot;\u0026quot;\u0026quot;\nmodule X\n\nlet a = 0\nlet b = 1\nlet c = 2\n\u0026quot;\u0026quot;\u0026quot;\n\nIn this case, we know the user\u0027s cursor inside an IDE is placed after c, and we are interested in the body expression of the last let-binding.\n// \u2026\n// let c = 2\n// \u0026#183;\u0026#183;\u0026#183;\u0026#183;\u0026#183;\u2191\nlet posInLastLet = Position.mkPos 6 5\n\nThanks to the cursor position we passed in, we do not need to write any code to exclude the expressions of the sibling let-bindings.\nParsedInput.tryPick will check whether the current position is inside any given syntax node before drilling deeper.\nlet bodyOfLetContainingPos = // Some (Const (Int32 2, (6,8--6,9))).\n    (posInLastLet, mkTree multipleLetsInModule)\n    ||\u0026gt; ParsedInput.tryPick (fun _path node -\u0026gt;\n        match node with\n        | SyntaxNode.SynBinding(SynBinding(expr = e)) -\u0026gt; Some e\n        | _ -\u0026gt; None)\n\nAs noted above, ParsedInput.tryPick will short-circuit at the first matching node.\nParsedInput.tryPickLast can be used to get the last matching node that contains a given position.\nTake this example of multiple nested modules:\nlet nestedModules = \u0026quot;\u0026quot;\u0026quot;\nmodule M\n\nmodule N =\n    module O =\n        module P = begin end\n\u0026quot;\u0026quot;\u0026quot;\n\nBy using ParsedInput.tryPick, we\u0027ll get the name of the outermost nested module even if we pass in a position inside the innermost,\nsince the innermost is contained within the outermost.\nThis position is inside module P, which is nested inside of module O, which is nested inside of module N,\nwhich is nested inside of top-level module M:\n// module M\n//\n// module N =\n//     module O =\n//         module P = begin end\n// \u0026#183;\u0026#183;\u0026#183;\u0026#183;\u0026#183;\u0026#183;\u0026#183;\u0026#183;\u0026#183;\u0026#183;\u0026#183;\u0026#183;\u0026#183;\u0026#183;\u0026#183;\u0026#183;\u0026#183;\u0026#183;\u0026#183;\u0026#183;\u0026#183;\u0026#183;\u0026#183;\u0026#183;\u0026#183;\u0026#183;\u0026#183;\u2191\nlet posInsideOfInnermostNestedModule = Position.mkPos 6 28\n\nParsedInput.tryPick short-circuits on the first match, and since module N is the first\nnested module whose range contains position (6, 28), that\u0027s the result we get.\nlet outermostNestedModule = // Some [\u0026quot;N\u0026quot;].\n    (posInsideOfInnermostNestedModule, mkTree nestedModules)\n    ||\u0026gt; ParsedInput.tryPick (fun _path node -\u0026gt;\n        match node with\n        | SyntaxNode.SynModule(SynModuleDecl.NestedModule(moduleInfo = SynComponentInfo(longId = longId))) -\u0026gt;\n            Some [for ident in longId -\u0026gt; ident.idText]\n        | _ -\u0026gt; None)\n\nParsedInput.tryPickLast\nIf however we use the same code snippet and pass the same position into ParsedInput.tryPickLast,\nwe can get the name of the last (deepest or innermost) matching node:\nlet innermostNestedModule = // Some [\u0026quot;P\u0026quot;].\n    (posInsideOfInnermostNestedModule, mkTree nestedModules)\n    ||\u0026gt; ParsedInput.tryPickLast (fun _path node -\u0026gt;\n        match node with\n        | SyntaxNode.SynModule(SynModuleDecl.NestedModule(moduleInfo = SynComponentInfo(longId = longId))) -\u0026gt;\n            Some [for ident in longId -\u0026gt; ident.idText]\n        | _ -\u0026gt; None)\n\nIf we want the next-to-innermost nested module, we can do likewise but make use of the path parameter:\nlet nextToInnermostNestedModule = // Some [\u0026quot;O\u0026quot;].\n    (posInsideOfInnermostNestedModule, mkTree nestedModules)\n    ||\u0026gt; ParsedInput.tryPickLast (fun path node -\u0026gt;\n        match node, path with\n        | SyntaxNode.SynModule(SynModuleDecl.NestedModule _),\n          SyntaxNode.SynModule(SynModuleDecl.NestedModule(moduleInfo = SynComponentInfo(longId = longId))) :: _ -\u0026gt;\n            Some [for ident in longId -\u0026gt; ident.idText]\n        | _ -\u0026gt; None)\n\nSyntaxTraversal.Traverse\nConsider again the following code sample:\nlet codeSample = \u0026quot;\u0026quot;\u0026quot;\nmodule Lib\n\nlet myFunction paramOne paramTwo =\n    ()\n\u0026quot;\u0026quot;\u0026quot;\n\nImagine we wish to grab the myFunction name from the headPat in the SynBinding.\nWe can create a visitor to traverse the tree and find the function name:\nlet visitor =\n    { new SyntaxVisitorBase\u0026lt;string\u0026gt;() with\n        override this.VisitPat(path, defaultTraverse, synPat) =\n            // First check if the pattern is what we are looking for.\n            match synPat with\n            | SynPat.LongIdent(longDotId = SynLongIdent(id = [ ident ])) -\u0026gt;\n                // Next we can check if the current path of visited nodes, matches our expectations.\n                // The path will contain all the ancestors of the current node.\n                match path with\n                // The parent node of \u0060synPat\u0060 should be a \u0060SynBinding\u0060.\n                | SyntaxNode.SynBinding _ :: _ -\u0026gt;\n                    // We return a \u0060Some\u0060 option to indicate we found what we are looking for.\n                    Some ident.idText\n                // If the parent is something else, we can skip it here.\n                | _ -\u0026gt; None\n            | _ -\u0026gt; None }\n\nlet result = SyntaxTraversal.Traverse(Position.pos0, mkTree codeSample, visitor) // Some \u0026quot;myFunction\u0026quot;\n\nInstead of traversing manually from ParsedInput to SynModuleOrNamespace to SynModuleDecl.Let to SynBinding to SynPat, we leverage the default navigation that happens in SyntaxTraversal.Traverse.\nA SyntaxVisitorBase will shortcut all other code paths once a single VisitXYZ override has found anything.\nOur code sample of course only had one let binding and thus we didn\u0027t need to specify any further logic whether to differentiate between multiple bindings.\nSyntaxTraversal.Traverse: using position\nLet\u0027s now consider a second example where we know the user\u0027s cursor inside an IDE is placed after c and we are interested in the body expression of the let binding.\nlet secondCodeSample = \u0026quot;\u0026quot;\u0026quot;\nmodule X\n\nlet a = 0\nlet b = 1\nlet c = 2\n\u0026quot;\u0026quot;\u0026quot;\n\nlet secondVisitor =\n    { new SyntaxVisitorBase\u0026lt;SynExpr\u0026gt;() with\n        override this.VisitBinding(path, defaultTraverse, binding) =\n            match binding with\n            | SynBinding(expr = e) -\u0026gt; Some e }\n\nlet cursorPos = Position.mkPos 6 5\n\nlet secondResult =\n    SyntaxTraversal.Traverse(cursorPos, mkTree secondCodeSample, secondVisitor) // Some (Const (Int32 2, (6,8--6,9)))\n\nDue to our passed cursor position, we did not need to write any code to exclude the expressions of the other let bindings.\nSyntaxTraversal.Traverse will check whether the current position is inside any syntax node before drilling deeper.\nSyntaxTraversal.Traverse: using defaultTraverse\nLastly, some VisitXYZ overrides can contain a defaultTraverse. This helper allows you to continue the default traversal when you currently hit a node that is not of interest.\nConsider 1 \u002B 2 \u002B 3 \u002B 4, this will be reflected in a nested infix application expression.\nIf the cursor is at the end of the entire expression, we can grab the value of 4 using the following visitor:\nlet thirdCodeSample = \u0026quot;let sum = 1 \u002B 2 \u002B 3 \u002B 4\u0026quot;\n\n(*\nAST will look like:\n\nLet\n (false,\n  [SynBinding\n     (None, Normal, false, false, [],\n      PreXmlDoc ((1,0), Fantomas.FCS.Xml.XmlDocCollector),\n      SynValData\n        (None, SynValInfo ([], SynArgInfo ([], false, None)), None,\n         None),\n      Named (SynIdent (sum, None), false, None, (1,4--1,7)), None,\n      App\n        (NonAtomic, false,\n         App\n           (NonAtomic, true,\n            LongIdent\n              (false,\n               SynLongIdent\n                 ([op_Addition], [], [Some (OriginalNotation \u0026quot;\u002B\u0026quot;)]),\n               None, (1,20--1,21)),\n            App\n              (NonAtomic, false,\n               App\n                 (NonAtomic, true,\n                  LongIdent\n                    (false,\n                     SynLongIdent\n                       ([op_Addition], [],\n                        [Some (OriginalNotation \u0026quot;\u002B\u0026quot;)]), None,\n                     (1,16--1,17)),\n                  App\n                    (NonAtomic, false,\n                     App\n                       (NonAtomic, true,\n                        LongIdent\n                          (false,\n                           SynLongIdent\n                             ([op_Addition], [],\n                              [Some (OriginalNotation \u0026quot;\u002B\u0026quot;)]), None,\n                           (1,12--1,13)),\n                        Const (Int32 1, (1,10--1,11)), (1,10--1,13)),\n                     Const (Int32 2, (1,14--1,15)), (1,10--1,15)),\n                  (1,10--1,17)), Const (Int32 3, (1,18--1,19)),\n               (1,10--1,19)), (1,10--1,21)),\n         Const (Int32 4, (1,22--1,23)), (1,10--1,23)), (1,4--1,7),\n      Yes (1,0--1,23), { LeadingKeyword = Let (1,0--1,3)\n                         InlineKeyword = None\n                         EqualsRange = Some (1,8--1,9) })\n*)\n\nlet thirdCursorPos = Position.mkPos 1 22\n\nlet thirdVisitor =\n    { new SyntaxVisitorBase\u0026lt;int\u0026gt;() with\n        override this.VisitExpr(path, traverseSynExpr, defaultTraverse, synExpr) =\n            match synExpr with\n            | SynExpr.Const (constant = SynConst.Int32 v) -\u0026gt; Some v\n            // We do want to continue to traverse when nodes like \u0060SynExpr.App\u0060 are found.\n            | otherExpr -\u0026gt; defaultTraverse otherExpr }\n\nlet thirdResult =\n    SyntaxTraversal.Traverse(cursorPos, mkTree thirdCodeSample, thirdVisitor) // Some 4\n\ndefaultTraverse is especially useful when you do not know upfront what syntax tree you will be walking.\nThis is a common case when dealing with IDE tooling. You won\u0027t know what actual code the end-user is currently processing.\nNote: SyntaxVisitorBase is designed to find a single value inside a tree!\nThis is not an ideal solution when you are interested in all nodes of certain shape.\nIt will always verify if the given cursor position is still matching the range of the node.\nAs a fallback the first branch will be explored when you pass Position.pos0.\nBy design, it is meant to find a single result.\n","headings":["Compiler Services: APIs for the untyped AST","The ParsedInput module","SyntaxVisitorBase \u0026amp; SyntaxTraversal.Traverse","Examples","ParsedInput.exists","ParsedInput.fold","ParsedInput.tryNode","ParsedInput.tryPick","ParsedInput.tryPickLast","SyntaxTraversal.Traverse","SyntaxTraversal.Traverse: using position","SyntaxTraversal.Traverse: using defaultTraverse"],"type":"content"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/fcs/typedtree.html","title":"Tutorial: Expressions","content":"\nCompiler Services: Processing typed expression tree\nThis tutorial demonstrates how to get the checked, typed expressions tree (TAST)\nfor F# code and how to walk over the tree.\nThis can be used for creating tools such as source code analyzers and refactoring tools.\nYou can also combine the information with the API available\nfrom symbols.\n\nNOTE: The FSharp.Compiler.Service API is subject to change when later versions of the nuget package are published\n\nGetting checked expressions\nTo access the type-checked, resolved expressions, you need to create an instance of InteractiveChecker.\nTo use the interactive checker, reference FSharp.Compiler.Service.dll and open the\nrelevant namespaces:\n#r \u0026quot;FSharp.Compiler.Service.dll\u0026quot;\nopen System\nopen System.IO\nopen FSharp.Compiler.CodeAnalysis\nopen FSharp.Compiler.EditorServices\nopen FSharp.Compiler.Symbols\nopen FSharp.Compiler.Text\n\nChecking code\nWe first parse and check some code as in the symbols tutorial.\nOne difference is that we set keepAssemblyContents to true.\n// Create an interactive checker instance \nlet checker = FSharpChecker.Create(keepAssemblyContents=true)\n\nlet parseAndCheckSingleFile (input) = \n    let file = Path.ChangeExtension(System.IO.Path.GetTempFileName(), \u0026quot;fsx\u0026quot;)  \n    File.WriteAllText(file, input)\n    // Get context representing a stand-alone (script) file\n    let projOptions, _errors = \n        checker.GetProjectOptionsFromScript(file, SourceText.ofString input, assumeDotNetFramework=false)\n        |\u0026gt; Async.RunSynchronously\n\n    checker.ParseAndCheckProject(projOptions) \n    |\u0026gt; Async.RunSynchronously\n\nGetting the expressions\nAfter type checking a file, you can access the declarations and contents of the assembly, including expressions:\nlet input2 = \n      \u0026quot;\u0026quot;\u0026quot;\nmodule MyLibrary \n\nopen System\n\nlet foo(x, y) = \n    let msg = String.Concat(\u0026quot;Hello\u0026quot;, \u0026quot; \u0026quot;, \u0026quot;world\u0026quot;)\n    if msg.Length \u0026gt; 10 then \n        10 \n    else \n        20\n\ntype MyClass() = \n    member x.MyMethod() = 1\n      \u0026quot;\u0026quot;\u0026quot;\nlet checkProjectResults = \n    parseAndCheckSingleFile(input2)\n\ncheckProjectResults.Diagnostics // should be empty\n\nChecked assemblies are made up of a series of checked implementation files.  The \u0022file\u0022 granularity\nmatters in F# because initialization actions are triggered at the granularity of files.\nIn this case there is only one implementation file in the project:\nlet checkedFile = checkProjectResults.AssemblyContents.ImplementationFiles.[0]\n\nChecked assemblies are made up of a series of checked implementation files.  The \u0022file\u0022 granularity\nmatters in F# because initialization actions are triggered at the granularity of files.\nIn this case there is only one implementation file in the project:\nlet rec printDecl prefix d = \n    match d with \n    | FSharpImplementationFileDeclaration.Entity (e, subDecls) -\u0026gt; \n        printfn \u0026quot;%sEntity %s was declared and contains %d sub-declarations\u0026quot; prefix e.CompiledName subDecls.Length\n        for subDecl in subDecls do \n            printDecl (prefix\u002B\u0026quot;    \u0026quot;) subDecl\n    | FSharpImplementationFileDeclaration.MemberOrFunctionOrValue(v, vs, e) -\u0026gt; \n        printfn \u0026quot;%sMember or value %s was declared\u0026quot; prefix  v.CompiledName\n    | FSharpImplementationFileDeclaration.InitAction(e) -\u0026gt; \n        printfn \u0026quot;%sA top-level expression was declared\u0026quot; prefix \n\n\nfor d in checkedFile.Declarations do \n   printDecl \u0026quot;\u0026quot; d\n\n// Entity MyLibrary was declared and contains 4 sub-declarations\n//     Member or value foo was declared\n//     Entity MyClass was declared and contains 0 sub-declarations\n//     Member or value .ctor was declared\n//     Member or value MyMethod was declared\n\nAs can be seen, the only declaration in the implementation file is that of the module MyLibrary, which\ncontains fours sub-declarations.\n\nAs an aside, one peculiarity here is that the member declarations (e.g. the \u0022MyMethod\u0022 member) are returned as part of the containing module entity, not as part of their class.\nNote that the class constructor is returned as a separate declaration. The class type definition has been \u0022split\u0022 into a constructor and the other declarations.\n\nlet myLibraryEntity, myLibraryDecls =    \n   match checkedFile.Declarations.[0] with \n   | FSharpImplementationFileDeclaration.Entity (e, subDecls) -\u0026gt; (e, subDecls)\n   | _ -\u0026gt; failwith \u0026quot;unexpected\u0026quot;\n\nWhat about the expressions, for example the body of function \u0022foo\u0022? Let\u0027s find it:\nlet (fooSymbol, fooArgs, fooExpression) = \n    match myLibraryDecls.[0] with \n    | FSharpImplementationFileDeclaration.MemberOrFunctionOrValue(v, vs, e) -\u0026gt; (v, vs, e)\n    | _ -\u0026gt; failwith \u0026quot;unexpected\u0026quot;\n\nHere \u0027fooSymbol\u0027 is a symbol associated with the declaration of \u0027foo\u0027,\n\u0027fooArgs\u0027 represents the formal arguments to the \u0027foo\u0027 function, and \u0027fooExpression\u0027\nis an expression for the implementation of the \u0027foo\u0027 function.\nOnce you have an expression, you can work with it much like an F# quotation.  For example,\nyou can find its declaration range and its type:\nfooExpression.Type  // shows that the return type of the body expression is \u0026#39;int\u0026#39;\nfooExpression.Range  // shows the declaration range of the expression implementing \u0026#39;foo\u0026#39;\n\nWalking over expressions\nExpressions are analyzed using active patterns, much like F# quotations.\nHere is a generic expression visitor:\nlet rec visitExpr f (e:FSharpExpr) = \n    f e\n    match e with \n    | FSharpExprPatterns.AddressOf(lvalueExpr) -\u0026gt; \n        visitExpr f lvalueExpr\n    | FSharpExprPatterns.AddressSet(lvalueExpr, rvalueExpr) -\u0026gt; \n        visitExpr f lvalueExpr; visitExpr f rvalueExpr\n    | FSharpExprPatterns.Application(funcExpr, typeArgs, argExprs) -\u0026gt; \n        visitExpr f funcExpr; visitExprs f argExprs\n    | FSharpExprPatterns.Call(objExprOpt, memberOrFunc, typeArgs1, typeArgs2, argExprs) -\u0026gt; \n        visitObjArg f objExprOpt; visitExprs f argExprs\n    | FSharpExprPatterns.Coerce(targetType, inpExpr) -\u0026gt; \n        visitExpr f inpExpr\n    | FSharpExprPatterns.FastIntegerForLoop(startExpr, limitExpr, consumeExpr, isUp, _, _) -\u0026gt; \n        visitExpr f startExpr; visitExpr f limitExpr; visitExpr f consumeExpr\n    | FSharpExprPatterns.ILAsm(asmCode, typeArgs, argExprs) -\u0026gt; \n        visitExprs f argExprs\n    | FSharpExprPatterns.ILFieldGet (objExprOpt, fieldType, fieldName) -\u0026gt; \n        visitObjArg f objExprOpt\n    | FSharpExprPatterns.ILFieldSet (objExprOpt, fieldType, fieldName, valueExpr) -\u0026gt; \n        visitObjArg f objExprOpt\n    | FSharpExprPatterns.IfThenElse (guardExpr, thenExpr, elseExpr) -\u0026gt; \n        visitExpr f guardExpr; visitExpr f thenExpr; visitExpr f elseExpr\n    | FSharpExprPatterns.Lambda(lambdaVar, bodyExpr) -\u0026gt; \n        visitExpr f bodyExpr\n    | FSharpExprPatterns.Let((bindingVar, bindingExpr, dbg), bodyExpr) -\u0026gt; \n        visitExpr f bindingExpr; visitExpr f bodyExpr\n    | FSharpExprPatterns.LetRec(recursiveBindings, bodyExpr) -\u0026gt;\n        for _,bindingExpr,_ in recursiveBindings do visitExpr f bindingExpr\n        visitExpr f bodyExpr\n    | FSharpExprPatterns.NewArray(arrayType, argExprs) -\u0026gt; \n        visitExprs f argExprs\n    | FSharpExprPatterns.NewDelegate(delegateType, delegateBodyExpr) -\u0026gt; \n        visitExpr f delegateBodyExpr\n    | FSharpExprPatterns.NewObject(objType, typeArgs, argExprs) -\u0026gt; \n        visitExprs f argExprs\n    | FSharpExprPatterns.NewRecord(recordType, argExprs) -\u0026gt;  \n        visitExprs f argExprs\n    | FSharpExprPatterns.NewAnonRecord(recordType, argExprs) -\u0026gt;  \n        visitExprs f argExprs\n    | FSharpExprPatterns.NewTuple(tupleType, argExprs) -\u0026gt; \n        visitExprs f argExprs\n    | FSharpExprPatterns.NewUnionCase(unionType, unionCase, argExprs) -\u0026gt; \n        visitExprs f argExprs\n    | FSharpExprPatterns.Quote(quotedExpr) -\u0026gt; \n        visitExpr f quotedExpr\n    | FSharpExprPatterns.FSharpFieldGet(objExprOpt, recordOrClassType, fieldInfo) -\u0026gt; \n        visitObjArg f objExprOpt\n    | FSharpExprPatterns.AnonRecordGet(objExpr, recordOrClassType, fieldInfo) -\u0026gt; \n        visitExpr f objExpr\n    | FSharpExprPatterns.FSharpFieldSet(objExprOpt, recordOrClassType, fieldInfo, argExpr) -\u0026gt; \n        visitObjArg f objExprOpt; visitExpr f argExpr\n    | FSharpExprPatterns.Sequential(firstExpr, secondExpr) -\u0026gt; \n        visitExpr f firstExpr; visitExpr f secondExpr\n    | FSharpExprPatterns.TryFinally(bodyExpr, finalizeExpr, dbgTry, dbgFinally) -\u0026gt; \n        visitExpr f bodyExpr; visitExpr f finalizeExpr\n    | FSharpExprPatterns.TryWith(bodyExpr, _, _, catchVar, catchExpr, dbgTry, dbgWith) -\u0026gt; \n        visitExpr f bodyExpr; visitExpr f catchExpr\n    | FSharpExprPatterns.TupleGet(tupleType, tupleElemIndex, tupleExpr) -\u0026gt; \n        visitExpr f tupleExpr\n    | FSharpExprPatterns.DecisionTree(decisionExpr, decisionTargets) -\u0026gt; \n        visitExpr f decisionExpr; List.iter (snd \u0026gt;\u0026gt; visitExpr f) decisionTargets\n    | FSharpExprPatterns.DecisionTreeSuccess (decisionTargetIdx, decisionTargetExprs) -\u0026gt; \n        visitExprs f decisionTargetExprs\n    | FSharpExprPatterns.TypeLambda(genericParam, bodyExpr) -\u0026gt; \n        visitExpr f bodyExpr\n    | FSharpExprPatterns.TypeTest(ty, inpExpr) -\u0026gt; \n        visitExpr f inpExpr\n    | FSharpExprPatterns.UnionCaseSet(unionExpr, unionType, unionCase, unionCaseField, valueExpr) -\u0026gt; \n        visitExpr f unionExpr; visitExpr f valueExpr\n    | FSharpExprPatterns.UnionCaseGet(unionExpr, unionType, unionCase, unionCaseField) -\u0026gt; \n        visitExpr f unionExpr\n    | FSharpExprPatterns.UnionCaseTest(unionExpr, unionType, unionCase) -\u0026gt; \n        visitExpr f unionExpr\n    | FSharpExprPatterns.UnionCaseTag(unionExpr, unionType) -\u0026gt; \n        visitExpr f unionExpr\n    | FSharpExprPatterns.ObjectExpr(objType, baseCallExpr, overrides, interfaceImplementations) -\u0026gt; \n        visitExpr f baseCallExpr\n        List.iter (visitObjMember f) overrides\n        List.iter (snd \u0026gt;\u0026gt; List.iter (visitObjMember f)) interfaceImplementations\n    | FSharpExprPatterns.TraitCall(sourceTypes, traitName, typeArgs, typeInstantiation, argTypes, argExprs) -\u0026gt; \n        visitExprs f argExprs\n    | FSharpExprPatterns.ValueSet(valToSet, valueExpr) -\u0026gt; \n        visitExpr f valueExpr\n    | FSharpExprPatterns.WhileLoop(guardExpr, bodyExpr, dbg) -\u0026gt; \n        visitExpr f guardExpr; visitExpr f bodyExpr\n    | FSharpExprPatterns.BaseValue baseType -\u0026gt; ()\n    | FSharpExprPatterns.DefaultValue defaultType -\u0026gt; ()\n    | FSharpExprPatterns.ThisValue thisType -\u0026gt; ()\n    | FSharpExprPatterns.Const(constValueObj, constType) -\u0026gt; ()\n    | FSharpExprPatterns.Value(valueToGet) -\u0026gt; ()\n    | _ -\u0026gt; failwith (sprintf \u0026quot;unrecognized %\u002BA\u0026quot; e)\n\nand visitExprs f exprs = \n    List.iter (visitExpr f) exprs\n\nand visitObjArg f objOpt = \n    Option.iter (visitExpr f) objOpt\n\nand visitObjMember f memb = \n    visitExpr f memb.Body\n\nLet\u0027s use this expression walker:\nfooExpression |\u0026gt; visitExpr (fun e -\u0026gt; printfn \u0026quot;Visiting %A\u0026quot; e)\n\n// Prints:\n//\n// Visiting Let...\n// Visiting Call...\n// Visiting Const (\u0026quot;Hello\u0026quot;, ...)\n// Visiting Const (\u0026quot; \u0026quot;, ...)\n// Visiting Const (\u0026quot;world\u0026quot;, ...)\n// Visiting IfThenElse...\n// Visiting Call...\n// Visiting Call...\n// Visiting Value ...\n// Visiting Const ...\n// Visiting Const ...\n// Visiting Const ...\n\nNote that\n\nThe visitExpr function is recursive (for nested expressions).\nPattern matching is removed from the tree, into a form called \u0027decision trees\u0027.\n\nSummary\nIn this tutorial, we looked at the basics of working with checked declarations and expressions.\nIn practice, it is also useful to combine the information here\nwith some information you can obtain from the symbols\ntutorial.\n","headings":["Compiler Services: Processing typed expression tree","Getting checked expressions","Checking code","Getting the expressions","Walking over expressions","Summary"],"type":"content"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/fcs/tokenizer.html","title":"Tutorial: Tokenizing","content":"\nCompiler Services: Using the F# tokenizer\nThis tutorial demonstrates how to call the F# language tokenizer. Given F#\nsource code, the tokenizer generates a list of source code lines that contain\ninformation about tokens on each line. For each token, you can get the type\nof the token, exact location as well as color kind of the token (keyword,\nidentifier, number, operator, etc.).\n\nNOTE: The FSharp.Compiler.Service API is subject to change when later versions of the nuget package are published\n\nCreating the tokenizer\nTo use the tokenizer, reference FSharp.Compiler.Service.dll and open the\nFSharp.Compiler.Tokenization namespace:\n#r \u0026quot;FSharp.Compiler.Service.dll\u0026quot;\nopen FSharp.Compiler.Tokenization\n\nNow you can create an instance of FSharpSourceTokenizer. The class takes two\narguments - the first is the list of defined symbols and the second is the\nfile name of the source code. The defined symbols are required because the\ntokenizer handles #if directives. The file name is required only to specify\nlocations of the source code (and it does not have to exist):\nlet sourceTok = FSharpSourceTokenizer([], Some \u0026quot;C:\\\\test.fsx\u0026quot;, Some \u0026quot;PREVIEW\u0026quot;, None)\n\nUsing the sourceTok object, we can now (repeatedly) tokenize lines of\nF# source code.\nTokenizing F# code\nThe tokenizer operates on individual lines rather than on the entire source\nfile. After getting a token, the tokenizer also returns new state (as int64 value).\nThis can be used to tokenize F# code more efficiently. When source code changes,\nyou do not need to re-tokenize the entire file - only the parts that have changed.\nTokenizing single line\nTo tokenize a single line, we create a FSharpLineTokenizer by calling CreateLineTokenizer\non the FSharpSourceTokenizer object that we created earlier:\nlet tokenizer = sourceTok.CreateLineTokenizer(\u0026quot;let answer=42\u0026quot;)\n\nNow, we can write a simple recursive function that calls ScanToken on the tokenizer\nuntil it returns None (indicating the end of line). When the function succeeds, it\nreturns an FSharpTokenInfo object with all the interesting details:\n/// Tokenize a single line of F# code\nlet rec tokenizeLine (tokenizer:FSharpLineTokenizer) state =\n  match tokenizer.ScanToken(state) with\n  | Some tok, state -\u0026gt;\n      // Print token name\n      printf \u0026quot;%s \u0026quot; tok.TokenName\n      // Tokenize the rest, in the new state\n      tokenizeLine tokenizer state\n  | None, state -\u0026gt; state\n\nThe function returns the new state, which is needed if you need to tokenize multiple lines\nand an earlier line ends with a multi-line comment. As an initial state, we can use 0L:\ntokenizeLine tokenizer FSharpTokenizerLexState.Initial\n\nThe result is a sequence of tokens with names LET, WHITESPACE, IDENT, EQUALS and INT32.\nThere is a number of interesting properties on FSharpTokenInfo including:\n\n\nCharClass and ColorClass return information about the token category that\ncan be used for colorizing F# code.\n\nLeftColumn and RightColumn return the location of the token inside the line.\nTokenName is the name of the token (as defined in the F# lexer)\n\nNote that the tokenizer is stateful - if you want to tokenize single line multiple times,\nyou need to call CreateLineTokenizer again.\nTokenizing sample code\nTo run the tokenizer on a longer sample code or an entire file, you need to read the\nsample input as a collection of string values:\nlet lines = \u0026quot;\u0026quot;\u0026quot;\n  // Hello world\n  let hello() =\n     printfn \u0026quot;Hello world!\u0026quot; \u0026quot;\u0026quot;\u0026quot;.Split(\u0026#39;\\r\u0026#39;,\u0026#39;\\n\u0026#39;)\n\nTo tokenize multi-line input, we again need a recursive function that keeps the current\nstate. The following function takes the lines as a list of strings (together with line number\nand the current state). We create a new tokenizer for each line and call tokenizeLine\nusing the state from the end of the previous line:\n/// Print token names for multiple lines of code\nlet rec tokenizeLines state count lines = \n  match lines with\n  | line::lines -\u0026gt;\n      // Create tokenizer \u0026amp; tokenize single line\n      printfn \u0026quot;\\nLine %d\u0026quot; count\n      let tokenizer = sourceTok.CreateLineTokenizer(line)\n      let state = tokenizeLine tokenizer state\n      // Tokenize the rest using new state\n      tokenizeLines state (count\u002B1) lines\n  | [] -\u0026gt; ()\n\nThe function simply calls tokenizeLine (defined earlier) to print the names of all\nthe tokens on each line. We can call it on the previous input with 0L as the initial\nstate and 1 as the number of the first line:\nlines\n|\u0026gt; List.ofSeq\n|\u0026gt; tokenizeLines FSharpTokenizerLexState.Initial 1\n\nIgnoring some unimportant details (like whitespace at the beginning of each line and\nthe first line which is just whitespace), the code generates the following output:\nLine 1\n  LINE_COMMENT LINE_COMMENT (...) LINE_COMMENT \nLine 2\n  LET WHITESPACE IDENT LPAREN RPAREN WHITESPACE EQUALS \nLine 3\n  IDENT WHITESPACE STRING_TEXT (...) STRING_TEXT STRING \n\nIt is worth noting that the tokenizer yields multiple LINE_COMMENT tokens and multiple\nSTRING_TEXT tokens for each single comment or string (roughly, one for each word), so\nif you want to get the entire text of a comment/string, you need to concatenate the\ntokens.\n","headings":["Compiler Services: Using the F# tokenizer","Creating the tokenizer","Tokenizing F# code","Tokenizing single line","Tokenizing sample code"],"type":"content"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/fcs/react.html","title":"Incrementality","content":"\nSnapshots, incrementality and reacting to changes\nFCS is an incremental execution engine. The aim is to make it Roslyn-like. We\u0027re not quite there.\nThere are two dimensions of incrementality:\n\nThe inputs change, e.g. the source files are edited or a referenced assembly changes, appears or disappears\nThe results of analysis on the inputs (e.g. a parse tree) are further enriched with information (e.g. symbol uses are requested) and this information is held, i.e. not re-computed, perhaps by a returned object.\n\nThe logical results of all \u0022Check\u0022 routines (ParseAndCheckFileInProject, GetBackgroundCheckResultsForFileInProject,\nTryGetRecentTypeCheckResultsForFile, ParseAndCheckProject) depend on results reported by the file system,\nespecially the IFileSystem implementation described in the tutorial on project wide analysis.\nLogically speaking, these results would be different if file system changes occur.  For example,\nreferenced DLLs may change on disk, or referenced files may change.\nThere is work-in-progress to make all parsing and checking deliver results based on immutable snapshots of inputs.\n","headings":["Snapshots, incrementality and reacting to changes"],"type":"content"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/fcs/caches.html","title":"FSharpChecker caches","content":"\nCompiler Services: Notes on the FSharpChecker caches\nThis is a design note on the FSharpChecker component and its caches.  See also the notes on the FSharpChecker operations queue\nEach FSharpChecker object maintains a set of caches.  These are\n\n\nscriptClosureCache - an MRU cache of default size projectCacheSize that caches the\ncomputation of GetProjectOptionsFromScript. This computation can be lengthy as it can involve processing the transitive closure\nof all #load directives, which in turn can mean parsing an unbounded number of script files.\n\n\nincrementalBuildersCache - an MRU cache of projects where a handle is being kept to their incremental checking state,\nof default size projectCacheSize (= 3 unless explicitly set as a parameter).\nThe \u0022current background project\u0022 (see the FSharpChecker operations queue)\nwill be one of these projects.  When analyzing large collections of projects, this cache usually occupies by far the most memory.\nIncreasing the size of this cache can dramatically decrease incremental computation of project-wide checking, or of checking\nindividual files within a project, but can very greatly increase memory usage.\n\nbraceMatchCache - an MRU cache of size braceMatchCacheSize (default = 5) keeping the results of calls to MatchBraces, keyed by filename, source and project options.\n\nparseFileCache - an MRU cache of size parseFileCacheSize (default = 2) keeping the results of ParseFile,\nkeyed by filename, source and project options.\n\n\ncheckFileInProjectCache - an MRU cache of size incrementalTypeCheckCacheSize (default = 5) keeping the results of\nParseAndCheckFileInProject, CheckFileInProject and/or CheckFileInProjectIfReady. This is keyed by filename, file source\nand project options.  The results held in this cache are only returned if they would reflect an accurate parse and check of the\nfile.\n\ngetToolTipTextCache - an aged lookup cache of strong size getToolTipTextSize (default = 5) computing the results of GetToolTipText.\n\nilModuleReaderCache - an aged lookup of weak references to \u0022readers\u0022 for references .NET binaries. Because these\nare all weak references, you can generally ignore this cache, since its entries will be automatically collected.\nStrong references to binary readers will be kept by other FCS data structures, e.g. any project checkers, symbols or project checking results.\nIn more detail, the bytes for referenced .NET binaries are read into memory all at once, eagerly. Files are not left\nopen or memory-mapped when using FSharpChecker (as opposed to FsiEvaluationSession, which loads assemblies using reflection).\nThe purpose of this cache is mainly to ensure that while setting up compilation, the reads of mscorlib, FSharp.Core and so on\namortize cracking the DLLs.\n\n\nframeworkTcImportsCache - an aged lookup of strong size 8 which caches the process of setting up type checking against a set of system\ncomponents (e.g. a particular version of mscorlib, FSharp.Core and other system DLLs).  These resources are automatically shared between multiple\nproject checkers which happen to reference the same set of system assemblies.\n\n\nProfiling the memory used by the various caches can be done by looking for the corresponding static roots in memory profiling traces.\nThe sizes of some of these caches can be adjusted by giving parameters to FSharpChecker.  Unless otherwise noted,\nthe cache sizes above indicate the \u0022strong\u0022 size of the cache, where memory is held regardless of the memory\npressure on the system. Some of the caches can also hold \u0022weak\u0022 references which can be collected at will by the GC.\n\nNote: Because of these caches, you should generally use one global, shared FSharpChecker for everything in an IDE application.\n\nLow-Memory Condition\nVersion 1.4.0.8 added a \u0022maximum memory\u0022 limit specified by the MaxMemory property on FSharpChecker (in MB). If an FCS project operation\nis performed (see CheckMaxMemoryReached in service.fs) and System.GC.GetTotalMemory(false) reports a figure greater than this, then\nthe strong sizes of all FCS caches are reduced to either 0 or 1.  This happens for the remainder of the lifetime of the FSharpChecker object.\nIn practice this will still make tools like the Visual Studio F# Power Tools usable, but some operations like renaming across multiple\nprojects may take substantially longer.\nBy default the maximum memory trigger is disabled, see maxMBDefault in service.fs.\nReducing the FCS strong cache sizes does not guarantee there will be enough memory to continue operations - even holding one project\nstrongly may exceed a process memory budget. It just means FCS may hold less memory strongly.\nIf you do not want the maximum memory limit to apply then set MaxMemory to System.Int32.MaxValue.\nSummary\nIn this design note, you learned that the FSharpChecker component keeps a set of caches in order to support common\nincremental analysis scenarios reasonably efficiently. They correspond roughly to the original caches and sizes\nused by the Visual F# Tools, from which the FSharpChecker component derives.\nIn long running, highly interactive, multi-project scenarios you should carefully\nconsider the cache sizes you are using and the tradeoffs involved between incremental multi-project checking and memory usage.\n","headings":["Compiler Services: Notes on the FSharpChecker caches","Low-Memory Condition","Summary"],"type":"content"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/fcs/untypedtree.html","title":"Tutorial: Expressions","content":"\nCompiler Services: Processing SyntaxTree\nThis tutorial demonstrates how to get the SyntaxTree (AST)\nfor F# code and how to walk over the tree. This can be used for creating tools\nsuch as code formatter, basic refactoring or code navigation tools. The untyped\nsyntax tree contains information about the code structure, but does not contain\ntypes and there are some ambiguities that are resolved only later by the type\nchecker. You can also combine the SyntaxTree information with the API available\nfrom editor services.\n\nNOTE: The FSharp.Compiler.Service API is subject to change when later versions of the nuget package are published\n\nGetting the SyntaxTree\nTo access the untyped AST, you need to create an instance of FSharpChecker.\nThis type represents a context for type checking and parsing and corresponds either\nto a stand-alone F# script file (e.g. opened in Visual Studio) or to a loaded project\nfile with multiple files. Once you have an instance of FSharpChecker, you can\nuse it to perform \u0022untyped parse\u0022 which is the first step of type-checking. The\nsecond phase is \u0022typed parse\u0022 and is used by editor services.\nTo use the interactive checker, reference FSharp.Compiler.Service.dll and open the\nSourceCodeServices namespace:\n#r \u0026quot;FSharp.Compiler.Service.dll\u0026quot;\nopen System\nopen FSharp.Compiler.CodeAnalysis\nopen FSharp.Compiler.Text\n\nPerforming untyped parse\nThe untyped parse operation is very fast (compared to type checking, which can\ntake notable amount of time) and so we can perform it synchronously. First, we\nneed to create FSharpChecker - the constructor takes an argument that\ncan be used to notify the checker about file changes (which we ignore).\n// Create an interactive checker instance \nlet checker = FSharpChecker.Create()\n\nTo get the AST, we define a function that takes file name and the source code\n(the file is only used for location information and does not have to exist).\nWe first need to get \u0022interactive checker options\u0022 which represents the context.\nFor simple tasks, you can use GetProjectOptionsFromScriptRoot which infers\nthe context for a script file. Then we use the ParseFile method and\nreturn the ParseTree property:\n/// Get untyped tree for a specified input\nlet getUntypedTree (file, input) = \n  // Get compiler options for the \u0026#39;project\u0026#39; implied by a single script file\n  let projOptions, diagnostics = \n      checker.GetProjectOptionsFromScript(file, input, assumeDotNetFramework=false)\n      |\u0026gt; Async.RunSynchronously\n\n  let parsingOptions, _errors = checker.GetParsingOptionsFromProjectOptions(projOptions)\n\n  // Run the first phase (untyped parsing) of the compiler\n  let parseFileResults = \n      checker.ParseFile(file, input, parsingOptions) \n      |\u0026gt; Async.RunSynchronously\n\n  parseFileResults.ParseTree\n  \n\nWalking over the AST\nThe abstract syntax tree is defined as a number of discriminated unions that represent\ndifferent syntactical elements (such as expressions, patterns, declarations etc.). The best\nway to understand the AST is to look at the definitions in\nSyntaxTree.fsi\nin the source  code.\nThe relevant parts are in the following namespace:\nopen FSharp.Compiler.Syntax\n\nWhen processing the AST, you will typically write a number of mutually recursive functions\nthat pattern match on the different syntactical elements. There is a number of elements\nthat need to be supported - the top-level element is module or namespace declaration,\ncontaining declarations inside a module (let bindings, types etc.). A let declaration inside\na module then contains expressions, which can contain patterns.\nWalking over patterns and expressions\nWe start by looking at functions that walk over expressions and patterns - as we walk,\nwe print information about the visited elements. For patterns, the input is of type\nSynPat and has a number of cases including Wild (for _ pattern), Named (for\n\u0026lt;pat\u0026gt; as name) and LongIdent (for a Foo.Bar name). Note that the parsed pattern\nis occasionally more complex than what is in the source code (in particular, Named is\nused more often):\n/// Walk over a pattern - this is for example used in \n/// let \u0026lt;pat\u0026gt; = \u0026lt;expr\u0026gt; or in the \u0026#39;match\u0026#39; expression\nlet rec visitPattern = function\n  | SynPat.Wild _ -\u0026gt; \n      printfn \u0026quot;  .. underscore pattern\u0026quot;\n  | SynPat.Named(ident = SynIdent(ident = name)) -\u0026gt;\n      printfn \u0026quot;  .. named as \u0026#39;%s\u0026#39;\u0026quot; name.idText\n  | SynPat.LongIdent(longDotId = SynLongIdent(id = ident)) -\u0026gt;\n      let names = String.concat \u0026quot;.\u0026quot; [ for i in ident -\u0026gt; i.idText ]\n      printfn \u0026quot;  .. identifier: %s\u0026quot; names\n  | pat -\u0026gt; printfn \u0026quot;  .. other pattern: %A\u0026quot; pat\n\nThe function is recursive (for nested patterns such as (foo, _) as bar), but it does not\ncall any of the functions defined later (because patterns cannot contain other syntactical\nelements).\nThe next function iterates over expressions - this is where most of the work would be and\nthere are around 20 cases to cover (type SynExpr. and you\u0027ll get completion with other\noptions). In the following, we only show how to handle if .. then .. and let .. = ...:\n/// Walk over an expression - if expression contains two or three \n/// sub-expressions (two if the \u0026#39;else\u0026#39; branch is missing), let expression\n/// contains pattern and two sub-expressions\nlet rec visitExpression e = \n  match e with\n  | SynExpr.IfThenElse(ifExpr=cond; thenExpr=trueBranch; elseExpr=falseBranchOpt) -\u0026gt;\n      // Visit all sub-expressions\n      printfn \u0026quot;Conditional:\u0026quot;\n      visitExpression cond\n      visitExpression trueBranch\n      falseBranchOpt |\u0026gt; Option.iter visitExpression \n\n  | SynExpr.LetOrUse(_, _, bindings, body, _, _) -\u0026gt;\n      // Visit bindings (there may be multiple \n      // for \u0026#39;let .. = .. and .. = .. in ...\u0026#39;\n      printfn \u0026quot;LetOrUse with the following bindings:\u0026quot;\n      for binding in bindings do\n        let (SynBinding(headPat = headPat; expr = init)) = binding\n        visitPattern headPat\n        visitExpression init\n      // Visit the body expression\n      printfn \u0026quot;And the following body:\u0026quot;\n      visitExpression body\n  | expr -\u0026gt; printfn \u0026quot; - not supported expression: %A\u0026quot; expr\n\nThe visitExpression function will be called from a function that visits all top-level\ndeclarations inside a module. In this tutorial, we ignore types and members, but that would\nbe another source of calls to visitExpression.\nWalking over declarations\nAs mentioned earlier, the AST of a file contains a number of module or namespace declarations\n(top-level node) that contain declarations inside a module (let bindings or types) or inside\na namespace (just types). The following function walks over declarations - we ignore types,\nnested modules and all other elements and look only at top-level let bindings (values and\nfunctions):\n/// Walk over a list of declarations in a module. This is anything\n/// that you can write as a top-level inside module (let bindings,\n/// nested modules, type declarations etc.)\nlet visitDeclarations decls = \n  for declaration in decls do\n    match declaration with\n    | SynModuleDecl.Let(isRec, bindings, range) -\u0026gt;\n        // Let binding as a declaration is similar to let binding\n        // as an expression (in visitExpression), but has no body\n        for binding in bindings do\n          let (SynBinding(headPat = pat; expr = body)) = binding\n          visitPattern pat \n          visitExpression body         \n    | _ -\u0026gt; printfn \u0026quot; - not supported declaration: %A\u0026quot; declaration\n\nThe visitDeclarations function will be called from a function that walks over a\nsequence of module or namespace declarations. This corresponds, for example, to a file\nwith multiple namespace Foo declarations:\n/// Walk over all module or namespace declarations \n/// (basically \u0026#39;module Foo =\u0026#39; or \u0026#39;namespace Foo.Bar\u0026#39;)\n/// Note that there is one implicitly, even if the file\n/// does not explicitly define it..\nlet visitModulesAndNamespaces modulesOrNss =\n  for moduleOrNs in modulesOrNss do\n    let (SynModuleOrNamespace(longId = lid; decls = decls)) = moduleOrNs\n    printfn \u0026quot;Namespace or module: %A\u0026quot; lid\n    visitDeclarations decls\n\nNow that we have functions that walk over the elements of the AST (starting from declaration,\ndown to expressions and patterns), we can get AST of a sample input and run the above function.\nPutting things together\nAs already discussed, the getUntypedTree function uses FSharpChecker to run the first\nphase (parsing) on the AST and get back the tree. The function requires F# source code together\nwith location of the file. The location does not have to exist (it is used only for location\ninformation) and it can be in both Unix and Windows formats:\n// Sample input for the compiler service\nlet input =\n  \u0026quot;\u0026quot;\u0026quot;\n  let foo() = \n    let msg = \u0026quot;Hello world\u0026quot;\n    if true then \n      printfn \u0026quot;%s\u0026quot; msg\n  \u0026quot;\u0026quot;\u0026quot;\n\n// File name in Unix format\nlet file = \u0026quot;/home/user/Test.fsx\u0026quot;\n\n// Get the AST of sample F# code\nlet tree = getUntypedTree(file, SourceText.ofString input)\n\nWhen you run the code in F# interactive, you can enter tree;; in the interactive console and\nsee a pretty printed representation of the data structure - the tree contains a lot of information,\nso this is not particularly readable, but it gives you a good idea about how the tree looks.\nThe returned tree value is again a discriminated union that can be two different cases - one case\nis ParsedInput.SigFile which represents F# signature file (*.fsi) and the other one is\nParsedInput.ImplFile representing regular source code (*.fsx or *.fs). The implementation\nfile contains a sequence of modules or namespaces that we can pass to the function implemented\nin the previous step:\n// Extract implementation file details\nmatch tree with\n| ParsedInput.ImplFile(implFile) -\u0026gt;\n    // Extract declarations and walk over them\n    let (ParsedImplFileInput(contents = modules)) = implFile\n    visitModulesAndNamespaces modules\n| _ -\u0026gt; failwith \u0026quot;F# Interface file (*.fsi) not supported.\u0026quot;\n\nSummary\nIn this tutorial, we looked at the basics of working with the untyped abstract syntax tree. This is a\ncomprehensive topic, so it is not possible to explain everything in a single article. The\nFantomas project is a good example of a tool based on the untyped\nAST that can help you understand more. In practice, it is also useful to combine the information here\nwith some information you can obtain from the editor services discussed in the next\ntutorial.\n","headings":["Compiler Services: Processing SyntaxTree","Getting the SyntaxTree","Performing untyped parse","Walking over the AST","Walking over patterns and expressions","Walking over declarations","Putting things together","Summary"],"type":"content"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/fcs/corelib.html","title":"Notes on FSharp.Core","content":"\nCompiler Services: Notes on FSharp.Core.dll\nVersions of FSharp.Core involved in the operation of FSharp.Compiler.Service\nThere are three versions of FSharp.Core relevant to the operation of FSharp.Compiler.Service:\n\n\nThe FSharp.Compiler.Service.dll static reference to FSharp.Core - The FCS DLL and nuget have a static minbound dependency on FSharp.Core.\nThis is just a normal .NET dependency like any other, it expresses the minimum surface area of FSharp.Core that the implementation of FSharp.Compiler.Service (and any components that depend on it) needs.  It could be a reference to a reference assembly if we supported that.  In theory this could be very low and all is cool - if we could implement FCS in terms of FSharp.Core 2.0.0.0 then that could be the minbound (indeed in theory we could implement FCS pretty almost without any use of FSharp.Core functionality at all, though obviously we don\u0027t).\nIn practice this is 0-2 versions behind latest FSharp.Core.\n\n\nThe runtime reference to FSharp.Core in a tool, application or test suite that includes FSharp.Compiler.Service - This is the actual version of FSharp.Core used when, say, fsc.exe or devenv.exe or fsi.exe or fsdocs.exe runs.\nThis must be at least as high as (1) and is usually the very latest FSharp.Core available (in or out of repo tree).  This is important to the operation of the FCS-based tool because it is used for execution of scripts, and the default compilation reference for scripts.  If scripts are going to use a particular language feature then this must be sufficient to support the language feature.\n\n\nThe FSharp.Core reference in a compilation or analysis being processed by FSharp.Compiler.Service.\nThis can be anything - 2.0.0.0, 4.0.0.0 or 5.0.0 or whatever.  For script compilation and execution is the same as (2).  It must be sufficient to support language features used in the compilation.\n\n\nShipping an FSharp.Core with your application\nWhen building applications or plug-in components which use FSharp.Compiler.Service.dll, you will normally also\ninclude a copy of FSharp.Core.dll as part of your application.\nFor example, if you build a HostedCompiler.exe, you will normally place an FSharp.Core.dll (say 4.3.1.0) alongside\nyour HostedCompiler.exe.\nWhich FSharp.Core and .NET SDK get referenced in compilation?\nThe FSharp.Compiler.Service component can be used to do more or less any sort of F# compilation.\nIn particular you can reference an explicit FSharp.Core and/or framework\nassemblies in the command line arguments (different to the FSharp.Core and a .NET Framework being used to run your tool).\nWhat about if I am using FsiEvaluationSession or GetProjectOptionsFromScript\nIf you do not explicitly reference an FSharp.Core.dll from an SDK location, or if you are processing a script\nusing FsiEvaluationSession or GetProjectOptionsFromScript, then an implicit reference to FSharp.Core will be made\nby the following choice:\n\nThe version of FSharp.Core.dll for the SDK implied by global.json.\nThe version of FSharp.Core.dll statically referenced by the host assembly returned by System.Reflection.Assembly.GetEntryAssembly().\nIf there is no static reference to FSharp.Core in the host assembly, then a default is chosen.\n\n\nNOTE: these may depend on exact flags passed to GetProjectOptionsFromScript\n\n","headings":["Compiler Services: Notes on FSharp.Core.dll","Versions of FSharp.Core involved in the operation of FSharp.Compiler.Service","Shipping an FSharp.Core with your application","Which FSharp.Core and .NET SDK get referenced in compilation?"],"type":"content"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/fcs/filesystem.html","title":"IFileSystem","content":"\nCompiler Services: Virtualized File System\nThe FSharp.Compiler.Service component has a global variable\nrepresenting the file system. By setting this variable you can host the compiler in situations where a file system\nis not available.\n\nNOTE: The FSharp.Compiler.Service API is subject to change when later versions of the nuget package are published.\n\nSetting the FileSystem\nIn the example below, we set the file system to an implementation which reads from disk\n#r \u0026quot;FSharp.Compiler.Service.dll\u0026quot;\n\nopen System.IO\nopen System.Text\nopen FSharp.Compiler.CodeAnalysis\nopen FSharp.Compiler.IO\n\nlet defaultFileSystem = FileSystem\n\nlet fileName1 = @\u0026quot;c:\\mycode\\test1.fs\u0026quot; // note, the path doesn\u0026#39;t exist\nlet fileName2 = @\u0026quot;c:\\mycode\\test2.fs\u0026quot; // note, the path doesn\u0026#39;t exist\n\ntype MyFileSystem() =\n    let file1 =\n        \u0026quot;\u0026quot;\u0026quot;\nmodule File1\n\nlet A = 1\u0026quot;\u0026quot;\u0026quot;\n\n    let file2 =\n        \u0026quot;\u0026quot;\u0026quot;\nmodule File2\nlet B = File1.A \u002B File1.A\u0026quot;\u0026quot;\u0026quot;\n\n    let files =\n        dict [ (fileName1, file1)\n               (fileName2, file2) ]\n\n    interface IFileSystem with\n        // Implement the service to open files for reading and writing\n        member _.OpenFileForReadShim(fileName, ?useMemoryMappedFile: bool, ?shouldShadowCopy: bool) =\n            match files.TryGetValue fileName with\n            | true, text -\u0026gt; new MemoryStream(Encoding.UTF8.GetBytes(text)) :\u0026gt; Stream\n            | _ -\u0026gt;\n                defaultFileSystem.OpenFileForReadShim(\n                    fileName,\n                    ?useMemoryMappedFile = useMemoryMappedFile,\n                    ?shouldShadowCopy = shouldShadowCopy\n                )\n\n        member _.OpenFileForWriteShim(fileName, ?fileMode: FileMode, ?fileAccess: FileAccess, ?fileShare: FileShare) =\n            defaultFileSystem.OpenFileForWriteShim(\n                fileName,\n                ?fileMode = fileMode,\n                ?fileAccess = fileAccess,\n                ?fileShare = fileShare\n            )\n\n        // Implement the service related to file existence and deletion\n        member _.FileExistsShim(fileName) =\n            files.ContainsKey(fileName)\n            || defaultFileSystem.FileExistsShim(fileName)\n\n        // Implement the service related to temporary paths and file time stamps\n        member _.GetTempPathShim() = defaultFileSystem.GetTempPathShim()\n\n        member _.GetLastWriteTimeShim(fileName) =\n            defaultFileSystem.GetLastWriteTimeShim(fileName)\n\n        member _.GetFullPathShim(fileName) =\n            defaultFileSystem.GetFullPathShim(fileName)\n\n        member _.IsInvalidPathShim(fileName) =\n            defaultFileSystem.IsInvalidPathShim(fileName)\n\n        member _.IsPathRootedShim(fileName) =\n            defaultFileSystem.IsPathRootedShim(fileName)\n\n        member _.FileDeleteShim(fileName) =\n            defaultFileSystem.FileDeleteShim(fileName)\n\n        member _.AssemblyLoader = defaultFileSystem.AssemblyLoader\n\n        member _.GetFullFilePathInDirectoryShim dir fileName =\n            defaultFileSystem.GetFullFilePathInDirectoryShim dir fileName\n\n        member _.NormalizePathShim(path) =\n            defaultFileSystem.NormalizePathShim(path)\n\n        member _.GetDirectoryNameShim(path) =\n            defaultFileSystem.GetDirectoryNameShim(path)\n\n        member _.GetCreationTimeShim(path) =\n            defaultFileSystem.GetCreationTimeShim(path)\n\n        member _.CopyShim(src, dest, overwrite) =\n            defaultFileSystem.CopyShim(src, dest, overwrite)\n\n        member _.DirectoryCreateShim(path) =\n            defaultFileSystem.DirectoryCreateShim(path)\n\n        member _.DirectoryExistsShim(path) =\n            defaultFileSystem.DirectoryExistsShim(path)\n\n        member _.DirectoryDeleteShim(path) =\n            defaultFileSystem.DirectoryDeleteShim(path)\n\n        member _.EnumerateFilesShim(path, pattern) =\n            defaultFileSystem.EnumerateFilesShim(path, pattern)\n\n        member _.EnumerateDirectoriesShim(path) =\n            defaultFileSystem.EnumerateDirectoriesShim(path)\n\n        member _.IsStableFileHeuristic(path) =\n            defaultFileSystem.IsStableFileHeuristic(path)\n\n        member this.ChangeExtensionShim(path, extension) =\n            defaultFileSystem.ChangeExtensionShim(path, extension)\n\nlet myFileSystem = MyFileSystem()\nFileSystem \u0026lt;- MyFileSystem()\n\nDoing a compilation with the FileSystem\nlet checker = FSharpChecker.Create()\n\nlet projectOptions =\n    let sysLib nm =\n        if System.Environment.OSVersion.Platform = System.PlatformID.Win32NT then // file references only valid on Windows\n            System.Environment.GetFolderPath(System.Environment.SpecialFolder.ProgramFilesX86)\n            \u002B @\u0026quot;\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.0\\\u0026quot;\n            \u002B nm\n            \u002B \u0026quot;.dll\u0026quot;\n        else\n            let sysDir =\n                System.Runtime.InteropServices.RuntimeEnvironment.GetRuntimeDirectory()\n\n            let (\u002B\u002B) a b = System.IO.Path.Combine(a, b)\n            sysDir \u002B\u002B nm \u002B \u0026quot;.dll\u0026quot;\n\n    let fsCore4300 () =\n        if System.Environment.OSVersion.Platform = System.PlatformID.Win32NT then // file references only valid on Windows\n            System.Environment.GetFolderPath(System.Environment.SpecialFolder.ProgramFilesX86)\n            \u002B @\u0026quot;\\Reference Assemblies\\Microsoft\\FSharp\\.NETFramework\\v4.0\\4.3.0.0\\FSharp.Core.dll\u0026quot;\n        else\n            sysLib \u0026quot;FSharp.Core\u0026quot;\n\n    let allFlags =\n        [| \u0026quot;--simpleresolution\u0026quot;\n           \u0026quot;--noframework\u0026quot;\n           \u0026quot;--debug:full\u0026quot;\n           \u0026quot;--define:DEBUG\u0026quot;\n           \u0026quot;--optimize-\u0026quot;\n           \u0026quot;--doc:test.xml\u0026quot;\n           \u0026quot;--warn:3\u0026quot;\n           \u0026quot;--fullpaths\u0026quot;\n           \u0026quot;--flaterrors\u0026quot;\n           \u0026quot;--target:library\u0026quot;\n           let references =\n               [ sysLib \u0026quot;mscorlib\u0026quot;\n                 sysLib \u0026quot;System\u0026quot;\n                 sysLib \u0026quot;System.Core\u0026quot;\n                 fsCore4300 () ]\n\n           for r in references do\n               \u0026quot;-r:\u0026quot; \u002B r |]\n\n    { ProjectFileName = @\u0026quot;c:\\mycode\\compilation.fsproj\u0026quot; // Make a name that is unique in this directory.\n      ProjectId = None\n      SourceFiles = [| fileName1; fileName2 |]\n      OriginalLoadReferences = []\n      Stamp = None\n      OtherOptions = allFlags\n      ReferencedProjects = [||]\n      IsIncompleteTypeCheckEnvironment = false\n      UseScriptResolutionRules = true\n      LoadTime = System.DateTime.Now // Note using \u0026#39;Now\u0026#39; forces reloading\n      UnresolvedReferences = None }\n\nlet results =\n    checker.ParseAndCheckProject(projectOptions)\n    |\u0026gt; Async.RunSynchronously\n\nresults.Diagnostics\nresults.AssemblySignature.Entities.Count //2\n\nresults.AssemblySignature.Entities.[0]\n    .MembersFunctionsAndValues\n    .Count\n\nresults.AssemblySignature.Entities.[0]\n    .MembersFunctionsAndValues.[0]\n    .DisplayName\n\nSummary\nIn this tutorial, we\u0027ve seen how to globally customize the view of the file system used by the FSharp.Compiler.Service\ncomponent.\nAt the time of writing, the following System.IO operations are not considered part of the virtualized file system API.\nFuture iterations on the compiler service implementation may add these to the API.\n\nPath.Combine\nPath.DirectorySeparatorChar\nPath.GetDirectoryName\nPath.GetFileName\nPath.GetFileNameWithoutExtension\nPath.HasExtension\nPath.GetRandomFileName (used only in generation compiled win32 resources in assemblies)\n\nNOTE: Several operations in the SourceCodeServices API accept the contents of a file to parse\nor check as a parameter, in addition to a file name. In these cases, the file name is only used for\nerror reporting.\nNOTE: Type provider components do not use the virtualized file system.\nNOTE: The compiler service may use MSBuild for assembly resolutions unless --simpleresolution is\nprovided. When using the FileSystem API you will normally want to specify --simpleresolution as one\nof your compiler flags. Also specify --noframework.  You will need to supply explicit resolutions of all\nreferenced .NET assemblies.\n","headings":["Compiler Services: Virtualized File System","Setting the FileSystem","Doing a compilation with the FileSystem","Summary"],"type":"content"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/fcs/compiler.html","title":"Tutorial: Hosting the compiler","content":"\nHosted Compiler\nThis tutorial demonstrates how to host the F# compiler.\n\nNOTE: The FSharp.Compiler.Service API is subject to change when later versions of the nuget package are published\n\n\nNOTE: There are several options for hosting the F# compiler. The easiest one is to use the\nfsc.exe process and pass arguments.\n\n\nNOTE: By default compilations using FSharp.Compiler.Service reference FSharp.Core 4.3.0.0 (matching F# 3.0).  You can override\nthis choice by passing a reference to FSharp.Core for 4.3.1.0 or later explicitly in your command-line arguments.\n\n\nFirst, we need to reference the libraries that contain F# interactive service:\n#r \u0026quot;FSharp.Compiler.Service.dll\u0026quot;\nopen System.IO\nopen FSharp.Compiler.CodeAnalysis\n\n// Create an interactive checker instance \nlet checker = FSharpChecker.Create()\n\nNow write content to a temporary file:\nlet fn = Path.GetTempFileName()\nlet fn2 = Path.ChangeExtension(fn, \u0026quot;.fsx\u0026quot;)\nlet fn3 = Path.ChangeExtension(fn, \u0026quot;.dll\u0026quot;)\n\nFile.WriteAllText(fn2, \u0026quot;\u0026quot;\u0026quot;\nmodule M\n\ntype C() = \n   member x.P = 1\n\nlet x = 3 \u002B 4\n\u0026quot;\u0026quot;\u0026quot;)\n\nNow invoke the compiler:\nlet errors1, exitCode1 = \n    checker.Compile([| \u0026quot;fsc.exe\u0026quot;; \u0026quot;-o\u0026quot;; fn3; \u0026quot;-a\u0026quot;; fn2 |]) \n    |\u0026gt; Async.RunSynchronously\n\nIf errors occur you can see this in the \u0027exitCode\u0027 and the returned array of errors:\nFile.WriteAllText(fn2, \u0026quot;\u0026quot;\u0026quot;\nmodule M\n\nlet x = 1.0 \u002B \u0026quot;\u0026quot; // a type error\n\u0026quot;\u0026quot;\u0026quot;)\n\nlet errors1b, exitCode1b = \n    checker.Compile([| \u0026quot;fsc.exe\u0026quot;; \u0026quot;-o\u0026quot;; fn3; \u0026quot;-a\u0026quot;; fn2 |])\n    |\u0026gt; Async.RunSynchronously\n\n","headings":["Hosted Compiler"],"type":"content"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/fcs/project.html","title":"Tutorial: Project analysis","content":"\nCompiler Services: Project Analysis\nThis tutorial demonstrates how you can analyze a whole project using services provided by the F# compiler.\n\nNOTE: The FSharp.Compiler.Service API is subject to change when later versions of the nuget package are published.\n\nGetting whole-project results\nAs in the previous tutorial (using untyped AST), we start by referencing\nFSharp.Compiler.Service.dll, opening the relevant namespace and creating an instance\nof InteractiveChecker:\n// Reference F# compiler API\n#r \u0026quot;FSharp.Compiler.Service.dll\u0026quot;\n\nopen System\nopen System.Collections.Generic\nopen FSharp.Compiler.CodeAnalysis\nopen FSharp.Compiler.Symbols\nopen FSharp.Compiler.Text\n\n// Create an interactive checker instance\nlet checker = FSharpChecker.Create()\n\nHere are our sample inputs:\nmodule Inputs =\n    open System.IO\n\n    let base1 = Path.GetTempFileName()\n    let fileName1 = Path.ChangeExtension(base1, \u0026quot;.fs\u0026quot;)\n    let base2 = Path.GetTempFileName()\n    let fileName2 = Path.ChangeExtension(base2, \u0026quot;.fs\u0026quot;)\n    let dllName = Path.ChangeExtension(base2, \u0026quot;.dll\u0026quot;)\n    let projFileName = Path.ChangeExtension(base2, \u0026quot;.fsproj\u0026quot;)\n\n    let fileSource1 =\n        \u0026quot;\u0026quot;\u0026quot;\nmodule M\n\ntype C() =\n    member x.P = 1\n\nlet xxx = 3 \u002B 4\nlet fff () = xxx \u002B xxx\n    \u0026quot;\u0026quot;\u0026quot;\n\n    File.WriteAllText(fileName1, fileSource1)\n\n    let fileSource2 =\n        \u0026quot;\u0026quot;\u0026quot;\nmodule N\n\nopen M\n\ntype D1() =\n    member x.SomeProperty = M.xxx\n\ntype D2() =\n    member x.SomeProperty = M.fff() \u002B D1().P\n\n// Generate a warning\nlet y2 = match 1 with 1 -\u0026gt; M.xxx\n    \u0026quot;\u0026quot;\u0026quot;\n\n    File.WriteAllText(fileName2, fileSource2)\n\nWe use GetProjectOptionsFromCommandLineArgs to treat two files as a project:\nlet projectOptions =\n    let sysLib nm =\n        if System.Environment.OSVersion.Platform = System.PlatformID.Win32NT then\n            // file references only valid on Windows\n            System.Environment.GetFolderPath(System.Environment.SpecialFolder.ProgramFilesX86)\n            \u002B @\u0026quot;\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.0\\\u0026quot;\n            \u002B nm\n            \u002B \u0026quot;.dll\u0026quot;\n        else\n            let sysDir =\n                System.Runtime.InteropServices.RuntimeEnvironment.GetRuntimeDirectory()\n\n            let (\u002B\u002B) a b = System.IO.Path.Combine(a, b)\n            sysDir \u002B\u002B nm \u002B \u0026quot;.dll\u0026quot;\n\n    let fsCore4300 () =\n        if System.Environment.OSVersion.Platform = System.PlatformID.Win32NT then\n            // file references only valid on Windows\n            System.Environment.GetFolderPath(System.Environment.SpecialFolder.ProgramFilesX86)\n            \u002B @\u0026quot;\\Reference Assemblies\\Microsoft\\FSharp\\.NETFramework\\v4.0\\4.3.0.0\\FSharp.Core.dll\u0026quot;\n        else\n            sysLib \u0026quot;FSharp.Core\u0026quot;\n\n    checker.GetProjectOptionsFromCommandLineArgs(\n        Inputs.projFileName,\n        [| yield \u0026quot;--simpleresolution\u0026quot;\n           yield \u0026quot;--noframework\u0026quot;\n           yield \u0026quot;--debug:full\u0026quot;\n           yield \u0026quot;--define:DEBUG\u0026quot;\n           yield \u0026quot;--optimize-\u0026quot;\n           yield \u0026quot;--out:\u0026quot; \u002B Inputs.dllName\n           yield \u0026quot;--doc:test.xml\u0026quot;\n           yield \u0026quot;--warn:3\u0026quot;\n           yield \u0026quot;--fullpaths\u0026quot;\n           yield \u0026quot;--flaterrors\u0026quot;\n           yield \u0026quot;--target:library\u0026quot;\n           yield Inputs.fileName1\n           yield Inputs.fileName2\n           let references =\n               [ sysLib \u0026quot;mscorlib\u0026quot;\n                 sysLib \u0026quot;System\u0026quot;\n                 sysLib \u0026quot;System.Core\u0026quot;\n                 fsCore4300 () ]\n\n           for r in references do\n               yield \u0026quot;-r:\u0026quot; \u002B r |]\n    )\n\nNow check the entire project (using the files saved on disk):\nlet wholeProjectResults =\n    checker.ParseAndCheckProject(projectOptions)\n    |\u0026gt; Async.RunSynchronously\n\nNow look at the errors and warnings:\nwholeProjectResults.Diagnostics.Length // 1\n\nwholeProjectResults.Diagnostics.[0]\n    .Message.Contains(\u0026quot;Incomplete pattern matches on this expression\u0026quot;) // yes it does\n\nwholeProjectResults.Diagnostics.[0].StartLine\nwholeProjectResults.Diagnostics.[0].EndLine\nwholeProjectResults.Diagnostics.[0].StartColumn\nwholeProjectResults.Diagnostics.[0].EndColumn\n\nNow look at the inferred signature for the project:\n[ for x in wholeProjectResults.AssemblySignature.Entities -\u0026gt; x.DisplayName ] // [\u0026quot;N\u0026quot;; \u0026quot;M\u0026quot;]\n\n[ for x in\n      wholeProjectResults.AssemblySignature.Entities.[0]\n          .NestedEntities -\u0026gt; x.DisplayName ] // [\u0026quot;D1\u0026quot;; \u0026quot;D2\u0026quot;]\n\n[ for x in\n      wholeProjectResults.AssemblySignature.Entities.[1]\n          .NestedEntities -\u0026gt; x.DisplayName ] // [\u0026quot;C\u0026quot;]\n\n[ for x in\n      wholeProjectResults.AssemblySignature.Entities.[0]\n          .MembersFunctionsAndValues -\u0026gt; x.DisplayName ] // [\u0026quot;y\u0026quot;; \u0026quot;y2\u0026quot;]\n\nYou can also get all symbols in the project:\nlet rec allSymbolsInEntities (entities: IList\u0026lt;FSharpEntity\u0026gt;) =\n    [ for e in entities do\n          yield (e :\u0026gt; FSharpSymbol)\n\n          for x in e.MembersFunctionsAndValues do\n              yield (x :\u0026gt; FSharpSymbol)\n\n          for x in e.UnionCases do\n              yield (x :\u0026gt; FSharpSymbol)\n\n          for x in e.FSharpFields do\n              yield (x :\u0026gt; FSharpSymbol)\n\n          yield! allSymbolsInEntities e.NestedEntities ]\n\nlet allSymbols =\n    allSymbolsInEntities wholeProjectResults.AssemblySignature.Entities\n\nAfter checking the whole project, you can access the background results for individual files\nin the project. This will be fast and will not involve any additional checking.\nlet backgroundParseResults1, backgroundTypedParse1 =\n    checker.GetBackgroundCheckResultsForFileInProject(Inputs.fileName1, projectOptions)\n    |\u0026gt; Async.RunSynchronously\n\nYou can now resolve symbols in each file:\nlet xSymbolUseOpt =\n    backgroundTypedParse1.GetSymbolUseAtLocation(9, 9, \u0026quot;\u0026quot;, [ \u0026quot;xxx\u0026quot; ])\n\nlet xSymbolUse = xSymbolUseOpt.Value\n\nlet xSymbol = xSymbolUse.Symbol\n\nYou can find out more about a symbol by doing type checks on various symbol kinds:\nlet xSymbolAsValue =\n    match xSymbol with\n    | :? FSharpMemberOrFunctionOrValue as xSymbolAsVal -\u0026gt; xSymbolAsVal\n    | _ -\u0026gt; failwith \u0026quot;we expected this to be a member, function or value\u0026quot;\n\nFor each symbol, you can look up the references to that symbol:\nlet usesOfXSymbol =\n    wholeProjectResults.GetUsesOfSymbol(xSymbol)\n\nYou can iterate all the defined symbols in the inferred signature and find where they are used:\nlet allUsesOfAllSignatureSymbols =\n    [ for s in allSymbols do\n          let uses = wholeProjectResults.GetUsesOfSymbol(s)\n          yield s.ToString(), uses ]\n\nYou can also look at all the symbols uses in the whole project (including uses of symbols with local scope)\nlet allUsesOfAllSymbols =\n    wholeProjectResults.GetAllUsesOfAllSymbols()\n\nYou can also request checks of updated versions of files within the project (note that the other files\nin the project are still read from disk, unless you are using the FileSystem API):\nlet parseResults1, checkAnswer1 =\n    checker.ParseAndCheckFileInProject(Inputs.fileName1, 0, SourceText.ofString Inputs.fileSource1, projectOptions)\n    |\u0026gt; Async.RunSynchronously\n\nlet checkResults1 =\n    match checkAnswer1 with\n    | FSharpCheckFileAnswer.Succeeded x -\u0026gt; x\n    | _ -\u0026gt; failwith \u0026quot;unexpected aborted\u0026quot;\n\nlet parseResults2, checkAnswer2 =\n    checker.ParseAndCheckFileInProject(Inputs.fileName2, 0, SourceText.ofString Inputs.fileSource2, projectOptions)\n    |\u0026gt; Async.RunSynchronously\n\nlet checkResults2 =\n    match checkAnswer2 with\n    | FSharpCheckFileAnswer.Succeeded x -\u0026gt; x\n    | _ -\u0026gt; failwith \u0026quot;unexpected aborted\u0026quot;\n\nAgain, you can resolve symbols and ask for references:\nlet xSymbolUse2Opt =\n    checkResults1.GetSymbolUseAtLocation(9, 9, \u0026quot;\u0026quot;, [ \u0026quot;xxx\u0026quot; ])\n\nlet xSymbolUse2 = xSymbolUse2Opt.Value\n\nlet xSymbol2 = xSymbolUse2.Symbol\n\nlet usesOfXSymbol2 =\n    wholeProjectResults.GetUsesOfSymbol(xSymbol2)\n\nOr ask for all the symbols uses in the file (including uses of symbols with local scope)\nlet allUsesOfAllSymbolsInFile1 =\n    checkResults1.GetAllUsesOfAllSymbolsInFile()\n\nOr ask for all the uses of one symbol in one file:\nlet allUsesOfXSymbolInFile1 =\n    checkResults1.GetUsesOfSymbolInFile(xSymbol2)\n\nlet allUsesOfXSymbolInFile2 =\n    checkResults2.GetUsesOfSymbolInFile(xSymbol2)\n\nAnalyzing multiple projects\nIf you have multiple F# projects to analyze which include references from some projects to others,\nthen the simplest way to do this is to build the projects and specify the cross-project references using\na -r:path-to-output-of-project.dll argument in the ProjectOptions. However, this requires the build\nof each project to succeed, producing the DLL file on disk which can be referred to.\nIn some situations, e.g. in an IDE, you may wish to allow references to other F# projects prior to successful compilation to\na DLL. To do this, fill in the ProjectReferences entry in ProjectOptions, which recursively specifies the project\noptions for dependent projects. Each project reference still needs a corresponding -r:path-to-output-of-project.dll\ncommand line argument in ProjectOptions, along with an entry in ProjectReferences.\nThe first element of each tuple in the ProjectReferences entry should be the DLL name, i.e. path-to-output-of-project.dll.\nThis should be the same as the text used in the -r project reference.\nWhen a project reference is used, the analysis will make use of the results of incremental\nanalysis of the referenced F# project from source files, without requiring the compilation of these files to DLLs.\nTo efficiently analyze a set of F# projects which include cross-references, you should populate the ProjectReferences\ncorrectly and then analyze each project in turn.\n\nNOTE: Project references are disabled if the assembly being referred to contains type provider components -\nspecifying the project reference will have no effect beyond forcing the analysis of the project, and the DLL will\nstill be required on disk.\n\nSummary\nAs you have seen, the ParseAndCheckProject lets you access results of project-wide analysis\nsuch as symbol references. To learn more about working with symbols, see Symbols.\nUsing the FSharpChecker component in multi-project, incremental and interactive editing situations may involve\nknowledge of the FSharpChecker operations queue and the FSharpChecker caches.\n","headings":["Compiler Services: Project Analysis","Getting whole-project results","Analyzing multiple projects","Summary"],"type":"content"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/fcs/interactive.html","title":"Tutorial: Hosted execution","content":"\nInteractive Service: Embedding F# Interactive\nThis tutorial demonstrates how to embed F# interactive in your application. F# interactive\nis an interactive scripting environment that compiles F# code into highly efficient IL code\nand executes it on the fly. The F# interactive service allows you to embed F# evaluation in\nyour application.\n\nNOTE: There is a number of options for embedding F# Interactive. The easiest one is to use the\nfsi.exe process and communicate with it using standard input and standard output. In this\ntutorial, we look at calling F# Interactive directly through .NET API. However, if you have\nno control over the input, it is a good idea to run F# interactive in a separate process.\nOne reason is that there is no way to handle StackOverflowException and so a poorly written\nscript can terminate the host process. Remember that while calling F# Interactive through .NET API,\n--shadowcopyreferences option will be ignored. For detailed discussion, please take a look at\nthis thread.\nNOTE: If FsiEvaluationSession.Create fails with an error saying that FSharp.Core.dll cannot be found,\nadd the FSharp.Core.sigdata and FSharp.Core.optdata files. More info here.\n\nHowever, the F# interactive service is still useful, because you might want to wrap it in your\nown executable that is then executed (and communicates with the rest of your application), or\nif you only need to execute a limited subset of F# code (e.g. generated by your own DSL).\nStarting the F# interactive\nFirst, we need to reference the libraries that contain the F# interactive service:\n#r \u0026quot;FSharp.Compiler.Service.dll\u0026quot;\n\nopen FSharp.Compiler.Interactive.Shell\nopen FSharp.Compiler.Tokenization\n\nTo communicate with F# interactive, we need to create streams that represent input and\noutput. We will use those later to read the output printed as a result of evaluating some\nF# code that prints:\nopen System\nopen System.IO\nopen System.Text\n\n// Initialize output and input streams\nlet sbOut = new StringBuilder()\nlet sbErr = new StringBuilder()\nlet inStream = new StringReader(\u0026quot;\u0026quot;)\nlet outStream = new StringWriter(sbOut)\nlet errStream = new StringWriter(sbErr)\n\n// Build command line arguments \u0026amp; start FSI session\nlet argv = [| \u0026quot;C:\\\\fsi.exe\u0026quot; |]\n\nlet allArgs =\n    Array.append argv [| \u0026quot;--noninteractive\u0026quot; |]\n\nlet fsiConfig =\n    FsiEvaluationSession.GetDefaultConfiguration()\n\nlet fsiSession =\n    FsiEvaluationSession.Create(fsiConfig, allArgs, inStream, outStream, errStream)\n\nEvaluating and executing code\nThe F# interactive service exposes several methods that can be used for evaluation. The first\nis EvalExpression which evaluates an expression and returns its result. The result contains\nthe returned value (as obj) and the statically inferred type of the value:\n/// Evaluate expression \u0026amp; return the result\nlet evalExpression text =\n    match fsiSession.EvalExpression(text) with\n    | Some value -\u0026gt; printfn \u0026quot;%A\u0026quot; value.ReflectionValue\n    | None -\u0026gt; printfn \u0026quot;Got no result!\u0026quot;\n\nThis takes a string as an argument and evaluates (i.e. executes) it as F# code.\nevalExpression \u0026quot;42\u002B1\u0026quot; // prints \u0026#39;43\u0026#39;\n\nThis can be used in a strongly typed way as follows:\n/// Evaluate expression \u0026amp; return the result, strongly typed\nlet evalExpressionTyped\u0026lt;\u0026#39;T\u0026gt; (text) =\n    match fsiSession.EvalExpression(text) with\n    | Some value -\u0026gt; value.ReflectionValue |\u0026gt; unbox\u0026lt;\u0026#39;T\u0026gt;\n    | None -\u0026gt; failwith \u0026quot;Got no result!\u0026quot;\n\nevalExpressionTyped\u0026lt;int\u0026gt; \u0026quot;42\u002B1\u0026quot; // gives \u0026#39;43\u0026#39;\n\nThe EvalInteraction method can be used to evaluate side-effectful operations\nsuch as printing, declarations, or other interactions that are not valid F# expressions, but can be entered in\nthe F# Interactive console. Such commands include #time \u0022on\u0022 (and other directives), open System\nall declarations and other top-level statements. The code\ndoes not require ;; at the end. Just enter the code that you want to execute:\nfsiSession.EvalInteraction \u0026quot;printfn \\\u0026quot;bye\\\u0026quot;\u0026quot;\n\nThe EvalScript method allows to evaluate a complete .fsx script.\nFile.WriteAllText(\u0026quot;sample.fsx\u0026quot;, \u0026quot;let twenty = 10 \u002B 10\u0026quot;)\nfsiSession.EvalScript \u0026quot;sample.fsx\u0026quot;\n\nCatching errors\nEvalExpression, EvalInteraction and EvalScript are awkward if the\ncode has type checking warnings or errors, or if evaluation fails with an exception.\nIn these cases you can use EvalExpressionNonThrowing, EvalInteractionNonThrowing\nand EvalScriptNonThrowing. These return a tuple of a result and an array of FSharpDiagnostic values.\nThese represent the errors and warnings. The result part is a Choice\u0026lt;_,_\u0026gt; between an actual\nresult and an exception.\nThe result part of EvalExpression and EvalExpressionNonThrowing is an optional FSharpValue.\nIf that value is not present then it just indicates that the expression didn\u0027t have a tangible\nresult that could be represented as a .NET object.  This situation shouldn\u0027t actually\noccur for any normal input expressions, and only for primitives used in libraries.\nFile.WriteAllText(\u0026quot;sample.fsx\u0026quot;, \u0026quot;let twenty = \u0026#39;a\u0026#39; \u002B 10.0\u0026quot;)\n\nlet result, warnings =\n    fsiSession.EvalScriptNonThrowing \u0026quot;sample.fsx\u0026quot;\n\n// show the result\nmatch result with\n| Choice1Of2 () -\u0026gt; printfn \u0026quot;checked and executed ok\u0026quot;\n| Choice2Of2 exn -\u0026gt; printfn \u0026quot;execution exception: %s\u0026quot; exn.Message\n\nGives:\nexecution exception: Operation could not be completed due to earlier error\n\n// show the errors and warnings\nfor w in warnings do\n    printfn \u0026quot;Warning %s at %d,%d\u0026quot; w.Message w.StartLine w.StartColumn\n\nGives:\nWarning The type \u0026#39;float\u0026#39; does not match the type \u0026#39;char\u0026#39; at 1,19\nWarning The type \u0026#39;float\u0026#39; does not match the type \u0026#39;char\u0026#39; at 1,17\n\nFor expressions:\nlet evalExpressionTyped2\u0026lt;\u0026#39;T\u0026gt; text =\n    let res, warnings =\n        fsiSession.EvalExpressionNonThrowing(text)\n\n    for w in warnings do\n        printfn \u0026quot;Warning %s at %d,%d\u0026quot; w.Message w.StartLine w.StartColumn\n\n    match res with\n    | Choice1Of2 (Some value) -\u0026gt; value.ReflectionValue |\u0026gt; unbox\u0026lt;\u0026#39;T\u0026gt;\n    | Choice1Of2 None -\u0026gt; failwith \u0026quot;null or no result\u0026quot;\n    | Choice2Of2 (exn: exn) -\u0026gt; failwith (sprintf \u0026quot;exception %s\u0026quot; exn.Message)\n\nevalExpressionTyped2\u0026lt;int\u0026gt; \u0026quot;42\u002B1\u0026quot; // gives \u0026#39;43\u0026#39;\n\nExecuting in parallel\nBy default the code passed to EvalExpression is executed immediately. To execute in parallel, submit a computation that starts a task:\nopen System.Threading.Tasks\n\nlet sampleLongRunningExpr =\n    \u0026quot;\u0026quot;\u0026quot;\nasync {\n    // The code of what you want to run\n    do System.Threading.Thread.Sleep 5000\n    return 10\n}\n  |\u0026gt; Async.StartAsTask\u0026quot;\u0026quot;\u0026quot;\n\nlet task1 =\n    evalExpressionTyped\u0026lt;Task\u0026lt;int\u0026gt;\u0026gt; (sampleLongRunningExpr)\n\nlet task2 =\n    evalExpressionTyped\u0026lt;Task\u0026lt;int\u0026gt;\u0026gt; (sampleLongRunningExpr)\n\nBoth computations have now started.  You can now fetch the results:\ntask1.Result // gives the result after completion (up to 5 seconds)\ntask2.Result // gives the result after completion (up to 5 seconds)\n\nType checking in the evaluation context\nLet\u0027s assume you have a situation where you would like to typecheck code\nin the context of the F# Interactive scripting session. For example, you first\nevaluate a declaration:\nfsiSession.EvalInteraction \u0026quot;let xxx = 1 \u002B 1\u0026quot;\n\nNow you want to typecheck the partially complete code xxx \u002B xx\nlet parseResults, checkResults, checkProjectResults =\n    fsiSession.ParseAndCheckInteraction(\u0026quot;xxx \u002B xx\u0026quot;)\n\nThe parseResults and checkResults have types ParseFileResults and CheckFileResults\nexplained in Editor. You can, for example, look at the type errors in the code:\ncheckResults.Diagnostics.Length // 1\n\nThe code is checked with respect to the logical type context available in the F# interactive session\nbased on the declarations executed so far.\nYou can also request declaration list information, tooltip text and symbol resolution:\n// get a tooltip\ncheckResults.GetToolTip(1, 2, \u0026quot;xxx \u002B xx\u0026quot;, [ \u0026quot;xxx\u0026quot; ], FSharpTokenTag.IDENT)\n\ncheckResults.GetSymbolUseAtLocation(1, 2, \u0026quot;xxx \u002B xx\u0026quot;, [ \u0026quot;xxx\u0026quot; ]) // symbol xxx\n\nThe \u0027fsi\u0027 object\nIf you want your scripting code to be able to access the \u0027fsi\u0027 object, you should pass in an implementation of this object explicitly.\nNormally the one from FSharp.Compiler.Interactive.Settings.dll is used.\nlet fsiConfig2 =\n    FsiEvaluationSession.GetDefaultConfiguration(fsiSession)\n\nCollectible code generation\nEvaluating code in using FsiEvaluationSession generates a .NET dynamic assembly and uses other resources.\nYou can make generated code collectible by passing collectible=true.  However, code will only\nbe collected if there are no outstanding object references involving types, for example\nFsiValue objects returned by EvalExpression, and you must have disposed the FsiEvaluationSession.\nSee also Restrictions on Collectible Assemblies.\nThe example below shows the creation of 200 evaluation sessions. Note that collectible=true and\nuse session = ... are both used.\nIf collectible code is working correctly,\noverall resource usage will not increase linearly as the evaluation progresses.\nlet collectionTest () =\n\n    for i in 1 .. 200 do\n        let defaultArgs =\n            [| \u0026quot;fsi.exe\u0026quot;\n               \u0026quot;--noninteractive\u0026quot;\n               \u0026quot;--nologo\u0026quot;\n               \u0026quot;--gui-\u0026quot; |]\n\n        use inStream = new StringReader(\u0026quot;\u0026quot;)\n        use outStream = new StringWriter()\n        use errStream = new StringWriter()\n\n        let fsiConfig =\n            FsiEvaluationSession.GetDefaultConfiguration()\n\n        use session =\n            FsiEvaluationSession.Create(fsiConfig, defaultArgs, inStream, outStream, errStream, collectible = true)\n\n        session.EvalInteraction(sprintf \u0026quot;type D = { v : int }\u0026quot;)\n\n        let v =\n            session.EvalExpression(sprintf \u0026quot;{ v = 42 * %d }\u0026quot; i)\n\n        printfn \u0026quot;iteration %d, result = %A\u0026quot; i v.Value.ReflectionValue\n\n// collectionTest()  \u0026lt;-- run the test like this\n\n","headings":["Interactive Service: Embedding F# Interactive","Starting the F# interactive","Evaluating and executing code","Catching errors","Executing in parallel","Type checking in the evaluation context","The \u0027fsi\u0027 object","Collectible code generation"],"type":"content"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/fcs/index.html","title":"FSharp.Compiler.Service","content":"\nFSharp.Compiler.Service\nThe FSharp.Compiler.Service package is a component derived from the F# compiler source code that\nexposes additional functionality for implementing F# language bindings, additional\ntools based on the compiler or refactoring tools. The package also includes\ndynamic execution of F# code that can be used for embedding F# scripting into your applications.\nAvailable services\nThe project currently exposes the following services that are tested \u0026amp; documented on this page.\nThe libraries contain additional public API that can be used, but is not documented here.\n\n\nF# Language tokenizer - turns any F# source code into a stream of tokens.\nUseful for implementing source code colorization and basic tools. Correctly handle nested\ncomments, strings etc.\n\n\nProcessing SyntaxTree - allows accessing the syntax tree.\nThis represents parsed F# syntax without type information and can be used to implement code formatting\nand various simple processing tasks.\n\n\nWorking with resolved symbols - many services related to type checking\nreturn resolved symbols, representing inferred types, and the signatures of whole assemblies.\n\n\nWorking with resolved expressions - services related to working with\ntype-checked expressions and declarations, where names have been resolved to symbols.\n\n\nUsing editor services - expose functionality for auto-completion, tool-tips,\nparameter information etc. These functions are useful for implementing F# support for editors\nand for getting some type information for F# code.\n\n\nWorking with project-wide analysis - you can request a check of\nan entire project, and ask for the results of whole-project analyses such as find-all-references.\n\n\nHosting F# interactive - allows calling F# interactive as a .NET library\nfrom your .NET code. You can use this API to embed F# as a scripting language in your projects.\n\nHosting the F# compiler - allows you to embed calls to the F# compiler.\n\nFile system API - the FSharp.Compiler.Service component has a global variable\nrepresenting the file system. By setting this variable you can host the compiler in situations where a file system\nis not available.\n\n\n\nNOTE: The FSharp.Compiler.Service API is subject to change when later versions of the nuget package are published\n\nThe Public Surface Area\nWe are in the process of cleaning up the surface area of FCS to allow it to be fully binary compatible going forward.\nThe full current surface area can be seen at: https://fsharp.github.io/fsharp-compiler-docs/reference/index.html\nThe API is generally designed with F#/.NET design conventions (e.g. types in namespaces, not modules, no nesting of modules etc.) and we must continue to iterate to make this so.\nThe parts of the compiler under FSharp.Compiler.AbstractIL.* are \u0022incidental\u0022 and not really designed for public use apart from the hook for JetBrains Rider (Aside: In theory all these other parts could be renamed to FSharp.Compiler though there\u0027s no need to do that right now).   These internal parts tend to be implemented with the \u0022module containing lots of stuff in one big file\u0022 approach for layers of the compiler.\nBasics - Syntax, Text and Diagnostics\n\nFSharp.Compiler.Diagnostics\nFSharp.Compiler.IO\nFSharp.Compiler.Syntax\nFSharp.Compiler.Text\n\nTokenization\n\nFSharp.Compiler.Tokenization\n\nSymbols and Code Analysis\n\nFSharp.Compiler.Symbols\nFSharp.Compiler.CodeAnalysis\n\nEditor Services\n\nFSharp.Compiler.EditorServices\n\nInteractive Execution\n\nFSharp.Compiler.Interactive.Shell\n\nInternal extension points\n\nFSharp.Compiler.AbstractIL\n\nProjects using the F# Compiler Services\nSome of the projects using the F# Compiler Services are:\n\nF# in Visual Studio\nF# in Visual Studio for Mac\nFsAutoComplete\nF# in JetBrains Rider\nF# in .NET Interactive Notebooks\nFantomas - Source code formatting for F#\nFSharpLint - Lint tool for F#\nFable - F# to JavaScript Compiler and more\nWebSharper - F# full-stack web framework\n\nOlder things:\n\nFsReveal - FsReveal parses markdown and F# script file and generate reveal.js slides\nElucidate - Visual Studio extension for rich inlined comments using MarkDown\nFSharp.Formatting - F# tools for generating documentation (Markdown processor and F# code formatter)\nFAKE - \u0022FAKE - F# Make\u0022 is a cross platform build automation system\n\nContributing and copyright\nThe F# source code is copyright by Microsoft Corporation and contributors.\n","headings":["FSharp.Compiler.Service","Available services","The Public Surface Area","Basics - Syntax, Text and Diagnostics","Tokenization","Symbols and Code Analysis","Editor Services","Interactive Execution","Internal extension points","Projects using the F# Compiler Services","Contributing and copyright"],"type":"content"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/fcs/symbols.html","title":"Tutorial: Symbols","content":"\nCompiler Services: Working with symbols\nThis tutorial demonstrates how to work with symbols provided by the F# compiler. See also project wide analysis\nfor information on symbol references.\n\nNOTE: The FSharp.Compiler.Service API is subject to change when later versions of the nuget package are published.\n\nAs usual we start by referencing FSharp.Compiler.Service.dll, opening the relevant namespace and creating an instance\nof FSharpChecker:\n// Reference F# compiler API\n#r \u0026quot;FSharp.Compiler.Service.dll\u0026quot;\n\nopen System\nopen System.IO\nopen FSharp.Compiler.CodeAnalysis\nopen FSharp.Compiler.Symbols\nopen FSharp.Compiler.Text\n\n// Create an interactive checker instance \nlet checker = FSharpChecker.Create()\n\nWe now perform type checking on the specified input:\nlet parseAndTypeCheckSingleFile (file, input) = \n    // Get context representing a stand-alone (script) file\n    let projOptions, errors = \n        checker.GetProjectOptionsFromScript(file, input, assumeDotNetFramework=false)\n        |\u0026gt; Async.RunSynchronously\n\n    let parseFileResults, checkFileResults = \n        checker.ParseAndCheckFileInProject(file, 0, input, projOptions) \n        |\u0026gt; Async.RunSynchronously\n\n    // Wait until type checking succeeds (or 100 attempts)\n    match checkFileResults with\n    | FSharpCheckFileAnswer.Succeeded(res) -\u0026gt; parseFileResults, res\n    | res -\u0026gt; failwithf \u0026quot;Parsing did not finish... (%A)\u0026quot; res\n\nlet file = \u0026quot;/home/user/Test.fsx\u0026quot;\n\nGetting resolved signature information about the file\nAfter type checking a file, you can access the inferred signature of a project up to and including the\nchecking of the given file through the PartialAssemblySignature property of the TypeCheckResults.\nThe full signature information is available for modules, types, attributes, members, values, functions,\nunion cases, record types, units of measure and other F# language constructs.\nThe typed expression trees are also available, see typed tree tutorial.\nlet input2 = \n      \u0026quot;\u0026quot;\u0026quot;\n[\u0026lt;System.CLSCompliant(true)\u0026gt;]\nlet foo(x, y) = \n    let msg = String.Concat(\u0026quot;Hello\u0026quot;,\u0026quot; \u0026quot;,\u0026quot;world\u0026quot;)\n    if true then \n        printfn \u0026quot;x = %d, y = %d\u0026quot; x y \n        printfn \u0026quot;%s\u0026quot; msg\n\ntype C() = \n    member x.P = 1\n      \u0026quot;\u0026quot;\u0026quot;\nlet parseFileResults, checkFileResults = \n    parseAndTypeCheckSingleFile(file, SourceText.ofString input2)\n\nNow get the partial assembly signature for the code:\nlet partialAssemblySignature = checkFileResults.PartialAssemblySignature\n    \npartialAssemblySignature.Entities.Count = 1  // one entity\n    \n\nNow get the entity that corresponds to the module containing the code:\nlet moduleEntity = partialAssemblySignature.Entities.[0]\n\nmoduleEntity.DisplayName = \u0026quot;Test\u0026quot;\n\nNow get the entity that corresponds to the type definition in the code:\nlet classEntity = moduleEntity.NestedEntities.[0]\n\nNow get the value that corresponds to the function defined in the code:\nlet fnVal = moduleEntity.MembersFunctionsAndValues.[0]\n\nNow look around at the properties describing the function value:\nfnVal.Attributes.Count // 1\nfnVal.CurriedParameterGroups.Count // 1\nfnVal.CurriedParameterGroups.[0].Count // 2\nfnVal.CurriedParameterGroups.[0].[0].Name // Some \u0026quot;x\u0026quot;\nfnVal.CurriedParameterGroups.[0].[1].Name // Some \u0026quot;y\u0026quot;\nfnVal.DeclarationLocation.StartLine // 3\nfnVal.DisplayName // \u0026quot;foo\u0026quot;\nfnVal.DeclaringEntity.Value.DisplayName // \u0026quot;Test\u0026quot;\nfnVal.DeclaringEntity.Value.DeclarationLocation.StartLine // 1\nfnVal.GenericParameters.Count // 0\nfnVal.InlineAnnotation // FSharpInlineAnnotation.OptionalInline\nfnVal.IsActivePattern // false\nfnVal.IsCompilerGenerated // false\nfnVal.IsDispatchSlot // false\nfnVal.IsExtensionMember // false\nfnVal.IsPropertyGetterMethod // false\nfnVal.IsImplicitConstructor // false\nfnVal.IsInstanceMember // false\nfnVal.IsMember // false\nfnVal.IsModuleValueOrMember // true\nfnVal.IsMutable // false\nfnVal.IsPropertySetterMethod // false\nfnVal.IsTypeFunction // false\n\nNow look at the type of the function if used as a first class value. (Aside: the CurriedParameterGroups property contains\nmore information like the names of the arguments.)\nfnVal.FullType // int * int -\u0026gt; unit\nfnVal.FullType.IsFunctionType // int * int -\u0026gt; unit\nfnVal.FullType.GenericArguments.[0] // int * int \nfnVal.FullType.GenericArguments.[0].IsTupleType // int * int \nlet argTy1 = fnVal.FullType.GenericArguments.[0].GenericArguments.[0]\n\nargTy1.TypeDefinition.DisplayName // int\n\nOK, so we got an object representation of the type int * int -\u0026gt; unit, and we have seen the first \u0027int\u0027. We can find out more about the\ntype \u0027int\u0027 as follows, determining that it is a named type, which is an F# type abbreviation, type int = int32:\nargTy1.HasTypeDefinition\nargTy1.TypeDefinition.IsFSharpAbbreviation // \u0026quot;int\u0026quot;\n\nWe can now look at the right-hand-side of the type abbreviation, which is the type int32:\nlet argTy1b = argTy1.TypeDefinition.AbbreviatedType\nargTy1b.TypeDefinition.Namespace // Some \u0026quot;Microsoft.FSharp.Core\u0026quot; \nargTy1b.TypeDefinition.CompiledName // \u0026quot;int32\u0026quot; \n\nAgain we can now look through the type abbreviation type int32 = System.Int32 to get the\nfull information about the type:\nlet argTy1c = argTy1b.TypeDefinition.AbbreviatedType\nargTy1c.TypeDefinition.Namespace // Some \u0026quot;SystemCore\u0026quot; \nargTy1c.TypeDefinition.CompiledName // \u0026quot;Int32\u0026quot; \n\nThe type checking results for a file also contain information extracted from the project (or script) options\nused in the compilation, called the ProjectContext:\nlet projectContext = checkFileResults.ProjectContext\n    \nfor assembly in projectContext.GetReferencedAssemblies() do\n    match assembly.FileName with \n    | None -\u0026gt; printfn \u0026quot;compilation referenced an assembly without a file\u0026quot; \n    | Some s -\u0026gt; printfn \u0026quot;compilation references assembly \u0026#39;%s\u0026#39;\u0026quot; s\n    \n\nNotes:\n\nIf incomplete code is present, some or all of the attributes may not be quite as expected.\n\nIf some assembly references are missing (which is actually very, very common), then \u0027IsUnresolved\u0027  may\nbe true on values, members and/or entities related to external assemblies.  You should be sure to make your\ncode robust against IsUnresolved exceptions.\n\n\nGetting symbolic information about whole projects\nTo check whole projects, create a checker, then call parseAndCheckScript. In this case, we just check\nthe project for a single script. By specifying a different \u0022projOptions\u0022 you can create\na specification of a larger project.\nlet parseAndCheckScript (file, input) = \n    let projOptions, errors = \n        checker.GetProjectOptionsFromScript(file, input, assumeDotNetFramework=false)\n        |\u0026gt; Async.RunSynchronously\n\n    checker.ParseAndCheckProject(projOptions) |\u0026gt; Async.RunSynchronously\n\nNow do it for a particular input:\nlet tmpFile = Path.ChangeExtension(System.IO.Path.GetTempFileName() , \u0026quot;fs\u0026quot;)\nFile.WriteAllText(tmpFile, input2)\n\nlet projectResults = parseAndCheckScript(tmpFile, SourceText.ofString input2)\n\nNow look at the results:\nlet assemblySig = projectResults.AssemblySignature\n    \nprintfn $\u0026quot;#entities = {assemblySig.Entities.Count}\u0026quot; // 1\nprintfn $\u0026quot;namespace = {assemblySig.Entities.[0].Namespace}\u0026quot;  // one entity\nprintfn $\u0026quot;entity name = {assemblySig.Entities.[0].DisplayName}\u0026quot; // \u0026quot;Tmp28D0\u0026quot;\nprintfn $\u0026quot;#members = {assemblySig.Entities.[0].MembersFunctionsAndValues.Count}\u0026quot; // 1 \nprintfn $\u0026quot;member name = {assemblySig.Entities.[0].MembersFunctionsAndValues.[0].DisplayName}\u0026quot; // \u0026quot;foo\u0026quot; \n    \n\n","headings":["Compiler Services: Working with symbols","Getting resolved signature information about the file","Getting symbolic information about whole projects"],"type":"content"}]